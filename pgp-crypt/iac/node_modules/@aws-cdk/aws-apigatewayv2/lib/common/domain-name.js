"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainName = exports.EndpointType = exports.SecurityPolicy = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const apigatewayv2_generated_1 = require("../apigatewayv2.generated");
/**
 * The minimum version of the SSL protocol that you want API Gateway to use for HTTPS connections.
 */
var SecurityPolicy;
(function (SecurityPolicy) {
    /** Cipher suite TLS 1.0 */
    SecurityPolicy["TLS_1_0"] = "TLS_1_0";
    /** Cipher suite TLS 1.2 */
    SecurityPolicy["TLS_1_2"] = "TLS_1_2";
})(SecurityPolicy = exports.SecurityPolicy || (exports.SecurityPolicy = {}));
/**
 * Endpoint type for a domain name.
 */
var EndpointType;
(function (EndpointType) {
    /**
     * For an edge-optimized custom domain name.
     */
    EndpointType["EDGE"] = "EDGE";
    /**
     * For a regional custom domain name.
     */
    EndpointType["REGIONAL"] = "REGIONAL";
})(EndpointType = exports.EndpointType || (exports.EndpointType = {}));
/**
 * Custom domain resource for the API
 */
class DomainName extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.domainNameConfigurations = [];
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_DomainNameProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, DomainName);
            }
            throw error;
        }
        if (props.domainName === '') {
            throw new Error('empty string for domainName not allowed');
        }
        // validation for ownership certificate
        if (props.ownershipCertificate && !props.mtls) {
            throw new Error('ownership certificate can only be used with mtls domains');
        }
        const mtlsConfig = this.configureMTLS(props.mtls);
        const domainNameProps = {
            domainName: props.domainName,
            domainNameConfigurations: core_1.Lazy.any({ produce: () => this.domainNameConfigurations }),
            mutualTlsAuthentication: mtlsConfig,
        };
        const resource = new apigatewayv2_generated_1.CfnDomainName(this, 'Resource', domainNameProps);
        this.name = resource.ref;
        this.regionalDomainName = core_1.Token.asString(resource.getAtt('RegionalDomainName'));
        this.regionalHostedZoneId = core_1.Token.asString(resource.getAtt('RegionalHostedZoneId'));
        if (props.certificate) {
            this.addEndpoint(props);
        }
    }
    /**
     * Import from attributes
     */
    static fromDomainNameAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_DomainNameAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromDomainNameAttributes);
            }
            throw error;
        }
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.regionalDomainName = attrs.regionalDomainName;
                this.regionalHostedZoneId = attrs.regionalHostedZoneId;
                this.name = attrs.name;
            }
        }
        return new Import(scope, id);
    }
    configureMTLS(mtlsConfig) {
        if (!mtlsConfig)
            return undefined;
        return {
            truststoreUri: mtlsConfig.bucket.s3UrlForObject(mtlsConfig.key),
            truststoreVersion: mtlsConfig.version,
        };
    }
    /**
     * Adds an endpoint to a domain name.
     * @param options domain name endpoint properties to be set
     */
    addEndpoint(options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_EndpointOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.addEndpoint);
            }
            throw error;
        }
        const domainNameConfig = {
            certificateArn: options.certificate.certificateArn,
            certificateName: options.certificateName,
            endpointType: options.endpointType ? options.endpointType?.toString() : 'REGIONAL',
            ownershipVerificationCertificateArn: options.ownershipCertificate?.certificateArn,
            securityPolicy: options.securityPolicy?.toString(),
        };
        this.validateEndpointType(domainNameConfig.endpointType);
        this.domainNameConfigurations.push(domainNameConfig);
    }
    // validates that the new domain name configuration has a unique endpoint
    validateEndpointType(endpointType) {
        for (let config of this.domainNameConfigurations) {
            if (endpointType && endpointType == config.endpointType) {
                throw new Error(`an endpoint with type ${endpointType} already exists`);
            }
        }
    }
}
exports.DomainName = DomainName;
_a = JSII_RTTI_SYMBOL_1;
DomainName[_a] = { fqn: "@aws-cdk/aws-apigatewayv2.DomainName", version: "1.193.0" };
//# sourceMappingURL=data:application/json;base64,