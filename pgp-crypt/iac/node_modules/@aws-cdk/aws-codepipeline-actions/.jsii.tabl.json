{
  "version": "2",
  "toolVersion": "1.74.0",
  "snippets": {
    "2bab15aea7c9333aa029a745db94120393de6f013e1a77bcb76c0730ec7cea5c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;",
          "version": "1"
        },
        "go": {
          "source": "import codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"",
          "version": "1"
        },
        "$": {
          "source": "import * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 14
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';",
      "syntaxKindCounter": {
        "10": 2,
        "75": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "b36f914c838c76d643f05132b0d321d077aea784ebd401d10ddca5da0756acb6": {
      "translations": {
        "python": {
          "source": "repo = codecommit.Repository(self, \"Repo\",\n    repository_name=\"MyRepo\"\n)\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\",\n    pipeline_name=\"MyPipeline\"\n)\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"CodeCommit\",\n    repository=repo,\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repo = new Repository(this, \"Repo\", new RepositoryProps {\n    RepositoryName = \"MyRepo\"\n});\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\", new PipelineProps {\n    PipelineName = \"MyPipeline\"\n});\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"CodeCommit\",\n    Repository = repo,\n    Output = sourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repo = Repository.Builder.create(this, \"Repo\")\n        .repositoryName(\"MyRepo\")\n        .build();\n\nPipeline pipeline = Pipeline.Builder.create(this, \"MyPipeline\")\n        .pipelineName(\"MyPipeline\")\n        .build();\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = CodeCommitSourceAction.Builder.create()\n        .actionName(\"CodeCommit\")\n        .repository(repo)\n        .output(sourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "repo := codecommit.NewRepository(this, jsii.String(\"Repo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"MyRepo\"),\n})\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"), &pipelineProps{\n\tpipelineName: jsii.String(\"MyPipeline\"),\n})\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"CodeCommit\"),\n\trepository: repo,\n\toutput: sourceOutput,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tsourceAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const repo = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'MyRepo',\n});\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst repo = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'MyRepo',\n});\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 24,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "0391775070d3920f39d7ab1c0cf13f5d0d66ff09bc0618728c7b5ef87bccaa2e"
    },
    "d0a9079a5daaf2da0f805fd4ff376407b962320c9f06bc3f20fc1b40c3229414": {
      "translations": {
        "python": {
          "source": "# repo: codecommit.Repository\nevent_role = iam.Role.from_role_arn(self, \"Event-role\", \"roleArn\")\nsource_action = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"CodeCommit\",\n    repository=repo,\n    output=codepipeline.Artifact(),\n    event_role=event_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repo;\nIRole eventRole = Role.FromRoleArn(this, \"Event-role\", \"roleArn\");\nCodeCommitSourceAction sourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"CodeCommit\",\n    Repository = repo,\n    Output = new Artifact(),\n    EventRole = eventRole\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repo;\nIRole eventRole = Role.fromRoleArn(this, \"Event-role\", \"roleArn\");\nCodeCommitSourceAction sourceAction = CodeCommitSourceAction.Builder.create()\n        .actionName(\"CodeCommit\")\n        .repository(repo)\n        .output(new Artifact())\n        .eventRole(eventRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var repo repository\neventRole := iam.role.fromRoleArn(this, jsii.String(\"Event-role\"), jsii.String(\"roleArn\"))\nsourceAction := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"CodeCommit\"),\n\trepository: repo,\n\toutput: codepipeline.NewArtifact(),\n\teventRole: eventRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const eventRole = iam.Role.fromRoleArn(this, 'Event-role', 'roleArn');\ndeclare const repo: codecommit.Repository;\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: new codepipeline.Artifact(),\n  eventRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 48
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const repo: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst eventRole = iam.Role.fromRoleArn(this, 'Event-role', 'roleArn');\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: new codepipeline.Artifact(),\n  eventRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4123ba321172fc95e1208b618ba2e531abd8f291dfda8111cf7aa9229add6858"
    },
    "00ea82eef567d257a56c943ee7dc3af29ada48bea7370e5e67f17a8b74243d5b": {
      "translations": {
        "python": {
          "source": "# project: codebuild.PipelineProject\n# repo: codecommit.Repository\n\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"CodeCommit\",\n    repository=repo,\n    output=source_output,\n    code_build_clone_output=True\n)\n\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,  # The build action must use the CodeCommitSourceAction output as input.\n    outputs=[codepipeline.Artifact()]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project;\nRepository repo;\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"CodeCommit\",\n    Repository = repo,\n    Output = sourceOutput,\n    CodeBuildCloneOutput = true\n});\n\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,  // The build action must use the CodeCommitSourceAction output as input.\n    Outputs = new [] { new Artifact() }\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project;\nRepository repo;\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = CodeCommitSourceAction.Builder.create()\n        .actionName(\"CodeCommit\")\n        .repository(repo)\n        .output(sourceOutput)\n        .codeBuildCloneOutput(true)\n        .build();\n\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput) // The build action must use the CodeCommitSourceAction output as input.\n        .outputs(List.of(new Artifact()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var project pipelineProject\nvar repo repository\n\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"CodeCommit\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\tcodeBuildCloneOutput: jsii.Boolean(true),\n})\n\nbuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\t // The build action must use the CodeCommitSourceAction output as input.\n\toutputs: []artifact{\n\t\tcodepipeline.NewArtifact(),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.PipelineProject;\ndeclare const repo: codecommit.Repository;\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: sourceOutput,\n  codeBuildCloneOutput: true,\n});\n\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput, // The build action must use the CodeCommitSourceAction output as input.\n  outputs: [new codepipeline.Artifact()], // optional\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 62
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.PipelineProject;\ndeclare const repo: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: sourceOutput,\n  codeBuildCloneOutput: true,\n});\n\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput, // The build action must use the CodeCommitSourceAction output as input.\n  outputs: [new codepipeline.Artifact()], // optional\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 28,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 4,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "085bfcbc48d43888f88c9303773c4ea58045a49c70f30974e1a153af33afa2e8"
    },
    "f6d8ed10b1a9cad4e1399d8f64db9538e573d9243bcf85ebf5285a830f868214": {
      "translations": {
        "python": {
          "source": "# project: codebuild.PipelineProject\n# repo: codecommit.Repository\n\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"CodeCommit\",\n    repository=repo,\n    output=source_output,\n    variables_namespace=\"MyNamespace\"\n)\n\n# later:\n\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"COMMIT_ID\": codebuild.BuildEnvironmentVariable(\n            value=source_action.variables.commit_id\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project;\nRepository repo;\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"CodeCommit\",\n    Repository = repo,\n    Output = sourceOutput,\n    VariablesNamespace = \"MyNamespace\"\n});\n\n// later:\n\n// later:\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"COMMIT_ID\", new BuildEnvironmentVariable {\n            Value = sourceAction.Variables.CommitId\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project;\nRepository repo;\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = CodeCommitSourceAction.Builder.create()\n        .actionName(\"CodeCommit\")\n        .repository(repo)\n        .output(sourceOutput)\n        .variablesNamespace(\"MyNamespace\")\n        .build();\n\n// later:\n\n// later:\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"COMMIT_ID\", BuildEnvironmentVariable.builder()\n                        .value(sourceAction.getVariables().getCommitId())\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var project pipelineProject\nvar repo repository\n\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"CodeCommit\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\n\n// later:\n\n// later:\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"COMMIT_ID\": &buildEnvironmentVariable{\n\t\t\t\"value\": sourceAction.variables.commitId,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.PipelineProject;\ndeclare const repo: codecommit.Repository;\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: sourceOutput,\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_ID: {\n      value: sourceAction.variables.commitId,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 83
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceVariables#commitId",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.PipelineProject;\ndeclare const repo: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository: repo,\n  output: sourceOutput,\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_ID: {\n      value: sourceAction.variables.commitId,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 30,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 5,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f95fccf13557e3b04616ddd5ce8c823d17ec1cd7aaab60ddaae741ee4080d717"
    },
    "a7398f54d0c418173bc08429e68645452d12433e05eb08db6c10914e6b20ff01": {
      "translations": {
        "python": {
          "source": "# Read the secret from Secrets Manager\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.GitHubSourceAction(\n    action_name=\"GitHub_Source\",\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    oauth_token=SecretValue.secrets_manager(\"my-github-token\"),\n    output=source_output,\n    branch=\"develop\"\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Read the secret from Secrets Manager\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nGitHubSourceAction sourceAction = new GitHubSourceAction(new GitHubSourceActionProps {\n    ActionName = \"GitHub_Source\",\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    OauthToken = SecretValue.SecretsManager(\"my-github-token\"),\n    Output = sourceOutput,\n    Branch = \"develop\"\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Read the secret from Secrets Manager\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nGitHubSourceAction sourceAction = GitHubSourceAction.Builder.create()\n        .actionName(\"GitHub_Source\")\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n        .output(sourceOutput)\n        .branch(\"develop\")\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Read the secret from Secrets Manager\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewGitHubSourceAction(&gitHubSourceActionProps{\n\tactionName: jsii.String(\"GitHub_Source\"),\n\towner: jsii.String(\"awslabs\"),\n\trepo: jsii.String(\"aws-cdk\"),\n\toauthToken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-github-token\")),\n\toutput: sourceOutput,\n\tbranch: jsii.String(\"develop\"),\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tsourceAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Read the secret from Secrets Manager\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'GitHub_Source',\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  output: sourceOutput,\n  branch: 'develop', // default: 'master'\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 124
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceAction",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Read the secret from Secrets Manager\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'GitHub_Source',\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  output: sourceOutput,\n  branch: 'develop', // default: 'master'\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8
      },
      "fqnsFingerprint": "44d397afde2ab5c369d2b9a72458fc8ca95459f68f43ef126b7d28560dcb440a"
    },
    "dbc7ea72f452cf7adac00fe1848586c75df9da041439de8d62848bb350efcb85": {
      "translations": {
        "python": {
          "source": "# source_output: codepipeline.Artifact\n# project: codebuild.PipelineProject\n\n\nsource_action = codepipeline_actions.GitHubSourceAction(\n    action_name=\"Github_Source\",\n    output=source_output,\n    owner=\"my-owner\",\n    repo=\"my-repo\",\n    oauth_token=SecretValue.secrets_manager(\"my-github-token\"),\n    variables_namespace=\"MyNamespace\"\n)\n\n# later:\n\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"COMMIT_URL\": codebuild.BuildEnvironmentVariable(\n            value=source_action.variables.commit_url\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput;\nPipelineProject project;\n\n\nGitHubSourceAction sourceAction = new GitHubSourceAction(new GitHubSourceActionProps {\n    ActionName = \"Github_Source\",\n    Output = sourceOutput,\n    Owner = \"my-owner\",\n    Repo = \"my-repo\",\n    OauthToken = SecretValue.SecretsManager(\"my-github-token\"),\n    VariablesNamespace = \"MyNamespace\"\n});\n\n// later:\n\n// later:\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"COMMIT_URL\", new BuildEnvironmentVariable {\n            Value = sourceAction.Variables.CommitUrl\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput;\nPipelineProject project;\n\n\nGitHubSourceAction sourceAction = GitHubSourceAction.Builder.create()\n        .actionName(\"Github_Source\")\n        .output(sourceOutput)\n        .owner(\"my-owner\")\n        .repo(\"my-repo\")\n        .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n        .variablesNamespace(\"MyNamespace\")\n        .build();\n\n// later:\n\n// later:\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"COMMIT_URL\", BuildEnvironmentVariable.builder()\n                        .value(sourceAction.getVariables().getCommitUrl())\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var sourceOutput artifact\nvar project pipelineProject\n\n\nsourceAction := codepipeline_actions.NewGitHubSourceAction(&gitHubSourceActionProps{\n\tactionName: jsii.String(\"Github_Source\"),\n\toutput: sourceOutput,\n\towner: jsii.String(\"my-owner\"),\n\trepo: jsii.String(\"my-repo\"),\n\toauthToken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-github-token\")),\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\n\n// later:\n\n// later:\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"COMMIT_URL\": &buildEnvironmentVariable{\n\t\t\t\"value\": sourceAction.variables.commitUrl,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const sourceOutput: codepipeline.Artifact;\ndeclare const project: codebuild.PipelineProject;\n\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'Github_Source',\n  output: sourceOutput,\n  owner: 'my-owner',\n  repo: 'my-repo',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_URL: {\n      value: sourceAction.variables.commitUrl,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 144
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceAction",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceVariables#commitUrl",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const sourceOutput: codepipeline.Artifact;\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'Github_Source',\n  output: sourceOutput,\n  owner: 'my-owner',\n  repo: 'my-repo',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_URL: {\n      value: sourceAction.variables.commitUrl,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 30,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "367d9325fb2557221b63d49328519ff1700b2768d1c65f07526bee9cf04004b8"
    },
    "f7b9d77cc490794df1d8e18ab654ef9c84d2b1efb9a11e6416772a0cf3d62781": {
      "translations": {
        "python": {
          "source": "source_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeStarConnectionsSourceAction(\n    action_name=\"BitBucket_Source\",\n    owner=\"aws\",\n    repo=\"aws-cdk\",\n    output=source_output,\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = new CodeStarConnectionsSourceAction(new CodeStarConnectionsSourceActionProps {\n    ActionName = \"BitBucket_Source\",\n    Owner = \"aws\",\n    Repo = \"aws-cdk\",\n    Output = sourceOutput,\n    ConnectionArn = \"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = CodeStarConnectionsSourceAction.Builder.create()\n        .actionName(\"BitBucket_Source\")\n        .owner(\"aws\")\n        .repo(\"aws-cdk\")\n        .output(sourceOutput)\n        .connectionArn(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "sourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeStarConnectionsSourceAction(&codeStarConnectionsSourceActionProps{\n\tactionName: jsii.String(\"BitBucket_Source\"),\n\towner: jsii.String(\"aws\"),\n\trepo: jsii.String(\"aws-cdk\"),\n\toutput: sourceOutput,\n\tconnectionArn: jsii.String(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 187
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "2a823b0bdbd9c375d07d587bd68ebc648f6f03e0ce8af55d379ec36058f562eb"
    },
    "d3d578ef45b753ff5571b381d6fe368f7ba6b6ae85d5cff2671e88b94a5f7d91": {
      "translations": {
        "python": {
          "source": "# project: codebuild.Project\n\n\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeStarConnectionsSourceAction(\n    action_name=\"BitBucket_Source\",\n    owner=\"aws\",\n    repo=\"aws-cdk\",\n    output=source_output,\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\",\n    variables_namespace=\"SomeSpace\"\n)\n\n# later:\n\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"COMMIT_ID\": codebuild.BuildEnvironmentVariable(\n            value=source_action.variables.commit_id\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Project project;\n\n\nArtifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = new CodeStarConnectionsSourceAction(new CodeStarConnectionsSourceActionProps {\n    ActionName = \"BitBucket_Source\",\n    Owner = \"aws\",\n    Repo = \"aws-cdk\",\n    Output = sourceOutput,\n    ConnectionArn = \"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\",\n    VariablesNamespace = \"SomeSpace\"\n});\n\n// later:\n\n// later:\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"COMMIT_ID\", new BuildEnvironmentVariable {\n            Value = sourceAction.Variables.CommitId\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project project;\n\n\nArtifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = CodeStarConnectionsSourceAction.Builder.create()\n        .actionName(\"BitBucket_Source\")\n        .owner(\"aws\")\n        .repo(\"aws-cdk\")\n        .output(sourceOutput)\n        .connectionArn(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\")\n        .variablesNamespace(\"SomeSpace\")\n        .build();\n\n// later:\n\n// later:\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"COMMIT_ID\", BuildEnvironmentVariable.builder()\n                        .value(sourceAction.getVariables().getCommitId())\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var project project\n\n\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeStarConnectionsSourceAction(&codeStarConnectionsSourceActionProps{\n\tactionName: jsii.String(\"BitBucket_Source\"),\n\towner: jsii.String(\"aws\"),\n\trepo: jsii.String(\"aws-cdk\"),\n\toutput: sourceOutput,\n\tconnectionArn: jsii.String(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"),\n\tvariablesNamespace: jsii.String(\"SomeSpace\"),\n})\n\n// later:\n\n// later:\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"COMMIT_ID\": &buildEnvironmentVariable{\n\t\t\t\"value\": sourceAction.variables.commitId,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.Project;\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n  variablesNamespace: 'SomeSpace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_ID: {\n      value: sourceAction.variables.commitId,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 203
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeStarSourceVariables#commitId",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n  variablesNamespace: 'SomeSpace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_ID: {\n      value: sourceAction.variables.commitId,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "04d21d913c3b25a269a39bf54185f650752fd3deb7b89953d302a224bcc753a4"
    },
    "88473a7bd67f46458478b4d99a713bc782aee461b948cfe8a191a68a592e9cdc": {
      "translations": {
        "python": {
          "source": "source_bucket = s3.Bucket(self, \"MyBucket\",\n    versioned=True\n)\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.S3SourceAction(\n    action_name=\"S3Source\",\n    bucket=source_bucket,\n    bucket_key=\"path/to/file.zip\",\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket sourceBucket = new Bucket(this, \"MyBucket\", new BucketProps {\n    Versioned = true\n});\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nS3SourceAction sourceAction = new S3SourceAction(new S3SourceActionProps {\n    ActionName = \"S3Source\",\n    Bucket = sourceBucket,\n    BucketKey = \"path/to/file.zip\",\n    Output = sourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket sourceBucket = Bucket.Builder.create(this, \"MyBucket\")\n        .versioned(true)\n        .build();\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nS3SourceAction sourceAction = S3SourceAction.Builder.create()\n        .actionName(\"S3Source\")\n        .bucket(sourceBucket)\n        .bucketKey(\"path/to/file.zip\")\n        .output(sourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "sourceBucket := s3.NewBucket(this, jsii.String(\"MyBucket\"), &bucketProps{\n\tversioned: jsii.Boolean(true),\n})\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewS3SourceAction(&s3SourceActionProps{\n\tactionName: jsii.String(\"S3Source\"),\n\tbucket: sourceBucket,\n\tbucketKey: jsii.String(\"path/to/file.zip\"),\n\toutput: sourceOutput,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tsourceAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceBucket = new s3.Bucket(this, 'MyBucket', {\n  versioned: true, // a Bucket used as a source in CodePipeline must be versioned\n});\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucket: sourceBucket,\n  bucketKey: 'path/to/file.zip',\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 234
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3SourceAction",
        "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceBucket = new s3.Bucket(this, 'MyBucket', {\n  versioned: true, // a Bucket used as a source in CodePipeline must be versioned\n});\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucket: sourceBucket,\n  bucketKey: 'path/to/file.zip',\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 24,
        "104": 2,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "a0f05cfb2e08ece3f891271acf88778dc319d8aa9d0a69f2bf1c54f0954a2fbf"
    },
    "bd6aa8e72040a1a9dc43caeab5773d541766be602247bd54ed2af28dca2409e6": {
      "translations": {
        "python": {
          "source": "source_bucket = s3.Bucket.from_bucket_attributes(self, \"SourceBucket\",\n    bucket_name=\"my-bucket\",\n    region=\"ap-southeast-1\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IBucket sourceBucket = Bucket.FromBucketAttributes(this, \"SourceBucket\", new BucketAttributes {\n    BucketName = \"my-bucket\",\n    Region = \"ap-southeast-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IBucket sourceBucket = Bucket.fromBucketAttributes(this, \"SourceBucket\", BucketAttributes.builder()\n        .bucketName(\"my-bucket\")\n        .region(\"ap-southeast-1\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "sourceBucket := s3.bucket.fromBucketAttributes(this, jsii.String(\"SourceBucket\"), &bucketAttributes{\n\tbucketName: jsii.String(\"my-bucket\"),\n\tregion: jsii.String(\"ap-southeast-1\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceBucket = s3.Bucket.fromBucketAttributes(this, 'SourceBucket', {\n  bucketName: 'my-bucket',\n  region: 'ap-southeast-1',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 259
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceBucket = s3.Bucket.fromBucketAttributes(this, 'SourceBucket', {\n  bucketName: 'my-bucket',\n  region: 'ap-southeast-1',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "8d85ce69b9c3d46db80a8a7aa0d4a35a5f3e2f738af306daf55f717e039a78ba"
    },
    "0afb1256ea35ccb0a140bde6be1333ddf38481b1f12dd4fdd3dbf59f6d80f061": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudtrail as cloudtrail\n\n# source_bucket: s3.Bucket\n\nsource_output = codepipeline.Artifact()\nkey = \"some/key.zip\"\ntrail = cloudtrail.Trail(self, \"CloudTrail\")\ntrail.add_s3_event_selector([cloudtrail.S3EventSelector(\n    bucket=source_bucket,\n    object_prefix=key\n)],\n    read_write_type=cloudtrail.ReadWriteType.WRITE_ONLY\n)\nsource_action = codepipeline_actions.S3SourceAction(\n    action_name=\"S3Source\",\n    bucket_key=key,\n    bucket=source_bucket,\n    output=source_output,\n    trigger=codepipeline_actions.S3Trigger.EVENTS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudTrail;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nstring key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.AddS3EventSelector(new [] { new S3EventSelector {\n    Bucket = sourceBucket,\n    ObjectPrefix = key\n} }, new AddEventSelectorOptions {\n    ReadWriteType = ReadWriteType.WRITE_ONLY\n});\nS3SourceAction sourceAction = new S3SourceAction(new S3SourceActionProps {\n    ActionName = \"S3Source\",\n    BucketKey = key,\n    Bucket = sourceBucket,\n    Output = sourceOutput,\n    Trigger = S3Trigger.EVENTS\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudtrail.*;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nString key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.addS3EventSelector(List.of(S3EventSelector.builder()\n        .bucket(sourceBucket)\n        .objectPrefix(key)\n        .build()), AddEventSelectorOptions.builder()\n        .readWriteType(ReadWriteType.WRITE_ONLY)\n        .build());\nS3SourceAction sourceAction = S3SourceAction.Builder.create()\n        .actionName(\"S3Source\")\n        .bucketKey(key)\n        .bucket(sourceBucket)\n        .output(sourceOutput)\n        .trigger(S3Trigger.EVENTS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudtrail \"github.com/aws-samples/dummy/awscdkawscloudtrail\"\n\nvar sourceBucket bucket\n\nsourceOutput := codepipeline.NewArtifact()\nkey := \"some/key.zip\"\ntrail := cloudtrail.NewTrail(this, jsii.String(\"CloudTrail\"))\ntrail.addS3EventSelector([]s3EventSelector{\n\t&s3EventSelector{\n\t\tbucket: sourceBucket,\n\t\tobjectPrefix: key,\n\t},\n}, &addEventSelectorOptions{\n\treadWriteType: cloudtrail.readWriteType_WRITE_ONLY,\n})\nsourceAction := codepipeline_actions.NewS3SourceAction(&s3SourceActionProps{\n\tactionName: jsii.String(\"S3Source\"),\n\tbucketKey: key,\n\tbucket: sourceBucket,\n\toutput: sourceOutput,\n\ttrigger: codepipeline_actions.s3Trigger_EVENTS,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 274
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudtrail.AddEventSelectorOptions",
        "@aws-cdk/aws-cloudtrail.ReadWriteType",
        "@aws-cdk/aws-cloudtrail.ReadWriteType#WRITE_ONLY",
        "@aws-cdk/aws-cloudtrail.Trail",
        "@aws-cdk/aws-cloudtrail.Trail#addS3EventSelector",
        "@aws-cdk/aws-codepipeline-actions.S3SourceAction",
        "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger#EVENTS",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 1,
        "197": 3,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6cf56cb6ee7ffe352c58842b0983db1e5199dcc662a376079683912fb3e34824"
    },
    "1102a6102024ac3a793e0770a40dc6b4d9a35551c250378f6aa015cbaf9cd5c6": {
      "translations": {
        "python": {
          "source": "# source_bucket: s3.Bucket\n\n# later:\n# project: codebuild.PipelineProject\nkey = \"some/key.zip\"\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.S3SourceAction(\n    action_name=\"S3Source\",\n    bucket_key=key,\n    bucket=source_bucket,\n    output=source_output,\n    variables_namespace=\"MyNamespace\"\n)\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"VERSION_ID\": codebuild.BuildEnvironmentVariable(\n            value=source_action.variables.version_id\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket sourceBucket;\n\n// later:\nPipelineProject project;\nstring key = \"some/key.zip\";\nArtifact sourceOutput = new Artifact();\nS3SourceAction sourceAction = new S3SourceAction(new S3SourceActionProps {\n    ActionName = \"S3Source\",\n    BucketKey = key,\n    Bucket = sourceBucket,\n    Output = sourceOutput,\n    VariablesNamespace = \"MyNamespace\"\n});\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"VERSION_ID\", new BuildEnvironmentVariable {\n            Value = sourceAction.Variables.VersionId\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket sourceBucket;\n\n// later:\nPipelineProject project;\nString key = \"some/key.zip\";\nArtifact sourceOutput = new Artifact();\nS3SourceAction sourceAction = S3SourceAction.Builder.create()\n        .actionName(\"S3Source\")\n        .bucketKey(key)\n        .bucket(sourceBucket)\n        .output(sourceOutput)\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"VERSION_ID\", BuildEnvironmentVariable.builder()\n                        .value(sourceAction.getVariables().getVersionId())\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var sourceBucket bucket\n\n// later:\nvar project pipelineProject\nkey := \"some/key.zip\"\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewS3SourceAction(&s3SourceActionProps{\n\tactionName: jsii.String(\"S3Source\"),\n\tbucketKey: key,\n\tbucket: sourceBucket,\n\toutput: sourceOutput,\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"VERSION_ID\": &buildEnvironmentVariable{\n\t\t\t\"value\": sourceAction.variables.versionId,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const key = 'some/key.zip';\ndeclare const sourceBucket: s3.Bucket;\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    VERSION_ID: {\n      value: sourceAction.variables.versionId,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 298
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3SourceAction",
        "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3SourceVariables#versionId",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const sourceBucket: s3.Bucket;\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst key = 'some/key.zip';\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    VERSION_ID: {\n      value: sourceAction.variables.versionId,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 33,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 5,
        "197": 3,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "73b09e27c935959ca371325708ff192f076dd460841d2df33a073f59281a8602"
    },
    "7bed5a76075160dc5ed18b33a3467ebf0bb29e314b71da31d2b5b385b11831b5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\n# ecr_repository: ecr.Repository\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.EcrSourceAction(\n    action_name=\"ECR\",\n    repository=ecr_repository,\n    image_tag=\"some-tag\",  # optional, default: 'latest'\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\nRepository ecrRepository;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = new EcrSourceAction(new EcrSourceActionProps {\n    ActionName = \"ECR\",\n    Repository = ecrRepository,\n    ImageTag = \"some-tag\",  // optional, default: 'latest'\n    Output = sourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\nRepository ecrRepository;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = EcrSourceAction.Builder.create()\n        .actionName(\"ECR\")\n        .repository(ecrRepository)\n        .imageTag(\"some-tag\") // optional, default: 'latest'\n        .output(sourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\nvar ecrRepository repository\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewEcrSourceAction(&ecrSourceActionProps{\n\tactionName: jsii.String(\"ECR\"),\n\trepository: ecrRepository,\n\timageTag: jsii.String(\"some-tag\"),\n\t // optional, default: 'latest'\n\toutput: sourceOutput,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tsourceAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const ecrRepository: ecr.Repository;\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'ECR',\n  repository: ecrRepository,\n  imageTag: 'some-tag', // optional, default: 'latest'\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 328
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcrSourceAction",
        "@aws-cdk/aws-codepipeline-actions.EcrSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecr.IRepository",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'ECR',\n  repository: ecrRepository,\n  imageTag: 'some-tag', // optional, default: 'latest'\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 24,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d3f602c41ea2621b0248e8bb0c53b4499462c6dc6fafee72b951e628df039ad4"
    },
    "d12257a5f748babc639d10a67fc9bb9b283ecd9a1c4aa008ff4ee2484a5c1ea1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n# ecr_repository: ecr.Repository\n\n# later:\n# project: codebuild.PipelineProject\n\n\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.EcrSourceAction(\n    action_name=\"Source\",\n    output=source_output,\n    repository=ecr_repository,\n    variables_namespace=\"MyNamespace\"\n)\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"IMAGE_URI\": codebuild.BuildEnvironmentVariable(\n            value=source_action.variables.image_uri\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\nRepository ecrRepository;\n\n// later:\nPipelineProject project;\n\n\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = new EcrSourceAction(new EcrSourceActionProps {\n    ActionName = \"Source\",\n    Output = sourceOutput,\n    Repository = ecrRepository,\n    VariablesNamespace = \"MyNamespace\"\n});\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"IMAGE_URI\", new BuildEnvironmentVariable {\n            Value = sourceAction.Variables.ImageUri\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\nRepository ecrRepository;\n\n// later:\nPipelineProject project;\n\n\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = EcrSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .output(sourceOutput)\n        .repository(ecrRepository)\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"IMAGE_URI\", BuildEnvironmentVariable.builder()\n                        .value(sourceAction.getVariables().getImageUri())\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\nvar ecrRepository repository\n\n// later:\nvar project pipelineProject\n\n\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewEcrSourceAction(&ecrSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\toutput: sourceOutput,\n\trepository: ecrRepository,\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"IMAGE_URI\": &buildEnvironmentVariable{\n\t\t\t\"value\": sourceAction.variables.imageUri,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\nconst sourceOutput = new codepipeline.Artifact();\ndeclare const ecrRepository: ecr.Repository;\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'Source',\n  output: sourceOutput,\n  repository: ecrRepository,\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    IMAGE_URI: {\n      value: sourceAction.variables.imageUri,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 348
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.EcrSourceAction",
        "@aws-cdk/aws-codepipeline-actions.EcrSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.EcrSourceVariables#imageUri",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-ecr.IRepository"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\ndeclare const ecrRepository: ecr.Repository;\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'Source',\n  output: sourceOutput,\n  repository: ecrRepository,\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    IMAGE_URI: {\n      value: sourceAction.variables.imageUri,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 31,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 5,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "67db2f02fcb0198df688f317d0ee96c4f5a78c030dc1d2054f1b763e2025a907"
    },
    "c8fe9038777236c91cde35c03e8b81ea030da34c431c915339b37c72bfbcb2a1": {
      "translations": {
        "python": {
          "source": "# project: codebuild.PipelineProject\n\nrepository = codecommit.Repository(self, \"MyRepository\",\n    repository_name=\"MyRepository\"\n)\nproject = codebuild.PipelineProject(self, \"MyProject\")\n\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"CodeCommit\",\n    repository=repository,\n    output=source_output\n)\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    outputs=[codepipeline.Artifact()],  # optional\n    execute_batch_build=True,  # optional, defaults to false\n    combine_batch_build_artifacts=True\n)\n\ncodepipeline.Pipeline(self, \"MyPipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Source\",\n        actions=[source_action]\n    ), codepipeline.StageProps(\n        stage_name=\"Build\",\n        actions=[build_action]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project;\n\nRepository repository = new Repository(this, \"MyRepository\", new RepositoryProps {\n    RepositoryName = \"MyRepository\"\n});\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"CodeCommit\",\n    Repository = repository,\n    Output = sourceOutput\n});\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    Outputs = new [] { new Artifact() },  // optional\n    ExecuteBatchBuild = true,  // optional, defaults to false\n    CombineBatchBuildArtifacts = true\n});\n\nnew Pipeline(this, \"MyPipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Source\",\n        Actions = new [] { sourceAction }\n    }, new StageProps {\n        StageName = \"Build\",\n        Actions = new [] { buildAction }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project;\n\nRepository repository = Repository.Builder.create(this, \"MyRepository\")\n        .repositoryName(\"MyRepository\")\n        .build();\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = CodeCommitSourceAction.Builder.create()\n        .actionName(\"CodeCommit\")\n        .repository(repository)\n        .output(sourceOutput)\n        .build();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .outputs(List.of(new Artifact())) // optional\n        .executeBatchBuild(true) // optional, defaults to false\n        .combineBatchBuildArtifacts(true)\n        .build();\n\nPipeline.Builder.create(this, \"MyPipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Source\")\n                .actions(List.of(sourceAction))\n                .build(), StageProps.builder()\n                .stageName(\"Build\")\n                .actions(List.of(buildAction))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var project pipelineProject\n\nrepository := codecommit.NewRepository(this, jsii.String(\"MyRepository\"), &repositoryProps{\n\trepositoryName: jsii.String(\"MyRepository\"),\n})\nproject := codebuild.NewPipelineProject(this, jsii.String(\"MyProject\"))\n\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"CodeCommit\"),\n\trepository: repository,\n\toutput: sourceOutput,\n})\nbuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\toutputs: []artifact{\n\t\tcodepipeline.NewArtifact(),\n\t},\n\t // optional\n\texecuteBatchBuild: jsii.Boolean(true),\n\t // optional, defaults to false\n\tcombineBatchBuildArtifacts: jsii.Boolean(true),\n})\n\ncodepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\t&stageProps{\n\t\t\tstageName: jsii.String(\"Source\"),\n\t\t\tactions: []iAction{\n\t\t\t\tsourceAction,\n\t\t\t},\n\t\t},\n\t\t&stageProps{\n\t\t\tstageName: jsii.String(\"Build\"),\n\t\t\tactions: []*iAction{\n\t\t\t\tbuildAction,\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.PipelineProject;\nconst repository = new codecommit.Repository(this, 'MyRepository', {\n  repositoryName: 'MyRepository',\n});\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository,\n  output: sourceOutput,\n});\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  outputs: [new codepipeline.Artifact()], // optional\n  executeBatchBuild: true, // optional, defaults to false\n  combineBatchBuildArtifacts: true, // optional, defaults to false\n});\n\nnew codepipeline.Pipeline(this, 'MyPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [sourceAction],\n    },\n    {\n      stageName: 'Build',\n      actions: [buildAction],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 380
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst repository = new codecommit.Repository(this, 'MyRepository', {\n  repositoryName: 'MyRepository',\n});\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository,\n  output: sourceOutput,\n});\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  outputs: [new codepipeline.Artifact()], // optional\n  executeBatchBuild: true, // optional, defaults to false\n  combineBatchBuildArtifacts: true, // optional, defaults to false\n});\n\nnew codepipeline.Pipeline(this, 'MyPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [sourceAction],\n    },\n    {\n      stageName: 'Build',\n      actions: [buildAction],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 41,
        "104": 3,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 6,
        "194": 7,
        "197": 7,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 13,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c7e9c9cc2fde146b3d00862da85d5106853c34a878adf0d396047b974b9bc655"
    },
    "a39b60757539ce0d17c6ec12f39d9480b2b1aadefe2d00d7c6dd9791351137da": {
      "translations": {
        "python": {
          "source": "# project: codebuild.PipelineProject\n\nsource_output = codepipeline.Artifact()\ntest_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"IntegrationTest\",\n    project=project,\n    input=source_output,\n    type=codepipeline_actions.CodeBuildActionType.TEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project;\n\nArtifact sourceOutput = new Artifact();\nCodeBuildAction testAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"IntegrationTest\",\n    Project = project,\n    Input = sourceOutput,\n    Type = CodeBuildActionType.TEST\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project;\n\nArtifact sourceOutput = new Artifact();\nCodeBuildAction testAction = CodeBuildAction.Builder.create()\n        .actionName(\"IntegrationTest\")\n        .project(project)\n        .input(sourceOutput)\n        .type(CodeBuildActionType.TEST)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var project pipelineProject\n\nsourceOutput := codepipeline.NewArtifact()\ntestAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"IntegrationTest\"),\n\tproject: project,\n\tinput: sourceOutput,\n\ttype: codepipeline_actions.codeBuildActionType_TEST,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.PipelineProject;\nconst sourceOutput = new codepipeline.Artifact();\nconst testAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'IntegrationTest',\n  project,\n  input: sourceOutput,\n  type: codepipeline_actions.CodeBuildActionType.TEST, // default is BUILD\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 420
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionType",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionType#TEST",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst testAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'IntegrationTest',\n  project,\n  input: sourceOutput,\n  type: codepipeline_actions.CodeBuildActionType.TEST, // default is BUILD\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 17,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b87ec8c7ee61931183d48d524acf5205e012433bc6cb4acd7f74c982821f964e"
    },
    "968772f04d60162f19cc9939eaac60928a0a75b5a12600936a53d5535c04dab2": {
      "translations": {
        "python": {
          "source": "# repository1: codecommit.Repository\n# repository2: codecommit.Repository\n\n# project: codebuild.PipelineProject\n\nsource_output1 = codepipeline.Artifact()\nsource_action1 = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"Source1\",\n    repository=repository1,\n    output=source_output1\n)\nsource_output2 = codepipeline.Artifact(\"source2\")\nsource_action2 = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"Source2\",\n    repository=repository2,\n    output=source_output2\n)\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Build\",\n    project=project,\n    input=source_output1,\n    extra_inputs=[source_output2\n    ],\n    outputs=[\n        codepipeline.Artifact(\"artifact1\"),  # for better buildspec readability - see below\n        codepipeline.Artifact(\"artifact2\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repository1;\nRepository repository2;\n\nPipelineProject project;\n\nArtifact sourceOutput1 = new Artifact();\nCodeCommitSourceAction sourceAction1 = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source1\",\n    Repository = repository1,\n    Output = sourceOutput1\n});\nArtifact sourceOutput2 = new Artifact(\"source2\");\nCodeCommitSourceAction sourceAction2 = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source2\",\n    Repository = repository2,\n    Output = sourceOutput2\n});\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Build\",\n    Project = project,\n    Input = sourceOutput1,\n    ExtraInputs = new [] { sourceOutput2 },\n    Outputs = new [] {\n        new Artifact(\"artifact1\"),  // for better buildspec readability - see below\n        new Artifact(\"artifact2\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repository1;\nRepository repository2;\n\nPipelineProject project;\n\nArtifact sourceOutput1 = new Artifact();\nCodeCommitSourceAction sourceAction1 = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source1\")\n        .repository(repository1)\n        .output(sourceOutput1)\n        .build();\nArtifact sourceOutput2 = new Artifact(\"source2\");\nCodeCommitSourceAction sourceAction2 = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source2\")\n        .repository(repository2)\n        .output(sourceOutput2)\n        .build();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Build\")\n        .project(project)\n        .input(sourceOutput1)\n        .extraInputs(List.of(sourceOutput2))\n        .outputs(List.of(\n            new Artifact(\"artifact1\"),  // for better buildspec readability - see below\n            new Artifact(\"artifact2\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var repository1 repository\nvar repository2 repository\n\nvar project pipelineProject\n\nsourceOutput1 := codepipeline.NewArtifact()\nsourceAction1 := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source1\"),\n\trepository: repository1,\n\toutput: sourceOutput1,\n})\nsourceOutput2 := codepipeline.NewArtifact(jsii.String(\"source2\"))\nsourceAction2 := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source2\"),\n\trepository: repository2,\n\toutput: sourceOutput2,\n})\nbuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"Build\"),\n\tproject: project,\n\tinput: sourceOutput1,\n\textraInputs: []artifact{\n\t\tsourceOutput2,\n\t},\n\toutputs: []*artifact{\n\t\tcodepipeline.NewArtifact(jsii.String(\"artifact1\")),\n\t\t // for better buildspec readability - see below\n\t\tcodepipeline.NewArtifact(jsii.String(\"artifact2\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const repository1: codecommit.Repository;\nconst sourceOutput1 = new codepipeline.Artifact();\nconst sourceAction1 = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'Source1',\n  repository: repository1,\n  output: sourceOutput1,\n});\ndeclare const repository2: codecommit.Repository;\nconst sourceOutput2 = new codepipeline.Artifact('source2');\nconst sourceAction2 = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'Source2',\n  repository: repository2,\n  output: sourceOutput2,\n});\n\ndeclare const project: codebuild.PipelineProject;\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build',\n  project,\n  input: sourceOutput1,\n  extraInputs: [\n    sourceOutput2, // this is where 'source2' comes from\n  ],\n  outputs: [\n    new codepipeline.Artifact('artifact1'), // for better buildspec readability - see below\n    new codepipeline.Artifact('artifact2'),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 439
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repository1: codecommit.Repository;\ndeclare const repository2: codecommit.Repository;\n\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput1 = new codepipeline.Artifact();\nconst sourceAction1 = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'Source1',\n  repository: repository1,\n  output: sourceOutput1,\n});\nconst sourceOutput2 = new codepipeline.Artifact('source2');\nconst sourceAction2 = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'Source2',\n  repository: repository2,\n  output: sourceOutput2,\n});\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build',\n  project,\n  input: sourceOutput1,\n  extraInputs: [\n    sourceOutput2, // this is where 'source2' comes from\n  ],\n  outputs: [\n    new codepipeline.Artifact('artifact1'), // for better buildspec readability - see below\n    new codepipeline.Artifact('artifact2'),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 45,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 3,
        "194": 7,
        "197": 7,
        "225": 8,
        "242": 8,
        "243": 8,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "085bfcbc48d43888f88c9303773c4ea58045a49c70f30974e1a153af33afa2e8"
    },
    "da750977a74a3e1a7bdbd599be536edf7f524191c88bb35f16bb65a674b76148": {
      "translations": {
        "python": {
          "source": "project = codebuild.PipelineProject(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": []\n            }\n        },\n        \"artifacts\": {\n            \"secondary-artifacts\": {\n                \"artifact1\": {},\n                \"artifact2\": {}\n            }\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project = new PipelineProject(this, \"MyProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, object[]>> {\n            { \"build\", new Struct {\n                Commands = new [] {  }\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n            { \"secondary-artifacts\", new Struct {\n                Artifact1 = new Struct { },\n                Artifact2 = new Struct { }\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project = PipelineProject.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of())),\n                \"artifacts\", Map.of(\n                        \"secondary-artifacts\", Map.of(\n                                \"artifact1\", Map.of(),\n                                \"artifact2\", Map.of())))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "project := codebuild.NewPipelineProject(this, jsii.String(\"MyProject\"), &pipelineProjectProps{\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string][]interface{}{\n\t\t\t\"build\": map[string][]interface{}{\n\t\t\t\t\"commands\": []interface{}{\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"artifacts\": map[string]map[string]map[string]interface{}{\n\t\t\t\"secondary-artifacts\": map[string]map[string]interface{}{\n\t\t\t\t\"artifact1\": map[string]interface{}{\n\t\t\t\t},\n\t\t\t\t\"artifact2\": map[string]interface{}{\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const project = new codebuild.PipelineProject(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          // By default, you're in a directory with the contents of the repository from sourceAction1.\n          // Use the CODEBUILD_SRC_DIR_source2 environment variable\n          // to get a path to the directory with the contents of the second input repository.\n        ],\n      },\n    },\n    artifacts: {\n      'secondary-artifacts': {\n        'artifact1': {\n          // primary Action output artifact,\n          // available as buildAction.outputArtifact\n        },\n        'artifact2': {\n          // additional output artifact,\n          // available as buildAction.additionalOutputArtifact('artifact2')\n        },\n      },\n    },\n  }),\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 478
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst project = new codebuild.PipelineProject(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          // By default, you're in a directory with the contents of the repository from sourceAction1.\n          // Use the CODEBUILD_SRC_DIR_source2 environment variable\n          // to get a path to the directory with the contents of the second input repository.\n        ],\n      },\n    },\n    artifacts: {\n      'secondary-artifacts': {\n        'artifact1': {\n          // primary Action output artifact,\n          // available as buildAction.outputArtifact\n        },\n        'artifact2': {\n          // additional output artifact,\n          // available as buildAction.additionalOutputArtifact('artifact2')\n        },\n      },\n    },\n  }),\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 8,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "b1e9430a5c14ab4378d6274712357ad1ff589bb71ed2400870af2188c1c1dcf0"
    },
    "0bfe7d1fbb478d632dbbd4e6e5e543f2c52405d314a64986d936c2bfef7e9046": {
      "translations": {
        "python": {
          "source": "# later:\n# project: codebuild.PipelineProject\nsource_output = codepipeline.Artifact()\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Build1\",\n    input=source_output,\n    project=codebuild.PipelineProject(self, \"Project\",\n        build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\",\n            \"env\": {\n                \"exported-variables\": [\"MY_VAR\"\n                ]\n            },\n            \"phases\": {\n                \"build\": {\n                    \"commands\": \"export MY_VAR=\\\"some value\\\"\"\n                }\n            }\n        })\n    ),\n    variables_namespace=\"MyNamespace\"\n)\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"MyVar\": codebuild.BuildEnvironmentVariable(\n            value=build_action.variable(\"MY_VAR\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Build1\",\n    Input = sourceOutput,\n    Project = new PipelineProject(this, \"Project\", new PipelineProjectProps {\n        BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" },\n            { \"env\", new Dictionary<string, string[]> {\n                { \"exported-variables\", new [] { \"MY_VAR\" } }\n            } },\n            { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n                { \"build\", new Struct {\n                    Commands = \"export MY_VAR=\\\"some value\\\"\"\n                } }\n            } }\n        })\n    }),\n    VariablesNamespace = \"MyNamespace\"\n});\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"MyVar\", new BuildEnvironmentVariable {\n            Value = buildAction.Variable(\"MY_VAR\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Build1\")\n        .input(sourceOutput)\n        .project(PipelineProject.Builder.create(this, \"Project\")\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"env\", Map.of(\n                                \"exported-variables\", List.of(\"MY_VAR\")),\n                        \"phases\", Map.of(\n                                \"build\", Map.of(\n                                        \"commands\", \"export MY_VAR=\\\"some value\\\"\")))))\n                .build())\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"MyVar\", BuildEnvironmentVariable.builder()\n                        .value(buildAction.variable(\"MY_VAR\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// later:\nvar project pipelineProject\nsourceOutput := codepipeline.NewArtifact()\nbuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"Build1\"),\n\tinput: sourceOutput,\n\tproject: codebuild.NewPipelineProject(this, jsii.String(\"Project\"), &pipelineProjectProps{\n\t\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\t\"env\": map[string][]*string{\n\t\t\t\t\"exported-variables\": []*string{\n\t\t\t\t\tjsii.String(\"MY_VAR\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"phases\": map[string]map[string]*string{\n\t\t\t\t\"build\": map[string]*string{\n\t\t\t\t\t\"commands\": jsii.String(\"export MY_VAR=\\\"some value\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t}),\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"MyVar\": &buildEnvironmentVariable{\n\t\t\t\"value\": buildAction.variable(jsii.String(\"MY_VAR\")),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 516
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction#variable",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 9,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6fe7618e5c5c2da765e96aa002122aa1a175fd579050aa65f007353c91eddf64"
    },
    "063742eafee014b469cf59c1b6752c8edb7ec886125962e43618d30a8fad1070": {
      "translations": {
        "python": {
          "source": "jenkins_provider = codepipeline_actions.JenkinsProvider(self, \"JenkinsProvider\",\n    provider_name=\"MyJenkinsProvider\",\n    server_url=\"http://my-jenkins.com:8080\",\n    version=\"2\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "JenkinsProvider jenkinsProvider = new JenkinsProvider(this, \"JenkinsProvider\", new JenkinsProviderProps {\n    ProviderName = \"MyJenkinsProvider\",\n    ServerUrl = \"http://my-jenkins.com:8080\",\n    Version = \"2\"\n});",
          "version": "1"
        },
        "java": {
          "source": "JenkinsProvider jenkinsProvider = JenkinsProvider.Builder.create(this, \"JenkinsProvider\")\n        .providerName(\"MyJenkinsProvider\")\n        .serverUrl(\"http://my-jenkins.com:8080\")\n        .version(\"2\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "jenkinsProvider := codepipeline_actions.NewJenkinsProvider(this, jsii.String(\"JenkinsProvider\"), &jenkinsProviderProps{\n\tproviderName: jsii.String(\"MyJenkinsProvider\"),\n\tserverUrl: jsii.String(\"http://my-jenkins.com:8080\"),\n\tversion: jsii.String(\"2\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const jenkinsProvider = new codepipeline_actions.JenkinsProvider(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 558
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.JenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst jenkinsProvider = new codepipeline_actions.JenkinsProvider(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "372071b32cc6ca938cd3312414a6ec728dc89df74f84904c3117533b5e07ba65"
    },
    "43181e591f11d298099a5b8ca070e4eb0f26ca3818d1523018382a12d0ebd805": {
      "translations": {
        "python": {
          "source": "jenkins_provider = codepipeline_actions.JenkinsProvider.from_jenkins_provider_attributes(self, \"JenkinsProvider\",\n    provider_name=\"MyJenkinsProvider\",\n    server_url=\"http://my-jenkins.com:8080\",\n    version=\"2\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IJenkinsProvider jenkinsProvider = JenkinsProvider.FromJenkinsProviderAttributes(this, \"JenkinsProvider\", new JenkinsProviderAttributes {\n    ProviderName = \"MyJenkinsProvider\",\n    ServerUrl = \"http://my-jenkins.com:8080\",\n    Version = \"2\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IJenkinsProvider jenkinsProvider = JenkinsProvider.fromJenkinsProviderAttributes(this, \"JenkinsProvider\", JenkinsProviderAttributes.builder()\n        .providerName(\"MyJenkinsProvider\")\n        .serverUrl(\"http://my-jenkins.com:8080\")\n        .version(\"2\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "jenkinsProvider := codepipeline_actions.jenkinsProvider.fromJenkinsProviderAttributes(this, jsii.String(\"JenkinsProvider\"), &jenkinsProviderAttributes{\n\tproviderName: jsii.String(\"MyJenkinsProvider\"),\n\tserverUrl: jsii.String(\"http://my-jenkins.com:8080\"),\n\tversion: jsii.String(\"2\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const jenkinsProvider = codepipeline_actions.JenkinsProvider.fromJenkinsProviderAttributes(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 570
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProvider#fromJenkinsProviderAttributes",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProviderAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst jenkinsProvider = codepipeline_actions.JenkinsProvider.fromJenkinsProviderAttributes(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "a06db19f5e6facd7b55cd5ef114fa3415271e02158195534fd9d8439aa4d6675"
    },
    "0090e0c3b1bb0cd79f7b0be5356da93a415b8c109c144e0abc7006a37d05ecfa": {
      "translations": {
        "python": {
          "source": "# jenkins_provider: codepipeline_actions.JenkinsProvider\n\nbuild_action = codepipeline_actions.JenkinsAction(\n    action_name=\"JenkinsBuild\",\n    jenkins_provider=jenkins_provider,\n    project_name=\"MyProject\",\n    type=codepipeline_actions.JenkinsActionType.BUILD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = new JenkinsAction(new JenkinsActionProps {\n    ActionName = \"JenkinsBuild\",\n    JenkinsProvider = jenkinsProvider,\n    ProjectName = \"MyProject\",\n    Type = JenkinsActionType.BUILD\n});",
          "version": "1"
        },
        "java": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = JenkinsAction.Builder.create()\n        .actionName(\"JenkinsBuild\")\n        .jenkinsProvider(jenkinsProvider)\n        .projectName(\"MyProject\")\n        .type(JenkinsActionType.BUILD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var jenkinsProvider jenkinsProvider\n\nbuildAction := codepipeline_actions.NewJenkinsAction(&jenkinsActionProps{\n\tactionName: jsii.String(\"JenkinsBuild\"),\n\tjenkinsProvider: jenkinsProvider,\n\tprojectName: jsii.String(\"MyProject\"),\n\ttype: codepipeline_actions.jenkinsActionType_BUILD,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 586
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsAction",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType#BUILD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "80e4fb6e4b8bec0902543143c3a00a76f3e13cc6b2c0a29fb507e69f572270dc"
    },
    "7832c94ee84091bc49700e320ce56740334c45537212f9fe6e97d7d0ce43e15c": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 605
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "410d914cdada3753fc75dea805997a782350911d37ab3132513836b945d596d1": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 691
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "aa689be817904f62c2d07a4d2a12c1a1591563affb4585c90f60fb22c0ff36f3": {
      "translations": {
        "python": {
          "source": "lambda_stack = cdk.Stack(app, \"LambdaStack\")\nlambda_code = lambda_.Code.from_cfn_parameters()\nlambda_.Function(lambda_stack, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_14_X\n)\n# other resources that your Lambda needs, added to the lambdaStack...\n\npipeline_stack = cdk.Stack(app, \"PipelineStack\")\npipeline = codepipeline.Pipeline(pipeline_stack, \"Pipeline\")\n\n# add the source code repository containing this code to your Pipeline,\n# and the source code of the Lambda Function, if they're separate\ncdk_source_output = codepipeline.Artifact()\ncdk_source_action = codepipeline_actions.CodeCommitSourceAction(\n    repository=codecommit.Repository(pipeline_stack, \"CdkCodeRepo\",\n        repository_name=\"CdkCodeRepo\"\n    ),\n    action_name=\"CdkCode_Source\",\n    output=cdk_source_output\n)\nlambda_source_output = codepipeline.Artifact()\nlambda_source_action = codepipeline_actions.CodeCommitSourceAction(\n    repository=codecommit.Repository(pipeline_stack, \"LambdaCodeRepo\",\n        repository_name=\"LambdaCodeRepo\"\n    ),\n    action_name=\"LambdaCode_Source\",\n    output=lambda_source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[cdk_source_action, lambda_source_action]\n)\n\n# synthesize the Lambda CDK template, using CodeBuild\n# the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n# adjust the build environment and/or commands accordingly\ncdk_build_project = codebuild.Project(pipeline_stack, \"CdkBuildProject\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    ),\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": [\"npm run build\", \"npm run cdk synth LambdaStack -- -o .\"\n                ]\n            }\n        },\n        \"artifacts\": {\n            \"files\": \"LambdaStack.template.yaml\"\n        }\n    })\n)\ncdk_build_output = codepipeline.Artifact()\ncdk_build_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"CDK_Build\",\n    project=cdk_build_project,\n    input=cdk_source_output,\n    outputs=[cdk_build_output]\n)\n\n# build your Lambda code, using CodeBuild\n# again, this example assumes your Lambda is written in TypeScript/JavaScript -\n# make sure to adjust the build environment and/or commands if they don't match your specific situation\nlambda_build_project = codebuild.Project(pipeline_stack, \"LambdaBuildProject\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    ),\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": \"npm run build\"\n            }\n        },\n        \"artifacts\": {\n            \"files\": [\"index.js\", \"node_modules/**/*\"\n            ]\n        }\n    })\n)\nlambda_build_output = codepipeline.Artifact()\nlambda_build_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Lambda_Build\",\n    project=lambda_build_project,\n    input=lambda_source_output,\n    outputs=[lambda_build_output]\n)\n\npipeline.add_stage(\n    stage_name=\"Build\",\n    actions=[cdk_build_action, lambda_build_action]\n)\n\n# finally, deploy your Lambda Stack\npipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.CloudFormationCreateUpdateStackAction(\n            action_name=\"Lambda_CFN_Deploy\",\n            template_path=cdk_build_output.at_path(\"LambdaStack.template.yaml\"),\n            stack_name=\"LambdaStackDeployedName\",\n            admin_permissions=True,\n            parameter_overrides=lambda_code.assign(lambda_build_output.s3_location),\n            extra_inputs=[lambda_build_output\n            ]\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Stack lambdaStack = new Stack(app, \"LambdaStack\");\nCfnParametersCode lambdaCode = Code.FromCfnParameters();\nnew Function(lambdaStack, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_14_X\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nStack pipelineStack = new Stack(app, \"PipelineStack\");\nPipeline pipeline = new Pipeline(pipelineStack, \"Pipeline\");\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nArtifact cdkSourceOutput = new Artifact();\nCodeCommitSourceAction cdkSourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    Repository = new Repository(pipelineStack, \"CdkCodeRepo\", new RepositoryProps {\n        RepositoryName = \"CdkCodeRepo\"\n    }),\n    ActionName = \"CdkCode_Source\",\n    Output = cdkSourceOutput\n});\nArtifact lambdaSourceOutput = new Artifact();\nCodeCommitSourceAction lambdaSourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    Repository = new Repository(pipelineStack, \"LambdaCodeRepo\", new RepositoryProps {\n        RepositoryName = \"LambdaCodeRepo\"\n    }),\n    ActionName = \"LambdaCode_Source\",\n    Output = lambdaSourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { cdkSourceAction, lambdaSourceAction }\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nProject cdkBuildProject = new Project(pipelineStack, \"CdkBuildProject\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    },\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n            { \"install\", new Struct {\n                Commands = \"npm install\"\n            } },\n            { \"build\", new Struct {\n                Commands = new [] { \"npm run build\", \"npm run cdk synth LambdaStack -- -o .\" }\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, string> {\n            { \"files\", \"LambdaStack.template.yaml\" }\n        } }\n    })\n});\nArtifact cdkBuildOutput = new Artifact();\nCodeBuildAction cdkBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CDK_Build\",\n    Project = cdkBuildProject,\n    Input = cdkSourceOutput,\n    Outputs = new [] { cdkBuildOutput }\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nProject lambdaBuildProject = new Project(pipelineStack, \"LambdaBuildProject\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    },\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n            { \"install\", new Struct {\n                Commands = \"npm install\"\n            } },\n            { \"build\", new Struct {\n                Commands = \"npm run build\"\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, string[]> {\n            { \"files\", new [] { \"index.js\", \"node_modules/**/*\" } }\n        } }\n    })\n});\nArtifact lambdaBuildOutput = new Artifact();\nCodeBuildAction lambdaBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Lambda_Build\",\n    Project = lambdaBuildProject,\n    Input = lambdaSourceOutput,\n    Outputs = new [] { lambdaBuildOutput }\n});\n\npipeline.AddStage(new StageOptions {\n    StageName = \"Build\",\n    Actions = new [] { cdkBuildAction, lambdaBuildAction }\n});\n\n// finally, deploy your Lambda Stack\npipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n            ActionName = \"Lambda_CFN_Deploy\",\n            TemplatePath = cdkBuildOutput.AtPath(\"LambdaStack.template.yaml\"),\n            StackName = \"LambdaStackDeployedName\",\n            AdminPermissions = true,\n            ParameterOverrides = lambdaCode.Assign(lambdaBuildOutput.S3Location),\n            ExtraInputs = new [] { lambdaBuildOutput }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack lambdaStack = new Stack(app, \"LambdaStack\");\nCfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction.Builder.create(lambdaStack, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_14_X)\n        .build();\n// other resources that your Lambda needs, added to the lambdaStack...\n\nStack pipelineStack = new Stack(app, \"PipelineStack\");\nPipeline pipeline = new Pipeline(pipelineStack, \"Pipeline\");\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nArtifact cdkSourceOutput = new Artifact();\nCodeCommitSourceAction cdkSourceAction = CodeCommitSourceAction.Builder.create()\n        .repository(Repository.Builder.create(pipelineStack, \"CdkCodeRepo\")\n                .repositoryName(\"CdkCodeRepo\")\n                .build())\n        .actionName(\"CdkCode_Source\")\n        .output(cdkSourceOutput)\n        .build();\nArtifact lambdaSourceOutput = new Artifact();\nCodeCommitSourceAction lambdaSourceAction = CodeCommitSourceAction.Builder.create()\n        .repository(Repository.Builder.create(pipelineStack, \"LambdaCodeRepo\")\n                .repositoryName(\"LambdaCodeRepo\")\n                .build())\n        .actionName(\"LambdaCode_Source\")\n        .output(lambdaSourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(cdkSourceAction, lambdaSourceAction))\n        .build());\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nProject cdkBuildProject = Project.Builder.create(pipelineStack, \"CdkBuildProject\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0)\n                .build())\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"install\", Map.of(\n                                \"commands\", \"npm install\"),\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"npm run build\", \"npm run cdk synth LambdaStack -- -o .\"))),\n                \"artifacts\", Map.of(\n                        \"files\", \"LambdaStack.template.yaml\"))))\n        .build();\nArtifact cdkBuildOutput = new Artifact();\nCodeBuildAction cdkBuildAction = CodeBuildAction.Builder.create()\n        .actionName(\"CDK_Build\")\n        .project(cdkBuildProject)\n        .input(cdkSourceOutput)\n        .outputs(List.of(cdkBuildOutput))\n        .build();\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nProject lambdaBuildProject = Project.Builder.create(pipelineStack, \"LambdaBuildProject\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0)\n                .build())\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"install\", Map.of(\n                                \"commands\", \"npm install\"),\n                        \"build\", Map.of(\n                                \"commands\", \"npm run build\")),\n                \"artifacts\", Map.of(\n                        \"files\", List.of(\"index.js\", \"node_modules/**/*\")))))\n        .build();\nArtifact lambdaBuildOutput = new Artifact();\nCodeBuildAction lambdaBuildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Lambda_Build\")\n        .project(lambdaBuildProject)\n        .input(lambdaSourceOutput)\n        .outputs(List.of(lambdaBuildOutput))\n        .build();\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Build\")\n        .actions(List.of(cdkBuildAction, lambdaBuildAction))\n        .build());\n\n// finally, deploy your Lambda Stack\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            CloudFormationCreateUpdateStackAction.Builder.create()\n                    .actionName(\"Lambda_CFN_Deploy\")\n                    .templatePath(cdkBuildOutput.atPath(\"LambdaStack.template.yaml\"))\n                    .stackName(\"LambdaStackDeployedName\")\n                    .adminPermissions(true)\n                    .parameterOverrides(lambdaCode.assign(lambdaBuildOutput.getS3Location()))\n                    .extraInputs(List.of(lambdaBuildOutput))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "lambdaStack := cdk.NewStack(app, jsii.String(\"LambdaStack\"))\nlambdaCode := lambda.code.fromCfnParameters()\nlambda.NewFunction(lambdaStack, jsii.String(\"Lambda\"), &functionProps{\n\tcode: lambdaCode,\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n})\n// other resources that your Lambda needs, added to the lambdaStack...\n\npipelineStack := cdk.NewStack(app, jsii.String(\"PipelineStack\"))\npipeline := codepipeline.NewPipeline(pipelineStack, jsii.String(\"Pipeline\"))\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\ncdkSourceOutput := codepipeline.NewArtifact()\ncdkSourceAction := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\trepository: codecommit.NewRepository(pipelineStack, jsii.String(\"CdkCodeRepo\"), &repositoryProps{\n\t\trepositoryName: jsii.String(\"CdkCodeRepo\"),\n\t}),\n\tactionName: jsii.String(\"CdkCode_Source\"),\n\toutput: cdkSourceOutput,\n})\nlambdaSourceOutput := codepipeline.NewArtifact()\nlambdaSourceAction := codepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\trepository: codecommit.NewRepository(pipelineStack, jsii.String(\"LambdaCodeRepo\"), &repositoryProps{\n\t\trepositoryName: jsii.String(\"LambdaCodeRepo\"),\n\t}),\n\tactionName: jsii.String(\"LambdaCode_Source\"),\n\toutput: lambdaSourceOutput,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tcdkSourceAction,\n\t\tlambdaSourceAction,\n\t},\n})\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\ncdkBuildProject := codebuild.NewProject(pipelineStack, jsii.String(\"CdkBuildProject\"), &projectProps{\n\tenvironment: &buildEnvironment{\n\t\tbuildImage: codebuild.linuxBuildImage_UBUNTU_14_04_NODEJS_10_1_0(),\n\t},\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string]*string{\n\t\t\t\"install\": map[string]*string{\n\t\t\t\t\"commands\": jsii.String(\"npm install\"),\n\t\t\t},\n\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\"commands\": []*string{\n\t\t\t\t\tjsii.String(\"npm run build\"),\n\t\t\t\t\tjsii.String(\"npm run cdk synth LambdaStack -- -o .\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"artifacts\": map[string]*string{\n\t\t\t\"files\": jsii.String(\"LambdaStack.template.yaml\"),\n\t\t},\n\t}),\n})\ncdkBuildOutput := codepipeline.NewArtifact()\ncdkBuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CDK_Build\"),\n\tproject: cdkBuildProject,\n\tinput: cdkSourceOutput,\n\toutputs: []artifact{\n\t\tcdkBuildOutput,\n\t},\n})\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nlambdaBuildProject := codebuild.NewProject(pipelineStack, jsii.String(\"LambdaBuildProject\"), &projectProps{\n\tenvironment: &buildEnvironment{\n\t\tbuildImage: codebuild.*linuxBuildImage_UBUNTU_14_04_NODEJS_10_1_0(),\n\t},\n\tbuildSpec: codebuild.*buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string]*string{\n\t\t\t\"install\": map[string]*string{\n\t\t\t\t\"commands\": jsii.String(\"npm install\"),\n\t\t\t},\n\t\t\t\"build\": map[string]*string{\n\t\t\t\t\"commands\": jsii.String(\"npm run build\"),\n\t\t\t},\n\t\t},\n\t\t\"artifacts\": map[string][]*string{\n\t\t\t\"files\": []*string{\n\t\t\t\tjsii.String(\"index.js\"),\n\t\t\t\tjsii.String(\"node_modules/**/*\"),\n\t\t\t},\n\t\t},\n\t}),\n})\nlambdaBuildOutput := codepipeline.NewArtifact()\nlambdaBuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"Lambda_Build\"),\n\tproject: lambdaBuildProject,\n\tinput: lambdaSourceOutput,\n\toutputs: []*artifact{\n\t\tlambdaBuildOutput,\n\t},\n})\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Build\"),\n\tactions: []*iAction{\n\t\tcdkBuildAction,\n\t\tlambdaBuildAction,\n\t},\n})\n\n// finally, deploy your Lambda Stack\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []*iAction{\n\t\tcodepipeline_actions.NewCloudFormationCreateUpdateStackAction(&cloudFormationCreateUpdateStackActionProps{\n\t\t\tactionName: jsii.String(\"Lambda_CFN_Deploy\"),\n\t\t\ttemplatePath: cdkBuildOutput.atPath(jsii.String(\"LambdaStack.template.yaml\")),\n\t\t\tstackName: jsii.String(\"LambdaStackDeployedName\"),\n\t\t\tadminPermissions: jsii.Boolean(true),\n\t\t\tparameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n\t\t\textraInputs: []*artifact{\n\t\t\t\tlambdaBuildOutput,\n\t\t\t},\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const lambdaStack = new cdk.Stack(app, 'LambdaStack');\nconst lambdaCode = lambda.Code.fromCfnParameters();\nnew lambda.Function(lambdaStack, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nconst pipelineStack = new cdk.Stack(app, 'PipelineStack');\nconst pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline');\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nconst cdkSourceOutput = new codepipeline.Artifact();\nconst cdkSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'CdkCodeRepo', {\n    repositoryName: 'CdkCodeRepo',\n  }),\n  actionName: 'CdkCode_Source',\n  output: cdkSourceOutput,\n});\nconst lambdaSourceOutput = new codepipeline.Artifact();\nconst lambdaSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'LambdaCodeRepo', {\n    repositoryName: 'LambdaCodeRepo',\n  }),\n  actionName: 'LambdaCode_Source',\n  output: lambdaSourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [cdkSourceAction, lambdaSourceAction],\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nconst cdkBuildProject = new codebuild.Project(pipelineStack, 'CdkBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: [\n          'npm run build',\n          'npm run cdk synth LambdaStack -- -o .',\n        ],\n      },\n    },\n    artifacts: {\n      files: 'LambdaStack.template.yaml',\n    },\n  }),\n});\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst cdkBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CDK_Build',\n  project: cdkBuildProject,\n  input: cdkSourceOutput,\n  outputs: [cdkBuildOutput],\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nconst lambdaBuildProject = new codebuild.Project(pipelineStack, 'LambdaBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: 'npm run build',\n      },\n    },\n    artifacts: {\n      files: [\n        'index.js',\n        'node_modules/**/*',\n      ],\n    },\n  }),\n});\nconst lambdaBuildOutput = new codepipeline.Artifact();\nconst lambdaBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Lambda_Build',\n  project: lambdaBuildProject,\n  input: lambdaSourceOutput,\n  outputs: [lambdaBuildOutput],\n});\n\npipeline.addStage({\n  stageName: 'Build',\n  actions: [cdkBuildAction, lambdaBuildAction],\n});\n\n// finally, deploy your Lambda Stack\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n      actionName: 'Lambda_CFN_Deploy',\n      templatePath: cdkBuildOutput.atPath('LambdaStack.template.yaml'),\n      stackName: 'LambdaStackDeployedName',\n      adminPermissions: true,\n      parameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n      extraInputs: [\n        lambdaBuildOutput,\n      ],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 734
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#UBUNTU_14_04_NODEJS_10_1_0",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.CfnParametersCode#assign",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ PipelineStack\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\nimport * as codepipeline_actions from '../lib';\n\nconst app = new cdk.App();\n\n/// !show\nconst lambdaStack = new cdk.Stack(app, 'LambdaStack');\nconst lambdaCode = lambda.Code.fromCfnParameters();\nnew lambda.Function(lambdaStack, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nconst pipelineStack = new cdk.Stack(app, 'PipelineStack');\nconst pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline');\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nconst cdkSourceOutput = new codepipeline.Artifact();\nconst cdkSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'CdkCodeRepo', {\n    repositoryName: 'CdkCodeRepo',\n  }),\n  actionName: 'CdkCode_Source',\n  output: cdkSourceOutput,\n});\nconst lambdaSourceOutput = new codepipeline.Artifact();\nconst lambdaSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'LambdaCodeRepo', {\n    repositoryName: 'LambdaCodeRepo',\n  }),\n  actionName: 'LambdaCode_Source',\n  output: lambdaSourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [cdkSourceAction, lambdaSourceAction],\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nconst cdkBuildProject = new codebuild.Project(pipelineStack, 'CdkBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: [\n          'npm run build',\n          'npm run cdk synth LambdaStack -- -o .',\n        ],\n      },\n    },\n    artifacts: {\n      files: 'LambdaStack.template.yaml',\n    },\n  }),\n});\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst cdkBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CDK_Build',\n  project: cdkBuildProject,\n  input: cdkSourceOutput,\n  outputs: [cdkBuildOutput],\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nconst lambdaBuildProject = new codebuild.Project(pipelineStack, 'LambdaBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: 'npm run build',\n      },\n    },\n    artifacts: {\n      files: [\n        'index.js',\n        'node_modules/**/*',\n      ],\n    },\n  }),\n});\nconst lambdaBuildOutput = new codepipeline.Artifact();\nconst lambdaBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Lambda_Build',\n  project: lambdaBuildProject,\n  input: lambdaSourceOutput,\n  outputs: [lambdaBuildOutput],\n});\n\npipeline.addStage({\n  stageName: 'Build',\n  actions: [cdkBuildAction, lambdaBuildAction],\n});\n\n// finally, deploy your Lambda Stack\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n      actionName: 'Lambda_CFN_Deploy',\n      templatePath: cdkBuildOutput.atPath('LambdaStack.template.yaml'),\n      stackName: 'LambdaStackDeployedName',\n      adminPermissions: true,\n      parameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n      extraInputs: [\n        lambdaBuildOutput,\n      ],\n    }),\n  ],\n});\n",
      "syntaxKindCounter": {
        "10": 31,
        "75": 153,
        "106": 1,
        "192": 8,
        "193": 25,
        "194": 35,
        "196": 8,
        "197": 17,
        "225": 14,
        "226": 4,
        "242": 14,
        "243": 14,
        "281": 53
      },
      "fqnsFingerprint": "c4d0540342b11ae351195aff3332fb266af92ad994d57f177d422f84d60fbfca"
    },
    "c7900c769a5effa007533797b7eccad509f5dfd64d66b7ebdcf57ec9205b2790": {
      "translations": {
        "python": {
          "source": "source_output = codepipeline.Artifact()\ncodepipeline_actions.CloudFormationCreateUpdateStackAction(\n    action_name=\"CloudFormationCreateUpdate\",\n    stack_name=\"MyStackName\",\n    admin_permissions=True,\n    template_path=source_output.at_path(\"template.yaml\"),\n    account=\"123456789012\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput = new Artifact();\nnew CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n    ActionName = \"CloudFormationCreateUpdate\",\n    StackName = \"MyStackName\",\n    AdminPermissions = true,\n    TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n    Account = \"123456789012\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput = new Artifact();\nCloudFormationCreateUpdateStackAction.Builder.create()\n        .actionName(\"CloudFormationCreateUpdate\")\n        .stackName(\"MyStackName\")\n        .adminPermissions(true)\n        .templatePath(sourceOutput.atPath(\"template.yaml\"))\n        .account(\"123456789012\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "sourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewCloudFormationCreateUpdateStackAction(&cloudFormationCreateUpdateStackActionProps{\n\tactionName: jsii.String(\"CloudFormationCreateUpdate\"),\n\tstackName: jsii.String(\"MyStackName\"),\n\tadminPermissions: jsii.Boolean(true),\n\ttemplatePath: sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\taccount: jsii.String(\"123456789012\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  account: '123456789012',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 865
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  account: '123456789012',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "106": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "eaedf4509683bdc369202f1e2e4a48fdfd63d047d9d8334ecb571f33c17cd767"
    },
    "61f228512a06b7ec7889ba5366c77037e3b5edc77227bf1e9ab965dbfe025dc8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import PhysicalName\n\n# in stack for account 123456789012...\n# other_account_stack: Stack\n\naction_role = iam.Role(other_account_stack, \"ActionRole\",\n    assumed_by=iam.AccountPrincipal(\"123456789012\"),\n    # the role has to have a physical name set\n    role_name=PhysicalName.GENERATE_IF_NEEDED\n)\n\n# in the pipeline stack...\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.CloudFormationCreateUpdateStackAction(\n    action_name=\"CloudFormationCreateUpdate\",\n    stack_name=\"MyStackName\",\n    admin_permissions=True,\n    template_path=source_output.at_path(\"template.yaml\"),\n    role=action_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n// in stack for account 123456789012...\nStack otherAccountStack;\nRole actionRole = new Role(otherAccountStack, \"ActionRole\", new RoleProps {\n    AssumedBy = new AccountPrincipal(\"123456789012\"),\n    // the role has to have a physical name set\n    RoleName = PhysicalName.GENERATE_IF_NEEDED\n});\n\n// in the pipeline stack...\nArtifact sourceOutput = new Artifact();\nnew CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n    ActionName = \"CloudFormationCreateUpdate\",\n    StackName = \"MyStackName\",\n    AdminPermissions = true,\n    TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n    Role = actionRole\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.PhysicalName;\n\n// in stack for account 123456789012...\nStack otherAccountStack;\n\nRole actionRole = Role.Builder.create(otherAccountStack, \"ActionRole\")\n        .assumedBy(new AccountPrincipal(\"123456789012\"))\n        // the role has to have a physical name set\n        .roleName(PhysicalName.GENERATE_IF_NEEDED)\n        .build();\n\n// in the pipeline stack...\nArtifact sourceOutput = new Artifact();\nCloudFormationCreateUpdateStackAction.Builder.create()\n        .actionName(\"CloudFormationCreateUpdate\")\n        .stackName(\"MyStackName\")\n        .adminPermissions(true)\n        .templatePath(sourceOutput.atPath(\"template.yaml\"))\n        .role(actionRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkcore\"\n\n// in stack for account 123456789012...\nvar otherAccountStack stack\n\nactionRole := iam.NewRole(otherAccountStack, jsii.String(\"ActionRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(jsii.String(\"123456789012\")),\n\t// the role has to have a physical name set\n\troleName: *awscdkcore.PhysicalName_GENERATE_IF_NEEDED(),\n})\n\n// in the pipeline stack...\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewCloudFormationCreateUpdateStackAction(&cloudFormationCreateUpdateStackActionProps{\n\tactionName: jsii.String(\"CloudFormationCreateUpdate\"),\n\tstackName: jsii.String(\"MyStackName\"),\n\tadminPermissions: jsii.Boolean(true),\n\ttemplatePath: sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\trole: actionRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { PhysicalName } from '@aws-cdk/core';\n\n// in stack for account 123456789012...\ndeclare const otherAccountStack: Stack;\nconst actionRole = new iam.Role(otherAccountStack, 'ActionRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  // the role has to have a physical name set\n  roleName: PhysicalName.GENERATE_IF_NEEDED,\n});\n\n// in the pipeline stack...\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  role: actionRole, // this action will be cross-account as well\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 884
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.PhysicalName#GENERATE_IF_NEEDED",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { PhysicalName } from '@aws-cdk/core';\n\n// in stack for account 123456789012...\ndeclare const otherAccountStack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst actionRole = new iam.Role(otherAccountStack, 'ActionRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  // the role has to have a physical name set\n  roleName: PhysicalName.GENERATE_IF_NEEDED,\n});\n\n// in the pipeline stack...\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  role: actionRole, // this action will be cross-account as well\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "106": 1,
        "130": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "fdeef51fde1b67c6c9642813cf64bc387bace0233d402a08a815126da4814013"
    },
    "62028bbab4d2c7ec59a14cc95260872f3e0e7211a51969d9c153234e1ec2fe8d": {
      "translations": {
        "python": {
          "source": "# deployment_group: codedeploy.ServerDeploymentGroup\npipeline = codepipeline.Pipeline(self, \"MyPipeline\",\n    pipeline_name=\"MyPipeline\"\n)\n\n# add the source and build Stages to the Pipeline...\nbuild_output = codepipeline.Artifact()\ndeploy_action = codepipeline_actions.CodeDeployServerDeployAction(\n    action_name=\"CodeDeploy\",\n    input=build_output,\n    deployment_group=deployment_group\n)\npipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[deploy_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentGroup deploymentGroup;\nPipeline pipeline = new Pipeline(this, \"MyPipeline\", new PipelineProps {\n    PipelineName = \"MyPipeline\"\n});\n\n// add the source and build Stages to the Pipeline...\nArtifact buildOutput = new Artifact();\nCodeDeployServerDeployAction deployAction = new CodeDeployServerDeployAction(new CodeDeployServerDeployActionProps {\n    ActionName = \"CodeDeploy\",\n    Input = buildOutput,\n    DeploymentGroup = deploymentGroup\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] { deployAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentGroup deploymentGroup;\nPipeline pipeline = Pipeline.Builder.create(this, \"MyPipeline\")\n        .pipelineName(\"MyPipeline\")\n        .build();\n\n// add the source and build Stages to the Pipeline...\nArtifact buildOutput = new Artifact();\nCodeDeployServerDeployAction deployAction = CodeDeployServerDeployAction.Builder.create()\n        .actionName(\"CodeDeploy\")\n        .input(buildOutput)\n        .deploymentGroup(deploymentGroup)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(deployAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var deploymentGroup serverDeploymentGroup\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"), &pipelineProps{\n\tpipelineName: jsii.String(\"MyPipeline\"),\n})\n\n// add the source and build Stages to the Pipeline...\nbuildOutput := codepipeline.NewArtifact()\ndeployAction := codepipeline_actions.NewCodeDeployServerDeployAction(&codeDeployServerDeployActionProps{\n\tactionName: jsii.String(\"CodeDeploy\"),\n\tinput: buildOutput,\n\tdeploymentGroup: deploymentGroup,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tdeployAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\n\n// add the source and build Stages to the Pipeline...\nconst buildOutput = new codepipeline.Artifact();\ndeclare const deploymentGroup: codedeploy.ServerDeploymentGroup;\nconst deployAction = new codepipeline_actions.CodeDeployServerDeployAction({\n  actionName: 'CodeDeploy',\n  input: buildOutput,\n  deploymentGroup,\n});\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 912
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerDeploymentGroup",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployAction",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const deploymentGroup: codedeploy.ServerDeploymentGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\n\n// add the source and build Stages to the Pipeline...\nconst buildOutput = new codepipeline.Artifact();\nconst deployAction = new codepipeline_actions.CodeDeployServerDeployAction({\n  actionName: 'CodeDeploy',\n  input: buildOutput,\n  deploymentGroup,\n});\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f03b16867cea22d446ce461f41110fa35a3e9b8a35233f0949428c9e0464af6b"
    },
    "b26843e3d99a86ff92d4f4f939f83d4ac4e70f17fa95186f10a790bac4c49537": {
      "translations": {
        "python": {
          "source": "lambda_code = lambda_.Code.from_cfn_parameters()\nfunc = lambda_.Function(self, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_14_X\n)\n# used to make sure each CDK synthesis produces a different Version\nversion = func.current_version\nalias = lambda_.Alias(self, \"LambdaAlias\",\n    alias_name=\"Prod\",\n    version=version\n)\n\ncodedeploy.LambdaDeploymentGroup(self, \"DeploymentGroup\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CfnParametersCode lambdaCode = Code.FromCfnParameters();\nFunction func = new Function(this, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_14_X\n});\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.CurrentVersion;\nAlias alias = new Alias(this, \"LambdaAlias\", new AliasProps {\n    AliasName = \"Prod\",\n    Version = version\n});\n\nnew LambdaDeploymentGroup(this, \"DeploymentGroup\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction func = Function.Builder.create(this, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_14_X)\n        .build();\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.getCurrentVersion();\nAlias alias = Alias.Builder.create(this, \"LambdaAlias\")\n        .aliasName(\"Prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "lambdaCode := lambda.code.fromCfnParameters()\nfunc := lambda.NewFunction(this, jsii.String(\"Lambda\"), &functionProps{\n\tcode: lambdaCode,\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n})\n// used to make sure each CDK synthesis produces a different Version\nversion := func.currentVersion\nalias := lambda.NewAlias(this, jsii.String(\"LambdaAlias\"), &aliasProps{\n\taliasName: jsii.String(\"Prod\"),\n\tversion: version,\n})\n\ncodedeploy.NewLambdaDeploymentGroup(this, jsii.String(\"DeploymentGroup\"), &lambdaDeploymentGroupProps{\n\talias: alias,\n\tdeploymentConfig: codedeploy.lambdaDeploymentConfig_LINEAR_10PERCENT_EVERY_1MINUTE(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.currentVersion;\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 935
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-lambda.Version",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.currentVersion;\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 29,
        "104": 3,
        "193": 3,
        "194": 10,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2
      },
      "fqnsFingerprint": "590f4b1a10183678dc4c35225b6174014300bfd7fdb3fa8cff3b1e3d273b6aa7"
    },
    "28d630fea822dfbf164cc78382662583d5c75fd053bfc5d30129de5d39601bfb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecs as ecs\n\n# service: ecs.FargateService\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nbuild_output = codepipeline.Artifact()\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.EcsDeployAction(\n            action_name=\"DeployAction\",\n            service=service,\n            # if your file is called imagedefinitions.json,\n            # use the `input` property,\n            # and leave out the `imageFile` property\n            input=build_output,\n            # if your file name is _not_ imagedefinitions.json,\n            # use the `imageFile` property,\n            # and leave out the `input` property\n            image_file=build_output.at_path(\"imageDef.json\"),\n            deployment_timeout=Duration.minutes(60)\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECS;\n\nFargateService service;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new EcsDeployAction(new EcsDeployActionProps {\n            ActionName = \"DeployAction\",\n            Service = service,\n            // if your file is called imagedefinitions.json,\n            // use the `input` property,\n            // and leave out the `imageFile` property\n            Input = buildOutput,\n            // if your file name is _not_ imagedefinitions.json,\n            // use the `imageFile` property,\n            // and leave out the `input` property\n            ImageFile = buildOutput.AtPath(\"imageDef.json\"),\n            DeploymentTimeout = Duration.Minutes(60)\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecs.*;\n\nFargateService service;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            EcsDeployAction.Builder.create()\n                    .actionName(\"DeployAction\")\n                    .service(service)\n                    // if your file is called imagedefinitions.json,\n                    // use the `input` property,\n                    // and leave out the `imageFile` property\n                    .input(buildOutput)\n                    // if your file name is _not_ imagedefinitions.json,\n                    // use the `imageFile` property,\n                    // and leave out the `input` property\n                    .imageFile(buildOutput.atPath(\"imageDef.json\"))\n                    .deploymentTimeout(Duration.minutes(60))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar service fargateService\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nbuildOutput := codepipeline.NewArtifact()\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tcodepipeline_actions.NewEcsDeployAction(&ecsDeployActionProps{\n\t\t\tactionName: jsii.String(\"DeployAction\"),\n\t\t\tservice: service,\n\t\t\t// if your file is called imagedefinitions.json,\n\t\t\t// use the `input` property,\n\t\t\t// and leave out the `imageFile` property\n\t\t\tinput: buildOutput,\n\t\t\t// if your file name is _not_ imagedefinitions.json,\n\t\t\t// use the `imageFile` property,\n\t\t\t// and leave out the `input` property\n\t\t\timageFile: buildOutput.atPath(jsii.String(\"imageDef.json\")),\n\t\t\tdeploymentTimeout: *awscdkcore.Duration.minutes(jsii.Number(60)),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const service: ecs.FargateService;\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service,\n      // if your file is called imagedefinitions.json,\n      // use the `input` property,\n      // and leave out the `imageFile` property\n      input: buildOutput,\n      // if your file name is _not_ imagedefinitions.json,\n      // use the `imageFile` property,\n      // and leave out the `input` property\n      imageFile: buildOutput.atPath('imageDef.json'),\n      deploymentTimeout: Duration.minutes(60), // optional, default is 60 minutes\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 965
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcsDeployAction",
        "@aws-cdk/aws-codepipeline-actions.EcsDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecs.IBaseService",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const service: ecs.FargateService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service,\n      // if your file is called imagedefinitions.json,\n      // use the `input` property,\n      // and leave out the `imageFile` property\n      input: buildOutput,\n      // if your file name is _not_ imagedefinitions.json,\n      // use the `imageFile` property,\n      // and leave out the `input` property\n      imageFile: buildOutput.atPath('imageDef.json'),\n      deploymentTimeout: Duration.minutes(60), // optional, default is 60 minutes\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "20a7d780a1f5e31eb711cde55f6097f8edfc6dad30a8beadd78c273485d41902"
    },
    "479b22e7779b4ecdbf921641e816b4aa9f7f0a6e48caeccac2525b83eeacf93a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecs as ecs\n\n\nservice = ecs.BaseService.from_service_arn_with_cluster(self, \"EcsService\", \"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\")\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nbuild_output = codepipeline.Artifact()\n# add source and build stages to the pipeline as usual...\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.EcsDeployAction(\n            action_name=\"DeployAction\",\n            service=service,\n            input=build_output\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECS;\n\n\nIBaseService service = BaseService.FromServiceArnWithCluster(this, \"EcsService\", \"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\");\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\n// add source and build stages to the pipeline as usual...\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new EcsDeployAction(new EcsDeployActionProps {\n            ActionName = \"DeployAction\",\n            Service = service,\n            Input = buildOutput\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecs.*;\n\n\nIBaseService service = BaseService.fromServiceArnWithCluster(this, \"EcsService\", \"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\");\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\n// add source and build stages to the pipeline as usual...\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            EcsDeployAction.Builder.create()\n                    .actionName(\"DeployAction\")\n                    .service(service)\n                    .input(buildOutput)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\n\nservice := ecs.baseService.fromServiceArnWithCluster(this, jsii.String(\"EcsService\"), jsii.String(\"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\"))\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nbuildOutput := codepipeline.NewArtifact()\n// add source and build stages to the pipeline as usual...\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tcodepipeline_actions.NewEcsDeployAction(&ecsDeployActionProps{\n\t\t\tactionName: jsii.String(\"DeployAction\"),\n\t\t\tservice: service,\n\t\t\tinput: buildOutput,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecs from '@aws-cdk/aws-ecs';\n\nconst service = ecs.BaseService.fromServiceArnWithCluster(this, 'EcsService',\n  'arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName'\n);\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\n// add source and build stages to the pipeline as usual...\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service: service,\n      input: buildOutput,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 999
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcsDeployAction",
        "@aws-cdk/aws-codepipeline-actions.EcsDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecs.BaseService",
        "@aws-cdk/aws-ecs.BaseService#fromServiceArnWithCluster",
        "@aws-cdk/aws-ecs.IBaseService",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = ecs.BaseService.fromServiceArnWithCluster(this, 'EcsService',\n  'arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName'\n);\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\n// add source and build stages to the pipeline as usual...\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service: service,\n      input: buildOutput,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 23,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "9a6fab6a4b0e8250941d8fa80cd5c58c26a293f6044fd5c18ce39eb600413170"
    },
    "18a915e031962c90d8535d215771e57d8cf5f5988aed73e863446c03e9fa491e": {
      "translations": {
        "python": {
          "source": "#\n# This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n#\nclass EcsAppStack(cdk.Stack):\n    def __init__(self, scope, id, *, image, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, image=image, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        task_definition = ecs.TaskDefinition(self, \"TaskDefinition\",\n            compatibility=ecs.Compatibility.FARGATE,\n            cpu=\"1024\",\n            memory_mi_b=\"2048\"\n        )\n        task_definition.add_container(\"AppContainer\",\n            image=image\n        )\n        ecs.FargateService(self, \"EcsService\",\n            task_definition=task_definition,\n            cluster=ecs.Cluster(self, \"Cluster\",\n                vpc=ec2.Vpc(self, \"Vpc\",\n                    max_azs=1\n                )\n            )\n        )\n\n#\n# This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n#\nclass PipelineStack(cdk.Stack):\n\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        # ********* ECS part ****************\n\n        # this is the ECR repository where the built Docker image will be pushed\n        app_ecr_repo = ecr.Repository(self, \"EcsDeployRepository\")\n        # the build that creates the Docker image, and pushes it to the ECR repo\n        app_code_docker_build = codebuild.PipelineProject(self, \"AppCodeDockerImageBuildAndPushProject\",\n            environment=codebuild.BuildEnvironment(\n                # we need to run Docker\n                privileged=True\n            ),\n            build_spec=codebuild.BuildSpec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"build\": {\n                        \"commands\": [\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\"\n                        ]\n                    },\n                    \"post_build\": {\n                        \"commands\": [\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"\n                        ]\n                    }\n                },\n                \"env\": {\n                    # save the imageTag environment variable as a CodePipeline Variable\n                    \"exported-variables\": [\"imageTag\"\n                    ]\n                }\n            }),\n            environment_variables={\n                \"REPOSITORY_URI\": codebuild.BuildEnvironmentVariable(\n                    value=app_ecr_repo.repository_uri\n                )\n            }\n        )\n        # needed for `docker push`\n        app_ecr_repo.grant_pull_push(app_code_docker_build)\n        # create the ContainerImage used for the ECS application Stack\n        self.tag_parameter_container_image = ecs.TagParameterContainerImage(app_ecr_repo)\n\n        cdk_code_build = codebuild.PipelineProject(self, \"CdkCodeBuildProject\",\n            build_spec=codebuild.BuildSpec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"install\": {\n                        \"commands\": [\"npm install\"\n                        ]\n                    },\n                    \"build\": {\n                        \"commands\": [\"npx cdk synth --verbose\"\n                        ]\n                    }\n                },\n                \"artifacts\": {\n                    # store the entire Cloud Assembly as the output artifact\n                    \"base-directory\": \"cdk.out\",\n                    \"files\": \"**/*\"\n                }\n            })\n        )\n\n        # ********* Pipeline part ****************\n\n        app_code_source_output = codepipeline.Artifact()\n        cdk_code_source_output = codepipeline.Artifact()\n        cdk_code_build_output = codepipeline.Artifact()\n        app_code_build_action = codepipeline_actions.CodeBuildAction(\n            action_name=\"AppCodeDockerImageBuildAndPush\",\n            project=app_code_docker_build,\n            input=app_code_source_output\n        )\n        codepipeline.Pipeline(self, \"CodePipelineDeployingEcsApplication\",\n            artifact_bucket=s3.Bucket(self, \"ArtifactBucket\",\n                removal_policy=cdk.RemovalPolicy.DESTROY\n            ),\n            stages=[codepipeline.StageProps(\n                stage_name=\"Source\",\n                actions=[\n                    # this is the Action that takes the source of your application code\n                    codepipeline_actions.CodeCommitSourceAction(\n                        action_name=\"AppCodeSource\",\n                        repository=codecommit.Repository(self, \"AppCodeSourceRepository\", repository_name=\"AppCodeSourceRepository\"),\n                        output=app_code_source_output\n                    ),\n                    # this is the Action that takes the source of your CDK code\n                    # (which would probably include this Pipeline code as well)\n                    codepipeline_actions.CodeCommitSourceAction(\n                        action_name=\"CdkCodeSource\",\n                        repository=codecommit.Repository(self, \"CdkCodeSourceRepository\", repository_name=\"CdkCodeSourceRepository\"),\n                        output=cdk_code_source_output\n                    )\n                ]\n            ), codepipeline.StageProps(\n                stage_name=\"Build\",\n                actions=[app_code_build_action,\n                    codepipeline_actions.CodeBuildAction(\n                        action_name=\"CdkCodeBuildAndSynth\",\n                        project=cdk_code_build,\n                        input=cdk_code_source_output,\n                        outputs=[cdk_code_build_output]\n                    )\n                ]\n            ), codepipeline.StageProps(\n                stage_name=\"Deploy\",\n                actions=[\n                    codepipeline_actions.CloudFormationCreateUpdateStackAction(\n                        action_name=\"CFN_Deploy\",\n                        stack_name=\"SampleEcsStackDeployedFromCodePipeline\",\n                        # this name has to be the same name as used below in the CDK code for the application Stack\n                        template_path=cdk_code_build_output.at_path(\"EcsStackDeployedInPipeline.template.json\"),\n                        admin_permissions=True,\n                        parameter_overrides={\n                            # read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                            # and pass it as the CloudFormation Parameter for the tag\n                            \"self.tag_parameter_container_image.tag_parameter_name\": app_code_build_action.variable(\"imageTag\")\n                        }\n                    )\n                ]\n            )\n            ]\n        )\n\napp = cdk.App()\n\n# the CodePipeline Stack needs to be created first\npipeline_stack = PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\")\n# we supply the image to the ECS application Stack from the CodePipeline Stack\nEcsAppStack(app, \"EcsStackDeployedInPipeline\",\n    image=pipeline_stack.tag_parameter_container_image\n)",
          "version": "2"
        },
        "csharp": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nclass EcsAppStackProps : StackProps\n{\n    public ContainerImage Image { get; set; }\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nclass EcsAppStack : Stack\n{\n    public EcsAppStack(Construct scope, string id, EcsAppStackProps props) : base(scope, id, props)\n    {\n\n        TaskDefinition taskDefinition = new TaskDefinition(this, \"TaskDefinition\", new TaskDefinitionProps {\n            Compatibility = Compatibility.FARGATE,\n            Cpu = \"1024\",\n            MemoryMiB = \"2048\"\n        });\n        taskDefinition.AddContainer(\"AppContainer\", new ContainerDefinitionOptions {\n            Image = props.Image\n        });\n        new FargateService(this, \"EcsService\", new FargateServiceProps {\n            TaskDefinition = taskDefinition,\n            Cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n                Vpc = new Vpc(this, \"Vpc\", new VpcProps {\n                    MaxAzs = 1\n                })\n            })\n        });\n    }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nclass PipelineStack : Stack\n{\n    public TagParameterContainerImage TagParameterContainerImage { get; }\n\n    public PipelineStack(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        /* ********** ECS part **************** */\n\n        // this is the ECR repository where the built Docker image will be pushed\n        Repository appEcrRepo = new Repository(this, \"EcsDeployRepository\");\n        // the build that creates the Docker image, and pushes it to the ECR repo\n        PipelineProject appCodeDockerBuild = new PipelineProject(this, \"AppCodeDockerImageBuildAndPushProject\", new PipelineProjectProps {\n            Environment = new BuildEnvironment {\n                // we need to run Docker\n                Privileged = true\n            },\n            BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n                { \"version\", \"0.2\" },\n                { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n                    { \"build\", new Struct {\n                        Commands = new [] { \"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\" }\n                    } },\n                    { \"post_build\", new Struct {\n                        Commands = new [] { \"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\" }\n                    } }\n                } },\n                { \"env\", new Dictionary<string, string[]> {\n                    // save the imageTag environment variable as a CodePipeline Variable\n                    { \"exported-variables\", new [] { \"imageTag\" } }\n                } }\n            }),\n            EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n                { \"REPOSITORY_URI\", new BuildEnvironmentVariable {\n                    Value = appEcrRepo.RepositoryUri\n                } }\n            }\n        });\n        // needed for `docker push`\n        appEcrRepo.GrantPullPush(appCodeDockerBuild);\n        // create the ContainerImage used for the ECS application Stack\n        TagParameterContainerImage = new TagParameterContainerImage(appEcrRepo);\n\n        PipelineProject cdkCodeBuild = new PipelineProject(this, \"CdkCodeBuildProject\", new PipelineProjectProps {\n            BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n                { \"version\", \"0.2\" },\n                { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n                    { \"install\", new Struct {\n                        Commands = new [] { \"npm install\" }\n                    } },\n                    { \"build\", new Struct {\n                        Commands = new [] { \"npx cdk synth --verbose\" }\n                    } }\n                } },\n                { \"artifacts\", new Dictionary<string, string> {\n                    // store the entire Cloud Assembly as the output artifact\n                    { \"base-directory\", \"cdk.out\" },\n                    { \"files\", \"**/*\" }\n                } }\n            })\n        });\n\n        /* ********** Pipeline part **************** */\n\n        Artifact appCodeSourceOutput = new Artifact();\n        Artifact cdkCodeSourceOutput = new Artifact();\n        Artifact cdkCodeBuildOutput = new Artifact();\n        CodeBuildAction appCodeBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n            ActionName = \"AppCodeDockerImageBuildAndPush\",\n            Project = appCodeDockerBuild,\n            Input = appCodeSourceOutput\n        });\n        new Pipeline(this, \"CodePipelineDeployingEcsApplication\", new PipelineProps {\n            ArtifactBucket = new Bucket(this, \"ArtifactBucket\", new BucketProps {\n                RemovalPolicy = RemovalPolicy.DESTROY\n            }),\n            Stages = new [] { new StageProps {\n                StageName = \"Source\",\n                Actions = new [] {\n                    // this is the Action that takes the source of your application code\n                    new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n                        ActionName = \"AppCodeSource\",\n                        Repository = new Repository(this, \"AppCodeSourceRepository\", new RepositoryProps { RepositoryName = \"AppCodeSourceRepository\" }),\n                        Output = appCodeSourceOutput\n                    }),\n                    // this is the Action that takes the source of your CDK code\n                    // (which would probably include this Pipeline code as well)\n                    new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n                        ActionName = \"CdkCodeSource\",\n                        Repository = new Repository(this, \"CdkCodeSourceRepository\", new RepositoryProps { RepositoryName = \"CdkCodeSourceRepository\" }),\n                        Output = cdkCodeSourceOutput\n                    }) }\n            }, new StageProps {\n                StageName = \"Build\",\n                Actions = new [] { appCodeBuildAction,\n                    new CodeBuildAction(new CodeBuildActionProps {\n                        ActionName = \"CdkCodeBuildAndSynth\",\n                        Project = cdkCodeBuild,\n                        Input = cdkCodeSourceOutput,\n                        Outputs = new [] { cdkCodeBuildOutput }\n                    }) }\n            }, new StageProps {\n                StageName = \"Deploy\",\n                Actions = new [] {\n                    new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n                        ActionName = \"CFN_Deploy\",\n                        StackName = \"SampleEcsStackDeployedFromCodePipeline\",\n                        // this name has to be the same name as used below in the CDK code for the application Stack\n                        TemplatePath = cdkCodeBuildOutput.AtPath(\"EcsStackDeployedInPipeline.template.json\"),\n                        AdminPermissions = true,\n                        ParameterOverrides = new Dictionary<string, object> {\n                            // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                            // and pass it as the CloudFormation Parameter for the tag\n                            { TagParameterContainerImage.TagParameterName, appCodeBuildAction.Variable(\"imageTag\") }\n                        }\n                    }) }\n            } }\n        });\n    }\n}\n\nApp app = new App();\n\n// the CodePipeline Stack needs to be created first\nPipelineStack pipelineStack = new PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\");\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, \"EcsStackDeployedInPipeline\", new EcsAppStackProps {\n    Image = pipelineStack.TagParameterContainerImage\n});",
          "version": "1"
        },
        "java": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\npublic class EcsAppStackProps extends StackProps {\n    private ContainerImage image;\n    public ContainerImage getImage() {\n        return this.image;\n    }\n    public EcsAppStackProps image(ContainerImage image) {\n        this.image = image;\n        return this;\n    }\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\npublic class EcsAppStack extends Stack {\n    public EcsAppStack(Construct scope, String id, EcsAppStackProps props) {\n        super(scope, id, props);\n\n        TaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TaskDefinition\")\n                .compatibility(Compatibility.FARGATE)\n                .cpu(\"1024\")\n                .memoryMiB(\"2048\")\n                .build();\n        taskDefinition.addContainer(\"AppContainer\", ContainerDefinitionOptions.builder()\n                .image(props.getImage())\n                .build());\n        FargateService.Builder.create(this, \"EcsService\")\n                .taskDefinition(taskDefinition)\n                .cluster(Cluster.Builder.create(this, \"Cluster\")\n                        .vpc(Vpc.Builder.create(this, \"Vpc\")\n                                .maxAzs(1)\n                                .build())\n                        .build())\n                .build();\n    }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\npublic class PipelineStack extends Stack {\n    public final TagParameterContainerImage tagParameterContainerImage;\n\n    public PipelineStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public PipelineStack(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        /* ********** ECS part **************** */\n\n        // this is the ECR repository where the built Docker image will be pushed\n        Repository appEcrRepo = new Repository(this, \"EcsDeployRepository\");\n        // the build that creates the Docker image, and pushes it to the ECR repo\n        PipelineProject appCodeDockerBuild = PipelineProject.Builder.create(this, \"AppCodeDockerImageBuildAndPushProject\")\n                .environment(BuildEnvironment.builder()\n                        // we need to run Docker\n                        .privileged(true)\n                        .build())\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"phases\", Map.of(\n                                \"build\", Map.of(\n                                        \"commands\", List.of(\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\")),\n                                \"post_build\", Map.of(\n                                        \"commands\", List.of(\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"))),\n                        \"env\", Map.of(\n                                // save the imageTag environment variable as a CodePipeline Variable\n                                \"exported-variables\", List.of(\"imageTag\")))))\n                .environmentVariables(Map.of(\n                        \"REPOSITORY_URI\", BuildEnvironmentVariable.builder()\n                                .value(appEcrRepo.getRepositoryUri())\n                                .build()))\n                .build();\n        // needed for `docker push`\n        appEcrRepo.grantPullPush(appCodeDockerBuild);\n        // create the ContainerImage used for the ECS application Stack\n        this.tagParameterContainerImage = new TagParameterContainerImage(appEcrRepo);\n\n        PipelineProject cdkCodeBuild = PipelineProject.Builder.create(this, \"CdkCodeBuildProject\")\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"phases\", Map.of(\n                                \"install\", Map.of(\n                                        \"commands\", List.of(\"npm install\")),\n                                \"build\", Map.of(\n                                        \"commands\", List.of(\"npx cdk synth --verbose\"))),\n                        \"artifacts\", Map.of(\n                                // store the entire Cloud Assembly as the output artifact\n                                \"base-directory\", \"cdk.out\",\n                                \"files\", \"**/*\"))))\n                .build();\n\n        /* ********** Pipeline part **************** */\n\n        Artifact appCodeSourceOutput = new Artifact();\n        Artifact cdkCodeSourceOutput = new Artifact();\n        Artifact cdkCodeBuildOutput = new Artifact();\n        CodeBuildAction appCodeBuildAction = CodeBuildAction.Builder.create()\n                .actionName(\"AppCodeDockerImageBuildAndPush\")\n                .project(appCodeDockerBuild)\n                .input(appCodeSourceOutput)\n                .build();\n        Pipeline.Builder.create(this, \"CodePipelineDeployingEcsApplication\")\n                .artifactBucket(Bucket.Builder.create(this, \"ArtifactBucket\")\n                        .removalPolicy(RemovalPolicy.DESTROY)\n                        .build())\n                .stages(List.of(StageProps.builder()\n                        .stageName(\"Source\")\n                        .actions(List.of(\n                            // this is the Action that takes the source of your application code\n                            CodeCommitSourceAction.Builder.create()\n                                    .actionName(\"AppCodeSource\")\n                                    .repository(Repository.Builder.create(this, \"AppCodeSourceRepository\").repositoryName(\"AppCodeSourceRepository\").build())\n                                    .output(appCodeSourceOutput)\n                                    .build(),\n                            // this is the Action that takes the source of your CDK code\n                            // (which would probably include this Pipeline code as well)\n                            CodeCommitSourceAction.Builder.create()\n                                    .actionName(\"CdkCodeSource\")\n                                    .repository(Repository.Builder.create(this, \"CdkCodeSourceRepository\").repositoryName(\"CdkCodeSourceRepository\").build())\n                                    .output(cdkCodeSourceOutput)\n                                    .build()))\n                        .build(), StageProps.builder()\n                        .stageName(\"Build\")\n                        .actions(List.of(appCodeBuildAction,\n                            CodeBuildAction.Builder.create()\n                                    .actionName(\"CdkCodeBuildAndSynth\")\n                                    .project(cdkCodeBuild)\n                                    .input(cdkCodeSourceOutput)\n                                    .outputs(List.of(cdkCodeBuildOutput))\n                                    .build()))\n                        .build(), StageProps.builder()\n                        .stageName(\"Deploy\")\n                        .actions(List.of(\n                            CloudFormationCreateUpdateStackAction.Builder.create()\n                                    .actionName(\"CFN_Deploy\")\n                                    .stackName(\"SampleEcsStackDeployedFromCodePipeline\")\n                                    // this name has to be the same name as used below in the CDK code for the application Stack\n                                    .templatePath(cdkCodeBuildOutput.atPath(\"EcsStackDeployedInPipeline.template.json\"))\n                                    .adminPermissions(true)\n                                    .parameterOverrides(Map.of(\n                                            // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                                            // and pass it as the CloudFormation Parameter for the tag\n                                            this.tagParameterContainerImage.getTagParameterName(), appCodeBuildAction.variable(\"imageTag\")))\n                                    .build()))\n                        .build()))\n                .build();\n    }\n}\n\nApp app = new App();\n\n// the CodePipeline Stack needs to be created first\nPipelineStack pipelineStack = new PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\");\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, \"EcsStackDeployedInPipeline\", new EcsAppStackProps()\n        .image(pipelineStack.getTagParameterContainerImage())\n        );",
          "version": "1"
        },
        "go": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\ntype ecsAppStackProps struct {\n\tstackProps\n\timage containerImage\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\ntype EcsAppStack struct {\n\tstack\n}\n\nfunc NewEcsAppStack(scope construct, id *string, props ecsAppStackProps) *EcsAppStack {\n\tthis := &EcsAppStack{}\n\tcdk.NewStack_Override(this, scope, id, props)\n\n\ttaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TaskDefinition\"), &taskDefinitionProps{\n\t\tcompatibility: ecs.compatibility_FARGATE,\n\t\tcpu: jsii.String(\"1024\"),\n\t\tmemoryMiB: jsii.String(\"2048\"),\n\t})\n\ttaskDefinition.addContainer(jsii.String(\"AppContainer\"), &containerDefinitionOptions{\n\t\timage: props.image,\n\t})\n\tecs.NewFargateService(this, jsii.String(\"EcsService\"), &fargateServiceProps{\n\t\ttaskDefinition: taskDefinition,\n\t\tcluster: ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\t\t\tvpc: ec2.NewVpc(this, jsii.String(\"Vpc\"), &vpcProps{\n\t\t\t\tmaxAzs: jsii.Number(1),\n\t\t\t}),\n\t\t}),\n\t})\n\treturn this\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\ntype PipelineStack struct {\n\tstack\n\ttagParameterContainerImage tagParameterContainerImage\n}tagParameterContainerImage tagParameterContainerImage\n\nfunc NewPipelineStack(scope construct, id *string, props stackProps) *PipelineStack {\n\tthis := &PipelineStack{}\n\tcdk.NewStack_Override(this, scope, id, props)\n\n\t/* ********** ECS part **************** */\n\n\t// this is the ECR repository where the built Docker image will be pushed\n\tappEcrRepo := ecr.NewRepository(this, jsii.String(\"EcsDeployRepository\"))\n\t// the build that creates the Docker image, and pushes it to the ECR repo\n\tappCodeDockerBuild := codebuild.NewPipelineProject(this, jsii.String(\"AppCodeDockerImageBuildAndPushProject\"), &pipelineProjectProps{\n\t\tenvironment: &buildEnvironment{\n\t\t\t// we need to run Docker\n\t\t\tprivileged: jsii.Boolean(true),\n\t\t},\n\t\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\"),\n\t\t\t\t\t\tjsii.String(\"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"post_build\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\"),\n\t\t\t\t\t\tjsii.String(\"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"env\": map[string][]*string{\n\t\t\t\t// save the imageTag environment variable as a CodePipeline Variable\n\t\t\t\t\"exported-variables\": []*string{\n\t\t\t\t\tjsii.String(\"imageTag\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\t\"REPOSITORY_URI\": &buildEnvironmentVariable{\n\t\t\t\t\"value\": appEcrRepo.repositoryUri,\n\t\t\t},\n\t\t},\n\t})\n\t// needed for `docker push`\n\tappEcrRepo.grantPullPush(appCodeDockerBuild)\n\t// create the ContainerImage used for the ECS application Stack\n\tthis.tagParameterContainerImage = ecs.NewTagParameterContainerImage(appEcrRepo)\n\n\tcdkCodeBuild := codebuild.NewPipelineProject(this, jsii.String(\"CdkCodeBuildProject\"), &pipelineProjectProps{\n\t\tbuildSpec: codebuild.*buildSpec.fromObject(map[string]interface{}{\n\t\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\t\"install\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"npm install\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"npx cdk synth --verbose\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"artifacts\": map[string]*string{\n\t\t\t\t// store the entire Cloud Assembly as the output artifact\n\t\t\t\t\"base-directory\": jsii.String(\"cdk.out\"),\n\t\t\t\t\"files\": jsii.String(\"**/*\"),\n\t\t\t},\n\t\t}),\n\t})\n\n\t/* ********** Pipeline part **************** */\n\n\tappCodeSourceOutput := codepipeline.NewArtifact()\n\tcdkCodeSourceOutput := codepipeline.NewArtifact()\n\tcdkCodeBuildOutput := codepipeline.NewArtifact()\n\tappCodeBuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\t\tactionName: jsii.String(\"AppCodeDockerImageBuildAndPush\"),\n\t\tproject: appCodeDockerBuild,\n\t\tinput: appCodeSourceOutput,\n\t})\n\tcodepipeline.NewPipeline(this, jsii.String(\"CodePipelineDeployingEcsApplication\"), &pipelineProps{\n\t\tartifactBucket: s3.NewBucket(this, jsii.String(\"ArtifactBucket\"), &bucketProps{\n\t\t\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\t\t}),\n\t\tstages: []stageProps{\n\t\t\t&stageProps{\n\t\t\t\tstageName: jsii.String(\"Source\"),\n\t\t\t\tactions: []iAction{\n\t\t\t\t\t// this is the Action that takes the source of your application code\n\t\t\t\t\tcodepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"AppCodeSource\"),\n\t\t\t\t\t\trepository: codecommit.NewRepository(this, jsii.String(\"AppCodeSourceRepository\"), &repositoryProps{\n\t\t\t\t\t\t\trepositoryName: jsii.String(\"AppCodeSourceRepository\"),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toutput: appCodeSourceOutput,\n\t\t\t\t\t}),\n\t\t\t\t\t// this is the Action that takes the source of your CDK code\n\t\t\t\t\t// (which would probably include this Pipeline code as well)\n\t\t\t\t\tcodepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"CdkCodeSource\"),\n\t\t\t\t\t\trepository: codecommit.NewRepository(this, jsii.String(\"CdkCodeSourceRepository\"), &repositoryProps{\n\t\t\t\t\t\t\trepositoryName: jsii.String(\"CdkCodeSourceRepository\"),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toutput: cdkCodeSourceOutput,\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\t&stageProps{\n\t\t\t\tstageName: jsii.String(\"Build\"),\n\t\t\t\tactions: []*iAction{\n\t\t\t\t\tappCodeBuildAction,\n\t\t\t\t\tcodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"CdkCodeBuildAndSynth\"),\n\t\t\t\t\t\tproject: cdkCodeBuild,\n\t\t\t\t\t\tinput: cdkCodeSourceOutput,\n\t\t\t\t\t\toutputs: []artifact{\n\t\t\t\t\t\t\tcdkCodeBuildOutput,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\t&stageProps{\n\t\t\t\tstageName: jsii.String(\"Deploy\"),\n\t\t\t\tactions: []*iAction{\n\t\t\t\t\tcodepipeline_actions.NewCloudFormationCreateUpdateStackAction(&cloudFormationCreateUpdateStackActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"CFN_Deploy\"),\n\t\t\t\t\t\tstackName: jsii.String(\"SampleEcsStackDeployedFromCodePipeline\"),\n\t\t\t\t\t\t// this name has to be the same name as used below in the CDK code for the application Stack\n\t\t\t\t\t\ttemplatePath: cdkCodeBuildOutput.atPath(jsii.String(\"EcsStackDeployedInPipeline.template.json\")),\n\t\t\t\t\t\tadminPermissions: jsii.Boolean(true),\n\t\t\t\t\t\tparameterOverrides: map[string]interface{}{\n\t\t\t\t\t\t\t// read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n\t\t\t\t\t\t\t// and pass it as the CloudFormation Parameter for the tag\n\t\t\t\t\t\t\tthis.tagParameterContainerImage.tagParameterName: appCodeBuildAction.variable(jsii.String(\"imageTag\")),\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\treturn this\n}\n\napp := cdk.NewApp()\n\n// the CodePipeline Stack needs to be created first\npipelineStack := NewPipelineStack(app, jsii.String(\"aws-cdk-pipeline-ecs-separate-sources\"))\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nNewEcsAppStack(app, jsii.String(\"EcsStackDeployedInPipeline\"), &ecsAppStackProps{\n\timage: pipelineStack.tagParameterContainerImage,\n})",
          "version": "1"
        },
        "$": {
          "source": "\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1036
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction#variable",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.RepositoryBase#grantPullPush",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TagParameterContainerImage",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.App",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ *\n\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codepipeline_actions from '../lib';\n\n/**\n * This example demonstrates how to create a CodePipeline that deploys an ECS Service\n * from a different source repository than the source repository of your CDK code.\n * If your application code and your CDK code are in the same repository,\n * use the CDK Pipelines module instead of this method.\n */\n\n/// !show\n\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 43,
        "57": 1,
        "62": 1,
        "75": 186,
        "89": 3,
        "102": 2,
        "104": 13,
        "106": 2,
        "119": 1,
        "138": 2,
        "143": 2,
        "153": 3,
        "154": 1,
        "156": 6,
        "158": 1,
        "159": 1,
        "162": 2,
        "169": 6,
        "192": 10,
        "193": 34,
        "194": 42,
        "196": 8,
        "197": 23,
        "209": 1,
        "216": 3,
        "223": 2,
        "225": 10,
        "226": 8,
        "242": 10,
        "243": 10,
        "245": 2,
        "246": 1,
        "279": 3,
        "281": 62,
        "282": 1
      },
      "fqnsFingerprint": "dee802e9a68327b5407017bb6a4c69e0d3f6119bd7a189a47bf8edc403b88706"
    },
    "9da1719ff2364c2341c7fe8bebbc9534232b37ea9cc3ea75bf82554a55cbc5e5": {
      "translations": {
        "python": {
          "source": "source_output = codepipeline.Artifact()\ntarget_bucket = s3.Bucket(self, \"MyBucket\")\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ndeploy_action = codepipeline_actions.S3DeployAction(\n    action_name=\"S3Deploy\",\n    bucket=target_bucket,\n    input=source_output\n)\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[deploy_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput = new Artifact();\nBucket targetBucket = new Bucket(this, \"MyBucket\");\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nS3DeployAction deployAction = new S3DeployAction(new S3DeployActionProps {\n    ActionName = \"S3Deploy\",\n    Bucket = targetBucket,\n    Input = sourceOutput\n});\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] { deployAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput = new Artifact();\nBucket targetBucket = new Bucket(this, \"MyBucket\");\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nS3DeployAction deployAction = S3DeployAction.Builder.create()\n        .actionName(\"S3Deploy\")\n        .bucket(targetBucket)\n        .input(sourceOutput)\n        .build();\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(deployAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "sourceOutput := codepipeline.NewArtifact()\ntargetBucket := s3.NewBucket(this, jsii.String(\"MyBucket\"))\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\ndeployAction := codepipeline_actions.NewS3DeployAction(&s3DeployActionProps{\n\tactionName: jsii.String(\"S3Deploy\"),\n\tbucket: targetBucket,\n\tinput: sourceOutput,\n})\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tdeployAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst targetBucket = new s3.Bucket(this, 'MyBucket');\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst deployAction = new codepipeline_actions.S3DeployAction({\n  actionName: 'S3Deploy',\n  bucket: targetBucket,\n  input: sourceOutput,\n});\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1240
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst targetBucket = new s3.Bucket(this, 'MyBucket');\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst deployAction = new codepipeline_actions.S3DeployAction({\n  actionName: 'S3Deploy',\n  bucket: targetBucket,\n  input: sourceOutput,\n});\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 5
      },
      "fqnsFingerprint": "021d7c2d488bd055aacb59e2ca5e0985af785e3e71d9367d40aa92819e897571"
    },
    "ab36772e86f7ad33b002012742c4ecedbca9fc1bc93f533e692a3f6b8e1f81a5": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution: cloudfront.Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Create a Cloudfront Web Distribution\nimport cloudfront \"github.com/aws-samples/dummy/awscdkawscloudfront\"\nvar distribution distribution\n\n\n// Create the build project that will invalidate the cache\ninvalidateBuildProject := codebuild.NewPipelineProject(this, jsii.String(\"InvalidateProject\"), &pipelineProjectProps{\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\"commands\": []*string{\n\t\t\t\t\tjsii.String(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}),\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"CLOUDFRONT_ID\": &buildEnvironmentVariable{\n\t\t\t\"value\": distribution.distributionId,\n\t\t},\n\t},\n})\n\n// Add Cloudfront invalidation permissions to the project\ndistributionArn := fmt.Sprintf(\"arn:aws:cloudfront::%v:distribution/%v\", this.account, distribution.distributionId)\ninvalidateBuildProject.addToRolePolicy(iam.NewPolicyStatement(&policyStatementProps{\n\tresources: []*string{\n\t\tdistributionArn,\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"cloudfront:CreateInvalidation\"),\n\t},\n}))\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeployBucket := s3.NewBucket(this, jsii.String(\"DeployBucket\"))\ndeployInput := codepipeline.NewArtifact()\ncodepipeline.NewPipeline(this, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\t&stageProps{\n\t\t\tstageName: jsii.String(\"Deploy\"),\n\t\t\tactions: []iAction{\n\t\t\t\tcodepipeline_actions.NewS3DeployAction(&s3DeployActionProps{\n\t\t\t\t\tactionName: jsii.String(\"S3Deploy\"),\n\t\t\t\t\tbucket: deployBucket,\n\t\t\t\t\tinput: deployInput,\n\t\t\t\t\trunOrder: jsii.Number(1),\n\t\t\t\t}),\n\t\t\t\tcodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\t\t\t\t\tactionName: jsii.String(\"InvalidateCache\"),\n\t\t\t\t\tproject: invalidateBuildProject,\n\t\t\t\t\tinput: deployInput,\n\t\t\t\t\trunOrder: jsii.Number(2),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1262
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "7b790fa8c9be4bfecbc5f97c9549fb680a732aaea52c0dab8b8cc96f370c762f"
    },
    "1e83b0c67e6ba59cc45617fdbd130d88558289eabce0c97c1c44d684ab4e6d78": {
      "translations": {
        "python": {
          "source": "# Read the secrets from ParameterStore\nclient_id = SecretValue.secrets_manager(\"AlexaClientId\")\nclient_secret = SecretValue.secrets_manager(\"AlexaClientSecret\")\nrefresh_token = SecretValue.secrets_manager(\"AlexaRefreshToken\")\n\n# Add deploy action\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.AlexaSkillDeployAction(\n    action_name=\"DeploySkill\",\n    run_order=1,\n    input=source_output,\n    client_id=client_id.to_string(),\n    client_secret=client_secret,\n    refresh_token=refresh_token,\n    skill_id=\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Read the secrets from ParameterStore\nSecretValue clientId = SecretValue.SecretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.SecretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.SecretsManager(\"AlexaRefreshToken\");\n\n// Add deploy action\nArtifact sourceOutput = new Artifact();\nnew AlexaSkillDeployAction(new AlexaSkillDeployActionProps {\n    ActionName = \"DeploySkill\",\n    RunOrder = 1,\n    Input = sourceOutput,\n    ClientId = clientId.ToString(),\n    ClientSecret = clientSecret,\n    RefreshToken = refreshToken,\n    SkillId = \"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Read the secrets from ParameterStore\nSecretValue clientId = SecretValue.secretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.secretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.secretsManager(\"AlexaRefreshToken\");\n\n// Add deploy action\nArtifact sourceOutput = new Artifact();\nAlexaSkillDeployAction.Builder.create()\n        .actionName(\"DeploySkill\")\n        .runOrder(1)\n        .input(sourceOutput)\n        .clientId(clientId.toString())\n        .clientSecret(clientSecret)\n        .refreshToken(refreshToken)\n        .skillId(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Read the secrets from ParameterStore\nclientId := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientId\"))\nclientSecret := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientSecret\"))\nrefreshToken := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaRefreshToken\"))\n\n// Add deploy action\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewAlexaSkillDeployAction(&alexaSkillDeployActionProps{\n\tactionName: jsii.String(\"DeploySkill\"),\n\trunOrder: jsii.Number(1),\n\tinput: sourceOutput,\n\tclientId: clientId.toString(),\n\tclientSecret: clientSecret,\n\trefreshToken: refreshToken,\n\tskillId: jsii.String(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Read the secrets from ParameterStore\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\n\n// Add deploy action\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1325
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployAction",
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Read the secrets from ParameterStore\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\n\n// Add deploy action\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 26,
        "193": 1,
        "194": 6,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "20276f8322746fef6ce0f36c4fa8eea65cd4c14f3ecce5587eb3e15678f7609e"
    },
    "83e1915277473a00627c8d3c9577ad41e3036ecaac603d2e2ad9a98b54060b56": {
      "translations": {
        "python": {
          "source": "# Deploy some CFN change set and store output\nexecute_output = codepipeline.Artifact(\"CloudFormation\")\nexecute_change_set_action = codepipeline_actions.CloudFormationExecuteChangeSetAction(\n    action_name=\"ExecuteChangesTest\",\n    run_order=2,\n    stack_name=\"MyStack\",\n    change_set_name=\"MyChangeSet\",\n    output_file_name=\"overrides.json\",\n    output=execute_output\n)\n\n# Provide CFN output as manifest overrides\nclient_id = SecretValue.secrets_manager(\"AlexaClientId\")\nclient_secret = SecretValue.secrets_manager(\"AlexaClientSecret\")\nrefresh_token = SecretValue.secrets_manager(\"AlexaRefreshToken\")\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.AlexaSkillDeployAction(\n    action_name=\"DeploySkill\",\n    run_order=1,\n    input=source_output,\n    parameter_overrides_artifact=execute_output,\n    client_id=client_id.to_string(),\n    client_secret=client_secret,\n    refresh_token=refresh_token,\n    skill_id=\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Deploy some CFN change set and store output\nArtifact executeOutput = new Artifact(\"CloudFormation\");\nCloudFormationExecuteChangeSetAction executeChangeSetAction = new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n    ActionName = \"ExecuteChangesTest\",\n    RunOrder = 2,\n    StackName = \"MyStack\",\n    ChangeSetName = \"MyChangeSet\",\n    OutputFileName = \"overrides.json\",\n    Output = executeOutput\n});\n\n// Provide CFN output as manifest overrides\nSecretValue clientId = SecretValue.SecretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.SecretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.SecretsManager(\"AlexaRefreshToken\");\nArtifact sourceOutput = new Artifact();\nnew AlexaSkillDeployAction(new AlexaSkillDeployActionProps {\n    ActionName = \"DeploySkill\",\n    RunOrder = 1,\n    Input = sourceOutput,\n    ParameterOverridesArtifact = executeOutput,\n    ClientId = clientId.ToString(),\n    ClientSecret = clientSecret,\n    RefreshToken = refreshToken,\n    SkillId = \"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Deploy some CFN change set and store output\nArtifact executeOutput = new Artifact(\"CloudFormation\");\nCloudFormationExecuteChangeSetAction executeChangeSetAction = CloudFormationExecuteChangeSetAction.Builder.create()\n        .actionName(\"ExecuteChangesTest\")\n        .runOrder(2)\n        .stackName(\"MyStack\")\n        .changeSetName(\"MyChangeSet\")\n        .outputFileName(\"overrides.json\")\n        .output(executeOutput)\n        .build();\n\n// Provide CFN output as manifest overrides\nSecretValue clientId = SecretValue.secretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.secretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.secretsManager(\"AlexaRefreshToken\");\nArtifact sourceOutput = new Artifact();\nAlexaSkillDeployAction.Builder.create()\n        .actionName(\"DeploySkill\")\n        .runOrder(1)\n        .input(sourceOutput)\n        .parameterOverridesArtifact(executeOutput)\n        .clientId(clientId.toString())\n        .clientSecret(clientSecret)\n        .refreshToken(refreshToken)\n        .skillId(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Deploy some CFN change set and store output\nexecuteOutput := codepipeline.NewArtifact(jsii.String(\"CloudFormation\"))\nexecuteChangeSetAction := codepipeline_actions.NewCloudFormationExecuteChangeSetAction(&cloudFormationExecuteChangeSetActionProps{\n\tactionName: jsii.String(\"ExecuteChangesTest\"),\n\trunOrder: jsii.Number(2),\n\tstackName: jsii.String(\"MyStack\"),\n\tchangeSetName: jsii.String(\"MyChangeSet\"),\n\toutputFileName: jsii.String(\"overrides.json\"),\n\toutput: executeOutput,\n})\n\n// Provide CFN output as manifest overrides\nclientId := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientId\"))\nclientSecret := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientSecret\"))\nrefreshToken := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaRefreshToken\"))\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewAlexaSkillDeployAction(&alexaSkillDeployActionProps{\n\tactionName: jsii.String(\"DeploySkill\"),\n\trunOrder: jsii.Number(1),\n\tinput: sourceOutput,\n\tparameterOverridesArtifact: executeOutput,\n\tclientId: clientId.toString(),\n\tclientSecret: clientSecret,\n\trefreshToken: refreshToken,\n\tskillId: jsii.String(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Deploy some CFN change set and store output\nconst executeOutput = new codepipeline.Artifact('CloudFormation');\nconst executeChangeSetAction = new codepipeline_actions.CloudFormationExecuteChangeSetAction({\n  actionName: 'ExecuteChangesTest',\n  runOrder: 2,\n  stackName: 'MyStack',\n  changeSetName: 'MyChangeSet',\n  outputFileName: 'overrides.json',\n  output: executeOutput,\n});\n\n// Provide CFN output as manifest overrides\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  parameterOverridesArtifact: executeOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1346
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployAction",
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Deploy some CFN change set and store output\nconst executeOutput = new codepipeline.Artifact('CloudFormation');\nconst executeChangeSetAction = new codepipeline_actions.CloudFormationExecuteChangeSetAction({\n  actionName: 'ExecuteChangesTest',\n  runOrder: 2,\n  stackName: 'MyStack',\n  changeSetName: 'MyChangeSet',\n  outputFileName: 'overrides.json',\n  output: executeOutput,\n});\n\n// Provide CFN output as manifest overrides\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  parameterOverridesArtifact: executeOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 41,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 4,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 14
      },
      "fqnsFingerprint": "9fe856b738e455a83f424e142a8feaf93a661cae26ca79c0b06d206bf145752a"
    },
    "22b8be7ceea7547aed501239aa74464a3d801d17e19d7bdad54a0960d0d081e0": {
      "translations": {
        "python": {
          "source": "cdk_build_output = codepipeline.Artifact()\nservice_catalog_deploy_action = codepipeline_actions.ServiceCatalogDeployActionBeta1(\n    action_name=\"ServiceCatalogDeploy\",\n    template_path=cdk_build_output.at_path(\"Sample.template.json\"),\n    product_version_name=\"Version - \" + Date.now.to_string,\n    product_version_description=\"This is a version from the pipeline with a new description.\",\n    product_id=\"prod-XXXXXXXX\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact cdkBuildOutput = new Artifact();\nServiceCatalogDeployActionBeta1 serviceCatalogDeployAction = new ServiceCatalogDeployActionBeta1(new ServiceCatalogDeployActionBeta1Props {\n    ActionName = \"ServiceCatalogDeploy\",\n    TemplatePath = cdkBuildOutput.AtPath(\"Sample.template.json\"),\n    ProductVersionName = \"Version - \" + Date.Now.ToString,\n    ProductVersionDescription = \"This is a version from the pipeline with a new description.\",\n    ProductId = \"prod-XXXXXXXX\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact cdkBuildOutput = new Artifact();\nServiceCatalogDeployActionBeta1 serviceCatalogDeployAction = ServiceCatalogDeployActionBeta1.Builder.create()\n        .actionName(\"ServiceCatalogDeploy\")\n        .templatePath(cdkBuildOutput.atPath(\"Sample.template.json\"))\n        .productVersionName(\"Version - \" + Date.getNow().getToString())\n        .productVersionDescription(\"This is a version from the pipeline with a new description.\")\n        .productId(\"prod-XXXXXXXX\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cdkBuildOutput := codepipeline.NewArtifact()\nserviceCatalogDeployAction := codepipeline_actions.NewServiceCatalogDeployActionBeta1(&serviceCatalogDeployActionBeta1Props{\n\tactionName: jsii.String(\"ServiceCatalogDeploy\"),\n\ttemplatePath: cdkBuildOutput.atPath(jsii.String(\"Sample.template.json\")),\n\tproductVersionName: jsii.String(\"Version - \" + date.now.toString),\n\tproductVersionDescription: jsii.String(\"This is a version from the pipeline with a new description.\"),\n\tproductId: jsii.String(\"prod-XXXXXXXX\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cdkBuildOutput = new codepipeline.Artifact();\nconst serviceCatalogDeployAction = new codepipeline_actions.ServiceCatalogDeployActionBeta1({\n  actionName: 'ServiceCatalogDeploy',\n  templatePath: cdkBuildOutput.atPath(\"Sample.template.json\"),\n  productVersionName: \"Version - \" + Date.now.toString,\n  productVersionDescription: \"This is a version from the pipeline with a new description.\",\n  productId: \"prod-XXXXXXXX\",\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1379
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1",
        "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1Props",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst serviceCatalogDeployAction = new codepipeline_actions.ServiceCatalogDeployActionBeta1({\n  actionName: 'ServiceCatalogDeploy',\n  templatePath: cdkBuildOutput.atPath(\"Sample.template.json\"),\n  productVersionName: \"Version - \" + Date.now.toString,\n  productVersionDescription: \"This is a version from the pipeline with a new description.\",\n  productId: \"prod-XXXXXXXX\",\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "39": 1,
        "75": 16,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "209": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "51c7332e46fc494576e4172833f97ba9a3684efcfad6d33af5fad2fcc0204dc2"
    },
    "371a34b0ab09fe87eaa8a047645348db3aa5fd23e88265a20acf4959eb17e215": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_sns as sns\n\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\napprove_stage = pipeline.add_stage(stage_name=\"Approve\")\nmanual_approval_action = codepipeline_actions.ManualApprovalAction(\n    action_name=\"Approve\",\n    notification_topic=sns.Topic(self, \"Topic\"),  # optional\n    notify_emails=[\"some_email@example.com\"\n    ],  # optional\n    additional_information=\"additional info\"\n)\napprove_stage.add_action(manual_approval_action)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SNS;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.AddStage(new StageOptions { StageName = \"Approve\" });\nManualApprovalAction manualApprovalAction = new ManualApprovalAction(new ManualApprovalActionProps {\n    ActionName = \"Approve\",\n    NotificationTopic = new Topic(this, \"Topic\"),  // optional\n    NotifyEmails = new [] { \"some_email@example.com\" },  // optional\n    AdditionalInformation = \"additional info\"\n});\napproveStage.AddAction(manualApprovalAction);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.sns.*;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.addStage(StageOptions.builder().stageName(\"Approve\").build());\nManualApprovalAction manualApprovalAction = ManualApprovalAction.Builder.create()\n        .actionName(\"Approve\")\n        .notificationTopic(new Topic(this, \"Topic\")) // optional\n        .notifyEmails(List.of(\"some_email@example.com\")) // optional\n        .additionalInformation(\"additional info\")\n        .build();\napproveStage.addAction(manualApprovalAction);",
          "version": "1"
        },
        "go": {
          "source": "import sns \"github.com/aws-samples/dummy/awscdkawssns\"\n\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\napproveStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Approve\"),\n})\nmanualApprovalAction := codepipeline_actions.NewManualApprovalAction(&manualApprovalActionProps{\n\tactionName: jsii.String(\"Approve\"),\n\tnotificationTopic: sns.NewTopic(this, jsii.String(\"Topic\")),\n\t // optional\n\tnotifyEmails: []*string{\n\t\tjsii.String(\"some_email@example.com\"),\n\t},\n\t // optional\n\tadditionalInformation: jsii.String(\"additional info\"),\n})\napproveStage.addAction(manualApprovalAction)",
          "version": "1"
        },
        "$": {
          "source": "import * as sns from '@aws-cdk/aws-sns';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n  notificationTopic: new sns.Topic(this, 'Topic'), // optional\n  notifyEmails: [\n    'some_email@example.com',\n  ], // optional\n  additionalInformation: 'additional info', // optional\n});\napproveStage.addAction(manualApprovalAction);\n// `manualApprovalAction.notificationTopic` can be used to access the Topic\n// after the Action has been added to a Pipeline",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1396
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as sns from '@aws-cdk/aws-sns';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n  notificationTopic: new sns.Topic(this, 'Topic'), // optional\n  notifyEmails: [\n    'some_email@example.com',\n  ], // optional\n  additionalInformation: 'additional info', // optional\n});\napproveStage.addAction(manualApprovalAction);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 20,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "0badb0687bc6b32ded5232a903af03e00d5210a5f7abf9021e58989cbd585a45"
    },
    "48ec44a64e0ba5b9f247e5b86585200574e21a0a8ea1aaad8acc44e71df58bbc": {
      "translations": {
        "python": {
          "source": "pipeline = codepipeline.Pipeline(self, \"MyPipeline\")\napprove_stage = pipeline.add_stage(stage_name=\"Approve\")\nmanual_approval_action = codepipeline_actions.ManualApprovalAction(\n    action_name=\"Approve\"\n)\napprove_stage.add_action(manual_approval_action)\n\nrole = iam.Role.from_role_arn(self, \"Admin\", Arn.format(ArnComponents(service=\"iam\", resource=\"role\", resource_name=\"Admin\"), self))\nmanual_approval_action.grant_manual_approval(role)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.AddStage(new StageOptions { StageName = \"Approve\" });\nManualApprovalAction manualApprovalAction = new ManualApprovalAction(new ManualApprovalActionProps {\n    ActionName = \"Approve\"\n});\napproveStage.AddAction(manualApprovalAction);\n\nIRole role = Role.FromRoleArn(this, \"Admin\", Arn.Format(new ArnComponents { Service = \"iam\", Resource = \"role\", ResourceName = \"Admin\" }, this));\nmanualApprovalAction.GrantManualApproval(role);",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.addStage(StageOptions.builder().stageName(\"Approve\").build());\nManualApprovalAction manualApprovalAction = ManualApprovalAction.Builder.create()\n        .actionName(\"Approve\")\n        .build();\napproveStage.addAction(manualApprovalAction);\n\nIRole role = Role.fromRoleArn(this, \"Admin\", Arn.format(ArnComponents.builder().service(\"iam\").resource(\"role\").resourceName(\"Admin\").build(), this));\nmanualApprovalAction.grantManualApproval(role);",
          "version": "1"
        },
        "go": {
          "source": "pipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\napproveStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Approve\"),\n})\nmanualApprovalAction := codepipeline_actions.NewManualApprovalAction(&manualApprovalActionProps{\n\tactionName: jsii.String(\"Approve\"),\n})\napproveStage.addAction(manualApprovalAction)\n\nrole := iam.role.fromRoleArn(this, jsii.String(\"Admin\"), awscdkcore.Arn.format(&arnComponents{\n\tservice: jsii.String(\"iam\"),\n\tresource: jsii.String(\"role\"),\n\tresourceName: jsii.String(\"Admin\"),\n}, this))\nmanualApprovalAction.grantManualApproval(role)",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n});\napproveStage.addAction(manualApprovalAction);\n\nconst role = iam.Role.fromRoleArn(this, 'Admin', Arn.format({ service: 'iam', resource: 'role', resourceName: 'Admin' }, this));\nmanualApprovalAction.grantManualApproval(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1422
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction#grantManualApproval",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/core.Arn#format",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n});\napproveStage.addAction(manualApprovalAction);\n\nconst role = iam.Role.fromRoleArn(this, 'Admin', Arn.format({ service: 'iam', resource: 'role', resourceName: 'Admin' }, this));\nmanualApprovalAction.grantManualApproval(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 26,
        "104": 3,
        "193": 3,
        "194": 8,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "b24982d9e02a1824fbe012feaa2f1affb2a1fbc78f7e777978a3d20444b1efef"
    },
    "21fe142ace522ad0ab0a4f060ba1d753ede21589c100680f809d1e4dc3334927": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nlambda_action = codepipeline_actions.LambdaInvokeAction(\n    action_name=\"Lambda\",\n    lambda_=fn\n)\npipeline.add_stage(\n    stage_name=\"Lambda\",\n    actions=[lambda_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nLambdaInvokeAction lambdaAction = new LambdaInvokeAction(new LambdaInvokeActionProps {\n    ActionName = \"Lambda\",\n    Lambda = fn\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Lambda\",\n    Actions = new [] { lambdaAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nLambdaInvokeAction lambdaAction = LambdaInvokeAction.Builder.create()\n        .actionName(\"Lambda\")\n        .lambda(fn)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Lambda\")\n        .actions(List.of(lambdaAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nlambdaAction := codepipeline_actions.NewLambdaInvokeAction(&lambdaInvokeActionProps{\n\tactionName: jsii.String(\"Lambda\"),\n\tlambda: fn,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Lambda\"),\n\tactions: []iAction{\n\t\tlambdaAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: fn,\n});\npipeline.addStage({\n  stageName: 'Lambda',\n  actions: [lambdaAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1438
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: fn,\n});\npipeline.addStage({\n  stageName: 'Lambda',\n  actions: [lambdaAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3456f33786f17ddadc37800d8d3bc3ed253fb6ad8cfeab4cb500f9900b7790f0"
    },
    "b57fb4f051ff50f372827a0dcda80455e9219a5ed619475b2821d23e5269aea3": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nsource_output = codepipeline.Artifact()\nbuild_output = codepipeline.Artifact()\nlambda_action = codepipeline_actions.LambdaInvokeAction(\n    action_name=\"Lambda\",\n    inputs=[source_output, build_output\n    ],\n    outputs=[\n        codepipeline.Artifact(\"Out1\"),\n        codepipeline.Artifact(\"Out2\")\n    ],\n    lambda_=fn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nArtifact sourceOutput = new Artifact();\nArtifact buildOutput = new Artifact();\nLambdaInvokeAction lambdaAction = new LambdaInvokeAction(new LambdaInvokeActionProps {\n    ActionName = \"Lambda\",\n    Inputs = new [] { sourceOutput, buildOutput },\n    Outputs = new [] {\n        new Artifact(\"Out1\"),\n        new Artifact(\"Out2\") },\n    Lambda = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nArtifact sourceOutput = new Artifact();\nArtifact buildOutput = new Artifact();\nLambdaInvokeAction lambdaAction = LambdaInvokeAction.Builder.create()\n        .actionName(\"Lambda\")\n        .inputs(List.of(sourceOutput, buildOutput))\n        .outputs(List.of(\n            new Artifact(\"Out1\"),\n            new Artifact(\"Out2\")))\n        .lambda(fn)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nsourceOutput := codepipeline.NewArtifact()\nbuildOutput := codepipeline.NewArtifact()\nlambdaAction := codepipeline_actions.NewLambdaInvokeAction(&lambdaInvokeActionProps{\n\tactionName: jsii.String(\"Lambda\"),\n\tinputs: []artifact{\n\t\tsourceOutput,\n\t\tbuildOutput,\n\t},\n\toutputs: []*artifact{\n\t\tcodepipeline.NewArtifact(jsii.String(\"Out1\")),\n\t\tcodepipeline.NewArtifact(jsii.String(\"Out2\")),\n\t},\n\tlambda: fn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst sourceOutput = new codepipeline.Artifact();\nconst buildOutput = new codepipeline.Artifact();\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  inputs: [\n    sourceOutput,\n    buildOutput,\n  ],\n  outputs: [\n    new codepipeline.Artifact('Out1'),\n    new codepipeline.Artifact('Out2'),\n  ],\n  lambda: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1454
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst buildOutput = new codepipeline.Artifact();\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  inputs: [\n    sourceOutput,\n    buildOutput,\n  ],\n  outputs: [\n    new codepipeline.Artifact('Out1'),\n    new codepipeline.Artifact('Out2'),\n  ],\n  lambda: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 5,
        "197": 5,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8f375e4238653783ad7c5f2d7ffa0b37e5e602d06fbf997824b0b42dd1a87b08"
    },
    "da4db54fbab98eea7a5683c36c58ecf5c829259671c402ade6d7eb5881382e50": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nlambda_action = codepipeline_actions.LambdaInvokeAction(\n    action_name=\"Lambda\",\n    lambda_=fn,\n    user_parameters={\n        \"foo\": \"bar\",\n        \"baz\": \"qux\"\n    },\n    # OR\n    user_parameters_string=\"my-parameter-string\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nLambdaInvokeAction lambdaAction = new LambdaInvokeAction(new LambdaInvokeActionProps {\n    ActionName = \"Lambda\",\n    Lambda = fn,\n    UserParameters = new Dictionary<string, object> {\n        { \"foo\", \"bar\" },\n        { \"baz\", \"qux\" }\n    },\n    // OR\n    UserParametersString = \"my-parameter-string\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nLambdaInvokeAction lambdaAction = LambdaInvokeAction.Builder.create()\n        .actionName(\"Lambda\")\n        .lambda(fn)\n        .userParameters(Map.of(\n                \"foo\", \"bar\",\n                \"baz\", \"qux\"))\n        // OR\n        .userParametersString(\"my-parameter-string\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nlambdaAction := codepipeline_actions.NewLambdaInvokeAction(&lambdaInvokeActionProps{\n\tactionName: jsii.String(\"Lambda\"),\n\tlambda: fn,\n\tuserParameters: map[string]interface{}{\n\t\t\"foo\": jsii.String(\"bar\"),\n\t\t\"baz\": jsii.String(\"qux\"),\n\t},\n\t// OR\n\tuserParametersString: jsii.String(\"my-parameter-string\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: fn,\n  userParameters: {\n    foo: 'bar',\n    baz: 'qux',\n  },\n  // OR\n  userParametersString: 'my-parameter-string',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1475
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: fn,\n  userParameters: {\n    foo: 'bar',\n    baz: 'qux',\n  },\n  // OR\n  userParametersString: 'my-parameter-string',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 16,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "6465f1e0ebc556e31235f372ae4fe7cf62349092d47a56449ba35922686646e6"
    },
    "398c95b1357f09597323096a36b63f097b0a1cfb139d3bc22379e8d953855dcf": {
      "translations": {
        "python": {
          "source": "# later:\n# project: codebuild.PipelineProject\nlambda_invoke_action = codepipeline_actions.LambdaInvokeAction(\n    action_name=\"Lambda\",\n    lambda_=lambda_.Function(self, \"Func\",\n        runtime=lambda_.Runtime.NODEJS_14_X,\n        handler=\"index.handler\",\n        code=lambda_.Code.from_inline(\"\"\"\n                    const AWS = require('aws-sdk');\n\n                    exports.handler = async function(event, context) {\n                        const codepipeline = new AWS.CodePipeline();\n                        await codepipeline.putJobSuccessResult({\n                            jobId: event['CodePipeline.job'].id,\n                            outputVariables: {\n                                MY_VAR: \"some value\",\n                            },\n                        }).promise();\n                    }\n                \"\"\")\n    ),\n    variables_namespace=\"MyNamespace\"\n)\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"MyVar\": codebuild.BuildEnvironmentVariable(\n            value=lambda_invoke_action.variable(\"MY_VAR\")\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// later:\nPipelineProject project;\nLambdaInvokeAction lambdaInvokeAction = new LambdaInvokeAction(new LambdaInvokeActionProps {\n    ActionName = \"Lambda\",\n    Lambda = new Function(this, \"Func\", new FunctionProps {\n        Runtime = Runtime.NODEJS_14_X,\n        Handler = \"index.handler\",\n        Code = Code.FromInline(@\"\n                const AWS = require('aws-sdk');\n\n                exports.handler = async function(event, context) {\n                    const codepipeline = new AWS.CodePipeline();\n                    await codepipeline.putJobSuccessResult({\n                        jobId: event['CodePipeline.job'].id,\n                        outputVariables: {\n                            MY_VAR: \"\"some value\"\",\n                        },\n                    }).promise();\n                }\n            \")\n    }),\n    VariablesNamespace = \"MyNamespace\"\n});\nArtifact sourceOutput = new Artifact();\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"MyVar\", new BuildEnvironmentVariable {\n            Value = lambdaInvokeAction.Variable(\"MY_VAR\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// later:\nPipelineProject project;\nLambdaInvokeAction lambdaInvokeAction = LambdaInvokeAction.Builder.create()\n        .actionName(\"Lambda\")\n        .lambda(Function.Builder.create(this, \"Func\")\n                .runtime(Runtime.NODEJS_14_X)\n                .handler(\"index.handler\")\n                .code(Code.fromInline(\"\\n        const AWS = require('aws-sdk');\\n\\n        exports.handler = async function(event, context) {\\n            const codepipeline = new AWS.CodePipeline();\\n            await codepipeline.putJobSuccessResult({\\n                jobId: event['CodePipeline.job'].id,\\n                outputVariables: {\\n                    MY_VAR: \\\"some value\\\",\\n                },\\n            }).promise();\\n        }\\n    \"))\n                .build())\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nArtifact sourceOutput = new Artifact();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"MyVar\", BuildEnvironmentVariable.builder()\n                        .value(lambdaInvokeAction.variable(\"MY_VAR\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// later:\nvar project pipelineProject\nlambdaInvokeAction := codepipeline_actions.NewLambdaInvokeAction(&lambdaInvokeActionProps{\n\tactionName: jsii.String(\"Lambda\"),\n\tlambda: lambda.NewFunction(this, jsii.String(\"Func\"), &functionProps{\n\t\truntime: lambda.runtime_NODEJS_14_X(),\n\t\thandler: jsii.String(\"index.handler\"),\n\t\tcode: lambda.code.fromInline(jsii.String(\"\\n        const AWS = require('aws-sdk');\\n\\n        exports.handler = async function(event, context) {\\n            const codepipeline = new AWS.CodePipeline();\\n            await codepipeline.putJobSuccessResult({\\n                jobId: event['CodePipeline.job'].id,\\n                outputVariables: {\\n                    MY_VAR: \\\"some value\\\",\\n                },\\n            }).promise();\\n        }\\n    \")),\n\t}),\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"MyVar\": &buildEnvironmentVariable{\n\t\t\t\"value\": lambdaInvokeAction.variable(jsii.String(\"MY_VAR\")),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const lambdaInvokeAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: new lambda.Function(this, 'Func', {\n    runtime: lambda.Runtime.NODEJS_14_X,\n    handler: 'index.handler',\n    code: lambda.Code.fromInline(`\n        const AWS = require('aws-sdk');\n\n        exports.handler = async function(event, context) {\n            const codepipeline = new AWS.CodePipeline();\n            await codepipeline.putJobSuccessResult({\n                jobId: event['CodePipeline.job'].id,\n                outputVariables: {\n                    MY_VAR: \"some value\",\n                },\n            }).promise();\n        }\n    `),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: lambdaInvokeAction.variable('MY_VAR'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1497
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction#variable",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaInvokeAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: new lambda.Function(this, 'Func', {\n    runtime: lambda.Runtime.NODEJS_14_X,\n    handler: 'index.handler',\n    code: lambda.Code.fromInline(`\n        const AWS = require('aws-sdk');\n\n        exports.handler = async function(event, context) {\n            const codepipeline = new AWS.CodePipeline();\n            await codepipeline.putJobSuccessResult({\n                jobId: event['CodePipeline.job'].id,\n                outputVariables: {\n                    MY_VAR: \"some value\",\n                },\n            }).promise();\n        }\n    `),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: lambdaInvokeAction.variable('MY_VAR'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "14": 1,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "36d2b67b186e507711a75a348555d6e637486e1af9e20d61d3da9087a2162c19"
    },
    "9a5f20697a5d0dda8ce362cb736cb7cf7f6681543a8b634fdb791d72cb90f9c5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.literal({\"IsHelloWorldExample\": True})\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.Literal(new Dictionary<string, boolean> { { \"IsHelloWorldExample\", true } })\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.literal(Map.of(\"IsHelloWorldExample\", true)))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nstartState := stepfunctions.NewPass(this, jsii.String(\"StartState\"))\nsimpleStateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"SimpleStateMachine\"), &stateMachineProps{\n\tdefinition: startState,\n})\nstepFunctionAction := codepipeline_actions.NewStepFunctionInvokeAction(&stepFunctionsInvokeActionProps{\n\tactionName: jsii.String(\"Invoke\"),\n\tstateMachine: simpleStateMachine,\n\tstateMachineInput: codepipeline_actions.stateMachineInput.literal(map[string]*bool{\n\t\t\"IsHelloWorldExample\": jsii.Boolean(true),\n\t}),\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"StepFunctions\"),\n\tactions: []iAction{\n\t\tstepFunctionAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1542
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#literal",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "42c8d9be56e3dbd0ef44dc62fa656e4c2af979c914e9e9dbf84db499ca8638b7"
    },
    "4cba116fb8308ee47908531fd75f3c99cc4de3602cea45d4d072347f6beb7587": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ninput_artifact = codepipeline.Artifact()\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.file_path(input_artifact.at_path(\"assets/input.json\"))\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.FilePath(inputArtifact.AtPath(\"assets/input.json\"))\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.filePath(inputArtifact.atPath(\"assets/input.json\")))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\ninputArtifact := codepipeline.NewArtifact()\nstartState := stepfunctions.NewPass(this, jsii.String(\"StartState\"))\nsimpleStateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"SimpleStateMachine\"), &stateMachineProps{\n\tdefinition: startState,\n})\nstepFunctionAction := codepipeline_actions.NewStepFunctionInvokeAction(&stepFunctionsInvokeActionProps{\n\tactionName: jsii.String(\"Invoke\"),\n\tstateMachine: simpleStateMachine,\n\tstateMachineInput: codepipeline_actions.stateMachineInput.filePath(inputArtifact.atPath(jsii.String(\"assets/input.json\"))),\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"StepFunctions\"),\n\tactions: []iAction{\n\t\tstepFunctionAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline-actions"
        },
        "field": {
          "field": "markdown",
          "line": 1563
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#filePath",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 3,
        "197": 5,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "35d13d74be0627f8ffe708351c2b88638ac05c8e9bb1a695e737445bf6bb7ec4"
    },
    "49703625d846a1aeca04180a51bb0f8c39c92419329c5edc2400a54886f7cd72": {
      "translations": {
        "python": {
          "source": "# Read the secrets from ParameterStore\nclient_id = SecretValue.secrets_manager(\"AlexaClientId\")\nclient_secret = SecretValue.secrets_manager(\"AlexaClientSecret\")\nrefresh_token = SecretValue.secrets_manager(\"AlexaRefreshToken\")\n\n# Add deploy action\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.AlexaSkillDeployAction(\n    action_name=\"DeploySkill\",\n    run_order=1,\n    input=source_output,\n    client_id=client_id.to_string(),\n    client_secret=client_secret,\n    refresh_token=refresh_token,\n    skill_id=\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Read the secrets from ParameterStore\nSecretValue clientId = SecretValue.SecretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.SecretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.SecretsManager(\"AlexaRefreshToken\");\n\n// Add deploy action\nArtifact sourceOutput = new Artifact();\nnew AlexaSkillDeployAction(new AlexaSkillDeployActionProps {\n    ActionName = \"DeploySkill\",\n    RunOrder = 1,\n    Input = sourceOutput,\n    ClientId = clientId.ToString(),\n    ClientSecret = clientSecret,\n    RefreshToken = refreshToken,\n    SkillId = \"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Read the secrets from ParameterStore\nSecretValue clientId = SecretValue.secretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.secretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.secretsManager(\"AlexaRefreshToken\");\n\n// Add deploy action\nArtifact sourceOutput = new Artifact();\nAlexaSkillDeployAction.Builder.create()\n        .actionName(\"DeploySkill\")\n        .runOrder(1)\n        .input(sourceOutput)\n        .clientId(clientId.toString())\n        .clientSecret(clientSecret)\n        .refreshToken(refreshToken)\n        .skillId(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Read the secrets from ParameterStore\nclientId := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientId\"))\nclientSecret := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientSecret\"))\nrefreshToken := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaRefreshToken\"))\n\n// Add deploy action\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewAlexaSkillDeployAction(&alexaSkillDeployActionProps{\n\tactionName: jsii.String(\"DeploySkill\"),\n\trunOrder: jsii.Number(1),\n\tinput: sourceOutput,\n\tclientId: clientId.toString(),\n\tclientSecret: clientSecret,\n\trefreshToken: refreshToken,\n\tskillId: jsii.String(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Read the secrets from ParameterStore\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\n\n// Add deploy action\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployAction",
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Read the secrets from ParameterStore\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\n\n// Add deploy action\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 26,
        "193": 1,
        "194": 6,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "20276f8322746fef6ce0f36c4fa8eea65cd4c14f3ecce5587eb3e15678f7609e"
    },
    "dd53ca0573d6bb35a62a72ddee6ce63261d649682e2e8d92cdacff3b915e4502": {
      "translations": {
        "python": {
          "source": "# Read the secrets from ParameterStore\nclient_id = SecretValue.secrets_manager(\"AlexaClientId\")\nclient_secret = SecretValue.secrets_manager(\"AlexaClientSecret\")\nrefresh_token = SecretValue.secrets_manager(\"AlexaRefreshToken\")\n\n# Add deploy action\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.AlexaSkillDeployAction(\n    action_name=\"DeploySkill\",\n    run_order=1,\n    input=source_output,\n    client_id=client_id.to_string(),\n    client_secret=client_secret,\n    refresh_token=refresh_token,\n    skill_id=\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Read the secrets from ParameterStore\nSecretValue clientId = SecretValue.SecretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.SecretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.SecretsManager(\"AlexaRefreshToken\");\n\n// Add deploy action\nArtifact sourceOutput = new Artifact();\nnew AlexaSkillDeployAction(new AlexaSkillDeployActionProps {\n    ActionName = \"DeploySkill\",\n    RunOrder = 1,\n    Input = sourceOutput,\n    ClientId = clientId.ToString(),\n    ClientSecret = clientSecret,\n    RefreshToken = refreshToken,\n    SkillId = \"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Read the secrets from ParameterStore\nSecretValue clientId = SecretValue.secretsManager(\"AlexaClientId\");\nSecretValue clientSecret = SecretValue.secretsManager(\"AlexaClientSecret\");\nSecretValue refreshToken = SecretValue.secretsManager(\"AlexaRefreshToken\");\n\n// Add deploy action\nArtifact sourceOutput = new Artifact();\nAlexaSkillDeployAction.Builder.create()\n        .actionName(\"DeploySkill\")\n        .runOrder(1)\n        .input(sourceOutput)\n        .clientId(clientId.toString())\n        .clientSecret(clientSecret)\n        .refreshToken(refreshToken)\n        .skillId(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Read the secrets from ParameterStore\nclientId := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientId\"))\nclientSecret := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaClientSecret\"))\nrefreshToken := awscdkcore.SecretValue.secretsManager(jsii.String(\"AlexaRefreshToken\"))\n\n// Add deploy action\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewAlexaSkillDeployAction(&alexaSkillDeployActionProps{\n\tactionName: jsii.String(\"DeploySkill\"),\n\trunOrder: jsii.Number(1),\n\tinput: sourceOutput,\n\tclientId: clientId.toString(),\n\tclientSecret: clientSecret,\n\trefreshToken: refreshToken,\n\tskillId: jsii.String(\"amzn1.ask.skill.12345678-1234-1234-1234-123456789012\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Read the secrets from ParameterStore\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\n\n// Add deploy action\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployAction",
        "@aws-cdk/aws-codepipeline-actions.AlexaSkillDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Read the secrets from ParameterStore\nconst clientId = SecretValue.secretsManager('AlexaClientId');\nconst clientSecret = SecretValue.secretsManager('AlexaClientSecret');\nconst refreshToken = SecretValue.secretsManager('AlexaRefreshToken');\n\n// Add deploy action\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.AlexaSkillDeployAction({\n  actionName: 'DeploySkill',\n  runOrder: 1,\n  input: sourceOutput,\n  clientId: clientId.toString(),\n  clientSecret: clientSecret,\n  refreshToken: refreshToken,\n  skillId: 'amzn1.ask.skill.12345678-1234-1234-1234-123456789012',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 26,
        "193": 1,
        "194": 6,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "20276f8322746fef6ce0f36c4fa8eea65cd4c14f3ecce5587eb3e15678f7609e"
    },
    "625a5d5ffcdb45eab64611ede2d63aa4546c90ea5210c0b18411aa9dd26f2fd0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.aws_iam as iam\n\n# artifact: codepipeline.Artifact\n# role: iam.Role\n\nbit_bucket_source_action = codepipeline_actions.BitBucketSourceAction(\n    action_name=\"actionName\",\n    connection_arn=\"connectionArn\",\n    output=artifact,\n    owner=\"owner\",\n    repo=\"repo\",\n\n    # the properties below are optional\n    branch=\"branch\",\n    code_build_clone_output=False,\n    role=role,\n    run_order=123,\n    trigger_on_push=False,\n    variables_namespace=\"variablesNamespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.AWS.IAM;\n\nArtifact artifact;\nRole role;\n\nBitBucketSourceAction bitBucketSourceAction = new BitBucketSourceAction(new BitBucketSourceActionProps {\n    ActionName = \"actionName\",\n    ConnectionArn = \"connectionArn\",\n    Output = artifact,\n    Owner = \"owner\",\n    Repo = \"repo\",\n\n    // the properties below are optional\n    Branch = \"branch\",\n    CodeBuildCloneOutput = false,\n    Role = role,\n    RunOrder = 123,\n    TriggerOnPush = false,\n    VariablesNamespace = \"variablesNamespace\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.services.iam.*;\n\nArtifact artifact;\nRole role;\n\nBitBucketSourceAction bitBucketSourceAction = BitBucketSourceAction.Builder.create()\n        .actionName(\"actionName\")\n        .connectionArn(\"connectionArn\")\n        .output(artifact)\n        .owner(\"owner\")\n        .repo(\"repo\")\n\n        // the properties below are optional\n        .branch(\"branch\")\n        .codeBuildCloneOutput(false)\n        .role(role)\n        .runOrder(123)\n        .triggerOnPush(false)\n        .variablesNamespace(\"variablesNamespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar artifact artifact\nvar role role\n\nbitBucketSourceAction := codepipeline_actions.NewBitBucketSourceAction(&bitBucketSourceActionProps{\n\tactionName: jsii.String(\"actionName\"),\n\tconnectionArn: jsii.String(\"connectionArn\"),\n\toutput: artifact,\n\towner: jsii.String(\"owner\"),\n\trepo: jsii.String(\"repo\"),\n\n\t// the properties below are optional\n\tbranch: jsii.String(\"branch\"),\n\tcodeBuildCloneOutput: jsii.Boolean(false),\n\trole: role,\n\trunOrder: jsii.Number(123),\n\ttriggerOnPush: jsii.Boolean(false),\n\tvariablesNamespace: jsii.String(\"variablesNamespace\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\nconst bitBucketSourceAction = new codepipeline_actions.BitBucketSourceAction({\n  actionName: 'actionName',\n  connectionArn: 'connectionArn',\n  output: artifact,\n  owner: 'owner',\n  repo: 'repo',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeBuildCloneOutput: false,\n  role: role,\n  runOrder: 123,\n  triggerOnPush: false,\n  variablesNamespace: 'variablesNamespace',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.BitBucketSourceAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.BitBucketSourceAction",
        "@aws-cdk/aws-codepipeline-actions.BitBucketSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bitBucketSourceAction = new codepipeline_actions.BitBucketSourceAction({\n  actionName: 'actionName',\n  connectionArn: 'connectionArn',\n  output: artifact,\n  owner: 'owner',\n  repo: 'repo',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeBuildCloneOutput: false,\n  role: role,\n  runOrder: 123,\n  triggerOnPush: false,\n  variablesNamespace: 'variablesNamespace',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 25,
        "91": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "72ccae28be875e815d9c602c10f7bd613375670d2bdd6bc061c06af74dc7b870"
    },
    "7e6645d6f5692ed32263ebbf8fdbf6e07efcc234495764ca288a08189da3027e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.aws_iam as iam\n\n# artifact: codepipeline.Artifact\n# role: iam.Role\n\nbit_bucket_source_action_props = codepipeline_actions.BitBucketSourceActionProps(\n    action_name=\"actionName\",\n    connection_arn=\"connectionArn\",\n    output=artifact,\n    owner=\"owner\",\n    repo=\"repo\",\n\n    # the properties below are optional\n    branch=\"branch\",\n    code_build_clone_output=False,\n    role=role,\n    run_order=123,\n    trigger_on_push=False,\n    variables_namespace=\"variablesNamespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.AWS.IAM;\n\nArtifact artifact;\nRole role;\n\nBitBucketSourceActionProps bitBucketSourceActionProps = new BitBucketSourceActionProps {\n    ActionName = \"actionName\",\n    ConnectionArn = \"connectionArn\",\n    Output = artifact,\n    Owner = \"owner\",\n    Repo = \"repo\",\n\n    // the properties below are optional\n    Branch = \"branch\",\n    CodeBuildCloneOutput = false,\n    Role = role,\n    RunOrder = 123,\n    TriggerOnPush = false,\n    VariablesNamespace = \"variablesNamespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.services.iam.*;\n\nArtifact artifact;\nRole role;\n\nBitBucketSourceActionProps bitBucketSourceActionProps = BitBucketSourceActionProps.builder()\n        .actionName(\"actionName\")\n        .connectionArn(\"connectionArn\")\n        .output(artifact)\n        .owner(\"owner\")\n        .repo(\"repo\")\n\n        // the properties below are optional\n        .branch(\"branch\")\n        .codeBuildCloneOutput(false)\n        .role(role)\n        .runOrder(123)\n        .triggerOnPush(false)\n        .variablesNamespace(\"variablesNamespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar artifact artifact\nvar role role\n\nbitBucketSourceActionProps := &bitBucketSourceActionProps{\n\tactionName: jsii.String(\"actionName\"),\n\tconnectionArn: jsii.String(\"connectionArn\"),\n\toutput: artifact,\n\towner: jsii.String(\"owner\"),\n\trepo: jsii.String(\"repo\"),\n\n\t// the properties below are optional\n\tbranch: jsii.String(\"branch\"),\n\tcodeBuildCloneOutput: jsii.Boolean(false),\n\trole: role,\n\trunOrder: jsii.Number(123),\n\ttriggerOnPush: jsii.Boolean(false),\n\tvariablesNamespace: jsii.String(\"variablesNamespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\nconst bitBucketSourceActionProps: codepipeline_actions.BitBucketSourceActionProps = {\n  actionName: 'actionName',\n  connectionArn: 'connectionArn',\n  output: artifact,\n  owner: 'owner',\n  repo: 'repo',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeBuildCloneOutput: false,\n  role: role,\n  runOrder: 123,\n  triggerOnPush: false,\n  variablesNamespace: 'variablesNamespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.BitBucketSourceActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.BitBucketSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bitBucketSourceActionProps: codepipeline_actions.BitBucketSourceActionProps = {\n  actionName: 'actionName',\n  connectionArn: 'connectionArn',\n  output: artifact,\n  owner: 'owner',\n  repo: 'repo',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeBuildCloneOutput: false,\n  role: role,\n  runOrder: 123,\n  triggerOnPush: false,\n  variablesNamespace: 'variablesNamespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 25,
        "91": 2,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "5901fccbe167ffec55cb5d6cd556d5fe6ea19f5423fc6b7126e149cc341e8598"
    },
    "f1261d45abdcfd1b28aff27f2a8b0813140fd56baa1e8b5ed02e835ed7265531": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\ncache_control = codepipeline_actions.CacheControl.from_string(\"s\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nCacheControl cacheControl = CacheControl.FromString(\"s\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nCacheControl cacheControl = CacheControl.fromString(\"s\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\ncacheControl := codepipeline_actions.cacheControl.fromString(jsii.String(\"s\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst cacheControl = codepipeline_actions.CacheControl.fromString('s');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CacheControl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CacheControl",
        "@aws-cdk/aws-codepipeline-actions.CacheControl#fromString"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cacheControl = codepipeline_actions.CacheControl.fromString('s');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "9925b54df46e80b9893b906fc044a0542362915b51932494ae0f51d1f6a4bf9c"
    },
    "b9a9553365cfa50ac58494bd5a90d5823c051090ee5296e5fa261c376db3be8e": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "6eb019df4f95cecabe1ca7a709ffaea636ec4ec4149564d2553fef0f0266fc5d": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "759d23d892e8a7d26dbbe9531547c47d85c7dc79d01071bf461b7a50b458516f": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import PhysicalName\n\n# in stack for account 123456789012...\n# other_account_stack: Stack\n\naction_role = iam.Role(other_account_stack, \"ActionRole\",\n    assumed_by=iam.AccountPrincipal(\"123456789012\"),\n    # the role has to have a physical name set\n    role_name=PhysicalName.GENERATE_IF_NEEDED\n)\n\n# in the pipeline stack...\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.CloudFormationCreateUpdateStackAction(\n    action_name=\"CloudFormationCreateUpdate\",\n    stack_name=\"MyStackName\",\n    admin_permissions=True,\n    template_path=source_output.at_path(\"template.yaml\"),\n    role=action_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n// in stack for account 123456789012...\nStack otherAccountStack;\nRole actionRole = new Role(otherAccountStack, \"ActionRole\", new RoleProps {\n    AssumedBy = new AccountPrincipal(\"123456789012\"),\n    // the role has to have a physical name set\n    RoleName = PhysicalName.GENERATE_IF_NEEDED\n});\n\n// in the pipeline stack...\nArtifact sourceOutput = new Artifact();\nnew CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n    ActionName = \"CloudFormationCreateUpdate\",\n    StackName = \"MyStackName\",\n    AdminPermissions = true,\n    TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n    Role = actionRole\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.PhysicalName;\n\n// in stack for account 123456789012...\nStack otherAccountStack;\n\nRole actionRole = Role.Builder.create(otherAccountStack, \"ActionRole\")\n        .assumedBy(new AccountPrincipal(\"123456789012\"))\n        // the role has to have a physical name set\n        .roleName(PhysicalName.GENERATE_IF_NEEDED)\n        .build();\n\n// in the pipeline stack...\nArtifact sourceOutput = new Artifact();\nCloudFormationCreateUpdateStackAction.Builder.create()\n        .actionName(\"CloudFormationCreateUpdate\")\n        .stackName(\"MyStackName\")\n        .adminPermissions(true)\n        .templatePath(sourceOutput.atPath(\"template.yaml\"))\n        .role(actionRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkcore\"\n\n// in stack for account 123456789012...\nvar otherAccountStack stack\n\nactionRole := iam.NewRole(otherAccountStack, jsii.String(\"ActionRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(jsii.String(\"123456789012\")),\n\t// the role has to have a physical name set\n\troleName: *awscdkcore.PhysicalName_GENERATE_IF_NEEDED(),\n})\n\n// in the pipeline stack...\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewCloudFormationCreateUpdateStackAction(&cloudFormationCreateUpdateStackActionProps{\n\tactionName: jsii.String(\"CloudFormationCreateUpdate\"),\n\tstackName: jsii.String(\"MyStackName\"),\n\tadminPermissions: jsii.Boolean(true),\n\ttemplatePath: sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\trole: actionRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { PhysicalName } from '@aws-cdk/core';\n\n// in stack for account 123456789012...\ndeclare const otherAccountStack: Stack;\nconst actionRole = new iam.Role(otherAccountStack, 'ActionRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  // the role has to have a physical name set\n  roleName: PhysicalName.GENERATE_IF_NEEDED,\n});\n\n// in the pipeline stack...\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  role: actionRole, // this action will be cross-account as well\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.PhysicalName#GENERATE_IF_NEEDED",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { PhysicalName } from '@aws-cdk/core';\n\n// in stack for account 123456789012...\ndeclare const otherAccountStack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst actionRole = new iam.Role(otherAccountStack, 'ActionRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  // the role has to have a physical name set\n  roleName: PhysicalName.GENERATE_IF_NEEDED,\n});\n\n// in the pipeline stack...\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  role: actionRole, // this action will be cross-account as well\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "106": 1,
        "130": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "fdeef51fde1b67c6c9642813cf64bc387bace0233d402a08a815126da4814013"
    },
    "707addac6721beb3754619e33d955760e3f3d4287010e826f55557cf6df37157": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import PhysicalName\n\n# in stack for account 123456789012...\n# other_account_stack: Stack\n\naction_role = iam.Role(other_account_stack, \"ActionRole\",\n    assumed_by=iam.AccountPrincipal(\"123456789012\"),\n    # the role has to have a physical name set\n    role_name=PhysicalName.GENERATE_IF_NEEDED\n)\n\n# in the pipeline stack...\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.CloudFormationCreateUpdateStackAction(\n    action_name=\"CloudFormationCreateUpdate\",\n    stack_name=\"MyStackName\",\n    admin_permissions=True,\n    template_path=source_output.at_path(\"template.yaml\"),\n    role=action_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n// in stack for account 123456789012...\nStack otherAccountStack;\nRole actionRole = new Role(otherAccountStack, \"ActionRole\", new RoleProps {\n    AssumedBy = new AccountPrincipal(\"123456789012\"),\n    // the role has to have a physical name set\n    RoleName = PhysicalName.GENERATE_IF_NEEDED\n});\n\n// in the pipeline stack...\nArtifact sourceOutput = new Artifact();\nnew CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n    ActionName = \"CloudFormationCreateUpdate\",\n    StackName = \"MyStackName\",\n    AdminPermissions = true,\n    TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n    Role = actionRole\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.PhysicalName;\n\n// in stack for account 123456789012...\nStack otherAccountStack;\n\nRole actionRole = Role.Builder.create(otherAccountStack, \"ActionRole\")\n        .assumedBy(new AccountPrincipal(\"123456789012\"))\n        // the role has to have a physical name set\n        .roleName(PhysicalName.GENERATE_IF_NEEDED)\n        .build();\n\n// in the pipeline stack...\nArtifact sourceOutput = new Artifact();\nCloudFormationCreateUpdateStackAction.Builder.create()\n        .actionName(\"CloudFormationCreateUpdate\")\n        .stackName(\"MyStackName\")\n        .adminPermissions(true)\n        .templatePath(sourceOutput.atPath(\"template.yaml\"))\n        .role(actionRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkcore\"\n\n// in stack for account 123456789012...\nvar otherAccountStack stack\n\nactionRole := iam.NewRole(otherAccountStack, jsii.String(\"ActionRole\"), &roleProps{\n\tassumedBy: iam.NewAccountPrincipal(jsii.String(\"123456789012\")),\n\t// the role has to have a physical name set\n\troleName: *awscdkcore.PhysicalName_GENERATE_IF_NEEDED(),\n})\n\n// in the pipeline stack...\nsourceOutput := codepipeline.NewArtifact()\ncodepipeline_actions.NewCloudFormationCreateUpdateStackAction(&cloudFormationCreateUpdateStackActionProps{\n\tactionName: jsii.String(\"CloudFormationCreateUpdate\"),\n\tstackName: jsii.String(\"MyStackName\"),\n\tadminPermissions: jsii.Boolean(true),\n\ttemplatePath: sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\trole: actionRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { PhysicalName } from '@aws-cdk/core';\n\n// in stack for account 123456789012...\ndeclare const otherAccountStack: Stack;\nconst actionRole = new iam.Role(otherAccountStack, 'ActionRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  // the role has to have a physical name set\n  roleName: PhysicalName.GENERATE_IF_NEEDED,\n});\n\n// in the pipeline stack...\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  role: actionRole, // this action will be cross-account as well\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.PhysicalName#GENERATE_IF_NEEDED",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { PhysicalName } from '@aws-cdk/core';\n\n// in stack for account 123456789012...\ndeclare const otherAccountStack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst actionRole = new iam.Role(otherAccountStack, 'ActionRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  // the role has to have a physical name set\n  roleName: PhysicalName.GENERATE_IF_NEEDED,\n});\n\n// in the pipeline stack...\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  actionName: 'CloudFormationCreateUpdate',\n  stackName: 'MyStackName',\n  adminPermissions: true,\n  templatePath: sourceOutput.atPath('template.yaml'),\n  role: actionRole, // this action will be cross-account as well\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "106": 1,
        "130": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "fdeef51fde1b67c6c9642813cf64bc387bace0233d402a08a815126da4814013"
    },
    "10fe73ae777d966043baf32c6dbb6f70860dd355a2a2b15d3b2999f0ac4b146a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudformation as cloudformation\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# artifact: codepipeline.Artifact\n# artifact_path: codepipeline.ArtifactPath\n# parameter_overrides: Any\n# role: iam.Role\n\ncloud_formation_delete_stack_action = codepipeline_actions.CloudFormationDeleteStackAction(\n    action_name=\"actionName\",\n    admin_permissions=False,\n    stack_name=\"stackName\",\n\n    # the properties below are optional\n    account=\"account\",\n    capabilities=[cloudformation.CloudFormationCapabilities.NONE],\n    cfn_capabilities=[cdk.CfnCapabilities.NONE],\n    deployment_role=role,\n    extra_inputs=[artifact],\n    output=artifact,\n    output_file_name=\"outputFileName\",\n    parameter_overrides={\n        \"parameter_overrides_key\": parameter_overrides\n    },\n    region=\"region\",\n    role=role,\n    run_order=123,\n    template_configuration=artifact_path,\n    variables_namespace=\"variablesNamespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudFormation;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nArtifact artifact;\nArtifactPath artifactPath;\nvar parameterOverrides;\nRole role;\nCloudFormationDeleteStackAction cloudFormationDeleteStackAction = new CloudFormationDeleteStackAction(new CloudFormationDeleteStackActionProps {\n    ActionName = \"actionName\",\n    AdminPermissions = false,\n    StackName = \"stackName\",\n\n    // the properties below are optional\n    Account = \"account\",\n    Capabilities = new [] { CloudFormationCapabilities.NONE },\n    CfnCapabilities = new [] { CfnCapabilities.NONE },\n    DeploymentRole = role,\n    ExtraInputs = new [] { artifact },\n    Output = artifact,\n    OutputFileName = \"outputFileName\",\n    ParameterOverrides = new Dictionary<string, object> {\n        { \"parameterOverridesKey\", parameterOverrides }\n    },\n    Region = \"region\",\n    Role = role,\n    RunOrder = 123,\n    TemplateConfiguration = artifactPath,\n    VariablesNamespace = \"variablesNamespace\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudformation.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nArtifact artifact;\nArtifactPath artifactPath;\nObject parameterOverrides;\nRole role;\n\nCloudFormationDeleteStackAction cloudFormationDeleteStackAction = CloudFormationDeleteStackAction.Builder.create()\n        .actionName(\"actionName\")\n        .adminPermissions(false)\n        .stackName(\"stackName\")\n\n        // the properties below are optional\n        .account(\"account\")\n        .capabilities(List.of(CloudFormationCapabilities.NONE))\n        .cfnCapabilities(List.of(CfnCapabilities.NONE))\n        .deploymentRole(role)\n        .extraInputs(List.of(artifact))\n        .output(artifact)\n        .outputFileName(\"outputFileName\")\n        .parameterOverrides(Map.of(\n                \"parameterOverridesKey\", parameterOverrides))\n        .region(\"region\")\n        .role(role)\n        .runOrder(123)\n        .templateConfiguration(artifactPath)\n        .variablesNamespace(\"variablesNamespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cloudformation \"github.com/aws-samples/dummy/awscdkawscloudformation\"\nimport codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar artifact artifact\nvar artifactPath artifactPath\nvar parameterOverrides interface{}\nvar role role\n\ncloudFormationDeleteStackAction := codepipeline_actions.NewCloudFormationDeleteStackAction(&cloudFormationDeleteStackActionProps{\n\tactionName: jsii.String(\"actionName\"),\n\tadminPermissions: jsii.Boolean(false),\n\tstackName: jsii.String(\"stackName\"),\n\n\t// the properties below are optional\n\taccount: jsii.String(\"account\"),\n\tcapabilities: []cloudFormationCapabilities{\n\t\tcloudformation.*cloudFormationCapabilities_NONE,\n\t},\n\tcfnCapabilities: []cfnCapabilities{\n\t\tcdk.*cfnCapabilities_NONE,\n\t},\n\tdeploymentRole: role,\n\textraInputs: []*artifact{\n\t\tartifact,\n\t},\n\toutput: artifact,\n\toutputFileName: jsii.String(\"outputFileName\"),\n\tparameterOverrides: map[string]interface{}{\n\t\t\"parameterOverridesKey\": parameterOverrides,\n\t},\n\tregion: jsii.String(\"region\"),\n\trole: role,\n\trunOrder: jsii.Number(123),\n\ttemplateConfiguration: artifactPath,\n\tvariablesNamespace: jsii.String(\"variablesNamespace\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudformation from '@aws-cdk/aws-cloudformation';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const parameterOverrides: any;\ndeclare const role: iam.Role;\nconst cloudFormationDeleteStackAction = new codepipeline_actions.CloudFormationDeleteStackAction({\n  actionName: 'actionName',\n  adminPermissions: false,\n  stackName: 'stackName',\n\n  // the properties below are optional\n  account: 'account',\n  capabilities: [cloudformation.CloudFormationCapabilities.NONE],\n  cfnCapabilities: [cdk.CfnCapabilities.NONE],\n  deploymentRole: role,\n  extraInputs: [artifact],\n  output: artifact,\n  outputFileName: 'outputFileName',\n  parameterOverrides: {\n    parameterOverridesKey: parameterOverrides,\n  },\n  region: 'region',\n  role: role,\n  runOrder: 123,\n  templateConfiguration: artifactPath,\n  variablesNamespace: 'variablesNamespace',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationDeleteStackAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudformation.CloudFormationCapabilities",
        "@aws-cdk/aws-cloudformation.CloudFormationCapabilities#NONE",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeleteStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeleteStackActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.CfnCapabilities",
        "@aws-cdk/core.CfnCapabilities#NONE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudformation from '@aws-cdk/aws-cloudformation';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const parameterOverrides: any;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cloudFormationDeleteStackAction = new codepipeline_actions.CloudFormationDeleteStackAction({\n  actionName: 'actionName',\n  adminPermissions: false,\n  stackName: 'stackName',\n\n  // the properties below are optional\n  account: 'account',\n  capabilities: [cloudformation.CloudFormationCapabilities.NONE],\n  cfnCapabilities: [cdk.CfnCapabilities.NONE],\n  deploymentRole: role,\n  extraInputs: [artifact],\n  output: artifact,\n  outputFileName: 'outputFileName',\n  parameterOverrides: {\n    parameterOverridesKey: parameterOverrides,\n  },\n  region: 'region',\n  role: role,\n  runOrder: 123,\n  templateConfiguration: artifactPath,\n  variablesNamespace: 'variablesNamespace',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 47,
        "91": 1,
        "125": 1,
        "130": 4,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 5,
        "255": 5,
        "256": 5,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "b6934a3c4b57257ddcc96363c68fb48b41c279555d447fc17258bc83696ee009"
    },
    "e246327c14dc1ab44e6d000949a100d3a14e56591e7faa191d2263985b47287b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudformation as cloudformation\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# artifact: codepipeline.Artifact\n# artifact_path: codepipeline.ArtifactPath\n# parameter_overrides: Any\n# role: iam.Role\n\ncloud_formation_delete_stack_action_props = codepipeline_actions.CloudFormationDeleteStackActionProps(\n    action_name=\"actionName\",\n    admin_permissions=False,\n    stack_name=\"stackName\",\n\n    # the properties below are optional\n    account=\"account\",\n    capabilities=[cloudformation.CloudFormationCapabilities.NONE],\n    cfn_capabilities=[cdk.CfnCapabilities.NONE],\n    deployment_role=role,\n    extra_inputs=[artifact],\n    output=artifact,\n    output_file_name=\"outputFileName\",\n    parameter_overrides={\n        \"parameter_overrides_key\": parameter_overrides\n    },\n    region=\"region\",\n    role=role,\n    run_order=123,\n    template_configuration=artifact_path,\n    variables_namespace=\"variablesNamespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudFormation;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nArtifact artifact;\nArtifactPath artifactPath;\nvar parameterOverrides;\nRole role;\nCloudFormationDeleteStackActionProps cloudFormationDeleteStackActionProps = new CloudFormationDeleteStackActionProps {\n    ActionName = \"actionName\",\n    AdminPermissions = false,\n    StackName = \"stackName\",\n\n    // the properties below are optional\n    Account = \"account\",\n    Capabilities = new [] { CloudFormationCapabilities.NONE },\n    CfnCapabilities = new [] { CfnCapabilities.NONE },\n    DeploymentRole = role,\n    ExtraInputs = new [] { artifact },\n    Output = artifact,\n    OutputFileName = \"outputFileName\",\n    ParameterOverrides = new Dictionary<string, object> {\n        { \"parameterOverridesKey\", parameterOverrides }\n    },\n    Region = \"region\",\n    Role = role,\n    RunOrder = 123,\n    TemplateConfiguration = artifactPath,\n    VariablesNamespace = \"variablesNamespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudformation.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nArtifact artifact;\nArtifactPath artifactPath;\nObject parameterOverrides;\nRole role;\n\nCloudFormationDeleteStackActionProps cloudFormationDeleteStackActionProps = CloudFormationDeleteStackActionProps.builder()\n        .actionName(\"actionName\")\n        .adminPermissions(false)\n        .stackName(\"stackName\")\n\n        // the properties below are optional\n        .account(\"account\")\n        .capabilities(List.of(CloudFormationCapabilities.NONE))\n        .cfnCapabilities(List.of(CfnCapabilities.NONE))\n        .deploymentRole(role)\n        .extraInputs(List.of(artifact))\n        .output(artifact)\n        .outputFileName(\"outputFileName\")\n        .parameterOverrides(Map.of(\n                \"parameterOverridesKey\", parameterOverrides))\n        .region(\"region\")\n        .role(role)\n        .runOrder(123)\n        .templateConfiguration(artifactPath)\n        .variablesNamespace(\"variablesNamespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cloudformation \"github.com/aws-samples/dummy/awscdkawscloudformation\"\nimport codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar artifact artifact\nvar artifactPath artifactPath\nvar parameterOverrides interface{}\nvar role role\n\ncloudFormationDeleteStackActionProps := &cloudFormationDeleteStackActionProps{\n\tactionName: jsii.String(\"actionName\"),\n\tadminPermissions: jsii.Boolean(false),\n\tstackName: jsii.String(\"stackName\"),\n\n\t// the properties below are optional\n\taccount: jsii.String(\"account\"),\n\tcapabilities: []cloudFormationCapabilities{\n\t\tcloudformation.*cloudFormationCapabilities_NONE,\n\t},\n\tcfnCapabilities: []cfnCapabilities{\n\t\tcdk.*cfnCapabilities_NONE,\n\t},\n\tdeploymentRole: role,\n\textraInputs: []*artifact{\n\t\tartifact,\n\t},\n\toutput: artifact,\n\toutputFileName: jsii.String(\"outputFileName\"),\n\tparameterOverrides: map[string]interface{}{\n\t\t\"parameterOverridesKey\": parameterOverrides,\n\t},\n\tregion: jsii.String(\"region\"),\n\trole: role,\n\trunOrder: jsii.Number(123),\n\ttemplateConfiguration: artifactPath,\n\tvariablesNamespace: jsii.String(\"variablesNamespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudformation from '@aws-cdk/aws-cloudformation';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const parameterOverrides: any;\ndeclare const role: iam.Role;\nconst cloudFormationDeleteStackActionProps: codepipeline_actions.CloudFormationDeleteStackActionProps = {\n  actionName: 'actionName',\n  adminPermissions: false,\n  stackName: 'stackName',\n\n  // the properties below are optional\n  account: 'account',\n  capabilities: [cloudformation.CloudFormationCapabilities.NONE],\n  cfnCapabilities: [cdk.CfnCapabilities.NONE],\n  deploymentRole: role,\n  extraInputs: [artifact],\n  output: artifact,\n  outputFileName: 'outputFileName',\n  parameterOverrides: {\n    parameterOverridesKey: parameterOverrides,\n  },\n  region: 'region',\n  role: role,\n  runOrder: 123,\n  templateConfiguration: artifactPath,\n  variablesNamespace: 'variablesNamespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationDeleteStackActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudformation.CloudFormationCapabilities",
        "@aws-cdk/aws-cloudformation.CloudFormationCapabilities#NONE",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeleteStackActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.CfnCapabilities",
        "@aws-cdk/core.CfnCapabilities#NONE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudformation from '@aws-cdk/aws-cloudformation';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const parameterOverrides: any;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cloudFormationDeleteStackActionProps: codepipeline_actions.CloudFormationDeleteStackActionProps = {\n  actionName: 'actionName',\n  adminPermissions: false,\n  stackName: 'stackName',\n\n  // the properties below are optional\n  account: 'account',\n  capabilities: [cloudformation.CloudFormationCapabilities.NONE],\n  cfnCapabilities: [cdk.CfnCapabilities.NONE],\n  deploymentRole: role,\n  extraInputs: [artifact],\n  output: artifact,\n  outputFileName: 'outputFileName',\n  parameterOverrides: {\n    parameterOverridesKey: parameterOverrides,\n  },\n  region: 'region',\n  role: role,\n  runOrder: 123,\n  templateConfiguration: artifactPath,\n  variablesNamespace: 'variablesNamespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 11,
        "75": 47,
        "91": 1,
        "125": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 3,
        "193": 2,
        "194": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 5,
        "255": 5,
        "256": 5,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "99c801cd15e947a11352e937c1c40e1530ea43c1e62a0c542df887ec333291b6"
    },
    "02a95869aca87d1d42ec3008b3de6113d6a440b1bc54de4ffeb94e06279baaea": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "86066fb839a4096a5aa2a7a484ecaf6d20333fbeee39ee5a961dc5f98b655693": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "72553d8bc4cefcc2eb29b793965c15d1099208ab3fa9e15f636499407b7ebd76": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "e785c91564be0a36e3d4d1191272bec58206a0d7038958fe9a0dd0e208f57527": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "b78be522c48d0a4cf2bb8e7a52ec28d86314132a413d75b7ce00a0e2da539947": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "0c897f3ceb66a421259e53256b73dc1a1e4ff0437707b6f44345b19a7b3bb7a8": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "9ddc208c88c9de61e25d6ef9541a7a0d9c3f93cb5723b355c887ca7969143214": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution: cloudfront.Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Create a Cloudfront Web Distribution\nimport cloudfront \"github.com/aws-samples/dummy/awscdkawscloudfront\"\nvar distribution distribution\n\n\n// Create the build project that will invalidate the cache\ninvalidateBuildProject := codebuild.NewPipelineProject(this, jsii.String(\"InvalidateProject\"), &pipelineProjectProps{\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\"commands\": []*string{\n\t\t\t\t\tjsii.String(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}),\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"CLOUDFRONT_ID\": &buildEnvironmentVariable{\n\t\t\t\"value\": distribution.distributionId,\n\t\t},\n\t},\n})\n\n// Add Cloudfront invalidation permissions to the project\ndistributionArn := fmt.Sprintf(\"arn:aws:cloudfront::%v:distribution/%v\", this.account, distribution.distributionId)\ninvalidateBuildProject.addToRolePolicy(iam.NewPolicyStatement(&policyStatementProps{\n\tresources: []*string{\n\t\tdistributionArn,\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"cloudfront:CreateInvalidation\"),\n\t},\n}))\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeployBucket := s3.NewBucket(this, jsii.String(\"DeployBucket\"))\ndeployInput := codepipeline.NewArtifact()\ncodepipeline.NewPipeline(this, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\t&stageProps{\n\t\t\tstageName: jsii.String(\"Deploy\"),\n\t\t\tactions: []iAction{\n\t\t\t\tcodepipeline_actions.NewS3DeployAction(&s3DeployActionProps{\n\t\t\t\t\tactionName: jsii.String(\"S3Deploy\"),\n\t\t\t\t\tbucket: deployBucket,\n\t\t\t\t\tinput: deployInput,\n\t\t\t\t\trunOrder: jsii.Number(1),\n\t\t\t\t}),\n\t\t\t\tcodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\t\t\t\t\tactionName: jsii.String(\"InvalidateCache\"),\n\t\t\t\t\tproject: invalidateBuildProject,\n\t\t\t\t\tinput: deployInput,\n\t\t\t\t\trunOrder: jsii.Number(2),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeBuildAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "7b790fa8c9be4bfecbc5f97c9549fb680a732aaea52c0dab8b8cc96f370c762f"
    },
    "8d602c3541293eae2897d58756eddb4723863703f800bc26f2d5cbbbc7987df3": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution: cloudfront.Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Create a Cloudfront Web Distribution\nimport cloudfront \"github.com/aws-samples/dummy/awscdkawscloudfront\"\nvar distribution distribution\n\n\n// Create the build project that will invalidate the cache\ninvalidateBuildProject := codebuild.NewPipelineProject(this, jsii.String(\"InvalidateProject\"), &pipelineProjectProps{\n\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\"commands\": []*string{\n\t\t\t\t\tjsii.String(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}),\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"CLOUDFRONT_ID\": &buildEnvironmentVariable{\n\t\t\t\"value\": distribution.distributionId,\n\t\t},\n\t},\n})\n\n// Add Cloudfront invalidation permissions to the project\ndistributionArn := fmt.Sprintf(\"arn:aws:cloudfront::%v:distribution/%v\", this.account, distribution.distributionId)\ninvalidateBuildProject.addToRolePolicy(iam.NewPolicyStatement(&policyStatementProps{\n\tresources: []*string{\n\t\tdistributionArn,\n\t},\n\tactions: []*string{\n\t\tjsii.String(\"cloudfront:CreateInvalidation\"),\n\t},\n}))\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeployBucket := s3.NewBucket(this, jsii.String(\"DeployBucket\"))\ndeployInput := codepipeline.NewArtifact()\ncodepipeline.NewPipeline(this, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\t&stageProps{\n\t\t\tstageName: jsii.String(\"Deploy\"),\n\t\t\tactions: []iAction{\n\t\t\t\tcodepipeline_actions.NewS3DeployAction(&s3DeployActionProps{\n\t\t\t\t\tactionName: jsii.String(\"S3Deploy\"),\n\t\t\t\t\tbucket: deployBucket,\n\t\t\t\t\tinput: deployInput,\n\t\t\t\t\trunOrder: jsii.Number(1),\n\t\t\t\t}),\n\t\t\t\tcodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\t\t\t\t\tactionName: jsii.String(\"InvalidateCache\"),\n\t\t\t\t\tproject: invalidateBuildProject,\n\t\t\t\t\tinput: deployInput,\n\t\t\t\t\trunOrder: jsii.Number(2),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "7b790fa8c9be4bfecbc5f97c9549fb680a732aaea52c0dab8b8cc96f370c762f"
    },
    "979af2afc532469f264f029d422ab4776cbb6eb311c7b60061178c3b2295fc1e": {
      "translations": {
        "python": {
          "source": "# project: codebuild.PipelineProject\n\nsource_output = codepipeline.Artifact()\ntest_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"IntegrationTest\",\n    project=project,\n    input=source_output,\n    type=codepipeline_actions.CodeBuildActionType.TEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "PipelineProject project;\n\nArtifact sourceOutput = new Artifact();\nCodeBuildAction testAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"IntegrationTest\",\n    Project = project,\n    Input = sourceOutput,\n    Type = CodeBuildActionType.TEST\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project;\n\nArtifact sourceOutput = new Artifact();\nCodeBuildAction testAction = CodeBuildAction.Builder.create()\n        .actionName(\"IntegrationTest\")\n        .project(project)\n        .input(sourceOutput)\n        .type(CodeBuildActionType.TEST)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var project pipelineProject\n\nsourceOutput := codepipeline.NewArtifact()\ntestAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"IntegrationTest\"),\n\tproject: project,\n\tinput: sourceOutput,\n\ttype: codepipeline_actions.codeBuildActionType_TEST,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.PipelineProject;\nconst sourceOutput = new codepipeline.Artifact();\nconst testAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'IntegrationTest',\n  project,\n  input: sourceOutput,\n  type: codepipeline_actions.CodeBuildActionType.TEST, // default is BUILD\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeBuildActionType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionType",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionType#TEST",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst testAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'IntegrationTest',\n  project,\n  input: sourceOutput,\n  type: codepipeline_actions.CodeBuildActionType.TEST, // default is BUILD\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 17,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b87ec8c7ee61931183d48d524acf5205e012433bc6cb4acd7f74c982821f964e"
    },
    "b816d72236e340bb3f03d1098cd004f928890cbd57258a07780e740a692eff96": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "7f5a84e6b7dd04807856be64f2abaa25d0e1fd652a8397c1c1062b6e19e2cf96": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "d05d419fe84800503cd7393d246ce41e7cde0ac6cf06e28c92fa0884c0ecc229": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\ncode_commit_source_variables = codepipeline_actions.CodeCommitSourceVariables(\n    author_date=\"authorDate\",\n    branch_name=\"branchName\",\n    commit_id=\"commitId\",\n    commit_message=\"commitMessage\",\n    committer_date=\"committerDate\",\n    repository_name=\"repositoryName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nCodeCommitSourceVariables codeCommitSourceVariables = new CodeCommitSourceVariables {\n    AuthorDate = \"authorDate\",\n    BranchName = \"branchName\",\n    CommitId = \"commitId\",\n    CommitMessage = \"commitMessage\",\n    CommitterDate = \"committerDate\",\n    RepositoryName = \"repositoryName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nCodeCommitSourceVariables codeCommitSourceVariables = CodeCommitSourceVariables.builder()\n        .authorDate(\"authorDate\")\n        .branchName(\"branchName\")\n        .commitId(\"commitId\")\n        .commitMessage(\"commitMessage\")\n        .committerDate(\"committerDate\")\n        .repositoryName(\"repositoryName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\ncodeCommitSourceVariables := &codeCommitSourceVariables{\n\tauthorDate: jsii.String(\"authorDate\"),\n\tbranchName: jsii.String(\"branchName\"),\n\tcommitId: jsii.String(\"commitId\"),\n\tcommitMessage: jsii.String(\"commitMessage\"),\n\tcommitterDate: jsii.String(\"committerDate\"),\n\trepositoryName: jsii.String(\"repositoryName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst codeCommitSourceVariables: codepipeline_actions.CodeCommitSourceVariables = {\n  authorDate: 'authorDate',\n  branchName: 'branchName',\n  commitId: 'commitId',\n  commitMessage: 'commitMessage',\n  committerDate: 'committerDate',\n  repositoryName: 'repositoryName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceVariables"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceVariables"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeCommitSourceVariables: codepipeline_actions.CodeCommitSourceVariables = {\n  authorDate: 'authorDate',\n  branchName: 'branchName',\n  commitId: 'commitId',\n  commitMessage: 'commitMessage',\n  committerDate: 'committerDate',\n  repositoryName: 'repositoryName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "32f4c850026103fbb6e0e30dc6da94a23feba7fca66ec54bdcd561d19ba0a9a1"
    },
    "996b9fb05c3c0f28ab563aa610970feccd386141678cc6db860a5d60b0391196": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// Source stage: read from repository\nrepo := codecommit.NewRepository(stack, jsii.String(\"TemplateRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"template-repo\"),\n})\nsourceOutput := codepipeline.NewArtifact(jsii.String(\"SourceArtifact\"))\nsource := cpactions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\tactionName: jsii.String(\"Source\"),\n\trepository: repo,\n\toutput: sourceOutput,\n\ttrigger: cpactions.codeCommitTrigger_POLL,\n})\nsourceStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Source\"),\n\t\"actions\": []CodeCommitSourceAction{\n\t\tsource,\n\t},\n}\n\n// Deployment stage: create and deploy changeset with manual approval\nstackName := \"OurStack\"\nchangeSetName := \"StagedChangeSet\"\n\nprodStage := map[string]interface{}{\n\t\"stageName\": jsii.String(\"Deploy\"),\n\t\"actions\": []interface{}{\n\t\tcpactions.NewCloudFormationCreateReplaceChangeSetAction(&CloudFormationCreateReplaceChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"PrepareChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"adminPermissions\": jsii.Boolean(true),\n\t\t\t\"templatePath\": sourceOutput.atPath(jsii.String(\"template.yaml\")),\n\t\t\t\"runOrder\": jsii.Number(1),\n\t\t}),\n\t\tcpactions.NewManualApprovalAction(&ManualApprovalActionProps{\n\t\t\t\"actionName\": jsii.String(\"ApproveChanges\"),\n\t\t\t\"runOrder\": jsii.Number(2),\n\t\t}),\n\t\tcpactions.NewCloudFormationExecuteChangeSetAction(&CloudFormationExecuteChangeSetActionProps{\n\t\t\t\"actionName\": jsii.String(\"ExecuteChanges\"),\n\t\t\t\"stackName\": jsii.String(stackName),\n\t\t\t\"changeSetName\": jsii.String(changeSetName),\n\t\t\t\"runOrder\": jsii.Number(3),\n\t\t}),\n\t},\n}\n\ncodepipeline.NewPipeline(stack, jsii.String(\"Pipeline\"), &pipelineProps{\n\tstages: []stageProps{\n\t\tsourceStage,\n\t\tprodStage,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "28e4db265b973b8bde800cb9f7bdba720785d22803f342b00f0a6591012b7393"
    },
    "34d91f0b1e9f9c2993988ed249cc5ff8280479c776605e28eb56c142c49eca9b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\n# artifact: codepipeline.Artifact\n\ncode_deploy_ecs_container_image_input = codepipeline_actions.CodeDeployEcsContainerImageInput(\n    input=artifact,\n\n    # the properties below are optional\n    task_definition_placeholder=\"taskDefinitionPlaceholder\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nArtifact artifact;\n\nCodeDeployEcsContainerImageInput codeDeployEcsContainerImageInput = new CodeDeployEcsContainerImageInput {\n    Input = artifact,\n\n    // the properties below are optional\n    TaskDefinitionPlaceholder = \"taskDefinitionPlaceholder\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nArtifact artifact;\n\nCodeDeployEcsContainerImageInput codeDeployEcsContainerImageInput = CodeDeployEcsContainerImageInput.builder()\n        .input(artifact)\n\n        // the properties below are optional\n        .taskDefinitionPlaceholder(\"taskDefinitionPlaceholder\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\nvar artifact artifact\n\ncodeDeployEcsContainerImageInput := &codeDeployEcsContainerImageInput{\n\tinput: artifact,\n\n\t// the properties below are optional\n\ttaskDefinitionPlaceholder: jsii.String(\"taskDefinitionPlaceholder\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n\ndeclare const artifact: codepipeline.Artifact;\nconst codeDeployEcsContainerImageInput: codepipeline_actions.CodeDeployEcsContainerImageInput = {\n  input: artifact,\n\n  // the properties below are optional\n  taskDefinitionPlaceholder: 'taskDefinitionPlaceholder',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeDeployEcsContainerImageInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CodeDeployEcsContainerImageInput",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n\ndeclare const artifact: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeDeployEcsContainerImageInput: codepipeline_actions.CodeDeployEcsContainerImageInput = {\n  input: artifact,\n\n  // the properties below are optional\n  taskDefinitionPlaceholder: 'taskDefinitionPlaceholder',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "84b7d35da52a55ab233b9de95a08effec54aa61c63fa6f82187f5f2a8cb7bcb3"
    },
    "a80a1824efba40fe13e75396923d9cf45010d4555e2952fe957060f4b9806801": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.aws_iam as iam\n\n# artifact: codepipeline.Artifact\n# artifact_path: codepipeline.ArtifactPath\n# ecs_deployment_group: codedeploy.IEcsDeploymentGroup\n# role: iam.Role\n\ncode_deploy_ecs_deploy_action = codepipeline_actions.CodeDeployEcsDeployAction(\n    action_name=\"actionName\",\n    deployment_group=ecs_deployment_group,\n\n    # the properties below are optional\n    app_spec_template_file=artifact_path,\n    app_spec_template_input=artifact,\n    container_image_inputs=[codepipeline_actions.CodeDeployEcsContainerImageInput(\n        input=artifact,\n\n        # the properties below are optional\n        task_definition_placeholder=\"taskDefinitionPlaceholder\"\n    )],\n    role=role,\n    run_order=123,\n    task_definition_template_file=artifact_path,\n    task_definition_template_input=artifact,\n    variables_namespace=\"variablesNamespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.AWS.IAM;\n\nArtifact artifact;\nArtifactPath artifactPath;\nIEcsDeploymentGroup ecsDeploymentGroup;\nRole role;\n\nCodeDeployEcsDeployAction codeDeployEcsDeployAction = new CodeDeployEcsDeployAction(new CodeDeployEcsDeployActionProps {\n    ActionName = \"actionName\",\n    DeploymentGroup = ecsDeploymentGroup,\n\n    // the properties below are optional\n    AppSpecTemplateFile = artifactPath,\n    AppSpecTemplateInput = artifact,\n    ContainerImageInputs = new [] { new CodeDeployEcsContainerImageInput {\n        Input = artifact,\n\n        // the properties below are optional\n        TaskDefinitionPlaceholder = \"taskDefinitionPlaceholder\"\n    } },\n    Role = role,\n    RunOrder = 123,\n    TaskDefinitionTemplateFile = artifactPath,\n    TaskDefinitionTemplateInput = artifact,\n    VariablesNamespace = \"variablesNamespace\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.services.iam.*;\n\nArtifact artifact;\nArtifactPath artifactPath;\nIEcsDeploymentGroup ecsDeploymentGroup;\nRole role;\n\nCodeDeployEcsDeployAction codeDeployEcsDeployAction = CodeDeployEcsDeployAction.Builder.create()\n        .actionName(\"actionName\")\n        .deploymentGroup(ecsDeploymentGroup)\n\n        // the properties below are optional\n        .appSpecTemplateFile(artifactPath)\n        .appSpecTemplateInput(artifact)\n        .containerImageInputs(List.of(CodeDeployEcsContainerImageInput.builder()\n                .input(artifact)\n\n                // the properties below are optional\n                .taskDefinitionPlaceholder(\"taskDefinitionPlaceholder\")\n                .build()))\n        .role(role)\n        .runOrder(123)\n        .taskDefinitionTemplateFile(artifactPath)\n        .taskDefinitionTemplateInput(artifact)\n        .variablesNamespace(\"variablesNamespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codedeploy \"github.com/aws-samples/dummy/awscdkawscodedeploy\"\nimport codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar artifact artifact\nvar artifactPath artifactPath\nvar ecsDeploymentGroup iEcsDeploymentGroup\nvar role role\n\ncodeDeployEcsDeployAction := codepipeline_actions.NewCodeDeployEcsDeployAction(&codeDeployEcsDeployActionProps{\n\tactionName: jsii.String(\"actionName\"),\n\tdeploymentGroup: ecsDeploymentGroup,\n\n\t// the properties below are optional\n\tappSpecTemplateFile: artifactPath,\n\tappSpecTemplateInput: artifact,\n\tcontainerImageInputs: []codeDeployEcsContainerImageInput{\n\t\t&codeDeployEcsContainerImageInput{\n\t\t\tinput: artifact,\n\n\t\t\t// the properties below are optional\n\t\t\ttaskDefinitionPlaceholder: jsii.String(\"taskDefinitionPlaceholder\"),\n\t\t},\n\t},\n\trole: role,\n\trunOrder: jsii.Number(123),\n\ttaskDefinitionTemplateFile: artifactPath,\n\ttaskDefinitionTemplateInput: artifact,\n\tvariablesNamespace: jsii.String(\"variablesNamespace\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const ecsDeploymentGroup: codedeploy.IEcsDeploymentGroup;\ndeclare const role: iam.Role;\nconst codeDeployEcsDeployAction = new codepipeline_actions.CodeDeployEcsDeployAction({\n  actionName: 'actionName',\n  deploymentGroup: ecsDeploymentGroup,\n\n  // the properties below are optional\n  appSpecTemplateFile: artifactPath,\n  appSpecTemplateInput: artifact,\n  containerImageInputs: [{\n    input: artifact,\n\n    // the properties below are optional\n    taskDefinitionPlaceholder: 'taskDefinitionPlaceholder',\n  }],\n  role: role,\n  runOrder: 123,\n  taskDefinitionTemplateFile: artifactPath,\n  taskDefinitionTemplateInput: artifact,\n  variablesNamespace: 'variablesNamespace',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeDeployEcsDeployAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IEcsDeploymentGroup",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployEcsDeployAction",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployEcsDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const ecsDeploymentGroup: codedeploy.IEcsDeploymentGroup;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeDeployEcsDeployAction = new codepipeline_actions.CodeDeployEcsDeployAction({\n  actionName: 'actionName',\n  deploymentGroup: ecsDeploymentGroup,\n\n  // the properties below are optional\n  appSpecTemplateFile: artifactPath,\n  appSpecTemplateInput: artifact,\n  containerImageInputs: [{\n    input: artifact,\n\n    // the properties below are optional\n    taskDefinitionPlaceholder: 'taskDefinitionPlaceholder',\n  }],\n  role: role,\n  runOrder: 123,\n  taskDefinitionTemplateFile: artifactPath,\n  taskDefinitionTemplateInput: artifact,\n  variablesNamespace: 'variablesNamespace',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 38,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "7e0b275a5d78ee45d9cca2d22404abbbdc7753d82b8c147b512755fb9e093aff"
    },
    "1e83fad544a9ced85514de62bc09970083c8762fea67892dfb8cfa128749491f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.aws_iam as iam\n\n# artifact: codepipeline.Artifact\n# artifact_path: codepipeline.ArtifactPath\n# ecs_deployment_group: codedeploy.IEcsDeploymentGroup\n# role: iam.Role\n\ncode_deploy_ecs_deploy_action_props = codepipeline_actions.CodeDeployEcsDeployActionProps(\n    action_name=\"actionName\",\n    deployment_group=ecs_deployment_group,\n\n    # the properties below are optional\n    app_spec_template_file=artifact_path,\n    app_spec_template_input=artifact,\n    container_image_inputs=[codepipeline_actions.CodeDeployEcsContainerImageInput(\n        input=artifact,\n\n        # the properties below are optional\n        task_definition_placeholder=\"taskDefinitionPlaceholder\"\n    )],\n    role=role,\n    run_order=123,\n    task_definition_template_file=artifact_path,\n    task_definition_template_input=artifact,\n    variables_namespace=\"variablesNamespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.AWS.IAM;\n\nArtifact artifact;\nArtifactPath artifactPath;\nIEcsDeploymentGroup ecsDeploymentGroup;\nRole role;\n\nCodeDeployEcsDeployActionProps codeDeployEcsDeployActionProps = new CodeDeployEcsDeployActionProps {\n    ActionName = \"actionName\",\n    DeploymentGroup = ecsDeploymentGroup,\n\n    // the properties below are optional\n    AppSpecTemplateFile = artifactPath,\n    AppSpecTemplateInput = artifact,\n    ContainerImageInputs = new [] { new CodeDeployEcsContainerImageInput {\n        Input = artifact,\n\n        // the properties below are optional\n        TaskDefinitionPlaceholder = \"taskDefinitionPlaceholder\"\n    } },\n    Role = role,\n    RunOrder = 123,\n    TaskDefinitionTemplateFile = artifactPath,\n    TaskDefinitionTemplateInput = artifact,\n    VariablesNamespace = \"variablesNamespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.services.iam.*;\n\nArtifact artifact;\nArtifactPath artifactPath;\nIEcsDeploymentGroup ecsDeploymentGroup;\nRole role;\n\nCodeDeployEcsDeployActionProps codeDeployEcsDeployActionProps = CodeDeployEcsDeployActionProps.builder()\n        .actionName(\"actionName\")\n        .deploymentGroup(ecsDeploymentGroup)\n\n        // the properties below are optional\n        .appSpecTemplateFile(artifactPath)\n        .appSpecTemplateInput(artifact)\n        .containerImageInputs(List.of(CodeDeployEcsContainerImageInput.builder()\n                .input(artifact)\n\n                // the properties below are optional\n                .taskDefinitionPlaceholder(\"taskDefinitionPlaceholder\")\n                .build()))\n        .role(role)\n        .runOrder(123)\n        .taskDefinitionTemplateFile(artifactPath)\n        .taskDefinitionTemplateInput(artifact)\n        .variablesNamespace(\"variablesNamespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codedeploy \"github.com/aws-samples/dummy/awscdkawscodedeploy\"\nimport codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar artifact artifact\nvar artifactPath artifactPath\nvar ecsDeploymentGroup iEcsDeploymentGroup\nvar role role\n\ncodeDeployEcsDeployActionProps := &codeDeployEcsDeployActionProps{\n\tactionName: jsii.String(\"actionName\"),\n\tdeploymentGroup: ecsDeploymentGroup,\n\n\t// the properties below are optional\n\tappSpecTemplateFile: artifactPath,\n\tappSpecTemplateInput: artifact,\n\tcontainerImageInputs: []codeDeployEcsContainerImageInput{\n\t\t&codeDeployEcsContainerImageInput{\n\t\t\tinput: artifact,\n\n\t\t\t// the properties below are optional\n\t\t\ttaskDefinitionPlaceholder: jsii.String(\"taskDefinitionPlaceholder\"),\n\t\t},\n\t},\n\trole: role,\n\trunOrder: jsii.Number(123),\n\ttaskDefinitionTemplateFile: artifactPath,\n\ttaskDefinitionTemplateInput: artifact,\n\tvariablesNamespace: jsii.String(\"variablesNamespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const ecsDeploymentGroup: codedeploy.IEcsDeploymentGroup;\ndeclare const role: iam.Role;\nconst codeDeployEcsDeployActionProps: codepipeline_actions.CodeDeployEcsDeployActionProps = {\n  actionName: 'actionName',\n  deploymentGroup: ecsDeploymentGroup,\n\n  // the properties below are optional\n  appSpecTemplateFile: artifactPath,\n  appSpecTemplateInput: artifact,\n  containerImageInputs: [{\n    input: artifact,\n\n    // the properties below are optional\n    taskDefinitionPlaceholder: 'taskDefinitionPlaceholder',\n  }],\n  role: role,\n  runOrder: 123,\n  taskDefinitionTemplateFile: artifactPath,\n  taskDefinitionTemplateInput: artifact,\n  variablesNamespace: 'variablesNamespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeDeployEcsDeployActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IEcsDeploymentGroup",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployEcsDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactPath: codepipeline.ArtifactPath;\ndeclare const ecsDeploymentGroup: codedeploy.IEcsDeploymentGroup;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeDeployEcsDeployActionProps: codepipeline_actions.CodeDeployEcsDeployActionProps = {\n  actionName: 'actionName',\n  deploymentGroup: ecsDeploymentGroup,\n\n  // the properties below are optional\n  appSpecTemplateFile: artifactPath,\n  appSpecTemplateInput: artifact,\n  containerImageInputs: [{\n    input: artifact,\n\n    // the properties below are optional\n    taskDefinitionPlaceholder: 'taskDefinitionPlaceholder',\n  }],\n  role: role,\n  runOrder: 123,\n  taskDefinitionTemplateFile: artifactPath,\n  taskDefinitionTemplateInput: artifact,\n  variablesNamespace: 'variablesNamespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 38,
        "130": 4,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "fefe7987f9d59472125dbb66b7361fc37cb582ad22e9df87aea0d26a503b4328"
    },
    "ddb8a503aedf78c28671b1055984fbd09c2377a05c2a32c19c32ea54c6b9edc0": {
      "translations": {
        "python": {
          "source": "# deployment_group: codedeploy.ServerDeploymentGroup\npipeline = codepipeline.Pipeline(self, \"MyPipeline\",\n    pipeline_name=\"MyPipeline\"\n)\n\n# add the source and build Stages to the Pipeline...\nbuild_output = codepipeline.Artifact()\ndeploy_action = codepipeline_actions.CodeDeployServerDeployAction(\n    action_name=\"CodeDeploy\",\n    input=build_output,\n    deployment_group=deployment_group\n)\npipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[deploy_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentGroup deploymentGroup;\nPipeline pipeline = new Pipeline(this, \"MyPipeline\", new PipelineProps {\n    PipelineName = \"MyPipeline\"\n});\n\n// add the source and build Stages to the Pipeline...\nArtifact buildOutput = new Artifact();\nCodeDeployServerDeployAction deployAction = new CodeDeployServerDeployAction(new CodeDeployServerDeployActionProps {\n    ActionName = \"CodeDeploy\",\n    Input = buildOutput,\n    DeploymentGroup = deploymentGroup\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] { deployAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentGroup deploymentGroup;\nPipeline pipeline = Pipeline.Builder.create(this, \"MyPipeline\")\n        .pipelineName(\"MyPipeline\")\n        .build();\n\n// add the source and build Stages to the Pipeline...\nArtifact buildOutput = new Artifact();\nCodeDeployServerDeployAction deployAction = CodeDeployServerDeployAction.Builder.create()\n        .actionName(\"CodeDeploy\")\n        .input(buildOutput)\n        .deploymentGroup(deploymentGroup)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(deployAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var deploymentGroup serverDeploymentGroup\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"), &pipelineProps{\n\tpipelineName: jsii.String(\"MyPipeline\"),\n})\n\n// add the source and build Stages to the Pipeline...\nbuildOutput := codepipeline.NewArtifact()\ndeployAction := codepipeline_actions.NewCodeDeployServerDeployAction(&codeDeployServerDeployActionProps{\n\tactionName: jsii.String(\"CodeDeploy\"),\n\tinput: buildOutput,\n\tdeploymentGroup: deploymentGroup,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tdeployAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\n\n// add the source and build Stages to the Pipeline...\nconst buildOutput = new codepipeline.Artifact();\ndeclare const deploymentGroup: codedeploy.ServerDeploymentGroup;\nconst deployAction = new codepipeline_actions.CodeDeployServerDeployAction({\n  actionName: 'CodeDeploy',\n  input: buildOutput,\n  deploymentGroup,\n});\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerDeploymentGroup",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployAction",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const deploymentGroup: codedeploy.ServerDeploymentGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\n\n// add the source and build Stages to the Pipeline...\nconst buildOutput = new codepipeline.Artifact();\nconst deployAction = new codepipeline_actions.CodeDeployServerDeployAction({\n  actionName: 'CodeDeploy',\n  input: buildOutput,\n  deploymentGroup,\n});\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f03b16867cea22d446ce461f41110fa35a3e9b8a35233f0949428c9e0464af6b"
    },
    "95a3c9591e7de337e8964f33c7ac8974588b01fc573281c4115d9fb94e1e6135": {
      "translations": {
        "python": {
          "source": "# deployment_group: codedeploy.ServerDeploymentGroup\npipeline = codepipeline.Pipeline(self, \"MyPipeline\",\n    pipeline_name=\"MyPipeline\"\n)\n\n# add the source and build Stages to the Pipeline...\nbuild_output = codepipeline.Artifact()\ndeploy_action = codepipeline_actions.CodeDeployServerDeployAction(\n    action_name=\"CodeDeploy\",\n    input=build_output,\n    deployment_group=deployment_group\n)\npipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[deploy_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentGroup deploymentGroup;\nPipeline pipeline = new Pipeline(this, \"MyPipeline\", new PipelineProps {\n    PipelineName = \"MyPipeline\"\n});\n\n// add the source and build Stages to the Pipeline...\nArtifact buildOutput = new Artifact();\nCodeDeployServerDeployAction deployAction = new CodeDeployServerDeployAction(new CodeDeployServerDeployActionProps {\n    ActionName = \"CodeDeploy\",\n    Input = buildOutput,\n    DeploymentGroup = deploymentGroup\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] { deployAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentGroup deploymentGroup;\nPipeline pipeline = Pipeline.Builder.create(this, \"MyPipeline\")\n        .pipelineName(\"MyPipeline\")\n        .build();\n\n// add the source and build Stages to the Pipeline...\nArtifact buildOutput = new Artifact();\nCodeDeployServerDeployAction deployAction = CodeDeployServerDeployAction.Builder.create()\n        .actionName(\"CodeDeploy\")\n        .input(buildOutput)\n        .deploymentGroup(deploymentGroup)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(deployAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var deploymentGroup serverDeploymentGroup\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"), &pipelineProps{\n\tpipelineName: jsii.String(\"MyPipeline\"),\n})\n\n// add the source and build Stages to the Pipeline...\nbuildOutput := codepipeline.NewArtifact()\ndeployAction := codepipeline_actions.NewCodeDeployServerDeployAction(&codeDeployServerDeployActionProps{\n\tactionName: jsii.String(\"CodeDeploy\"),\n\tinput: buildOutput,\n\tdeploymentGroup: deploymentGroup,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tdeployAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\n\n// add the source and build Stages to the Pipeline...\nconst buildOutput = new codepipeline.Artifact();\ndeclare const deploymentGroup: codedeploy.ServerDeploymentGroup;\nconst deployAction = new codepipeline_actions.CodeDeployServerDeployAction({\n  actionName: 'CodeDeploy',\n  input: buildOutput,\n  deploymentGroup,\n});\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerDeploymentGroup",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployAction",
        "@aws-cdk/aws-codepipeline-actions.CodeDeployServerDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const deploymentGroup: codedeploy.ServerDeploymentGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline', {\n  pipelineName: 'MyPipeline',\n});\n\n// add the source and build Stages to the Pipeline...\nconst buildOutput = new codepipeline.Artifact();\nconst deployAction = new codepipeline_actions.CodeDeployServerDeployAction({\n  actionName: 'CodeDeploy',\n  input: buildOutput,\n  deploymentGroup,\n});\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f03b16867cea22d446ce461f41110fa35a3e9b8a35233f0949428c9e0464af6b"
    },
    "ca486e443e7c53792823084c0cc0651f5e4e564495f2b9e61515904bcac0be67": {
      "translations": {
        "python": {
          "source": "source_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeStarConnectionsSourceAction(\n    action_name=\"BitBucket_Source\",\n    owner=\"aws\",\n    repo=\"aws-cdk\",\n    output=source_output,\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = new CodeStarConnectionsSourceAction(new CodeStarConnectionsSourceActionProps {\n    ActionName = \"BitBucket_Source\",\n    Owner = \"aws\",\n    Repo = \"aws-cdk\",\n    Output = sourceOutput,\n    ConnectionArn = \"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = CodeStarConnectionsSourceAction.Builder.create()\n        .actionName(\"BitBucket_Source\")\n        .owner(\"aws\")\n        .repo(\"aws-cdk\")\n        .output(sourceOutput)\n        .connectionArn(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "sourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeStarConnectionsSourceAction(&codeStarConnectionsSourceActionProps{\n\tactionName: jsii.String(\"BitBucket_Source\"),\n\towner: jsii.String(\"aws\"),\n\trepo: jsii.String(\"aws-cdk\"),\n\toutput: sourceOutput,\n\tconnectionArn: jsii.String(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "2a823b0bdbd9c375d07d587bd68ebc648f6f03e0ce8af55d379ec36058f562eb"
    },
    "f6e55658671564af386be310201fe958bd79a51fcb4242205dd803bbc82b2450": {
      "translations": {
        "python": {
          "source": "source_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeStarConnectionsSourceAction(\n    action_name=\"BitBucket_Source\",\n    owner=\"aws\",\n    repo=\"aws-cdk\",\n    output=source_output,\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = new CodeStarConnectionsSourceAction(new CodeStarConnectionsSourceActionProps {\n    ActionName = \"BitBucket_Source\",\n    Owner = \"aws\",\n    Repo = \"aws-cdk\",\n    Output = sourceOutput,\n    ConnectionArn = \"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput = new Artifact();\nCodeStarConnectionsSourceAction sourceAction = CodeStarConnectionsSourceAction.Builder.create()\n        .actionName(\"BitBucket_Source\")\n        .owner(\"aws\")\n        .repo(\"aws-cdk\")\n        .output(sourceOutput)\n        .connectionArn(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "sourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewCodeStarConnectionsSourceAction(&codeStarConnectionsSourceActionProps{\n\tactionName: jsii.String(\"BitBucket_Source\"),\n\towner: jsii.String(\"aws\"),\n\trepo: jsii.String(\"aws-cdk\"),\n\toutput: sourceOutput,\n\tconnectionArn: jsii.String(\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeStarConnectionsSourceAction({\n  actionName: 'BitBucket_Source',\n  owner: 'aws',\n  repo: 'aws-cdk',\n  output: sourceOutput,\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "2a823b0bdbd9c375d07d587bd68ebc648f6f03e0ce8af55d379ec36058f562eb"
    },
    "c1598d5e2783fa25c9ace927608f244fdd396c7fda895820dcbc3fdb8dcbdf6d": {
      "translations": {
        "python": {
          "source": "\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\";",
          "version": "1"
        },
        "java": {
          "source": "\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\";",
          "version": "1"
        },
        "go": {
          "source": "\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"",
          "version": "1"
        },
        "$": {
          "source": "'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps",
          "memberName": "connectionArn"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "1ec4a28b35af529f336e43cbe9ab633775bfe6dad7161ef2349e337874945192": {
      "translations": {
        "python": {
          "source": "\"aws\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"aws\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws\";",
          "version": "1"
        },
        "go": {
          "source": "\"aws\"",
          "version": "1"
        },
        "$": {
          "source": "'aws'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps",
          "memberName": "owner"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'aws'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "a96b75569053527aa630bd09d1af1ecf686133e706f08419c712862c13872fc0": {
      "translations": {
        "python": {
          "source": "\"aws-cdk\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "go": {
          "source": "\"aws-cdk\"",
          "version": "1"
        },
        "$": {
          "source": "'aws-cdk'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeStarConnectionsSourceActionProps",
          "memberName": "repo"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'aws-cdk'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "3f0143db70ccddff45688508057a91d6552100dda55e914bf017495d267a3c7f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\ncode_star_source_variables = codepipeline_actions.CodeStarSourceVariables(\n    author_date=\"authorDate\",\n    branch_name=\"branchName\",\n    commit_id=\"commitId\",\n    commit_message=\"commitMessage\",\n    connection_arn=\"connectionArn\",\n    full_repository_name=\"fullRepositoryName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nCodeStarSourceVariables codeStarSourceVariables = new CodeStarSourceVariables {\n    AuthorDate = \"authorDate\",\n    BranchName = \"branchName\",\n    CommitId = \"commitId\",\n    CommitMessage = \"commitMessage\",\n    ConnectionArn = \"connectionArn\",\n    FullRepositoryName = \"fullRepositoryName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nCodeStarSourceVariables codeStarSourceVariables = CodeStarSourceVariables.builder()\n        .authorDate(\"authorDate\")\n        .branchName(\"branchName\")\n        .commitId(\"commitId\")\n        .commitMessage(\"commitMessage\")\n        .connectionArn(\"connectionArn\")\n        .fullRepositoryName(\"fullRepositoryName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\ncodeStarSourceVariables := &codeStarSourceVariables{\n\tauthorDate: jsii.String(\"authorDate\"),\n\tbranchName: jsii.String(\"branchName\"),\n\tcommitId: jsii.String(\"commitId\"),\n\tcommitMessage: jsii.String(\"commitMessage\"),\n\tconnectionArn: jsii.String(\"connectionArn\"),\n\tfullRepositoryName: jsii.String(\"fullRepositoryName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst codeStarSourceVariables: codepipeline_actions.CodeStarSourceVariables = {\n  authorDate: 'authorDate',\n  branchName: 'branchName',\n  commitId: 'commitId',\n  commitMessage: 'commitMessage',\n  connectionArn: 'connectionArn',\n  fullRepositoryName: 'fullRepositoryName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CodeStarSourceVariables"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CodeStarSourceVariables"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeStarSourceVariables: codepipeline_actions.CodeStarSourceVariables = {\n  authorDate: 'authorDate',\n  branchName: 'branchName',\n  commitId: 'commitId',\n  commitMessage: 'commitMessage',\n  connectionArn: 'connectionArn',\n  fullRepositoryName: 'fullRepositoryName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0705beaf68e0afe002d0d6fefaa54d15542500c4c684cee2535280b3f3384f56"
    },
    "52eb058cb475e90a80ea9c2896ea1605c1705f1e795af65c72a1b6044c38b500": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\ncommon_cloud_formation_stack_set_options = codepipeline_actions.CommonCloudFormationStackSetOptions(\n    failure_tolerance_percentage=123,\n    max_account_concurrency_percentage=123,\n    stack_set_region=\"stackSetRegion\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nCommonCloudFormationStackSetOptions commonCloudFormationStackSetOptions = new CommonCloudFormationStackSetOptions {\n    FailureTolerancePercentage = 123,\n    MaxAccountConcurrencyPercentage = 123,\n    StackSetRegion = \"stackSetRegion\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nCommonCloudFormationStackSetOptions commonCloudFormationStackSetOptions = CommonCloudFormationStackSetOptions.builder()\n        .failureTolerancePercentage(123)\n        .maxAccountConcurrencyPercentage(123)\n        .stackSetRegion(\"stackSetRegion\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\ncommonCloudFormationStackSetOptions := &commonCloudFormationStackSetOptions{\n\tfailureTolerancePercentage: jsii.Number(123),\n\tmaxAccountConcurrencyPercentage: jsii.Number(123),\n\tstackSetRegion: jsii.String(\"stackSetRegion\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst commonCloudFormationStackSetOptions: codepipeline_actions.CommonCloudFormationStackSetOptions = {\n  failureTolerancePercentage: 123,\n  maxAccountConcurrencyPercentage: 123,\n  stackSetRegion: 'stackSetRegion',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.CommonCloudFormationStackSetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CommonCloudFormationStackSetOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonCloudFormationStackSetOptions: codepipeline_actions.CommonCloudFormationStackSetOptions = {\n  failureTolerancePercentage: 123,\n  maxAccountConcurrencyPercentage: 123,\n  stackSetRegion: 'stackSetRegion',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "88eb62e0c0c6c5f7c88e1f09618bbf15008f8215c6103e6c885b2c79569464cc"
    },
    "bac964e9b9668b3c78ec20bb366815961e0e3d0f27e9eb804a2d5c8df9a4ee97": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\n# ecr_repository: ecr.Repository\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.EcrSourceAction(\n    action_name=\"ECR\",\n    repository=ecr_repository,\n    image_tag=\"some-tag\",  # optional, default: 'latest'\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\nRepository ecrRepository;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = new EcrSourceAction(new EcrSourceActionProps {\n    ActionName = \"ECR\",\n    Repository = ecrRepository,\n    ImageTag = \"some-tag\",  // optional, default: 'latest'\n    Output = sourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\nRepository ecrRepository;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = EcrSourceAction.Builder.create()\n        .actionName(\"ECR\")\n        .repository(ecrRepository)\n        .imageTag(\"some-tag\") // optional, default: 'latest'\n        .output(sourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\nvar ecrRepository repository\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewEcrSourceAction(&ecrSourceActionProps{\n\tactionName: jsii.String(\"ECR\"),\n\trepository: ecrRepository,\n\timageTag: jsii.String(\"some-tag\"),\n\t // optional, default: 'latest'\n\toutput: sourceOutput,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tsourceAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const ecrRepository: ecr.Repository;\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'ECR',\n  repository: ecrRepository,\n  imageTag: 'some-tag', // optional, default: 'latest'\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.EcrSourceAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcrSourceAction",
        "@aws-cdk/aws-codepipeline-actions.EcrSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecr.IRepository",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'ECR',\n  repository: ecrRepository,\n  imageTag: 'some-tag', // optional, default: 'latest'\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 24,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d3f602c41ea2621b0248e8bb0c53b4499462c6dc6fafee72b951e628df039ad4"
    },
    "b75c4f916b676526dc44f66c24a5e0240266dc327111f91377f4788b3688a59c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\n# ecr_repository: ecr.Repository\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.EcrSourceAction(\n    action_name=\"ECR\",\n    repository=ecr_repository,\n    image_tag=\"some-tag\",  # optional, default: 'latest'\n    output=source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\nRepository ecrRepository;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = new EcrSourceAction(new EcrSourceActionProps {\n    ActionName = \"ECR\",\n    Repository = ecrRepository,\n    ImageTag = \"some-tag\",  // optional, default: 'latest'\n    Output = sourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\nRepository ecrRepository;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nEcrSourceAction sourceAction = EcrSourceAction.Builder.create()\n        .actionName(\"ECR\")\n        .repository(ecrRepository)\n        .imageTag(\"some-tag\") // optional, default: 'latest'\n        .output(sourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\nvar ecrRepository repository\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nsourceOutput := codepipeline.NewArtifact()\nsourceAction := codepipeline_actions.NewEcrSourceAction(&ecrSourceActionProps{\n\tactionName: jsii.String(\"ECR\"),\n\trepository: ecrRepository,\n\timageTag: jsii.String(\"some-tag\"),\n\t // optional, default: 'latest'\n\toutput: sourceOutput,\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Source\"),\n\tactions: []iAction{\n\t\tsourceAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const ecrRepository: ecr.Repository;\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'ECR',\n  repository: ecrRepository,\n  imageTag: 'some-tag', // optional, default: 'latest'\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.EcrSourceActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcrSourceAction",
        "@aws-cdk/aws-codepipeline-actions.EcrSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecr.IRepository",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.EcrSourceAction({\n  actionName: 'ECR',\n  repository: ecrRepository,\n  imageTag: 'some-tag', // optional, default: 'latest'\n  output: sourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 24,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d3f602c41ea2621b0248e8bb0c53b4499462c6dc6fafee72b951e628df039ad4"
    },
    "a2b09c3dfeaf146a4a7030b90e9c2cec0e10992309290c0c24c26a5e580c62b0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\necr_source_variables = codepipeline_actions.EcrSourceVariables(\n    image_digest=\"imageDigest\",\n    image_tag=\"imageTag\",\n    image_uri=\"imageUri\",\n    registry_id=\"registryId\",\n    repository_name=\"repositoryName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nEcrSourceVariables ecrSourceVariables = new EcrSourceVariables {\n    ImageDigest = \"imageDigest\",\n    ImageTag = \"imageTag\",\n    ImageUri = \"imageUri\",\n    RegistryId = \"registryId\",\n    RepositoryName = \"repositoryName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nEcrSourceVariables ecrSourceVariables = EcrSourceVariables.builder()\n        .imageDigest(\"imageDigest\")\n        .imageTag(\"imageTag\")\n        .imageUri(\"imageUri\")\n        .registryId(\"registryId\")\n        .repositoryName(\"repositoryName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\necrSourceVariables := &ecrSourceVariables{\n\timageDigest: jsii.String(\"imageDigest\"),\n\timageTag: jsii.String(\"imageTag\"),\n\timageUri: jsii.String(\"imageUri\"),\n\tregistryId: jsii.String(\"registryId\"),\n\trepositoryName: jsii.String(\"repositoryName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst ecrSourceVariables: codepipeline_actions.EcrSourceVariables = {\n  imageDigest: 'imageDigest',\n  imageTag: 'imageTag',\n  imageUri: 'imageUri',\n  registryId: 'registryId',\n  repositoryName: 'repositoryName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.EcrSourceVariables"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcrSourceVariables"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecrSourceVariables: codepipeline_actions.EcrSourceVariables = {\n  imageDigest: 'imageDigest',\n  imageTag: 'imageTag',\n  imageUri: 'imageUri',\n  registryId: 'registryId',\n  repositoryName: 'repositoryName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "83392e5708db1045664b85f572e8dc5b34d788a9750d28e7e1084c56997f3880"
    },
    "ebc0f649741efc3bb42da1a91ad926cad6516750f58d562b5ac7bbffbefd28c6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecs as ecs\n\n# service: ecs.FargateService\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nbuild_output = codepipeline.Artifact()\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.EcsDeployAction(\n            action_name=\"DeployAction\",\n            service=service,\n            # if your file is called imagedefinitions.json,\n            # use the `input` property,\n            # and leave out the `imageFile` property\n            input=build_output,\n            # if your file name is _not_ imagedefinitions.json,\n            # use the `imageFile` property,\n            # and leave out the `input` property\n            image_file=build_output.at_path(\"imageDef.json\"),\n            deployment_timeout=Duration.minutes(60)\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECS;\n\nFargateService service;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new EcsDeployAction(new EcsDeployActionProps {\n            ActionName = \"DeployAction\",\n            Service = service,\n            // if your file is called imagedefinitions.json,\n            // use the `input` property,\n            // and leave out the `imageFile` property\n            Input = buildOutput,\n            // if your file name is _not_ imagedefinitions.json,\n            // use the `imageFile` property,\n            // and leave out the `input` property\n            ImageFile = buildOutput.AtPath(\"imageDef.json\"),\n            DeploymentTimeout = Duration.Minutes(60)\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecs.*;\n\nFargateService service;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            EcsDeployAction.Builder.create()\n                    .actionName(\"DeployAction\")\n                    .service(service)\n                    // if your file is called imagedefinitions.json,\n                    // use the `input` property,\n                    // and leave out the `imageFile` property\n                    .input(buildOutput)\n                    // if your file name is _not_ imagedefinitions.json,\n                    // use the `imageFile` property,\n                    // and leave out the `input` property\n                    .imageFile(buildOutput.atPath(\"imageDef.json\"))\n                    .deploymentTimeout(Duration.minutes(60))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar service fargateService\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nbuildOutput := codepipeline.NewArtifact()\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tcodepipeline_actions.NewEcsDeployAction(&ecsDeployActionProps{\n\t\t\tactionName: jsii.String(\"DeployAction\"),\n\t\t\tservice: service,\n\t\t\t// if your file is called imagedefinitions.json,\n\t\t\t// use the `input` property,\n\t\t\t// and leave out the `imageFile` property\n\t\t\tinput: buildOutput,\n\t\t\t// if your file name is _not_ imagedefinitions.json,\n\t\t\t// use the `imageFile` property,\n\t\t\t// and leave out the `input` property\n\t\t\timageFile: buildOutput.atPath(jsii.String(\"imageDef.json\")),\n\t\t\tdeploymentTimeout: *awscdkcore.Duration.minutes(jsii.Number(60)),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const service: ecs.FargateService;\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service,\n      // if your file is called imagedefinitions.json,\n      // use the `input` property,\n      // and leave out the `imageFile` property\n      input: buildOutput,\n      // if your file name is _not_ imagedefinitions.json,\n      // use the `imageFile` property,\n      // and leave out the `input` property\n      imageFile: buildOutput.atPath('imageDef.json'),\n      deploymentTimeout: Duration.minutes(60), // optional, default is 60 minutes\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.EcsDeployAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcsDeployAction",
        "@aws-cdk/aws-codepipeline-actions.EcsDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecs.IBaseService",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const service: ecs.FargateService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service,\n      // if your file is called imagedefinitions.json,\n      // use the `input` property,\n      // and leave out the `imageFile` property\n      input: buildOutput,\n      // if your file name is _not_ imagedefinitions.json,\n      // use the `imageFile` property,\n      // and leave out the `input` property\n      imageFile: buildOutput.atPath('imageDef.json'),\n      deploymentTimeout: Duration.minutes(60), // optional, default is 60 minutes\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "20a7d780a1f5e31eb711cde55f6097f8edfc6dad30a8beadd78c273485d41902"
    },
    "3a7420807fe3885af5d2650823276976ac1d24a6a4239ad071eafca0dddb3b04": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecs as ecs\n\n# service: ecs.FargateService\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nbuild_output = codepipeline.Artifact()\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.EcsDeployAction(\n            action_name=\"DeployAction\",\n            service=service,\n            # if your file is called imagedefinitions.json,\n            # use the `input` property,\n            # and leave out the `imageFile` property\n            input=build_output,\n            # if your file name is _not_ imagedefinitions.json,\n            # use the `imageFile` property,\n            # and leave out the `input` property\n            image_file=build_output.at_path(\"imageDef.json\"),\n            deployment_timeout=Duration.minutes(60)\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECS;\n\nFargateService service;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new EcsDeployAction(new EcsDeployActionProps {\n            ActionName = \"DeployAction\",\n            Service = service,\n            // if your file is called imagedefinitions.json,\n            // use the `input` property,\n            // and leave out the `imageFile` property\n            Input = buildOutput,\n            // if your file name is _not_ imagedefinitions.json,\n            // use the `imageFile` property,\n            // and leave out the `input` property\n            ImageFile = buildOutput.AtPath(\"imageDef.json\"),\n            DeploymentTimeout = Duration.Minutes(60)\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecs.*;\n\nFargateService service;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            EcsDeployAction.Builder.create()\n                    .actionName(\"DeployAction\")\n                    .service(service)\n                    // if your file is called imagedefinitions.json,\n                    // use the `input` property,\n                    // and leave out the `imageFile` property\n                    .input(buildOutput)\n                    // if your file name is _not_ imagedefinitions.json,\n                    // use the `imageFile` property,\n                    // and leave out the `input` property\n                    .imageFile(buildOutput.atPath(\"imageDef.json\"))\n                    .deploymentTimeout(Duration.minutes(60))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar service fargateService\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nbuildOutput := codepipeline.NewArtifact()\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tcodepipeline_actions.NewEcsDeployAction(&ecsDeployActionProps{\n\t\t\tactionName: jsii.String(\"DeployAction\"),\n\t\t\tservice: service,\n\t\t\t// if your file is called imagedefinitions.json,\n\t\t\t// use the `input` property,\n\t\t\t// and leave out the `imageFile` property\n\t\t\tinput: buildOutput,\n\t\t\t// if your file name is _not_ imagedefinitions.json,\n\t\t\t// use the `imageFile` property,\n\t\t\t// and leave out the `input` property\n\t\t\timageFile: buildOutput.atPath(jsii.String(\"imageDef.json\")),\n\t\t\tdeploymentTimeout: *awscdkcore.Duration.minutes(jsii.Number(60)),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const service: ecs.FargateService;\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service,\n      // if your file is called imagedefinitions.json,\n      // use the `input` property,\n      // and leave out the `imageFile` property\n      input: buildOutput,\n      // if your file name is _not_ imagedefinitions.json,\n      // use the `imageFile` property,\n      // and leave out the `input` property\n      imageFile: buildOutput.atPath('imageDef.json'),\n      deploymentTimeout: Duration.minutes(60), // optional, default is 60 minutes\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.EcsDeployActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcsDeployAction",
        "@aws-cdk/aws-codepipeline-actions.EcsDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecs.IBaseService",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const service: ecs.FargateService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service,\n      // if your file is called imagedefinitions.json,\n      // use the `input` property,\n      // and leave out the `imageFile` property\n      input: buildOutput,\n      // if your file name is _not_ imagedefinitions.json,\n      // use the `imageFile` property,\n      // and leave out the `input` property\n      imageFile: buildOutput.atPath('imageDef.json'),\n      deploymentTimeout: Duration.minutes(60), // optional, default is 60 minutes\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "20a7d780a1f5e31eb711cde55f6097f8edfc6dad30a8beadd78c273485d41902"
    },
    "cb831f01c4d500a124b61e2f8af2ae52afd0026bec2befee0aa000e5c559513a": {
      "translations": {
        "python": {
          "source": "# source_output: codepipeline.Artifact\n# project: codebuild.PipelineProject\n\n\nsource_action = codepipeline_actions.GitHubSourceAction(\n    action_name=\"Github_Source\",\n    output=source_output,\n    owner=\"my-owner\",\n    repo=\"my-repo\",\n    oauth_token=SecretValue.secrets_manager(\"my-github-token\"),\n    variables_namespace=\"MyNamespace\"\n)\n\n# later:\n\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"COMMIT_URL\": codebuild.BuildEnvironmentVariable(\n            value=source_action.variables.commit_url\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput;\nPipelineProject project;\n\n\nGitHubSourceAction sourceAction = new GitHubSourceAction(new GitHubSourceActionProps {\n    ActionName = \"Github_Source\",\n    Output = sourceOutput,\n    Owner = \"my-owner\",\n    Repo = \"my-repo\",\n    OauthToken = SecretValue.SecretsManager(\"my-github-token\"),\n    VariablesNamespace = \"MyNamespace\"\n});\n\n// later:\n\n// later:\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"COMMIT_URL\", new BuildEnvironmentVariable {\n            Value = sourceAction.Variables.CommitUrl\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput;\nPipelineProject project;\n\n\nGitHubSourceAction sourceAction = GitHubSourceAction.Builder.create()\n        .actionName(\"Github_Source\")\n        .output(sourceOutput)\n        .owner(\"my-owner\")\n        .repo(\"my-repo\")\n        .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n        .variablesNamespace(\"MyNamespace\")\n        .build();\n\n// later:\n\n// later:\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"COMMIT_URL\", BuildEnvironmentVariable.builder()\n                        .value(sourceAction.getVariables().getCommitUrl())\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var sourceOutput artifact\nvar project pipelineProject\n\n\nsourceAction := codepipeline_actions.NewGitHubSourceAction(&gitHubSourceActionProps{\n\tactionName: jsii.String(\"Github_Source\"),\n\toutput: sourceOutput,\n\towner: jsii.String(\"my-owner\"),\n\trepo: jsii.String(\"my-repo\"),\n\toauthToken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-github-token\")),\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\n\n// later:\n\n// later:\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"COMMIT_URL\": &buildEnvironmentVariable{\n\t\t\t\"value\": sourceAction.variables.commitUrl,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const sourceOutput: codepipeline.Artifact;\ndeclare const project: codebuild.PipelineProject;\n\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'Github_Source',\n  output: sourceOutput,\n  owner: 'my-owner',\n  repo: 'my-repo',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_URL: {\n      value: sourceAction.variables.commitUrl,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.GitHubSourceAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceAction",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceVariables#commitUrl",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const sourceOutput: codepipeline.Artifact;\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'Github_Source',\n  output: sourceOutput,\n  owner: 'my-owner',\n  repo: 'my-repo',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_URL: {\n      value: sourceAction.variables.commitUrl,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 30,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "367d9325fb2557221b63d49328519ff1700b2768d1c65f07526bee9cf04004b8"
    },
    "58653eafc52df1372e1a4a4d3e4bcf19958daf59accb947d9feaa2f88e7f923a": {
      "translations": {
        "python": {
          "source": "# source_output: codepipeline.Artifact\n# project: codebuild.PipelineProject\n\n\nsource_action = codepipeline_actions.GitHubSourceAction(\n    action_name=\"Github_Source\",\n    output=source_output,\n    owner=\"my-owner\",\n    repo=\"my-repo\",\n    oauth_token=SecretValue.secrets_manager(\"my-github-token\"),\n    variables_namespace=\"MyNamespace\"\n)\n\n# later:\n\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"COMMIT_URL\": codebuild.BuildEnvironmentVariable(\n            value=source_action.variables.commit_url\n        )\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput;\nPipelineProject project;\n\n\nGitHubSourceAction sourceAction = new GitHubSourceAction(new GitHubSourceActionProps {\n    ActionName = \"Github_Source\",\n    Output = sourceOutput,\n    Owner = \"my-owner\",\n    Repo = \"my-repo\",\n    OauthToken = SecretValue.SecretsManager(\"my-github-token\"),\n    VariablesNamespace = \"MyNamespace\"\n});\n\n// later:\n\n// later:\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"COMMIT_URL\", new BuildEnvironmentVariable {\n            Value = sourceAction.Variables.CommitUrl\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput;\nPipelineProject project;\n\n\nGitHubSourceAction sourceAction = GitHubSourceAction.Builder.create()\n        .actionName(\"Github_Source\")\n        .output(sourceOutput)\n        .owner(\"my-owner\")\n        .repo(\"my-repo\")\n        .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n        .variablesNamespace(\"MyNamespace\")\n        .build();\n\n// later:\n\n// later:\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"COMMIT_URL\", BuildEnvironmentVariable.builder()\n                        .value(sourceAction.getVariables().getCommitUrl())\n                        .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var sourceOutput artifact\nvar project pipelineProject\n\n\nsourceAction := codepipeline_actions.NewGitHubSourceAction(&gitHubSourceActionProps{\n\tactionName: jsii.String(\"Github_Source\"),\n\toutput: sourceOutput,\n\towner: jsii.String(\"my-owner\"),\n\trepo: jsii.String(\"my-repo\"),\n\toauthToken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-github-token\")),\n\tvariablesNamespace: jsii.String(\"MyNamespace\"),\n})\n\n// later:\n\n// later:\ncodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\tactionName: jsii.String(\"CodeBuild\"),\n\tproject: project,\n\tinput: sourceOutput,\n\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\"COMMIT_URL\": &buildEnvironmentVariable{\n\t\t\t\"value\": sourceAction.variables.commitUrl,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const sourceOutput: codepipeline.Artifact;\ndeclare const project: codebuild.PipelineProject;\n\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'Github_Source',\n  output: sourceOutput,\n  owner: 'my-owner',\n  repo: 'my-repo',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_URL: {\n      value: sourceAction.variables.commitUrl,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.GitHubSourceActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceAction",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceVariables#commitUrl",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const sourceOutput: codepipeline.Artifact;\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'Github_Source',\n  output: sourceOutput,\n  owner: 'my-owner',\n  repo: 'my-repo',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\n\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    COMMIT_URL: {\n      value: sourceAction.variables.commitUrl,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 30,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "367d9325fb2557221b63d49328519ff1700b2768d1c65f07526bee9cf04004b8"
    },
    "087ad30a16d96e0c1690a5d6fe5b504b4e0d23cd1a70a8cd559ecbbdbc1600c4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\ngit_hub_source_variables = codepipeline_actions.GitHubSourceVariables(\n    author_date=\"authorDate\",\n    branch_name=\"branchName\",\n    commit_id=\"commitId\",\n    commit_message=\"commitMessage\",\n    committer_date=\"committerDate\",\n    commit_url=\"commitUrl\",\n    repository_name=\"repositoryName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nGitHubSourceVariables gitHubSourceVariables = new GitHubSourceVariables {\n    AuthorDate = \"authorDate\",\n    BranchName = \"branchName\",\n    CommitId = \"commitId\",\n    CommitMessage = \"commitMessage\",\n    CommitterDate = \"committerDate\",\n    CommitUrl = \"commitUrl\",\n    RepositoryName = \"repositoryName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nGitHubSourceVariables gitHubSourceVariables = GitHubSourceVariables.builder()\n        .authorDate(\"authorDate\")\n        .branchName(\"branchName\")\n        .commitId(\"commitId\")\n        .commitMessage(\"commitMessage\")\n        .committerDate(\"committerDate\")\n        .commitUrl(\"commitUrl\")\n        .repositoryName(\"repositoryName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\ngitHubSourceVariables := &gitHubSourceVariables{\n\tauthorDate: jsii.String(\"authorDate\"),\n\tbranchName: jsii.String(\"branchName\"),\n\tcommitId: jsii.String(\"commitId\"),\n\tcommitMessage: jsii.String(\"commitMessage\"),\n\tcommitterDate: jsii.String(\"committerDate\"),\n\tcommitUrl: jsii.String(\"commitUrl\"),\n\trepositoryName: jsii.String(\"repositoryName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst gitHubSourceVariables: codepipeline_actions.GitHubSourceVariables = {\n  authorDate: 'authorDate',\n  branchName: 'branchName',\n  commitId: 'commitId',\n  commitMessage: 'commitMessage',\n  committerDate: 'committerDate',\n  commitUrl: 'commitUrl',\n  repositoryName: 'repositoryName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.GitHubSourceVariables"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceVariables"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gitHubSourceVariables: codepipeline_actions.GitHubSourceVariables = {\n  authorDate: 'authorDate',\n  branchName: 'branchName',\n  commitId: 'commitId',\n  commitMessage: 'commitMessage',\n  committerDate: 'committerDate',\n  commitUrl: 'commitUrl',\n  repositoryName: 'repositoryName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 11,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c5e993a7adcf3c27482df39cd699e32dfc8de4dbc690c2cdf66e175eb6ab593a"
    },
    "c04e36d2023cad7d5e97633d4e704166a37fe8b4e2408368b681002c18c847f2": {
      "translations": {
        "python": {
          "source": "# jenkins_provider: codepipeline_actions.JenkinsProvider\n\nbuild_action = codepipeline_actions.JenkinsAction(\n    action_name=\"JenkinsBuild\",\n    jenkins_provider=jenkins_provider,\n    project_name=\"MyProject\",\n    type=codepipeline_actions.JenkinsActionType.BUILD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = new JenkinsAction(new JenkinsActionProps {\n    ActionName = \"JenkinsBuild\",\n    JenkinsProvider = jenkinsProvider,\n    ProjectName = \"MyProject\",\n    Type = JenkinsActionType.BUILD\n});",
          "version": "1"
        },
        "java": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = JenkinsAction.Builder.create()\n        .actionName(\"JenkinsBuild\")\n        .jenkinsProvider(jenkinsProvider)\n        .projectName(\"MyProject\")\n        .type(JenkinsActionType.BUILD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var jenkinsProvider jenkinsProvider\n\nbuildAction := codepipeline_actions.NewJenkinsAction(&jenkinsActionProps{\n\tactionName: jsii.String(\"JenkinsBuild\"),\n\tjenkinsProvider: jenkinsProvider,\n\tprojectName: jsii.String(\"MyProject\"),\n\ttype: codepipeline_actions.jenkinsActionType_BUILD,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsAction",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType#BUILD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "80e4fb6e4b8bec0902543143c3a00a76f3e13cc6b2c0a29fb507e69f572270dc"
    },
    "86ed5b951f2533b9eb0fe9b1ececd831c552a1a8eea3ab456cd757b07a7bc9bf": {
      "translations": {
        "python": {
          "source": "# jenkins_provider: codepipeline_actions.JenkinsProvider\n\nbuild_action = codepipeline_actions.JenkinsAction(\n    action_name=\"JenkinsBuild\",\n    jenkins_provider=jenkins_provider,\n    project_name=\"MyProject\",\n    type=codepipeline_actions.JenkinsActionType.BUILD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = new JenkinsAction(new JenkinsActionProps {\n    ActionName = \"JenkinsBuild\",\n    JenkinsProvider = jenkinsProvider,\n    ProjectName = \"MyProject\",\n    Type = JenkinsActionType.BUILD\n});",
          "version": "1"
        },
        "java": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = JenkinsAction.Builder.create()\n        .actionName(\"JenkinsBuild\")\n        .jenkinsProvider(jenkinsProvider)\n        .projectName(\"MyProject\")\n        .type(JenkinsActionType.BUILD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var jenkinsProvider jenkinsProvider\n\nbuildAction := codepipeline_actions.NewJenkinsAction(&jenkinsActionProps{\n\tactionName: jsii.String(\"JenkinsBuild\"),\n\tjenkinsProvider: jenkinsProvider,\n\tprojectName: jsii.String(\"MyProject\"),\n\ttype: codepipeline_actions.jenkinsActionType_BUILD,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsAction",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType#BUILD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "80e4fb6e4b8bec0902543143c3a00a76f3e13cc6b2c0a29fb507e69f572270dc"
    },
    "4cdec48c7f51eac83f7d3bbe4edc43aab2b96f8ed938fbd9858fd91ba01a0451": {
      "translations": {
        "python": {
          "source": "\"MyJob\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"MyJob\";",
          "version": "1"
        },
        "java": {
          "source": "\"MyJob\";",
          "version": "1"
        },
        "go": {
          "source": "\"MyJob\"",
          "version": "1"
        },
        "$": {
          "source": "'MyJob'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps",
          "memberName": "projectName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'MyJob'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "9ecf7f54e20f27ef40ddea5984f37edc7f8f4355467fa54fb508c75fc5e3ee98": {
      "translations": {
        "python": {
          "source": "# jenkins_provider: codepipeline_actions.JenkinsProvider\n\nbuild_action = codepipeline_actions.JenkinsAction(\n    action_name=\"JenkinsBuild\",\n    jenkins_provider=jenkins_provider,\n    project_name=\"MyProject\",\n    type=codepipeline_actions.JenkinsActionType.BUILD\n)",
          "version": "2"
        },
        "csharp": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = new JenkinsAction(new JenkinsActionProps {\n    ActionName = \"JenkinsBuild\",\n    JenkinsProvider = jenkinsProvider,\n    ProjectName = \"MyProject\",\n    Type = JenkinsActionType.BUILD\n});",
          "version": "1"
        },
        "java": {
          "source": "JenkinsProvider jenkinsProvider;\n\nJenkinsAction buildAction = JenkinsAction.Builder.create()\n        .actionName(\"JenkinsBuild\")\n        .jenkinsProvider(jenkinsProvider)\n        .projectName(\"MyProject\")\n        .type(JenkinsActionType.BUILD)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var jenkinsProvider jenkinsProvider\n\nbuildAction := codepipeline_actions.NewJenkinsAction(&jenkinsActionProps{\n\tactionName: jsii.String(\"JenkinsBuild\"),\n\tjenkinsProvider: jenkinsProvider,\n\tprojectName: jsii.String(\"MyProject\"),\n\ttype: codepipeline_actions.jenkinsActionType_BUILD,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsActionType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsAction",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType#BUILD"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const jenkinsProvider: codepipeline_actions.JenkinsProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst buildAction = new codepipeline_actions.JenkinsAction({\n  actionName: 'JenkinsBuild',\n  jenkinsProvider: jenkinsProvider,\n  projectName: 'MyProject',\n  type: codepipeline_actions.JenkinsActionType.BUILD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "80e4fb6e4b8bec0902543143c3a00a76f3e13cc6b2c0a29fb507e69f572270dc"
    },
    "2d79b92c99545c0e8f086c58eee541a1b3fe4c5673c69f12a61c38b3abe2ee1b": {
      "translations": {
        "python": {
          "source": "jenkins_provider = codepipeline_actions.JenkinsProvider(self, \"JenkinsProvider\",\n    provider_name=\"MyJenkinsProvider\",\n    server_url=\"http://my-jenkins.com:8080\",\n    version=\"2\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "JenkinsProvider jenkinsProvider = new JenkinsProvider(this, \"JenkinsProvider\", new JenkinsProviderProps {\n    ProviderName = \"MyJenkinsProvider\",\n    ServerUrl = \"http://my-jenkins.com:8080\",\n    Version = \"2\"\n});",
          "version": "1"
        },
        "java": {
          "source": "JenkinsProvider jenkinsProvider = JenkinsProvider.Builder.create(this, \"JenkinsProvider\")\n        .providerName(\"MyJenkinsProvider\")\n        .serverUrl(\"http://my-jenkins.com:8080\")\n        .version(\"2\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "jenkinsProvider := codepipeline_actions.NewJenkinsProvider(this, jsii.String(\"JenkinsProvider\"), &jenkinsProviderProps{\n\tproviderName: jsii.String(\"MyJenkinsProvider\"),\n\tserverUrl: jsii.String(\"http://my-jenkins.com:8080\"),\n\tversion: jsii.String(\"2\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const jenkinsProvider = new codepipeline_actions.JenkinsProvider(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.JenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst jenkinsProvider = new codepipeline_actions.JenkinsProvider(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "372071b32cc6ca938cd3312414a6ec728dc89df74f84904c3117533b5e07ba65"
    },
    "e85d4177161b3a5d9f5fc6a94518ae0ab56a5a640c9cdb6fc61ada1262cf98b0": {
      "translations": {
        "python": {
          "source": "jenkins_provider = codepipeline_actions.JenkinsProvider.from_jenkins_provider_attributes(self, \"JenkinsProvider\",\n    provider_name=\"MyJenkinsProvider\",\n    server_url=\"http://my-jenkins.com:8080\",\n    version=\"2\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IJenkinsProvider jenkinsProvider = JenkinsProvider.FromJenkinsProviderAttributes(this, \"JenkinsProvider\", new JenkinsProviderAttributes {\n    ProviderName = \"MyJenkinsProvider\",\n    ServerUrl = \"http://my-jenkins.com:8080\",\n    Version = \"2\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IJenkinsProvider jenkinsProvider = JenkinsProvider.fromJenkinsProviderAttributes(this, \"JenkinsProvider\", JenkinsProviderAttributes.builder()\n        .providerName(\"MyJenkinsProvider\")\n        .serverUrl(\"http://my-jenkins.com:8080\")\n        .version(\"2\")\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "jenkinsProvider := codepipeline_actions.jenkinsProvider.fromJenkinsProviderAttributes(this, jsii.String(\"JenkinsProvider\"), &jenkinsProviderAttributes{\n\tproviderName: jsii.String(\"MyJenkinsProvider\"),\n\tserverUrl: jsii.String(\"http://my-jenkins.com:8080\"),\n\tversion: jsii.String(\"2\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const jenkinsProvider = codepipeline_actions.JenkinsProvider.fromJenkinsProviderAttributes(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsProviderAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProvider#fromJenkinsProviderAttributes",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProviderAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst jenkinsProvider = codepipeline_actions.JenkinsProvider.fromJenkinsProviderAttributes(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "a06db19f5e6facd7b55cd5ef114fa3415271e02158195534fd9d8439aa4d6675"
    },
    "7b5c43aa237e46756cc28cdae67f1595d15e81bb43bfa57e7c857e29033d02e2": {
      "translations": {
        "python": {
          "source": "\"MyJenkinsProvider\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"MyJenkinsProvider\";",
          "version": "1"
        },
        "java": {
          "source": "\"MyJenkinsProvider\";",
          "version": "1"
        },
        "go": {
          "source": "\"MyJenkinsProvider\"",
          "version": "1"
        },
        "$": {
          "source": "'MyJenkinsProvider'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsProviderAttributes",
          "memberName": "providerName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'MyJenkinsProvider'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "ade351dbf0fec4492150c480dd276abcfffcb35ecfd045efa38c98084967f97c": {
      "translations": {
        "python": {
          "source": "\"http://myjenkins.com:8080\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"http://myjenkins.com:8080\";",
          "version": "1"
        },
        "java": {
          "source": "\"http://myjenkins.com:8080\";",
          "version": "1"
        },
        "go": {
          "source": "\"http://myjenkins.com:8080\"",
          "version": "1"
        },
        "$": {
          "source": "'http://myjenkins.com:8080'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsProviderAttributes",
          "memberName": "serverUrl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'http://myjenkins.com:8080'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "5e1827cdb6526669e71aa693d1d0614e85efff06259531c38e44c31faef368e8": {
      "translations": {
        "python": {
          "source": "jenkins_provider = codepipeline_actions.JenkinsProvider(self, \"JenkinsProvider\",\n    provider_name=\"MyJenkinsProvider\",\n    server_url=\"http://my-jenkins.com:8080\",\n    version=\"2\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "JenkinsProvider jenkinsProvider = new JenkinsProvider(this, \"JenkinsProvider\", new JenkinsProviderProps {\n    ProviderName = \"MyJenkinsProvider\",\n    ServerUrl = \"http://my-jenkins.com:8080\",\n    Version = \"2\"\n});",
          "version": "1"
        },
        "java": {
          "source": "JenkinsProvider jenkinsProvider = JenkinsProvider.Builder.create(this, \"JenkinsProvider\")\n        .providerName(\"MyJenkinsProvider\")\n        .serverUrl(\"http://my-jenkins.com:8080\")\n        .version(\"2\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "jenkinsProvider := codepipeline_actions.NewJenkinsProvider(this, jsii.String(\"JenkinsProvider\"), &jenkinsProviderProps{\n\tproviderName: jsii.String(\"MyJenkinsProvider\"),\n\tserverUrl: jsii.String(\"http://my-jenkins.com:8080\"),\n\tversion: jsii.String(\"2\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const jenkinsProvider = new codepipeline_actions.JenkinsProvider(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.JenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsProviderProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst jenkinsProvider = new codepipeline_actions.JenkinsProvider(this, 'JenkinsProvider', {\n  providerName: 'MyJenkinsProvider',\n  serverUrl: 'http://my-jenkins.com:8080',\n  version: '2', // optional, default: '1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "372071b32cc6ca938cd3312414a6ec728dc89df74f84904c3117533b5e07ba65"
    },
    "4f458d80d346bca9c8d38602db291d55da6682e64b2db36366747f92e4ed207e": {
      "translations": {
        "python": {
          "source": "\"MyJenkinsProvider\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"MyJenkinsProvider\";",
          "version": "1"
        },
        "java": {
          "source": "\"MyJenkinsProvider\";",
          "version": "1"
        },
        "go": {
          "source": "\"MyJenkinsProvider\"",
          "version": "1"
        },
        "$": {
          "source": "'MyJenkinsProvider'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsProviderProps",
          "memberName": "providerName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'MyJenkinsProvider'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "bfecb7bf490960e1abe3a74e030967c9046afec2ac5332086884aaec5e15d832": {
      "translations": {
        "python": {
          "source": "\"http://myjenkins.com:8080\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"http://myjenkins.com:8080\";",
          "version": "1"
        },
        "java": {
          "source": "\"http://myjenkins.com:8080\";",
          "version": "1"
        },
        "go": {
          "source": "\"http://myjenkins.com:8080\"",
          "version": "1"
        },
        "$": {
          "source": "'http://myjenkins.com:8080'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.JenkinsProviderProps",
          "memberName": "serverUrl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'http://myjenkins.com:8080'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "faa81bb88f09845f5e0ed811e0be3a8f5a8408ac4c2c83aab6e205d9d82f0bcd": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nsource_output = codepipeline.Artifact()\nbuild_output = codepipeline.Artifact()\nlambda_action = codepipeline_actions.LambdaInvokeAction(\n    action_name=\"Lambda\",\n    inputs=[source_output, build_output\n    ],\n    outputs=[\n        codepipeline.Artifact(\"Out1\"),\n        codepipeline.Artifact(\"Out2\")\n    ],\n    lambda_=fn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nArtifact sourceOutput = new Artifact();\nArtifact buildOutput = new Artifact();\nLambdaInvokeAction lambdaAction = new LambdaInvokeAction(new LambdaInvokeActionProps {\n    ActionName = \"Lambda\",\n    Inputs = new [] { sourceOutput, buildOutput },\n    Outputs = new [] {\n        new Artifact(\"Out1\"),\n        new Artifact(\"Out2\") },\n    Lambda = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nArtifact sourceOutput = new Artifact();\nArtifact buildOutput = new Artifact();\nLambdaInvokeAction lambdaAction = LambdaInvokeAction.Builder.create()\n        .actionName(\"Lambda\")\n        .inputs(List.of(sourceOutput, buildOutput))\n        .outputs(List.of(\n            new Artifact(\"Out1\"),\n            new Artifact(\"Out2\")))\n        .lambda(fn)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nsourceOutput := codepipeline.NewArtifact()\nbuildOutput := codepipeline.NewArtifact()\nlambdaAction := codepipeline_actions.NewLambdaInvokeAction(&lambdaInvokeActionProps{\n\tactionName: jsii.String(\"Lambda\"),\n\tinputs: []artifact{\n\t\tsourceOutput,\n\t\tbuildOutput,\n\t},\n\toutputs: []*artifact{\n\t\tcodepipeline.NewArtifact(jsii.String(\"Out1\")),\n\t\tcodepipeline.NewArtifact(jsii.String(\"Out2\")),\n\t},\n\tlambda: fn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst sourceOutput = new codepipeline.Artifact();\nconst buildOutput = new codepipeline.Artifact();\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  inputs: [\n    sourceOutput,\n    buildOutput,\n  ],\n  outputs: [\n    new codepipeline.Artifact('Out1'),\n    new codepipeline.Artifact('Out2'),\n  ],\n  lambda: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst buildOutput = new codepipeline.Artifact();\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  inputs: [\n    sourceOutput,\n    buildOutput,\n  ],\n  outputs: [\n    new codepipeline.Artifact('Out1'),\n    new codepipeline.Artifact('Out2'),\n  ],\n  lambda: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 5,
        "197": 5,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8f375e4238653783ad7c5f2d7ffa0b37e5e602d06fbf997824b0b42dd1a87b08"
    },
    "4b65ebb70f61f04cb7ca7a0f2bff3e36b82232f737515b0d3e6596b2cbe195c0": {
      "translations": {
        "python": {
          "source": "# fn: lambda.Function\n\nsource_output = codepipeline.Artifact()\nbuild_output = codepipeline.Artifact()\nlambda_action = codepipeline_actions.LambdaInvokeAction(\n    action_name=\"Lambda\",\n    inputs=[source_output, build_output\n    ],\n    outputs=[\n        codepipeline.Artifact(\"Out1\"),\n        codepipeline.Artifact(\"Out2\")\n    ],\n    lambda_=fn\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Function fn;\n\nArtifact sourceOutput = new Artifact();\nArtifact buildOutput = new Artifact();\nLambdaInvokeAction lambdaAction = new LambdaInvokeAction(new LambdaInvokeActionProps {\n    ActionName = \"Lambda\",\n    Inputs = new [] { sourceOutput, buildOutput },\n    Outputs = new [] {\n        new Artifact(\"Out1\"),\n        new Artifact(\"Out2\") },\n    Lambda = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nArtifact sourceOutput = new Artifact();\nArtifact buildOutput = new Artifact();\nLambdaInvokeAction lambdaAction = LambdaInvokeAction.Builder.create()\n        .actionName(\"Lambda\")\n        .inputs(List.of(sourceOutput, buildOutput))\n        .outputs(List.of(\n            new Artifact(\"Out1\"),\n            new Artifact(\"Out2\")))\n        .lambda(fn)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var fn function\n\nsourceOutput := codepipeline.NewArtifact()\nbuildOutput := codepipeline.NewArtifact()\nlambdaAction := codepipeline_actions.NewLambdaInvokeAction(&lambdaInvokeActionProps{\n\tactionName: jsii.String(\"Lambda\"),\n\tinputs: []artifact{\n\t\tsourceOutput,\n\t\tbuildOutput,\n\t},\n\toutputs: []*artifact{\n\t\tcodepipeline.NewArtifact(jsii.String(\"Out1\")),\n\t\tcodepipeline.NewArtifact(jsii.String(\"Out2\")),\n\t},\n\tlambda: fn,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst sourceOutput = new codepipeline.Artifact();\nconst buildOutput = new codepipeline.Artifact();\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  inputs: [\n    sourceOutput,\n    buildOutput,\n  ],\n  outputs: [\n    new codepipeline.Artifact('Out1'),\n    new codepipeline.Artifact('Out2'),\n  ],\n  lambda: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst buildOutput = new codepipeline.Artifact();\nconst lambdaAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  inputs: [\n    sourceOutput,\n    buildOutput,\n  ],\n  outputs: [\n    new codepipeline.Artifact('Out1'),\n    new codepipeline.Artifact('Out2'),\n  ],\n  lambda: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 5,
        "197": 5,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8f375e4238653783ad7c5f2d7ffa0b37e5e602d06fbf997824b0b42dd1a87b08"
    },
    "b4df32f9ad6d8e461928b9515aaa9b1e310f07608b66a24c45c748607bce1fe4": {
      "translations": {
        "python": {
          "source": "pipeline = codepipeline.Pipeline(self, \"MyPipeline\")\napprove_stage = pipeline.add_stage(stage_name=\"Approve\")\nmanual_approval_action = codepipeline_actions.ManualApprovalAction(\n    action_name=\"Approve\"\n)\napprove_stage.add_action(manual_approval_action)\n\nrole = iam.Role.from_role_arn(self, \"Admin\", Arn.format(ArnComponents(service=\"iam\", resource=\"role\", resource_name=\"Admin\"), self))\nmanual_approval_action.grant_manual_approval(role)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.AddStage(new StageOptions { StageName = \"Approve\" });\nManualApprovalAction manualApprovalAction = new ManualApprovalAction(new ManualApprovalActionProps {\n    ActionName = \"Approve\"\n});\napproveStage.AddAction(manualApprovalAction);\n\nIRole role = Role.FromRoleArn(this, \"Admin\", Arn.Format(new ArnComponents { Service = \"iam\", Resource = \"role\", ResourceName = \"Admin\" }, this));\nmanualApprovalAction.GrantManualApproval(role);",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.addStage(StageOptions.builder().stageName(\"Approve\").build());\nManualApprovalAction manualApprovalAction = ManualApprovalAction.Builder.create()\n        .actionName(\"Approve\")\n        .build();\napproveStage.addAction(manualApprovalAction);\n\nIRole role = Role.fromRoleArn(this, \"Admin\", Arn.format(ArnComponents.builder().service(\"iam\").resource(\"role\").resourceName(\"Admin\").build(), this));\nmanualApprovalAction.grantManualApproval(role);",
          "version": "1"
        },
        "go": {
          "source": "pipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\napproveStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Approve\"),\n})\nmanualApprovalAction := codepipeline_actions.NewManualApprovalAction(&manualApprovalActionProps{\n\tactionName: jsii.String(\"Approve\"),\n})\napproveStage.addAction(manualApprovalAction)\n\nrole := iam.role.fromRoleArn(this, jsii.String(\"Admin\"), awscdkcore.Arn.format(&arnComponents{\n\tservice: jsii.String(\"iam\"),\n\tresource: jsii.String(\"role\"),\n\tresourceName: jsii.String(\"Admin\"),\n}, this))\nmanualApprovalAction.grantManualApproval(role)",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n});\napproveStage.addAction(manualApprovalAction);\n\nconst role = iam.Role.fromRoleArn(this, 'Admin', Arn.format({ service: 'iam', resource: 'role', resourceName: 'Admin' }, this));\nmanualApprovalAction.grantManualApproval(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction#grantManualApproval",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/core.Arn#format",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n});\napproveStage.addAction(manualApprovalAction);\n\nconst role = iam.Role.fromRoleArn(this, 'Admin', Arn.format({ service: 'iam', resource: 'role', resourceName: 'Admin' }, this));\nmanualApprovalAction.grantManualApproval(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 26,
        "104": 3,
        "193": 3,
        "194": 8,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "b24982d9e02a1824fbe012feaa2f1affb2a1fbc78f7e777978a3d20444b1efef"
    },
    "df6d98e2e022c512297c0ce86617332c914d67046919c1ee447c9b1f9ec5f4a0": {
      "translations": {
        "python": {
          "source": "pipeline = codepipeline.Pipeline(self, \"MyPipeline\")\napprove_stage = pipeline.add_stage(stage_name=\"Approve\")\nmanual_approval_action = codepipeline_actions.ManualApprovalAction(\n    action_name=\"Approve\"\n)\napprove_stage.add_action(manual_approval_action)\n\nrole = iam.Role.from_role_arn(self, \"Admin\", Arn.format(ArnComponents(service=\"iam\", resource=\"role\", resource_name=\"Admin\"), self))\nmanual_approval_action.grant_manual_approval(role)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.AddStage(new StageOptions { StageName = \"Approve\" });\nManualApprovalAction manualApprovalAction = new ManualApprovalAction(new ManualApprovalActionProps {\n    ActionName = \"Approve\"\n});\napproveStage.AddAction(manualApprovalAction);\n\nIRole role = Role.FromRoleArn(this, \"Admin\", Arn.Format(new ArnComponents { Service = \"iam\", Resource = \"role\", ResourceName = \"Admin\" }, this));\nmanualApprovalAction.GrantManualApproval(role);",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline = new Pipeline(this, \"MyPipeline\");\nIStage approveStage = pipeline.addStage(StageOptions.builder().stageName(\"Approve\").build());\nManualApprovalAction manualApprovalAction = ManualApprovalAction.Builder.create()\n        .actionName(\"Approve\")\n        .build();\napproveStage.addAction(manualApprovalAction);\n\nIRole role = Role.fromRoleArn(this, \"Admin\", Arn.format(ArnComponents.builder().service(\"iam\").resource(\"role\").resourceName(\"Admin\").build(), this));\nmanualApprovalAction.grantManualApproval(role);",
          "version": "1"
        },
        "go": {
          "source": "pipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\napproveStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Approve\"),\n})\nmanualApprovalAction := codepipeline_actions.NewManualApprovalAction(&manualApprovalActionProps{\n\tactionName: jsii.String(\"Approve\"),\n})\napproveStage.addAction(manualApprovalAction)\n\nrole := iam.role.fromRoleArn(this, jsii.String(\"Admin\"), awscdkcore.Arn.format(&arnComponents{\n\tservice: jsii.String(\"iam\"),\n\tresource: jsii.String(\"role\"),\n\tresourceName: jsii.String(\"Admin\"),\n}, this))\nmanualApprovalAction.grantManualApproval(role)",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n});\napproveStage.addAction(manualApprovalAction);\n\nconst role = iam.Role.fromRoleArn(this, 'Admin', Arn.format({ service: 'iam', resource: 'role', resourceName: 'Admin' }, this));\nmanualApprovalAction.grantManualApproval(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction#grantManualApproval",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/core.Arn#format",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst approveStage = pipeline.addStage({ stageName: 'Approve' });\nconst manualApprovalAction = new codepipeline_actions.ManualApprovalAction({\n  actionName: 'Approve',\n});\napproveStage.addAction(manualApprovalAction);\n\nconst role = iam.Role.fromRoleArn(this, 'Admin', Arn.format({ service: 'iam', resource: 'role', resourceName: 'Admin' }, this));\nmanualApprovalAction.grantManualApproval(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 26,
        "104": 3,
        "193": 3,
        "194": 8,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "b24982d9e02a1824fbe012feaa2f1affb2a1fbc78f7e777978a3d20444b1efef"
    },
    "fda417a722a662d90b23480dfbfb14437c4a9973816faeefc5b96f45e9d65fe1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\norganizations_deployment_props = codepipeline_actions.OrganizationsDeploymentProps(\n    auto_deployment=codepipeline_actions.StackSetOrganizationsAutoDeployment.ENABLED\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nOrganizationsDeploymentProps organizationsDeploymentProps = new OrganizationsDeploymentProps {\n    AutoDeployment = StackSetOrganizationsAutoDeployment.ENABLED\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nOrganizationsDeploymentProps organizationsDeploymentProps = OrganizationsDeploymentProps.builder()\n        .autoDeployment(StackSetOrganizationsAutoDeployment.ENABLED)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\norganizationsDeploymentProps := &organizationsDeploymentProps{\n\tautoDeployment: codepipeline_actions.stackSetOrganizationsAutoDeployment_ENABLED,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst organizationsDeploymentProps: codepipeline_actions.OrganizationsDeploymentProps = {\n  autoDeployment: codepipeline_actions.StackSetOrganizationsAutoDeployment.ENABLED,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.OrganizationsDeploymentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.OrganizationsDeploymentProps",
        "@aws-cdk/aws-codepipeline-actions.StackSetOrganizationsAutoDeployment",
        "@aws-cdk/aws-codepipeline-actions.StackSetOrganizationsAutoDeployment#ENABLED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst organizationsDeploymentProps: codepipeline_actions.OrganizationsDeploymentProps = {\n  autoDeployment: codepipeline_actions.StackSetOrganizationsAutoDeployment.ENABLED,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "11ba95edf9d4e9bf87dadc8da3b08494f3a18f4b15165229dfc890d775e5ab72"
    },
    "81b2973b4c5ad9ed3168af48f39ae7a4fda6ceab83af2b5d8e999926d2aa6a49": {
      "translations": {
        "python": {
          "source": "source_output = codepipeline.Artifact()\ntarget_bucket = s3.Bucket(self, \"MyBucket\")\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ndeploy_action = codepipeline_actions.S3DeployAction(\n    action_name=\"S3Deploy\",\n    bucket=target_bucket,\n    input=source_output\n)\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[deploy_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput = new Artifact();\nBucket targetBucket = new Bucket(this, \"MyBucket\");\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nS3DeployAction deployAction = new S3DeployAction(new S3DeployActionProps {\n    ActionName = \"S3Deploy\",\n    Bucket = targetBucket,\n    Input = sourceOutput\n});\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] { deployAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput = new Artifact();\nBucket targetBucket = new Bucket(this, \"MyBucket\");\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nS3DeployAction deployAction = S3DeployAction.Builder.create()\n        .actionName(\"S3Deploy\")\n        .bucket(targetBucket)\n        .input(sourceOutput)\n        .build();\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(deployAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "sourceOutput := codepipeline.NewArtifact()\ntargetBucket := s3.NewBucket(this, jsii.String(\"MyBucket\"))\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\ndeployAction := codepipeline_actions.NewS3DeployAction(&s3DeployActionProps{\n\tactionName: jsii.String(\"S3Deploy\"),\n\tbucket: targetBucket,\n\tinput: sourceOutput,\n})\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tdeployAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst targetBucket = new s3.Bucket(this, 'MyBucket');\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst deployAction = new codepipeline_actions.S3DeployAction({\n  actionName: 'S3Deploy',\n  bucket: targetBucket,\n  input: sourceOutput,\n});\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.S3DeployAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst targetBucket = new s3.Bucket(this, 'MyBucket');\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst deployAction = new codepipeline_actions.S3DeployAction({\n  actionName: 'S3Deploy',\n  bucket: targetBucket,\n  input: sourceOutput,\n});\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 5
      },
      "fqnsFingerprint": "021d7c2d488bd055aacb59e2ca5e0985af785e3e71d9367d40aa92819e897571"
    },
    "46a2c73db73d082177cfa68d45db7eba10e6e3bf3196820a60bee930315b1cae": {
      "translations": {
        "python": {
          "source": "source_output = codepipeline.Artifact()\ntarget_bucket = s3.Bucket(self, \"MyBucket\")\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ndeploy_action = codepipeline_actions.S3DeployAction(\n    action_name=\"S3Deploy\",\n    bucket=target_bucket,\n    input=source_output\n)\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[deploy_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceOutput = new Artifact();\nBucket targetBucket = new Bucket(this, \"MyBucket\");\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nS3DeployAction deployAction = new S3DeployAction(new S3DeployActionProps {\n    ActionName = \"S3Deploy\",\n    Bucket = targetBucket,\n    Input = sourceOutput\n});\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] { deployAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceOutput = new Artifact();\nBucket targetBucket = new Bucket(this, \"MyBucket\");\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nS3DeployAction deployAction = S3DeployAction.Builder.create()\n        .actionName(\"S3Deploy\")\n        .bucket(targetBucket)\n        .input(sourceOutput)\n        .build();\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(deployAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "sourceOutput := codepipeline.NewArtifact()\ntargetBucket := s3.NewBucket(this, jsii.String(\"MyBucket\"))\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\ndeployAction := codepipeline_actions.NewS3DeployAction(&s3DeployActionProps{\n\tactionName: jsii.String(\"S3Deploy\"),\n\tbucket: targetBucket,\n\tinput: sourceOutput,\n})\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tdeployAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst targetBucket = new s3.Bucket(this, 'MyBucket');\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst deployAction = new codepipeline_actions.S3DeployAction({\n  actionName: 'S3Deploy',\n  bucket: targetBucket,\n  input: sourceOutput,\n});\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst targetBucket = new s3.Bucket(this, 'MyBucket');\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst deployAction = new codepipeline_actions.S3DeployAction({\n  actionName: 'S3Deploy',\n  bucket: targetBucket,\n  input: sourceOutput,\n});\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [deployAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 5
      },
      "fqnsFingerprint": "021d7c2d488bd055aacb59e2ca5e0985af785e3e71d9367d40aa92819e897571"
    },
    "7d07777f1475fb084e366844cc35924973b9b0248bae2615aebca7f690d16a2e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudtrail as cloudtrail\n\n# source_bucket: s3.Bucket\n\nsource_output = codepipeline.Artifact()\nkey = \"some/key.zip\"\ntrail = cloudtrail.Trail(self, \"CloudTrail\")\ntrail.add_s3_event_selector([cloudtrail.S3EventSelector(\n    bucket=source_bucket,\n    object_prefix=key\n)],\n    read_write_type=cloudtrail.ReadWriteType.WRITE_ONLY\n)\nsource_action = codepipeline_actions.S3SourceAction(\n    action_name=\"S3Source\",\n    bucket_key=key,\n    bucket=source_bucket,\n    output=source_output,\n    trigger=codepipeline_actions.S3Trigger.EVENTS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudTrail;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nstring key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.AddS3EventSelector(new [] { new S3EventSelector {\n    Bucket = sourceBucket,\n    ObjectPrefix = key\n} }, new AddEventSelectorOptions {\n    ReadWriteType = ReadWriteType.WRITE_ONLY\n});\nS3SourceAction sourceAction = new S3SourceAction(new S3SourceActionProps {\n    ActionName = \"S3Source\",\n    BucketKey = key,\n    Bucket = sourceBucket,\n    Output = sourceOutput,\n    Trigger = S3Trigger.EVENTS\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudtrail.*;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nString key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.addS3EventSelector(List.of(S3EventSelector.builder()\n        .bucket(sourceBucket)\n        .objectPrefix(key)\n        .build()), AddEventSelectorOptions.builder()\n        .readWriteType(ReadWriteType.WRITE_ONLY)\n        .build());\nS3SourceAction sourceAction = S3SourceAction.Builder.create()\n        .actionName(\"S3Source\")\n        .bucketKey(key)\n        .bucket(sourceBucket)\n        .output(sourceOutput)\n        .trigger(S3Trigger.EVENTS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudtrail \"github.com/aws-samples/dummy/awscdkawscloudtrail\"\n\nvar sourceBucket bucket\n\nsourceOutput := codepipeline.NewArtifact()\nkey := \"some/key.zip\"\ntrail := cloudtrail.NewTrail(this, jsii.String(\"CloudTrail\"))\ntrail.addS3EventSelector([]s3EventSelector{\n\t&s3EventSelector{\n\t\tbucket: sourceBucket,\n\t\tobjectPrefix: key,\n\t},\n}, &addEventSelectorOptions{\n\treadWriteType: cloudtrail.readWriteType_WRITE_ONLY,\n})\nsourceAction := codepipeline_actions.NewS3SourceAction(&s3SourceActionProps{\n\tactionName: jsii.String(\"S3Source\"),\n\tbucketKey: key,\n\tbucket: sourceBucket,\n\toutput: sourceOutput,\n\ttrigger: codepipeline_actions.s3Trigger_EVENTS,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.S3SourceAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudtrail.AddEventSelectorOptions",
        "@aws-cdk/aws-cloudtrail.ReadWriteType",
        "@aws-cdk/aws-cloudtrail.ReadWriteType#WRITE_ONLY",
        "@aws-cdk/aws-cloudtrail.Trail",
        "@aws-cdk/aws-cloudtrail.Trail#addS3EventSelector",
        "@aws-cdk/aws-codepipeline-actions.S3SourceAction",
        "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger#EVENTS",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 1,
        "197": 3,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6cf56cb6ee7ffe352c58842b0983db1e5199dcc662a376079683912fb3e34824"
    },
    "ed0e0f1f4287d6752105fdd82220d27a5dce26ad501daa9eaaa6b75ea8cdd594": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudtrail as cloudtrail\n\n# source_bucket: s3.Bucket\n\nsource_output = codepipeline.Artifact()\nkey = \"some/key.zip\"\ntrail = cloudtrail.Trail(self, \"CloudTrail\")\ntrail.add_s3_event_selector([cloudtrail.S3EventSelector(\n    bucket=source_bucket,\n    object_prefix=key\n)],\n    read_write_type=cloudtrail.ReadWriteType.WRITE_ONLY\n)\nsource_action = codepipeline_actions.S3SourceAction(\n    action_name=\"S3Source\",\n    bucket_key=key,\n    bucket=source_bucket,\n    output=source_output,\n    trigger=codepipeline_actions.S3Trigger.EVENTS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudTrail;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nstring key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.AddS3EventSelector(new [] { new S3EventSelector {\n    Bucket = sourceBucket,\n    ObjectPrefix = key\n} }, new AddEventSelectorOptions {\n    ReadWriteType = ReadWriteType.WRITE_ONLY\n});\nS3SourceAction sourceAction = new S3SourceAction(new S3SourceActionProps {\n    ActionName = \"S3Source\",\n    BucketKey = key,\n    Bucket = sourceBucket,\n    Output = sourceOutput,\n    Trigger = S3Trigger.EVENTS\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudtrail.*;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nString key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.addS3EventSelector(List.of(S3EventSelector.builder()\n        .bucket(sourceBucket)\n        .objectPrefix(key)\n        .build()), AddEventSelectorOptions.builder()\n        .readWriteType(ReadWriteType.WRITE_ONLY)\n        .build());\nS3SourceAction sourceAction = S3SourceAction.Builder.create()\n        .actionName(\"S3Source\")\n        .bucketKey(key)\n        .bucket(sourceBucket)\n        .output(sourceOutput)\n        .trigger(S3Trigger.EVENTS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudtrail \"github.com/aws-samples/dummy/awscdkawscloudtrail\"\n\nvar sourceBucket bucket\n\nsourceOutput := codepipeline.NewArtifact()\nkey := \"some/key.zip\"\ntrail := cloudtrail.NewTrail(this, jsii.String(\"CloudTrail\"))\ntrail.addS3EventSelector([]s3EventSelector{\n\t&s3EventSelector{\n\t\tbucket: sourceBucket,\n\t\tobjectPrefix: key,\n\t},\n}, &addEventSelectorOptions{\n\treadWriteType: cloudtrail.readWriteType_WRITE_ONLY,\n})\nsourceAction := codepipeline_actions.NewS3SourceAction(&s3SourceActionProps{\n\tactionName: jsii.String(\"S3Source\"),\n\tbucketKey: key,\n\tbucket: sourceBucket,\n\toutput: sourceOutput,\n\ttrigger: codepipeline_actions.s3Trigger_EVENTS,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudtrail.AddEventSelectorOptions",
        "@aws-cdk/aws-cloudtrail.ReadWriteType",
        "@aws-cdk/aws-cloudtrail.ReadWriteType#WRITE_ONLY",
        "@aws-cdk/aws-cloudtrail.Trail",
        "@aws-cdk/aws-cloudtrail.Trail#addS3EventSelector",
        "@aws-cdk/aws-codepipeline-actions.S3SourceAction",
        "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger#EVENTS",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 1,
        "197": 3,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6cf56cb6ee7ffe352c58842b0983db1e5199dcc662a376079683912fb3e34824"
    },
    "22a7b58dbefae61b8727b84f5c0a46f90e6364b3c69966c9473a7f17a410f70e": {
      "translations": {
        "python": {
          "source": "\"path/to/file.zip\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"path/to/file.zip\";",
          "version": "1"
        },
        "java": {
          "source": "\"path/to/file.zip\";",
          "version": "1"
        },
        "go": {
          "source": "\"path/to/file.zip\"",
          "version": "1"
        },
        "$": {
          "source": "'path/to/file.zip'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps",
          "memberName": "bucketKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'path/to/file.zip'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "4806bef6381942416608ffaab3f40eb4d5fa2934e1acf02adb7732b98184b1fe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\n\ns3_source_variables = codepipeline_actions.S3SourceVariables(\n    e_tag=\"eTag\",\n    version_id=\"versionId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\n\nS3SourceVariables s3SourceVariables = new S3SourceVariables {\n    ETag = \"eTag\",\n    VersionId = \"versionId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\n\nS3SourceVariables s3SourceVariables = S3SourceVariables.builder()\n        .eTag(\"eTag\")\n        .versionId(\"versionId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport codepipeline_actions \"github.com/aws-samples/dummy/awscdkawscodepipelineactions\"\n\ns3SourceVariables := &s3SourceVariables{\n\teTag: jsii.String(\"eTag\"),\n\tversionId: jsii.String(\"versionId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nconst s3SourceVariables: codepipeline_actions.S3SourceVariables = {\n  eTag: 'eTag',\n  versionId: 'versionId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.S3SourceVariables"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3SourceVariables"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3SourceVariables: codepipeline_actions.S3SourceVariables = {\n  eTag: 'eTag',\n  versionId: 'versionId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a978e701559f0deea9a5281041a5bd7f009bc1256d8d6c522797cbc7b49fab14"
    },
    "1235f2c7215de8ae5f561c87af7c23cbfd601b0c3f7664ee6bbd0447db1421d1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudtrail as cloudtrail\n\n# source_bucket: s3.Bucket\n\nsource_output = codepipeline.Artifact()\nkey = \"some/key.zip\"\ntrail = cloudtrail.Trail(self, \"CloudTrail\")\ntrail.add_s3_event_selector([cloudtrail.S3EventSelector(\n    bucket=source_bucket,\n    object_prefix=key\n)],\n    read_write_type=cloudtrail.ReadWriteType.WRITE_ONLY\n)\nsource_action = codepipeline_actions.S3SourceAction(\n    action_name=\"S3Source\",\n    bucket_key=key,\n    bucket=source_bucket,\n    output=source_output,\n    trigger=codepipeline_actions.S3Trigger.EVENTS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudTrail;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nstring key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.AddS3EventSelector(new [] { new S3EventSelector {\n    Bucket = sourceBucket,\n    ObjectPrefix = key\n} }, new AddEventSelectorOptions {\n    ReadWriteType = ReadWriteType.WRITE_ONLY\n});\nS3SourceAction sourceAction = new S3SourceAction(new S3SourceActionProps {\n    ActionName = \"S3Source\",\n    BucketKey = key,\n    Bucket = sourceBucket,\n    Output = sourceOutput,\n    Trigger = S3Trigger.EVENTS\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudtrail.*;\n\nBucket sourceBucket;\n\nArtifact sourceOutput = new Artifact();\nString key = \"some/key.zip\";\nTrail trail = new Trail(this, \"CloudTrail\");\ntrail.addS3EventSelector(List.of(S3EventSelector.builder()\n        .bucket(sourceBucket)\n        .objectPrefix(key)\n        .build()), AddEventSelectorOptions.builder()\n        .readWriteType(ReadWriteType.WRITE_ONLY)\n        .build());\nS3SourceAction sourceAction = S3SourceAction.Builder.create()\n        .actionName(\"S3Source\")\n        .bucketKey(key)\n        .bucket(sourceBucket)\n        .output(sourceOutput)\n        .trigger(S3Trigger.EVENTS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import cloudtrail \"github.com/aws-samples/dummy/awscdkawscloudtrail\"\n\nvar sourceBucket bucket\n\nsourceOutput := codepipeline.NewArtifact()\nkey := \"some/key.zip\"\ntrail := cloudtrail.NewTrail(this, jsii.String(\"CloudTrail\"))\ntrail.addS3EventSelector([]s3EventSelector{\n\t&s3EventSelector{\n\t\tbucket: sourceBucket,\n\t\tobjectPrefix: key,\n\t},\n}, &addEventSelectorOptions{\n\treadWriteType: cloudtrail.readWriteType_WRITE_ONLY,\n})\nsourceAction := codepipeline_actions.NewS3SourceAction(&s3SourceActionProps{\n\tactionName: jsii.String(\"S3Source\"),\n\tbucketKey: key,\n\tbucket: sourceBucket,\n\toutput: sourceOutput,\n\ttrigger: codepipeline_actions.s3Trigger_EVENTS,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.S3Trigger"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudtrail.AddEventSelectorOptions",
        "@aws-cdk/aws-cloudtrail.ReadWriteType",
        "@aws-cdk/aws-cloudtrail.ReadWriteType#WRITE_ONLY",
        "@aws-cdk/aws-cloudtrail.Trail",
        "@aws-cdk/aws-cloudtrail.Trail#addS3EventSelector",
        "@aws-cdk/aws-codepipeline-actions.S3SourceAction",
        "@aws-cdk/aws-codepipeline-actions.S3SourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger#EVENTS",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudtrail from '@aws-cdk/aws-cloudtrail';\n\ndeclare const sourceBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceOutput = new codepipeline.Artifact();\nconst key = 'some/key.zip';\nconst trail = new cloudtrail.Trail(this, 'CloudTrail');\ntrail.addS3EventSelector([{\n  bucket: sourceBucket,\n  objectPrefix: key,\n}], {\n  readWriteType: cloudtrail.ReadWriteType.WRITE_ONLY,\n});\nconst sourceAction = new codepipeline_actions.S3SourceAction({\n  actionName: 'S3Source',\n  bucketKey: key,\n  bucket: sourceBucket,\n  output: sourceOutput,\n  trigger: codepipeline_actions.S3Trigger.EVENTS, // default: S3Trigger.POLL\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 35,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 1,
        "197": 3,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6cf56cb6ee7ffe352c58842b0983db1e5199dcc662a376079683912fb3e34824"
    },
    "d708d24f54835a0e68f9e0b395d85447e83ea76cba6e2ab896cd9841cec94af7": {
      "translations": {
        "python": {
          "source": "existing_admin_role = iam.Role.from_role_name(self, \"AdminRole\", \"AWSCloudFormationStackSetAdministrationRole\")\n\ndeployment_model = codepipeline_actions.StackSetDeploymentModel.self_managed(\n    # Use an existing Role. Leave this out to create a new Role.\n    administration_role=existing_admin_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IRole existingAdminRole = Role.FromRoleName(this, \"AdminRole\", \"AWSCloudFormationStackSetAdministrationRole\");\n\nStackSetDeploymentModel deploymentModel = StackSetDeploymentModel.SelfManaged(new SelfManagedDeploymentProps {\n    // Use an existing Role. Leave this out to create a new Role.\n    AdministrationRole = existingAdminRole\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole existingAdminRole = Role.fromRoleName(this, \"AdminRole\", \"AWSCloudFormationStackSetAdministrationRole\");\n\nStackSetDeploymentModel deploymentModel = StackSetDeploymentModel.selfManaged(SelfManagedDeploymentProps.builder()\n        // Use an existing Role. Leave this out to create a new Role.\n        .administrationRole(existingAdminRole)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "existingAdminRole := iam.role.fromRoleName(this, jsii.String(\"AdminRole\"), jsii.String(\"AWSCloudFormationStackSetAdministrationRole\"))\n\ndeploymentModel := codepipeline_actions.stackSetDeploymentModel.selfManaged(&selfManagedDeploymentProps{\n\t// Use an existing Role. Leave this out to create a new Role.\n\tadministrationRole: existingAdminRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const existingAdminRole = iam.Role.fromRoleName(this, 'AdminRole', 'AWSCloudFormationStackSetAdministrationRole');\n\nconst deploymentModel = codepipeline_actions.StackSetDeploymentModel.selfManaged({\n   // Use an existing Role. Leave this out to create a new Role.\n   administrationRole: existingAdminRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.SelfManagedDeploymentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.SelfManagedDeploymentProps",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleName",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst existingAdminRole = iam.Role.fromRoleName(this, 'AdminRole', 'AWSCloudFormationStackSetAdministrationRole');\n\nconst deploymentModel = codepipeline_actions.StackSetDeploymentModel.selfManaged({\n   // Use an existing Role. Leave this out to create a new Role.\n   administrationRole: existingAdminRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "1d3a156554d8c50cee3bba72f9fc50fc5b399f6efdee9c8160c105b5a7fab647"
    },
    "c815c43d37834e8e5c40926163f8cfebdfe22e4e15b54b5d704f1b728ade0d3e": {
      "translations": {
        "python": {
          "source": "cdk_build_output = codepipeline.Artifact()\nservice_catalog_deploy_action = codepipeline_actions.ServiceCatalogDeployActionBeta1(\n    action_name=\"ServiceCatalogDeploy\",\n    template_path=cdk_build_output.at_path(\"Sample.template.json\"),\n    product_version_name=\"Version - \" + Date.now.to_string,\n    product_version_description=\"This is a version from the pipeline with a new description.\",\n    product_id=\"prod-XXXXXXXX\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact cdkBuildOutput = new Artifact();\nServiceCatalogDeployActionBeta1 serviceCatalogDeployAction = new ServiceCatalogDeployActionBeta1(new ServiceCatalogDeployActionBeta1Props {\n    ActionName = \"ServiceCatalogDeploy\",\n    TemplatePath = cdkBuildOutput.AtPath(\"Sample.template.json\"),\n    ProductVersionName = \"Version - \" + Date.Now.ToString,\n    ProductVersionDescription = \"This is a version from the pipeline with a new description.\",\n    ProductId = \"prod-XXXXXXXX\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact cdkBuildOutput = new Artifact();\nServiceCatalogDeployActionBeta1 serviceCatalogDeployAction = ServiceCatalogDeployActionBeta1.Builder.create()\n        .actionName(\"ServiceCatalogDeploy\")\n        .templatePath(cdkBuildOutput.atPath(\"Sample.template.json\"))\n        .productVersionName(\"Version - \" + Date.getNow().getToString())\n        .productVersionDescription(\"This is a version from the pipeline with a new description.\")\n        .productId(\"prod-XXXXXXXX\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cdkBuildOutput := codepipeline.NewArtifact()\nserviceCatalogDeployAction := codepipeline_actions.NewServiceCatalogDeployActionBeta1(&serviceCatalogDeployActionBeta1Props{\n\tactionName: jsii.String(\"ServiceCatalogDeploy\"),\n\ttemplatePath: cdkBuildOutput.atPath(jsii.String(\"Sample.template.json\")),\n\tproductVersionName: jsii.String(\"Version - \" + date.now.toString),\n\tproductVersionDescription: jsii.String(\"This is a version from the pipeline with a new description.\"),\n\tproductId: jsii.String(\"prod-XXXXXXXX\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cdkBuildOutput = new codepipeline.Artifact();\nconst serviceCatalogDeployAction = new codepipeline_actions.ServiceCatalogDeployActionBeta1({\n  actionName: 'ServiceCatalogDeploy',\n  templatePath: cdkBuildOutput.atPath(\"Sample.template.json\"),\n  productVersionName: \"Version - \" + Date.now.toString,\n  productVersionDescription: \"This is a version from the pipeline with a new description.\",\n  productId: \"prod-XXXXXXXX\",\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1",
        "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1Props",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst serviceCatalogDeployAction = new codepipeline_actions.ServiceCatalogDeployActionBeta1({\n  actionName: 'ServiceCatalogDeploy',\n  templatePath: cdkBuildOutput.atPath(\"Sample.template.json\"),\n  productVersionName: \"Version - \" + Date.now.toString,\n  productVersionDescription: \"This is a version from the pipeline with a new description.\",\n  productId: \"prod-XXXXXXXX\",\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "39": 1,
        "75": 16,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "209": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "51c7332e46fc494576e4172833f97ba9a3684efcfad6d33af5fad2fcc0204dc2"
    },
    "061b59f81659d1efea3d1c1e5ab8ae04bbb8b7b09da08779a4471dff5b2de459": {
      "translations": {
        "python": {
          "source": "cdk_build_output = codepipeline.Artifact()\nservice_catalog_deploy_action = codepipeline_actions.ServiceCatalogDeployActionBeta1(\n    action_name=\"ServiceCatalogDeploy\",\n    template_path=cdk_build_output.at_path(\"Sample.template.json\"),\n    product_version_name=\"Version - \" + Date.now.to_string,\n    product_version_description=\"This is a version from the pipeline with a new description.\",\n    product_id=\"prod-XXXXXXXX\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact cdkBuildOutput = new Artifact();\nServiceCatalogDeployActionBeta1 serviceCatalogDeployAction = new ServiceCatalogDeployActionBeta1(new ServiceCatalogDeployActionBeta1Props {\n    ActionName = \"ServiceCatalogDeploy\",\n    TemplatePath = cdkBuildOutput.AtPath(\"Sample.template.json\"),\n    ProductVersionName = \"Version - \" + Date.Now.ToString,\n    ProductVersionDescription = \"This is a version from the pipeline with a new description.\",\n    ProductId = \"prod-XXXXXXXX\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact cdkBuildOutput = new Artifact();\nServiceCatalogDeployActionBeta1 serviceCatalogDeployAction = ServiceCatalogDeployActionBeta1.Builder.create()\n        .actionName(\"ServiceCatalogDeploy\")\n        .templatePath(cdkBuildOutput.atPath(\"Sample.template.json\"))\n        .productVersionName(\"Version - \" + Date.getNow().getToString())\n        .productVersionDescription(\"This is a version from the pipeline with a new description.\")\n        .productId(\"prod-XXXXXXXX\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "cdkBuildOutput := codepipeline.NewArtifact()\nserviceCatalogDeployAction := codepipeline_actions.NewServiceCatalogDeployActionBeta1(&serviceCatalogDeployActionBeta1Props{\n\tactionName: jsii.String(\"ServiceCatalogDeploy\"),\n\ttemplatePath: cdkBuildOutput.atPath(jsii.String(\"Sample.template.json\")),\n\tproductVersionName: jsii.String(\"Version - \" + date.now.toString),\n\tproductVersionDescription: jsii.String(\"This is a version from the pipeline with a new description.\"),\n\tproductId: jsii.String(\"prod-XXXXXXXX\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const cdkBuildOutput = new codepipeline.Artifact();\nconst serviceCatalogDeployAction = new codepipeline_actions.ServiceCatalogDeployActionBeta1({\n  actionName: 'ServiceCatalogDeploy',\n  templatePath: cdkBuildOutput.atPath(\"Sample.template.json\"),\n  productVersionName: \"Version - \" + Date.now.toString,\n  productVersionDescription: \"This is a version from the pipeline with a new description.\",\n  productId: \"prod-XXXXXXXX\",\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1Props"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1",
        "@aws-cdk/aws-codepipeline-actions.ServiceCatalogDeployActionBeta1Props",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst serviceCatalogDeployAction = new codepipeline_actions.ServiceCatalogDeployActionBeta1({\n  actionName: 'ServiceCatalogDeploy',\n  templatePath: cdkBuildOutput.atPath(\"Sample.template.json\"),\n  productVersionName: \"Version - \" + Date.now.toString,\n  productVersionDescription: \"This is a version from the pipeline with a new description.\",\n  productId: \"prod-XXXXXXXX\",\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "39": 1,
        "75": 16,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 2,
        "209": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "51c7332e46fc494576e4172833f97ba9a3684efcfad6d33af5fad2fcc0204dc2"
    },
    "c78b94f44f9447c4a0396e921afab564cd6f0cdf90f5d2f61dd9d81864af3590": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StackInstances"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "e33922a5ccfa307c3c9ce43300de5ee1ffcfb209fbc03c18f22cd32b4351835d": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "f767960ca6abb67261fa06940c73b01d348f86235a79d82578183e04fc9acae8": {
      "translations": {
        "python": {
          "source": "existing_admin_role = iam.Role.from_role_name(self, \"AdminRole\", \"AWSCloudFormationStackSetAdministrationRole\")\n\ndeployment_model = codepipeline_actions.StackSetDeploymentModel.self_managed(\n    # Use an existing Role. Leave this out to create a new Role.\n    administration_role=existing_admin_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IRole existingAdminRole = Role.FromRoleName(this, \"AdminRole\", \"AWSCloudFormationStackSetAdministrationRole\");\n\nStackSetDeploymentModel deploymentModel = StackSetDeploymentModel.SelfManaged(new SelfManagedDeploymentProps {\n    // Use an existing Role. Leave this out to create a new Role.\n    AdministrationRole = existingAdminRole\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole existingAdminRole = Role.fromRoleName(this, \"AdminRole\", \"AWSCloudFormationStackSetAdministrationRole\");\n\nStackSetDeploymentModel deploymentModel = StackSetDeploymentModel.selfManaged(SelfManagedDeploymentProps.builder()\n        // Use an existing Role. Leave this out to create a new Role.\n        .administrationRole(existingAdminRole)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "existingAdminRole := iam.role.fromRoleName(this, jsii.String(\"AdminRole\"), jsii.String(\"AWSCloudFormationStackSetAdministrationRole\"))\n\ndeploymentModel := codepipeline_actions.stackSetDeploymentModel.selfManaged(&selfManagedDeploymentProps{\n\t// Use an existing Role. Leave this out to create a new Role.\n\tadministrationRole: existingAdminRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const existingAdminRole = iam.Role.fromRoleName(this, 'AdminRole', 'AWSCloudFormationStackSetAdministrationRole');\n\nconst deploymentModel = codepipeline_actions.StackSetDeploymentModel.selfManaged({\n   // Use an existing Role. Leave this out to create a new Role.\n   administrationRole: existingAdminRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
          "memberName": "selfManaged"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.SelfManagedDeploymentProps",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleName",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst existingAdminRole = iam.Role.fromRoleName(this, 'AdminRole', 'AWSCloudFormationStackSetAdministrationRole');\n\nconst deploymentModel = codepipeline_actions.StackSetDeploymentModel.selfManaged({\n   // Use an existing Role. Leave this out to create a new Role.\n   administrationRole: existingAdminRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "1d3a156554d8c50cee3bba72f9fc50fc5b399f6efdee9c8160c105b5a7fab647"
    },
    "77ba0f0b7e1d1810db672722857982d5ce659efa34fbdb21da711b8e8afb956b": {
      "translations": {
        "python": {
          "source": "parameters = codepipeline_actions.StackSetParameters.from_literal({\n    \"BucketName\": \"my-bucket\",\n    \"Asset1\": \"true\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "StackSetParameters parameters = StackSetParameters.FromLiteral(new Dictionary<string, string> {\n    { \"BucketName\", \"my-bucket\" },\n    { \"Asset1\", \"true\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "StackSetParameters parameters = StackSetParameters.fromLiteral(Map.of(\n        \"BucketName\", \"my-bucket\",\n        \"Asset1\", \"true\"));",
          "version": "1"
        },
        "go": {
          "source": "parameters := codepipeline_actions.stackSetParameters.fromLiteral(map[string]*string{\n\t\"BucketName\": jsii.String(\"my-bucket\"),\n\t\"Asset1\": jsii.String(\"true\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const parameters = codepipeline_actions.StackSetParameters.fromLiteral({\n BucketName: 'my-bucket',\n Asset1: 'true',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StackSetParameters"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StackSetParameters",
        "@aws-cdk/aws-codepipeline-actions.StackSetParameters#fromLiteral"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parameters = codepipeline_actions.StackSetParameters.fromLiteral({\n BucketName: 'my-bucket',\n Asset1: 'true',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "053c87b6bb6cec9a7d819cf6167d0193038d62549bf9cc83282c55ffbbea4c3d"
    },
    "4c9d0bc39fd8820c2f49557396ba4fa09e094966d0a3dc86992026e284968aea": {
      "translations": {
        "python": {
          "source": "parameters = codepipeline_actions.StackSetParameters.from_literal({\n    \"BucketName\": \"my-bucket\",\n    \"Asset1\": \"true\"\n})",
          "version": "2"
        },
        "csharp": {
          "source": "StackSetParameters parameters = StackSetParameters.FromLiteral(new Dictionary<string, string> {\n    { \"BucketName\", \"my-bucket\" },\n    { \"Asset1\", \"true\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "StackSetParameters parameters = StackSetParameters.fromLiteral(Map.of(\n        \"BucketName\", \"my-bucket\",\n        \"Asset1\", \"true\"));",
          "version": "1"
        },
        "go": {
          "source": "parameters := codepipeline_actions.stackSetParameters.fromLiteral(map[string]*string{\n\t\"BucketName\": jsii.String(\"my-bucket\"),\n\t\"Asset1\": jsii.String(\"true\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "const parameters = codepipeline_actions.StackSetParameters.fromLiteral({\n BucketName: 'my-bucket',\n Asset1: 'true',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StackSetParameters",
          "memberName": "fromLiteral"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StackSetParameters",
        "@aws-cdk/aws-codepipeline-actions.StackSetParameters#fromLiteral"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parameters = codepipeline_actions.StackSetParameters.fromLiteral({\n BucketName: 'my-bucket',\n Asset1: 'true',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "053c87b6bb6cec9a7d819cf6167d0193038d62549bf9cc83282c55ffbbea4c3d"
    },
    "c2a77871c2579483ccef0a7985449d43d12df3451f8b51208c6db0d4e9babdef": {
      "translations": {
        "python": {
          "source": "# pipeline: codepipeline.Pipeline\n# source_output: codepipeline.Artifact\n\n\npipeline.add_stage(\n    stage_name=\"DeployStackSets\",\n    actions=[\n        # First, update the StackSet itself with the newest template\n        codepipeline_actions.CloudFormationDeployStackSetAction(\n            action_name=\"UpdateStackSet\",\n            run_order=1,\n            stack_set_name=\"MyStackSet\",\n            template=codepipeline_actions.StackSetTemplate.from_artifact_path(source_output.at_path(\"template.yaml\")),\n\n            # Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            deployment_model=codepipeline_actions.StackSetDeploymentModel.self_managed(),\n            # This deploys to a set of accounts\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"111111111111\"], [\"us-east-1\", \"eu-west-1\"])\n        ),\n\n        # Afterwards, update/create additional instances in other accounts\n        codepipeline_actions.CloudFormationDeployStackInstancesAction(\n            action_name=\"AddMoreInstances\",\n            run_order=2,\n            stack_set_name=\"MyStackSet\",\n            stack_instances=codepipeline_actions.StackInstances.in_accounts([\"222222222222\", \"333333333333\"], [\"us-east-1\", \"eu-west-1\"])\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.AddStage(new StageOptions {\n    StageName = \"DeployStackSets\",\n    Actions = new [] {\n        // First, update the StackSet itself with the newest template\n        new CloudFormationDeployStackSetAction(new CloudFormationDeployStackSetActionProps {\n            ActionName = \"UpdateStackSet\",\n            RunOrder = 1,\n            StackSetName = \"MyStackSet\",\n            Template = StackSetTemplate.FromArtifactPath(sourceOutput.AtPath(\"template.yaml\")),\n\n            // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n            DeploymentModel = StackSetDeploymentModel.SelfManaged(),\n            // This deploys to a set of accounts\n            StackInstances = StackInstances.InAccounts(new [] { \"111111111111\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }),\n\n        // Afterwards, update/create additional instances in other accounts\n        new CloudFormationDeployStackInstancesAction(new CloudFormationDeployStackInstancesActionProps {\n            ActionName = \"AddMoreInstances\",\n            RunOrder = 2,\n            StackSetName = \"MyStackSet\",\n            StackInstances = StackInstances.InAccounts(new [] { \"222222222222\", \"333333333333\" }, new [] { \"us-east-1\", \"eu-west-1\" })\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pipeline pipeline;\nArtifact sourceOutput;\n\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"DeployStackSets\")\n        .actions(List.of(\n            // First, update the StackSet itself with the newest template\n            CloudFormationDeployStackSetAction.Builder.create()\n                    .actionName(\"UpdateStackSet\")\n                    .runOrder(1)\n                    .stackSetName(\"MyStackSet\")\n                    .template(StackSetTemplate.fromArtifactPath(sourceOutput.atPath(\"template.yaml\")))\n\n                    // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n                    .deploymentModel(StackSetDeploymentModel.selfManaged())\n                    // This deploys to a set of accounts\n                    .stackInstances(StackInstances.inAccounts(List.of(\"111111111111\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build(),\n\n            // Afterwards, update/create additional instances in other accounts\n            CloudFormationDeployStackInstancesAction.Builder.create()\n                    .actionName(\"AddMoreInstances\")\n                    .runOrder(2)\n                    .stackSetName(\"MyStackSet\")\n                    .stackInstances(StackInstances.inAccounts(List.of(\"222222222222\", \"333333333333\"), List.of(\"us-east-1\", \"eu-west-1\")))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var pipeline pipeline\nvar sourceOutput artifact\n\n\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"DeployStackSets\"),\n\tactions: []iAction{\n\t\t// First, update the StackSet itself with the newest template\n\t\tcodepipeline_actions.NewCloudFormationDeployStackSetAction(&cloudFormationDeployStackSetActionProps{\n\t\t\tactionName: jsii.String(\"UpdateStackSet\"),\n\t\t\trunOrder: jsii.Number(1),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\ttemplate: codepipeline_actions.stackSetTemplate.fromArtifactPath(sourceOutput.atPath(jsii.String(\"template.yaml\"))),\n\n\t\t\t// Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n\t\t\tdeploymentModel: codepipeline_actions.stackSetDeploymentModel.selfManaged(),\n\t\t\t// This deploys to a set of accounts\n\t\t\tstackInstances: codepipeline_actions.stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"111111111111\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\n\t\t// Afterwards, update/create additional instances in other accounts\n\t\tcodepipeline_actions.NewCloudFormationDeployStackInstancesAction(&cloudFormationDeployStackInstancesActionProps{\n\t\t\tactionName: jsii.String(\"AddMoreInstances\"),\n\t\t\trunOrder: jsii.Number(2),\n\t\t\tstackSetName: jsii.String(\"MyStackSet\"),\n\t\t\tstackInstances: codepipeline_actions.*stackInstances.inAccounts([]*string{\n\t\t\t\tjsii.String(\"222222222222\"),\n\t\t\t\tjsii.String(\"333333333333\"),\n\t\t\t}, []*string{\n\t\t\t\tjsii.String(\"us-east-1\"),\n\t\t\t\tjsii.String(\"eu-west-1\"),\n\t\t\t}),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StackSetTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackInstancesActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.StackInstances",
        "@aws-cdk/aws-codepipeline-actions.StackInstances#inAccounts",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel",
        "@aws-cdk/aws-codepipeline-actions.StackSetDeploymentModel#selfManaged",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate",
        "@aws-cdk/aws-codepipeline-actions.StackSetTemplate#fromArtifactPath",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const sourceOutput: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\npipeline.addStage({\n  stageName: 'DeployStackSets',\n  actions: [\n    // First, update the StackSet itself with the newest template\n    new codepipeline_actions.CloudFormationDeployStackSetAction({\n      actionName: 'UpdateStackSet',\n      runOrder: 1,\n      stackSetName: 'MyStackSet',\n      template: codepipeline_actions.StackSetTemplate.fromArtifactPath(sourceOutput.atPath('template.yaml')),\n\n      // Change this to 'StackSetDeploymentModel.organizations()' if you want to deploy to OUs\n      deploymentModel: codepipeline_actions.StackSetDeploymentModel.selfManaged(),\n      // This deploys to a set of accounts\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(['111111111111'], ['us-east-1', 'eu-west-1']),\n    }),\n\n    // Afterwards, update/create additional instances in other accounts\n    new codepipeline_actions.CloudFormationDeployStackInstancesAction({\n      actionName: 'AddMoreInstances',\n      runOrder: 2,\n      stackSetName: 'MyStackSet',\n      stackInstances: codepipeline_actions.StackInstances.inAccounts(\n        ['222222222222', '333333333333'],\n        ['us-east-1', 'eu-west-1']\n      ),\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 13,
        "75": 38,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 5,
        "193": 3,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "ea0d340d84e35fba0405d807d852230d0c1f4ef49b70ace015c78c864e0dfb90"
    },
    "18cbb0ade6b5a1f4102d71ce03736f0a65433ac6a6872c458dbbb38d3e26ff79": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.literal({\"IsHelloWorldExample\": True})\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.Literal(new Dictionary<string, boolean> { { \"IsHelloWorldExample\", true } })\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.literal(Map.of(\"IsHelloWorldExample\", true)))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nstartState := stepfunctions.NewPass(this, jsii.String(\"StartState\"))\nsimpleStateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"SimpleStateMachine\"), &stateMachineProps{\n\tdefinition: startState,\n})\nstepFunctionAction := codepipeline_actions.NewStepFunctionInvokeAction(&stepFunctionsInvokeActionProps{\n\tactionName: jsii.String(\"Invoke\"),\n\tstateMachine: simpleStateMachine,\n\tstateMachineInput: codepipeline_actions.stateMachineInput.literal(map[string]*bool{\n\t\t\"IsHelloWorldExample\": jsii.Boolean(true),\n\t}),\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"StepFunctions\"),\n\tactions: []iAction{\n\t\tstepFunctionAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StateMachineInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#literal",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "42c8d9be56e3dbd0ef44dc62fa656e4c2af979c914e9e9dbf84db499ca8638b7"
    },
    "843a6a000bf58e594095d496b4876d850e98591e078e4f960d5dee0ea25a5489": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.literal({\"IsHelloWorldExample\": True})\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.Literal(new Dictionary<string, boolean> { { \"IsHelloWorldExample\", true } })\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.literal(Map.of(\"IsHelloWorldExample\", true)))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nstartState := stepfunctions.NewPass(this, jsii.String(\"StartState\"))\nsimpleStateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"SimpleStateMachine\"), &stateMachineProps{\n\tdefinition: startState,\n})\nstepFunctionAction := codepipeline_actions.NewStepFunctionInvokeAction(&stepFunctionsInvokeActionProps{\n\tactionName: jsii.String(\"Invoke\"),\n\tstateMachine: simpleStateMachine,\n\tstateMachineInput: codepipeline_actions.stateMachineInput.literal(map[string]*bool{\n\t\t\"IsHelloWorldExample\": jsii.Boolean(true),\n\t}),\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"StepFunctions\"),\n\tactions: []iAction{\n\t\tstepFunctionAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#literal",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "42c8d9be56e3dbd0ef44dc62fa656e4c2af979c914e9e9dbf84db499ca8638b7"
    },
    "3529cc9aeaa38ce69af2525ccd31891dd55682eb8520eb77b34c6cb0dc715d5f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.literal({\"IsHelloWorldExample\": True})\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.Literal(new Dictionary<string, boolean> { { \"IsHelloWorldExample\", true } })\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.literal(Map.of(\"IsHelloWorldExample\", true)))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import stepfunctions \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nstartState := stepfunctions.NewPass(this, jsii.String(\"StartState\"))\nsimpleStateMachine := stepfunctions.NewStateMachine(this, jsii.String(\"SimpleStateMachine\"), &stateMachineProps{\n\tdefinition: startState,\n})\nstepFunctionAction := codepipeline_actions.NewStepFunctionInvokeAction(&stepFunctionsInvokeActionProps{\n\tactionName: jsii.String(\"Invoke\"),\n\tstateMachine: simpleStateMachine,\n\tstateMachineInput: codepipeline_actions.stateMachineInput.literal(map[string]*bool{\n\t\t\"IsHelloWorldExample\": jsii.Boolean(true),\n\t}),\n})\npipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"StepFunctions\"),\n\tactions: []iAction{\n\t\tstepFunctionAction,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#literal",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "42c8d9be56e3dbd0ef44dc62fa656e4c2af979c914e9e9dbf84db499ca8638b7"
    }
  }
}