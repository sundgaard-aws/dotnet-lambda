{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-applicationautoscaling": "1.193.0",
    "@aws-cdk/aws-autoscaling": "1.193.0",
    "@aws-cdk/aws-autoscaling-hooktargets": "1.193.0",
    "@aws-cdk/aws-certificatemanager": "1.193.0",
    "@aws-cdk/aws-cloudwatch": "1.193.0",
    "@aws-cdk/aws-ec2": "1.193.0",
    "@aws-cdk/aws-ecr": "1.193.0",
    "@aws-cdk/aws-ecr-assets": "1.193.0",
    "@aws-cdk/aws-elasticloadbalancing": "1.193.0",
    "@aws-cdk/aws-elasticloadbalancingv2": "1.193.0",
    "@aws-cdk/aws-iam": "1.193.0",
    "@aws-cdk/aws-kms": "1.193.0",
    "@aws-cdk/aws-lambda": "1.193.0",
    "@aws-cdk/aws-logs": "1.193.0",
    "@aws-cdk/aws-route53": "1.193.0",
    "@aws-cdk/aws-route53-targets": "1.193.0",
    "@aws-cdk/aws-s3": "1.193.0",
    "@aws-cdk/aws-s3-assets": "1.193.0",
    "@aws-cdk/aws-secretsmanager": "1.193.0",
    "@aws-cdk/aws-servicediscovery": "1.193.0",
    "@aws-cdk/aws-sns": "1.193.0",
    "@aws-cdk/aws-sqs": "1.193.0",
    "@aws-cdk/aws-ssm": "1.193.0",
    "@aws-cdk/core": "1.193.0",
    "@aws-cdk/cx-api": "1.193.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-apigateway": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.APIGateway",
          "packageId": "Amazon.CDK.AWS.APIGateway"
        },
        "java": {
          "maven": {
            "artifactId": "apigateway",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.apigateway"
        },
        "js": {
          "npm": "@aws-cdk/aws-apigateway"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-apigateway",
          "module": "aws_cdk.aws_apigateway"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling",
          "packageId": "Amazon.CDK.AWS.AutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling",
          "module": "aws_cdk.aws_autoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-hooktargets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets",
          "packageId": "Amazon.CDK.AWS.AutoScaling.HookTargets"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-hooktargets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-hooktargets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-hooktargets",
          "module": "aws_cdk.aws_autoscaling_hooktargets"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudfront": {
      "submodules": {
        "@aws-cdk/aws-cloudfront.experimental": {}
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFront",
          "packageId": "Amazon.CDK.AWS.CloudFront"
        },
        "java": {
          "maven": {
            "artifactId": "cloudfront",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudfront"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudfront"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudfront",
          "module": "aws_cdk.aws_cloudfront"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancing": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancing"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancing",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancing"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancing"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancing",
          "module": "aws_cdk.aws_elasticloadbalancing"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancingv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancingv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancingv2",
          "module": "aws_cdk.aws_elasticloadbalancingv2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-globalaccelerator": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.GlobalAccelerator",
          "packageId": "Amazon.CDK.AWS.GlobalAccelerator"
        },
        "java": {
          "maven": {
            "artifactId": "globalaccelerator",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.globalaccelerator"
        },
        "js": {
          "npm": "@aws-cdk/aws-globalaccelerator"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-globalaccelerator",
          "module": "aws_cdk.aws_globalaccelerator"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-route53-targets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53.Targets",
          "packageId": "Amazon.CDK.AWS.Route53.Targets"
        },
        "java": {
          "maven": {
            "artifactId": "route53-targets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53.targets"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53-targets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53-targets",
          "module": "aws_cdk.aws_route53_targets"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-sam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SAM",
          "packageId": "Amazon.CDK.AWS.SAM"
        },
        "java": {
          "maven": {
            "artifactId": "sam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sam"
        },
        "js": {
          "npm": "@aws-cdk/aws-sam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sam",
          "module": "aws_cdk.aws_sam"
        }
      }
    },
    "@aws-cdk/aws-secretsmanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SecretsManager",
          "packageId": "Amazon.CDK.AWS.SecretsManager"
        },
        "java": {
          "maven": {
            "artifactId": "secretsmanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.secretsmanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-secretsmanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-secretsmanager",
          "module": "aws_cdk.aws_secretsmanager"
        }
      }
    },
    "@aws-cdk/aws-servicediscovery": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ServiceDiscovery",
          "packageId": "Amazon.CDK.AWS.ServiceDiscovery"
        },
        "java": {
          "maven": {
            "artifactId": "servicediscovery",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.servicediscovery"
        },
        "js": {
          "npm": "@aws-cdk/aws-servicediscovery"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-servicediscovery",
          "module": "aws_cdk.aws_servicediscovery"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sns-subscriptions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS.Subscriptions",
          "packageId": "Amazon.CDK.AWS.SNS.Subscriptions"
        },
        "java": {
          "maven": {
            "artifactId": "sns-subscriptions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns.subscriptions"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns-subscriptions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns-subscriptions",
          "module": "aws_cdk.aws_sns_subscriptions"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/aws-stepfunctions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.StepFunctions",
          "packageId": "Amazon.CDK.AWS.StepFunctions"
        },
        "java": {
          "maven": {
            "artifactId": "stepfunctions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.stepfunctions"
        },
        "js": {
          "npm": "@aws-cdk/aws-stepfunctions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-stepfunctions",
          "module": "aws_cdk.aws_stepfunctions"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::ECS",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.74.0 (build 6d08790)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "ecs"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-ecs",
  "readme": {
    "markdown": "# Amazon ECS Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis package contains constructs for working with **Amazon Elastic Container\nService** (Amazon ECS).\n\nAmazon Elastic Container Service (Amazon ECS) is a fully managed container orchestration service.\n\nFor further information on Amazon ECS,\nsee the [Amazon ECS documentation](https://docs.aws.amazon.com/ecs)\n\nThe following example creates an Amazon ECS cluster, adds capacity to it, and\nruns a service on it:\n\n```ts\ndeclare const vpc: ec2.Vpc;\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});\n```\n\nFor a set of constructs defining common ECS architectural patterns, see the `@aws-cdk/aws-ecs-patterns` package.\n\n## Launch Types: AWS Fargate vs Amazon EC2\n\nThere are two sets of constructs in this library; one to run tasks on Amazon EC2 and\none to run tasks on AWS Fargate.\n\n- Use the `Ec2TaskDefinition` and `Ec2Service` constructs to run tasks on Amazon EC2 instances running in your account.\n- Use the `FargateTaskDefinition` and `FargateService` constructs to run tasks on\n  instances that are managed for you by AWS.\n- Use the `ExternalTaskDefinition` and `ExternalService` constructs to run AWS ECS Anywhere tasks on self-managed infrastructure.\n\nHere are the main differences:\n\n- **Amazon EC2**: instances are under your control. Complete control of task to host\n  allocation. Required to specify at least a memory reservation or limit for\n  every container. Can use Host, Bridge and AwsVpc networking modes. Can attach\n  Classic Load Balancer. Can share volumes between container and host.\n- **AWS Fargate**: tasks run on AWS-managed instances, AWS manages task to host\n  allocation for you. Requires specification of memory and cpu sizes at the\n  taskdefinition level. Only supports AwsVpc networking modes and\n  Application/Network Load Balancers. Only the AWS log driver is supported.\n  Many host features are not supported such as adding kernel capabilities\n  and mounting host devices/volumes inside the container.\n- **AWS ECSAnywhere**: tasks are run and managed by AWS ECS Anywhere on infrastructure owned by the customer. Only Bridge networking mode is supported. Does not support autoscaling, load balancing, cloudmap or attachment of volumes.\n\nFor more information on Amazon EC2 vs AWS Fargate, networking and ECS Anywhere see the AWS Documentation:\n[AWS Fargate](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html),\n[Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html),\n[ECS Anywhere](https://aws.amazon.com/ecs/anywhere/)\n\n## Clusters\n\nA `Cluster` defines the infrastructure to run your\ntasks on. You can run many tasks on a single cluster.\n\nThe following code creates a cluster that can run AWS Fargate tasks:\n\n```ts\ndeclare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n```\n\nThe following code imports an existing cluster using the ARN which can be used to\nimport an Amazon ECS service either EC2 or Fargate.\n\n```ts\nconst clusterArn = 'arn:aws:ecs:us-east-1:012345678910:cluster/clusterName';\n\nconst cluster = ecs.Cluster.fromClusterArn(this, 'Cluster', clusterArn);\n```\n\nTo use tasks with Amazon EC2 launch-type, you have to add capacity to\nthe cluster in order for tasks to be scheduled on your instances.  Typically,\nyou add an AutoScalingGroup with instances running the latest\nAmazon ECS-optimized AMI to the cluster. There is a method to build and add such an\nAutoScalingGroup automatically, or you can supply a customized AutoScalingGroup\nthat you construct yourself. It's possible to add multiple AutoScalingGroups\nwith various instance types.\n\nThe following example creates an Amazon ECS cluster and adds capacity to it:\n\n```ts\ndeclare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n```\n\nIf you omit the property `vpc`, the construct will create a new VPC with two AZs.\n\nBy default, all machine images will auto-update to the latest version\non each deployment, causing a replacement of the instances in your AutoScalingGroup\nif the AMI has been updated since the last deployment.\n\nIf task draining is enabled, ECS will transparently reschedule tasks on to the new\ninstances before terminating your old instances. If you have disabled task draining,\nthe tasks will be terminated along with the instance. To prevent that, you\ncan pick a non-updating AMI by passing `cacheInContext: true`, but be sure\nto periodically update to the latest AMI manually by using the [CDK CLI\ncontext management commands](https://docs.aws.amazon.com/cdk/latest/guide/context.html):\n\n```ts\ndeclare const vpc: ec2.Vpc;\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});\n```\n\n### Bottlerocket\n\n[Bottlerocket](https://aws.amazon.com/bottlerocket/) is a Linux-based open source operating system that is\npurpose-built by AWS for running containers. You can launch Amazon ECS container instances with the Bottlerocket AMI.\n\nThe following example will create a capacity with self-managed Amazon EC2 capacity of 2 `c5.large` Linux instances running with `Bottlerocket` AMI.\n\nThe following example adds Bottlerocket capacity to the cluster:\n\n```ts\ndeclare const cluster: ecs.Cluster;\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});\n```\n\n### ARM64 (Graviton) Instances\n\nTo launch instances with ARM64 hardware, you can use the Amazon ECS-optimized\nAmazon Linux 2 (arm64) AMI. Based on Amazon Linux 2, this AMI is recommended\nfor use when launching your EC2 instances that are powered by Arm-based AWS\nGraviton Processors.\n\n```ts\ndeclare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});\n```\n\nBottlerocket is also supported:\n\n```ts\ndeclare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});\n```\n\n### Spot Instances\n\nTo add spot instances into the cluster, you must specify the `spotPrice` in the `ecs.AddCapacityOptions` and optionally enable the `spotInstanceDraining` property.\n\n```ts\ndeclare const cluster: ecs.Cluster;\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity('AsgSpot', {\n  maxCapacity: 2,\n  minCapacity: 2,\n  desiredCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.xlarge'),\n  spotPrice: '0.0735',\n  // Enable the Automated Spot Draining support for Amazon ECS\n  spotInstanceDraining: true,\n});\n```\n\n### SNS Topic Encryption\n\nWhen the `ecs.AddCapacityOptions` that you provide has a non-zero `taskDrainTime` (the default) then an SNS topic and Lambda are created to ensure that the\ncluster's instances have been properly drained of tasks before terminating. The SNS Topic is sent the instance-terminating lifecycle event from the AutoScalingGroup,\nand the Lambda acts on that event. If you wish to engage [server-side encryption](https://docs.aws.amazon.com/sns/latest/dg/sns-data-encryption.html) for this SNS Topic\nthen you may do so by providing a KMS key for the `topicEncryptionKey` property of `ecs.AddCapacityOptions`.\n\n```ts\n// Given\ndeclare const cluster: ecs.Cluster;\ndeclare const key: kms.Key;\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity('ASGEncryptedSNS', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n  topicEncryptionKey: key,\n});\n```\n\n## Task definitions\n\nA task definition describes what a single copy of a **task** should look like.\nA task definition has one or more containers; typically, it has one\nmain container (the *default container* is the first one that's added\nto the task definition, and it is marked *essential*) and optionally\nsome supporting containers which are used to support the main container,\ndoings things like upload logs or metrics to monitoring services.\n\nTo run a task or service with Amazon EC2 launch type, use the `Ec2TaskDefinition`. For AWS Fargate tasks/services, use the\n`FargateTaskDefinition`. For AWS ECS Anywhere use the `ExternalTaskDefinition`. These classes\nprovide simplified APIs that only contain properties relevant for each specific launch type.\n\nFor a `FargateTaskDefinition`, specify the task size (`memoryLimitMiB` and `cpu`):\n\n```ts\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\n```\n\nOn Fargate Platform Version 1.4.0 or later, you may specify up to 200GiB of\n[ephemeral storage](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-storage.html#fargate-task-storage-pv14):\n\n```ts\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n  ephemeralStorageGiB: 100,\n});\n```\n\nTo add containers to a task definition, call `addContainer()`:\n\n```ts\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});\n```\n\nFor a `Ec2TaskDefinition`:\n\n```ts\nconst ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n```\n\nFor an `ExternalTaskDefinition`:\n\n```ts\nconst externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n```\n\nYou can specify container properties when you add them to the task definition, or with various methods, e.g.:\n\nTo add a port mapping when adding a container to the task definition, specify the `portMappings` option:\n\n```ts\ndeclare const taskDefinition: ecs.TaskDefinition;\n\ntaskDefinition.addContainer(\"WebContainer\", {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  portMappings: [{ containerPort: 3000 }],\n});\n```\n\nTo add port mappings directly to a container definition, call `addPortMappings()`:\n\n```ts\ndeclare const container: ecs.ContainerDefinition;\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});\n```\n\nTo add data volumes to a task definition, call `addVolume()`:\n\n```ts\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);\n```\n\n> Note: ECS Anywhere doesn't support volume attachments in the task definition.\n\nTo use a TaskDefinition that can be used with either Amazon EC2 or\nAWS Fargate launch types, use the `TaskDefinition` construct.\n\nWhen creating a task definition you have to specify what kind of\ntasks you intend to run: Amazon EC2, AWS Fargate, or both.\nThe following example uses both:\n\n```ts\nconst taskDefinition = new ecs.TaskDefinition(this, 'TaskDef', {\n  memoryMiB: '512',\n  cpu: '256',\n  networkMode: ecs.NetworkMode.AWS_VPC,\n  compatibility: ecs.Compatibility.EC2_AND_FARGATE,\n});\n```\n\n### Images\n\nImages supply the software that runs inside the container. Images can be\nobtained from either DockerHub or from ECR repositories, built directly from a local Dockerfile, or use an existing tarball.\n\n- `ecs.ContainerImage.fromRegistry(imageName)`: use a public image.\n- `ecs.ContainerImage.fromRegistry(imageName, { credentials: mySecret })`: use a private image that requires credentials.\n- `ecs.ContainerImage.fromEcrRepository(repo, tagOrDigest)`: use the given ECR repository as the image\n  to start. If no tag or digest is provided, \"latest\" is assumed.\n- `ecs.ContainerImage.fromAsset('./image')`: build and upload an\n  image directly from a `Dockerfile` in your source directory.\n- `ecs.ContainerImage.fromDockerImageAsset(asset)`: uses an existing\n  `@aws-cdk/aws-ecr-assets.DockerImageAsset` as a container image.\n- `ecs.ContainerImage.fromTarball(file)`: use an existing tarball.\n- `new ecs.TagParameterContainerImage(repository)`: use the given ECR repository as the image\n  but a CloudFormation parameter as the tag.\n\n### Environment variables\n\nTo pass environment variables to the container, you can use the `environment`, `environmentFiles`, and `secrets` props.\n\n```ts\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n```\n\nThe task execution role is automatically granted read permissions on the secrets/parameters. Support for environment\nfiles is restricted to the EC2 launch type for files hosted on S3. Further details provided in the AWS documentation\nabout [specifying environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html).\n\n### System controls\n\nTo set system controls (kernel parameters) on the container, use the `systemControls` prop:\n\n```ts\ndeclare const taskDefinition: ecs.TaskDefinition;\n\ntaskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  systemControls: [\n    {\n      namespace: 'net',\n      value: 'ipv4.tcp_tw_recycle',\n    },\n  ],\n});\n```\n\n### Using Windows containers on Fargate\n\nAWS Fargate supports Amazon ECS Windows containers. For more details, please see this [blog post](https://aws.amazon.com/tw/blogs/containers/running-windows-containers-with-amazon-ecs-on-aws-fargate/)\n\n```ts\n// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});\n```\n\n### Using Graviton2 with Fargate\n\nAWS Graviton2 supports AWS Fargate. For more details, please see this [blog post](https://aws.amazon.com/blogs/aws/announcing-aws-graviton2-support-for-aws-fargate-get-up-to-40-better-price-performance-for-your-serverless-containers/)\n\n```ts\n// Create a Task Definition for running container on Graviton Runtime.\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.LINUX,\n    cpuArchitecture: ecs.CpuArchitecture.ARM64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('webarm64', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'graviton2-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('public.ecr.aws/nginx/nginx:latest-arm64v8'),\n});\n```\n\n## Service\n\nA `Service` instantiates a `TaskDefinition` on a `Cluster` a given number of\ntimes, optionally associating them with a load balancer.\nIf a task fails,\nAmazon ECS automatically restarts the task.\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n```\n\nECS Anywhere service definition looks like:\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n```\n\n`Services` by default will create a security group if not provided.\nIf you'd like to specify which security groups to use you can override the `securityGroups` property.\n\n### Deployment circuit breaker and rollback\n\nAmazon ECS [deployment circuit breaker](https://aws.amazon.com/tw/blogs/containers/announcing-amazon-ecs-deployment-circuit-breaker/)\nautomatically rolls back unhealthy service deployments without the need for manual intervention. Use `circuitBreaker` to enable\ndeployment circuit breaker and optionally enable `rollback` for automatic rollback. See [Using the deployment circuit breaker](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)\nfor more details.\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});\n```\n\n> Note: ECS Anywhere doesn't support deployment circuit breakers and rollback.\n\n### Include an application/network load balancer\n\n`Services` are load balancing targets and can be added to a target group, which will be attached to an application/network load balancers:\n\n```ts\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nconst targetGroup1 = listener.addTargets('ECS1', {\n  port: 80,\n  targets: [service],\n});\nconst targetGroup2 = listener.addTargets('ECS2', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 8080\n  })],\n});\n```\n\n> Note: ECS Anywhere doesn't support application/network load balancers.\n\nNote that in the example above, the default `service` only allows you to register the first essential container or the first mapped port on the container as a target and add it to a new target group. To have more control over which container and port to register as targets, you can use `service.loadBalancerTarget()` to return a load balancing target for a specific container and port.\n\nAlternatively, you can also create all load balancer targets to be registered in this service, add them to target groups, and attach target groups to listeners accordingly.\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n```\n\n### Using a Load Balancer from a different Stack\n\nIf you want to put your Load Balancer and the Service it is load balancing to in\ndifferent stacks, you may not be able to use the convenience methods\n`loadBalancer.addListener()` and `listener.addTargets()`.\n\nThe reason is that these methods will create resources in the same Stack as the\nobject they're called on, which may lead to cyclic references between stacks.\nInstead, you will have to create an `ApplicationListener` in the service stack,\nor an empty `TargetGroup` in the load balancer stack that you attach your\nservice to.\n\nSee the [ecs/cross-stack-load-balancer example](https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript/ecs/cross-stack-load-balancer/)\nfor the alternatives.\n\n### Include a classic load balancer\n\n`Services` can also be directly attached to a classic load balancer as targets:\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);\n```\n\nSimilarly, if you want to have more control over load balancer targeting:\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n```\n\nThere are two higher-level constructs available which include a load balancer for you that can be found in the aws-ecs-patterns module:\n\n- `LoadBalancedFargateService`\n- `LoadBalancedEc2Service`\n\n## Task Auto-Scaling\n\nYou can configure the task count of a service to match demand. Task auto-scaling is\nconfigured by calling `autoScaleTaskCount()`:\n\n```ts\ndeclare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});\n```\n\nTask auto-scaling is powered by *Application Auto-Scaling*.\nSee that section for details.\n\n## Integration with CloudWatch Events\n\nTo start an Amazon ECS task on an Amazon EC2-backed Cluster, instantiate an\n`@aws-cdk/aws-events-targets.EcsTask` instead of an `Ec2Service`:\n\n```ts\ndeclare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n```\n\n## Log Drivers\n\nCurrently Supported Log Drivers:\n\n- awslogs\n- fluentd\n- gelf\n- journald\n- json-file\n- splunk\n- syslog\n- awsfirelens\n- Generic\n\n### awslogs Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});\n```\n\n### fluentd Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.fluentd(),\n});\n```\n\n### gelf Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});\n```\n\n### journald Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.journald(),\n});\n```\n\n### json-file Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.jsonFile(),\n});\n```\n\n### splunk Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n```\n\n### syslog Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.syslog(),\n});\n```\n\n### firelens Log Driver\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});\n```\n\nTo pass secrets to the log configuration, use the `secretOptions` property of the log configuration. The task execution role is automatically granted read permissions on the secrets/parameters.\n\n```ts\ndeclare const secret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n      // ... log driver options here ...\n    },\n    secretOptions: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n      apikey: ecs.Secret.fromSecretsManager(secret),\n      host: ecs.Secret.fromSsmParameter(parameter),\n    },\n  }),\n});\n```\n\n### Generic Log Driver\n\nA generic log driver object exists to provide a lower level abstraction of the log driver configuration.\n\n```ts\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});\n```\n\n## CloudMap Service Discovery\n\nTo register your ECS service with a CloudMap Service Registry, you may add the\n`cloudMapOptions` property to your service:\n\n```ts\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});\n```\n\nWith `bridge` or `host` network modes, only `SRV` DNS record types are supported.\nBy default, `SRV` DNS record types will target the default container and default\nport. However, you may target a different container and port on the same ECS task:\n\n```ts\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n```\n\n### Associate With a Specific CloudMap Service\n\nYou may associate an ECS service with a specific CloudMap service. To do\nthis, use the service's `associateCloudMapService` method:\n\n```ts\ndeclare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});\n```\n\n## Capacity Providers\n\nThere are two major families of Capacity Providers: [AWS\nFargate](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-capacity-providers.html)\n(including Fargate Spot) and EC2 [Auto Scaling\nGroup](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/asg-capacity-providers.html)\nCapacity Providers. Both are supported.\n\n### Fargate Capacity Providers\n\nTo enable Fargate capacity providers, you can either set\n`enableFargateCapacityProviders` to `true` when creating your cluster, or by\ninvoking the `enableFargateCapacityProviders()` method after creating your\ncluster. This will add both `FARGATE` and `FARGATE_SPOT` as available capacity\nproviders on your cluster.\n\n```ts\ndeclare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n```\n\n### Auto Scaling Group Capacity Providers\n\nTo add an Auto Scaling Group Capacity Provider, first create an EC2 Auto Scaling\nGroup. Then, create an `AsgCapacityProvider` and pass the Auto Scaling Group to\nit in the constructor. Then add the Capacity Provider to the cluster. Finally,\nyou can refer to the Provider by its name in your service's or task's Capacity\nProvider strategy.\n\nBy default, an Auto Scaling Group Capacity Provider will manage the Auto Scaling\nGroup's size for you. It will also enable managed termination protection, in\norder to prevent EC2 Auto Scaling from terminating EC2 instances that have tasks\nrunning on them. If you want to disable this behavior, set both\n`enableManagedScaling` to and `enableManagedTerminationProtection` to `false`.\n\n```ts\ndeclare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n```\n\n## Elastic Inference Accelerators\n\nCurrently, this feature is only supported for services with EC2 launch types.\n\nTo add elastic inference accelerators to your EC2 instance, first add\n`inferenceAccelerators` field to the Ec2TaskDefinition and set the `deviceName`\nand `deviceType` properties.\n\n```ts\nconst inferenceAccelerators = [{\n  deviceName: 'device1',\n  deviceType: 'eia2.medium',\n}];\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'Ec2TaskDef', {\n  inferenceAccelerators,\n});\n```\n\nTo enable using the inference accelerators in the containers, add `inferenceAcceleratorResources`\nfield and set it to a list of device names used for the inference accelerators. Each value in the\nlist should match a `DeviceName` for an `InferenceAccelerator` specified in the task definition.\n\n```ts\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst inferenceAcceleratorResources = ['device1'];\n\ntaskDefinition.addContainer('cont', {\n  image: ecs.ContainerImage.fromRegistry('test'),\n  memoryLimitMiB: 1024,\n  inferenceAcceleratorResources,\n});\n```\n\n## ECS Exec command\n\nPlease note, ECS Exec leverages AWS Systems Manager (SSM). So as a prerequisite for the exec command\nto work, you need to have the SSM plugin for the AWS CLI installed locally. For more information, see\n[Install Session Manager plugin for AWS CLI](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html).\n\nTo enable the ECS Exec feature for your containers, set the boolean flag `enableExecuteCommand` to `true` in\nyour `Ec2Service` or `FargateService`.\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  enableExecuteCommand: true,\n});\n```\n\n### Enabling logging\n\nYou can enable sending logs of your execute session commands to a CloudWatch log group or S3 bucket by configuring\nthe `executeCommandConfiguration` property for your cluster. The default configuration will send the\nlogs to the CloudWatch Logs using the `awslogs` log driver that is configured in your task definition. Please note,\nwhen using your own `logConfiguration` the log group or S3 Bucket specified must already be created.\n\nTo encrypt data using your own KMS Customer Key (CMK), you must create a CMK and provide the key in the `kmsKey` field\nof the `executeCommandConfiguration`. To use this key for encrypting CloudWatch log data or S3 bucket, make sure to associate the key\nto these resources on creation.\n\n```ts\ndeclare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-ecs",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.ECS",
      "packageId": "Amazon.CDK.AWS.ECS"
    },
    "java": {
      "maven": {
        "artifactId": "ecs",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.ecs"
    },
    "js": {
      "npm": "@aws-cdk/aws-ecs"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-ecs",
      "module": "aws_cdk.aws_ecs"
    }
  },
  "types": {
    "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for adding an AutoScalingGroup.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const key: kms.Key;\nconst addAutoScalingGroupCapacityOptions: ecs.AddAutoScalingGroupCapacityOptions = {\n  canContainersAccessInstanceRole: false,\n  machineImageType: ecs.MachineImageType.AMAZON_LINUX_2,\n  spotInstanceDraining: false,\n  taskDrainTime: cdk.Duration.minutes(30),\n  topicEncryptionKey: key,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 784
      },
      "name": "AddAutoScalingGroupCapacityOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Specifies whether the containers can access the container instance role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 790
          },
          "name": "canContainersAccessInstanceRole",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically determined from `machineImage`, if available, otherwise `MachineImageType.AMAZON_LINUX_2`.",
            "remarks": "Depending on the setting, different UserData will automatically be added\nto the `AutoScalingGroup` to configure it properly for use with ECS.\n\nIf you create an `AutoScalingGroup` yourself and are adding it via\n`addAutoScalingGroup()`, you must specify this value. If you are adding an\n`autoScalingGroup` via `addCapacity`, this value will be determined\nfrom the `machineImage` you pass.",
            "stability": "stable",
            "summary": "What type of machine image this is."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 837
          },
          "name": "machineImageType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.MachineImageType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For more information, see [Using Spot Instances](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-spot.html).",
            "stability": "stable",
            "summary": "Specify whether to enable Automated Draining for Spot Instances running Amazon ECS Services."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 812
          },
          "name": "spotInstanceDraining",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "deprecated": "The lifecycle draining hook is not configured if using the EC2 Capacity Provider. Enable managed termination protection instead.",
            "remarks": "This creates a Lambda function that is used by a lifecycle hook for the\nAutoScalingGroup that will delay instance termination until all ECS tasks\nhave drained from the instance. Set to 0 to disable task draining.\n\nSet to 0 to disable task draining.",
            "stability": "deprecated",
            "summary": "The time period to wait before force terminating an instance that is draining."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 804
          },
          "name": "taskDrainTime",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "The SNS Topic will not be encrypted.",
            "stability": "stable",
            "summary": "If {@link AddAutoScalingGroupCapacityOptions.taskDrainTime} is non-zero, then the ECS cluster creates an SNS Topic to as part of a system to drain instances of tasks when the instance is being shut down. If this property is provided, then this key will be used to encrypt the contents of that SNS Topic. See [SNS Data Encryption](https://docs.aws.amazon.com/sns/latest/dg/sns-data-encryption.html) for more information."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 822
          },
          "name": "topicEncryptionKey",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-kms.IKey"
          }
        }
      ],
      "symbolId": "lib/cluster:AddAutoScalingGroupCapacityOptions"
    },
    "@aws-cdk/aws-ecs.AddCapacityOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for adding instance capacity to an AutoScalingGroup.",
        "example": "declare const vpc: ec2.Vpc;\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AddCapacityOptions",
      "interfaces": [
        "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-autoscaling.CommonAutoScalingGroupProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 843
      },
      "name": "AddCapacityOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The EC2 instance type to use when launching instances into the AutoScalingGroup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 847
          },
          "name": "instanceType",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.InstanceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically updated, ECS-optimized Amazon Linux 2",
            "remarks": "The default is to use an ECS-optimized AMI of Amazon Linux 2 which is\nautomatically updated to the latest version on every deployment. This will\nreplace the instances in the AutoScalingGroup. Make sure you have not disabled\ntask draining, to avoid downtime when the AMI updates.\n\nTo use an image that does not update on every deployment, pass:\n\n```ts\nconst machineImage = ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.STANDARD, {\n   cachedInContext: true,\n});\n```\n\nFor more information, see [Amazon ECS-optimized\nAMIs](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).\n\nYou must define either `machineImage` or `machineImageType`, not both.",
            "stability": "stable",
            "summary": "The ECS-optimized AMI variant to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 872
          },
          "name": "machineImage",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IMachineImage"
          }
        }
      ],
      "symbolId": "lib/cluster:AddCapacityOptions"
    },
    "@aws-cdk/aws-ecs.AmiHardwareType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "For more information, see\n[Amazon ECS-optimized AMIs](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).",
        "stability": "stable",
        "summary": "The ECS-optimized AMI variant to use.",
        "example": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AmiHardwareType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 12
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Use the standard Amazon ECS-optimized AMI."
          },
          "name": "STANDARD"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Use the Amazon ECS GPU-optimized AMI."
          },
          "name": "GPU"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Use the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI."
          },
          "name": "ARM"
        }
      ],
      "name": "AmiHardwareType",
      "symbolId": "lib/amis:AmiHardwareType"
    },
    "@aws-cdk/aws-ecs.AppMeshProxyConfiguration": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.ProxyConfiguration",
      "docs": {
        "remarks": "For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version\n1.26.0-1 of the ecs-init package to enable a proxy configuration. If your container instances are launched from the Amazon ECS-optimized\nAMI version 20190301 or later, then they contain the required versions of the container agent and ecs-init.\nFor more information, see [Amazon ECS-optimized AMIs](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).\n\nFor tasks using the Fargate launch type, the task or service requires platform version 1.3.0 or later.",
        "stability": "stable",
        "summary": "The class for App Mesh proxy configurations.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst appMeshProxyConfiguration = new ecs.AppMeshProxyConfiguration({\n  containerName: 'containerName',\n  properties: {\n    appPorts: [123],\n    proxyEgressPort: 123,\n    proxyIngressPort: 123,\n\n    // the properties below are optional\n    egressIgnoredIPs: ['egressIgnoredIPs'],\n    egressIgnoredPorts: [123],\n    ignoredGID: 123,\n    ignoredUID: 123,\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfiguration",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the AppMeshProxyConfiguration class."
        },
        "locationInModule": {
          "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
          "line": 81
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfigurationConfigProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
        "line": 77
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the proxy configuration is configured on a task definition."
          },
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 93
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.ProxyConfiguration",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_taskDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty"
            }
          }
        }
      ],
      "name": "AppMeshProxyConfiguration",
      "symbolId": "lib/proxy-configuration/app-mesh-proxy-configuration:AppMeshProxyConfiguration"
    },
    "@aws-cdk/aws-ecs.AppMeshProxyConfigurationConfigProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The configuration to use when setting an App Mesh proxy configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst appMeshProxyConfigurationConfigProps: ecs.AppMeshProxyConfigurationConfigProps = {\n  containerName: 'containerName',\n  properties: {\n    appPorts: [123],\n    proxyEgressPort: 123,\n    proxyIngressPort: 123,\n\n    // the properties below are optional\n    egressIgnoredIPs: ['egressIgnoredIPs'],\n    egressIgnoredPorts: [123],\n    ignoredGID: 123,\n    ignoredUID: 123,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfigurationConfigProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
        "line": 55
      },
      "name": "AppMeshProxyConfigurationConfigProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the container that will serve as the App Mesh proxy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 59
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The set of network configuration parameters to provide the Container Network Interface (CNI) plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 64
          },
          "name": "properties",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfigurationProps"
          }
        }
      ],
      "symbolId": "lib/proxy-configuration/app-mesh-proxy-configuration:AppMeshProxyConfigurationConfigProps"
    },
    "@aws-cdk/aws-ecs.AppMeshProxyConfigurationProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Interface for setting the properties of proxy configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst appMeshProxyConfigurationProps: ecs.AppMeshProxyConfigurationProps = {\n  appPorts: [123],\n  proxyEgressPort: 123,\n  proxyIngressPort: 123,\n\n  // the properties below are optional\n  egressIgnoredIPs: ['egressIgnoredIPs'],\n  egressIgnoredPorts: [123],\n  ignoredGID: 123,\n  ignoredUID: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfigurationProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
        "line": 12
      },
      "name": "AppMeshProxyConfigurationProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Network traffic to these ports is forwarded to the ProxyIngressPort and ProxyEgressPort.",
            "stability": "stable",
            "summary": "The list of ports that the application uses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 29
          },
          "name": "appPorts",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Specifies the port that outgoing traffic from the AppPorts is directed to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 39
          },
          "name": "proxyEgressPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Specifies the port that incoming traffic to the AppPorts is directed to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 34
          },
          "name": "proxyIngressPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It can be an empty list.",
            "stability": "stable",
            "summary": "The egress traffic going to these specified IP addresses is ignored and not redirected to the ProxyEgressPort."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 49
          },
          "name": "egressIgnoredIPs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It can be an empty list.",
            "stability": "stable",
            "summary": "The egress traffic going to these specified ports is ignored and not redirected to the ProxyEgressPort."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 44
          },
          "name": "egressIgnoredPorts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This is used to ensure the proxy ignores its own traffic. If IgnoredUID is specified, this field can be empty.",
            "stability": "stable",
            "summary": "The group ID (GID) of the proxy container as defined by the user parameter in a container definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 23
          },
          "name": "ignoredGID",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This is used to ensure the proxy ignores its own traffic. If IgnoredGID is specified, this field can be empty.",
            "stability": "stable",
            "summary": "The user ID (UID) of the proxy container as defined by the user parameter in a container definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/proxy-configuration/app-mesh-proxy-configuration.ts",
            "line": 17
          },
          "name": "ignoredUID",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/proxy-configuration/app-mesh-proxy-configuration:AppMeshProxyConfigurationProps"
    },
    "@aws-cdk/aws-ecs.AsgCapacityProvider": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "This allows an ECS cluster to target\na specific EC2 Auto Scaling Group for the placement of tasks. Optionally (and\nrecommended), ECS can manage the number of instances in the ASG to fit the\ntasks, and can ensure that instances are not prematurely terminated while\nthere are still tasks running on them.",
        "stability": "stable",
        "summary": "An Auto Scaling Group Capacity Provider.",
        "example": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AsgCapacityProvider",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/cluster.ts",
          "line": 1120
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AsgCapacityProviderProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 1091
      },
      "name": "AsgCapacityProvider",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Auto Scaling Group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1101
          },
          "name": "autoScalingGroup",
          "type": {
            "fqn": "@aws-cdk/aws-autoscaling.AutoScalingGroup"
          }
        },
        {
          "docs": {
            "default": "Chosen by CloudFormation",
            "stability": "stable",
            "summary": "Capacity provider name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1096
          },
          "name": "capacityProviderName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Auto Scaling Group machineImageType."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1106
          },
          "name": "machineImageType",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.MachineImageType"
          }
        },
        {
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Specifies whether the containers can access the container instance role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1118
          },
          "name": "canContainersAccessInstanceRole",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Whether managed termination protection is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1111
          },
          "name": "enableManagedTerminationProtection",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/cluster:AsgCapacityProvider"
    },
    "@aws-cdk/aws-ecs.AsgCapacityProviderProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The options for creating an Auto Scaling Group Capacity Provider.",
        "example": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 1033
      },
      "name": "AsgCapacityProviderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The autoscaling group to add as a Capacity Provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1046
          },
          "name": "autoScalingGroup",
          "type": {
            "fqn": "@aws-cdk/aws-autoscaling.IAutoScalingGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CloudFormation-generated name",
            "remarks": "If a name is specified,\nit cannot start with `aws`, `ecs`, or `fargate`. If no name is specified,\na default name in the CFNStackName-CFNResourceName-RandomString format is used.",
            "stability": "stable",
            "summary": "The name of the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1041
          },
          "name": "capacityProviderName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Whether to enable managed scaling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1053
          },
          "name": "enableManagedScaling",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Whether to enable managed termination protection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1060
          },
          "name": "enableManagedTerminationProtection",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1000",
            "remarks": "In most cases this should be left alone.",
            "stability": "stable",
            "summary": "Maximum scaling step size."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1067
          },
          "name": "maximumScalingStepSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "remarks": "In most cases this should be left alone.",
            "stability": "stable",
            "summary": "Minimum scaling step size."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1074
          },
          "name": "minimumScalingStepSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "100",
            "remarks": "In most cases this should be left alone.",
            "stability": "stable",
            "summary": "Target capacity percent."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1081
          },
          "name": "targetCapacityPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/cluster:AsgCapacityProviderProps"
    },
    "@aws-cdk/aws-ecs.AssetEnvironmentFile": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.EnvironmentFile",
      "docs": {
        "stability": "stable",
        "summary": "Environment file from a local directory.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const localBundling: cdk.ILocalBundling;\nconst assetEnvironmentFile = new ecs.AssetEnvironmentFile('path', /* all optional props */ {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  sourceHash: 'sourceHash',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AssetEnvironmentFile",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/environment-file.ts",
          "line": 50
        },
        "parameters": [
          {
            "docs": {
              "summary": "The path to the asset file or directory."
            },
            "name": "path",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-s3-assets.AssetOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/environment-file.ts",
        "line": 43
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the container is initialized to allow this object to bind to the stack."
          },
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 54
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.EnvironmentFile",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EnvironmentFileConfig"
            }
          }
        }
      ],
      "name": "AssetEnvironmentFile",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The path to the asset file or directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 50
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/environment-file:AssetEnvironmentFile"
    },
    "@aws-cdk/aws-ecs.AssetImage": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.ContainerImage",
      "docs": {
        "stability": "stable",
        "summary": "An image that will be built from a local directory with a Dockerfile.",
        "example": "import { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});",
        "custom": {
          "exampleMetadata": "nofixture infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AssetImage",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the AssetImage class."
        },
        "locationInModule": {
          "filename": "lib/images/asset-image.ts",
          "line": 24
        },
        "parameters": [
          {
            "docs": {
              "summary": "The directory containing the Dockerfile."
            },
            "name": "directory",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AssetImageProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/images/asset-image.ts",
        "line": 18
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the image is used by a ContainerDefinition."
          },
          "locationInModule": {
            "filename": "lib/images/asset-image.ts",
            "line": 28
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.ContainerImage",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerImageConfig"
            }
          }
        }
      ],
      "name": "AssetImage",
      "symbolId": "lib/images/asset-image:AssetImage"
    },
    "@aws-cdk/aws-ecs.AssetImageProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for building an AssetImage.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\ndeclare const platform: ecr_assets.Platform;\nconst assetImageProps: ecs.AssetImageProps = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    platform: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  platform: platform,\n  repositoryName: 'repositoryName',\n  target: 'target',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AssetImageProps",
      "interfaces": [
        "@aws-cdk/aws-ecr-assets.DockerImageAssetOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/images/asset-image.ts",
        "line": 12
      },
      "name": "AssetImageProps",
      "symbolId": "lib/images/asset-image:AssetImageProps"
    },
    "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The options for using a cloudmap service.",
        "example": "declare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 1020
      },
      "name": "AssociateCloudMapServiceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The cloudmap service to register with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 1024
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the task definition's default container",
            "stability": "stable",
            "summary": "The container to point to for a SRV record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 1030
          },
          "name": "container",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the default port of the task definition's default container",
            "stability": "stable",
            "summary": "The port to point to for a SRV record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 1036
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/base/base-service:AssociateCloudMapServiceOptions"
    },
    "@aws-cdk/aws-ecs.AuthorizationConfig": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The authorization configuration details for the Amazon EFS file system.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst authorizationConfig: ecs.AuthorizationConfig = {\n  accessPointId: 'accessPointId',\n  iam: 'iam',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AuthorizationConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 988
      },
      "name": "AuthorizationConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No id",
            "remarks": "If an access point is specified, the root directory value will be\nrelative to the directory set for the access point.\nIf specified, transit encryption must be enabled in the EFSVolumeConfiguration.",
            "stability": "stable",
            "summary": "The access point ID to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 997
          },
          "name": "accessPointId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "If this parameter is omitted, the default value of DISABLED is used.",
            "remarks": "If enabled, transit encryption must be enabled in the EFSVolumeConfiguration.\n\nValid values: ENABLED | DISABLED",
            "stability": "stable",
            "summary": "Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 1007
          },
          "name": "iam",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:AuthorizationConfig"
    },
    "@aws-cdk/aws-ecs.AwsLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends log information to CloudWatch Logs.",
        "example": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AwsLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the AwsLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/aws-log-driver.ts",
          "line": 106
        },
        "parameters": [
          {
            "docs": {
              "summary": "the awslogs log driver configuration options."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AwsLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/aws-log-driver.ts",
        "line": 93
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 117
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "AwsLogDriver",
      "properties": [
        {
          "docs": {
            "remarks": "Only available after the LogDriver has been bound to a ContainerDefinition.",
            "stability": "stable",
            "summary": "The log group to send log streams to."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 99
          },
          "name": "logGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogGroup"
          }
        }
      ],
      "symbolId": "lib/log-drivers/aws-log-driver:AwsLogDriver"
    },
    "@aws-cdk/aws-ecs.AwsLogDriverMode": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "awslogs provides two modes for delivering messages from the container to the log driver.",
        "example": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AwsLogDriverMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/log-drivers/aws-log-driver.ts",
        "line": 13
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "(default) direct, blocking delivery from container to driver."
          },
          "name": "BLOCKING"
        },
        {
          "docs": {
            "remarks": "Applications are likely to fail in unexpected ways when STDERR or STDOUT streams block.",
            "stability": "stable",
            "summary": "The non-blocking message delivery mode prevents applications from blocking due to logging back pressure."
          },
          "name": "NON_BLOCKING"
        }
      ],
      "name": "AwsLogDriverMode",
      "symbolId": "lib/log-drivers/aws-log-driver:AwsLogDriverMode"
    },
    "@aws-cdk/aws-ecs.AwsLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Specifies the awslogs log driver configuration options.",
        "example": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.AwsLogDriverProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/aws-log-driver.ts",
        "line": 30
      },
      "name": "AwsLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The awslogs-stream-prefix option allows you to associate a log stream\nwith the specified prefix, the container name, and the ID of the Amazon\nECS task to which the container belongs. If you specify a prefix with\nthis option, then the log stream takes the following format:\n\n     prefix-name/container-name/ecs-task-id",
            "stability": "stable",
            "summary": "Prefix for the log streams."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 41
          },
          "name": "streamPrefix",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No multiline matching.",
            "remarks": "A log message consists of a line that matches the pattern and any\nfollowing lines that don’t match the pattern. Thus the matched line is\nthe delimiter between log messages.",
            "stability": "stable",
            "summary": "This option defines a multiline start pattern in Python strftime format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 67
          },
          "name": "datetimeFormat",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A log group is automatically created.",
            "stability": "stable",
            "summary": "The log group to log to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 48
          },
          "name": "logGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Logs never expire.",
            "stability": "stable",
            "summary": "The number of days log events are kept in CloudWatch Logs when the log group is automatically created by this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 56
          },
          "name": "logRetention",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-logs.RetentionDays"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AwsLogDriverMode.BLOCKING",
            "stability": "stable",
            "summary": "The delivery mode of log messages from the container to awslogs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 87
          },
          "name": "mode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.AwsLogDriverMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No multiline matching.",
            "remarks": "A log message consists of a line that matches the pattern and any\nfollowing lines that don’t match the pattern. Thus the matched line is\nthe delimiter between log messages.\n\nThis option is ignored if datetimeFormat is also configured.",
            "stability": "stable",
            "summary": "This option defines a multiline start pattern using a regular expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/aws-log-driver.ts",
            "line": 80
          },
          "name": "multilinePattern",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-drivers/aws-log-driver:AwsLogDriverProps"
    },
    "@aws-cdk/aws-ecs.BaseLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst baseLogDriverProps: ecs.BaseLogDriverProps = {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.BaseLogDriverProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/base-log-driver.ts",
        "line": 1
      },
      "name": "BaseLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No env",
            "remarks": "If there is collision between\nlabel and env keys, the value of the env takes precedence. Adds additional fields\nto the extra attributes of a logging message.",
            "stability": "stable",
            "summary": "The env option takes an array of keys."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/base-log-driver.ts",
            "line": 27
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No envRegex",
            "remarks": "Its value is a regular\nexpression to match logging-related environment variables. It is used for advanced\nlog tag options.",
            "stability": "stable",
            "summary": "The env-regex option is similar to and compatible with env."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/base-log-driver.ts",
            "line": 36
          },
          "name": "envRegex",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No labels",
            "remarks": "If there is collision\nbetween label and env keys, the value of the env takes precedence. Adds additional\nfields to the extra attributes of a logging message.",
            "stability": "stable",
            "summary": "The labels option takes an array of keys."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/base-log-driver.ts",
            "line": 18
          },
          "name": "labels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The first 12 characters of the container ID",
            "remarks": "Refer to the log tag option documentation for customizing the\nlog tag format.",
            "stability": "stable",
            "summary": "By default, Docker uses the first 12 characters of the container ID to tag log messages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/base-log-driver.ts",
            "line": 9
          },
          "name": "tag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-drivers/base-log-driver:BaseLogDriverProps"
    },
    "@aws-cdk/aws-ecs.BaseService": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "The base class for Ec2Service and FargateService services.",
        "example": "import * as ecs from '@aws-cdk/aws-ecs';\n\nconst service = ecs.BaseService.fromServiceArnWithCluster(this, 'EcsService',\n  'arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName'\n);\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\n// add source and build stages to the pipeline as usual...\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service: service,\n      input: buildOutput,\n    }),\n  ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.BaseService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the BaseService class."
        },
        "locationInModule": {
          "filename": "lib/base/base-service.ts",
          "line": 415
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.BaseServiceProps"
            }
          },
          {
            "name": "additionalProps",
            "type": {
              "primitive": "any"
            }
          },
          {
            "name": "taskDefinition",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.IBaseService",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 316
      },
      "methods": [
        {
          "docs": {
            "remarks": "The format is the \"new\" format \"arn:aws:ecs:region:aws_account_id:service/cluster-name/service-name\".",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids",
            "stability": "stable",
            "summary": "Import an existing ECS/Fargate Service using the service cluster format."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 323
          },
          "name": "fromServiceArnWithCluster",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "serviceArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IBaseService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Associates this service with a CloudMap service."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 768
          },
          "name": "associateCloudMapService",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Don't call this function directly. Instead, call `listener.addTargets()`\nto add this service to a load balancer.",
            "stability": "stable",
            "summary": "This method is called to attach this service to an Application Load Balancer."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 588
          },
          "name": "attachToApplicationTargetGroup",
          "overrides": "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancerTarget",
          "parameters": [
            {
              "name": "targetGroup",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.IApplicationTargetGroup"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancingv2.LoadBalancerTargetProps"
            }
          }
        },
        {
          "docs": {
            "remarks": "Don't call this. Call `loadBalancer.addTarget()` instead.",
            "stability": "stable",
            "summary": "Registers the service as a target of a Classic Load Balancer (CLB)."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 597
          },
          "name": "attachToClassicLB",
          "overrides": "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
          "parameters": [
            {
              "name": "loadBalancer",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancer"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Don't call this function directly. Instead, call `listener.addTargets()`\nto add this service to a load balancer.",
            "stability": "stable",
            "summary": "This method is called to attach this service to a Network Load Balancer."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 679
          },
          "name": "attachToNetworkTargetGroup",
          "overrides": "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancerTarget",
          "parameters": [
            {
              "name": "targetGroup",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.INetworkTargetGroup"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancingv2.LoadBalancerTargetProps"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "An attribute representing the minimum and maximum task count for an AutoScalingGroup."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 686
          },
          "name": "autoScaleTaskCount",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-applicationautoscaling.EnableScalingProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ScalableTaskCount"
            }
          }
        },
        {
          "docs": {
            "deprecated": "use configureAwsVpcNetworkingWithSecurityGroups instead.",
            "stability": "deprecated",
            "summary": "This method is called to create a networkConfiguration."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 821
          },
          "name": "configureAwsVpcNetworking",
          "parameters": [
            {
              "name": "vpc",
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            },
            {
              "name": "assignPublicIp",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            },
            {
              "name": "vpcSubnets",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
              }
            },
            {
              "name": "securityGroup",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method is called to create a networkConfiguration."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 843
          },
          "name": "configureAwsVpcNetworkingWithSecurityGroups",
          "parameters": [
            {
              "name": "vpc",
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            },
            {
              "name": "assignPublicIp",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            },
            {
              "name": "vpcSubnets",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
              }
            },
            {
              "name": "securityGroups",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "returns": "The created CloudMap service",
            "stability": "stable",
            "summary": "Enable CloudMap service discovery for the service."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 705
          },
          "name": "enableCloudMap",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.Service"
            }
          }
        },
        {
          "docs": {
            "example": "declare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\nlistener.addTargets('ECS', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 1234,\n  })],\n});",
            "remarks": "Use this function to create a load balancer target if you want to load balance to\nanother container than the first essential container or the first mapped port on\nthe container.\n\nUse the return value of this function where you would normally use a load balancer\ntarget, instead of the `Service` object itself.",
            "stability": "stable",
            "summary": "Return a load balancing target for a specific container and port."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 623
          },
          "name": "loadBalancerTarget",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.LoadBalancerTargetOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IEcsLoadBalancerTarget"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method returns the specified CloudWatch metric name for this service."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 789
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "This method returns the CloudWatch metric for this service's CPU utilization."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 812
          },
          "name": "metricCpuUtilization",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "This method returns the CloudWatch metric for this service's memory utilization."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 803
          },
          "name": "metricMemoryUtilization",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "example": "declare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n)",
            "remarks": "Alternatively, you can use `listener.addTargets()` to create targets and add them to target groups.",
            "stability": "stable",
            "summary": "Use this function to create all load balancer targets to be registered in this service, add them to target groups, and attach target groups to listeners accordingly."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 663
          },
          "name": "registerLoadBalancerTargets",
          "parameters": [
            {
              "name": "targets",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.EcsTarget"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "BaseService",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 384
          },
          "name": "cluster",
          "overrides": "@aws-cdk/aws-ecs.IBaseService",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The security groups which manage the allowed network traffic for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 362
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Amazon Resource Name (ARN) of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 367
          },
          "name": "serviceArn",
          "overrides": "@aws-cdk/aws-ecs.IService",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 374
          },
          "name": "serviceName",
          "overrides": "@aws-cdk/aws-ecs.IService",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 379
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The CloudMap service created for this service, if any."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 500
          },
          "name": "cloudMapService",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A list of Elastic Load Balancing load balancer objects, containing the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 395
          },
          "name": "loadBalancers",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.CfnService.LoadBalancerProperty"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "For more information, see Service Discovery.",
            "stability": "stable",
            "summary": "The details of the service discovery registries to assign to this service."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 407
          },
          "name": "serviceRegistries",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceRegistryProperty"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The details of the AWS Cloud Map service."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 389
          },
          "name": "cloudmapService",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.Service"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A list of Elastic Load Balancing load balancer objects, containing the load balancer name, the container name (as it appears in a container definition), and the container port to access from the load balancer."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 401
          },
          "name": "networkConfiguration",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CfnService.NetworkConfigurationProperty"
          }
        }
      ],
      "symbolId": "lib/base/base-service:BaseService"
    },
    "@aws-cdk/aws-ecs.BaseServiceOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the base Ec2Service or FargateService service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const namespace: servicediscovery.INamespace;\nconst baseServiceOptions: ecs.BaseServiceOptions = {\n  cluster: cluster,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  propagateTaskTagsFrom: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.BaseServiceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 99
      },
      "name": "BaseServiceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 103
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "stable",
            "summary": "A list of Capacity Provider strategies used to place a service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 200
          },
          "name": "capacityProviderStrategies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.CapacityProviderStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "remarks": "If this property is defined, circuit breaker will be implicitly\nenabled.",
            "stability": "stable",
            "summary": "Whether to enable the deployment circuit breaker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 192
          },
          "name": "circuitBreaker",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentCircuitBreaker"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AWS Cloud Map service discovery is not enabled.",
            "stability": "stable",
            "summary": "The options for configuring an Amazon ECS service to use service discovery."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 151
          },
          "name": "cloudMapOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Rolling update (ECS)",
            "remarks": "For more information, see\n[Amazon ECS Deployment Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)",
            "stability": "stable",
            "summary": "Specifies which deployment controller to use for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 185
          },
          "name": "deploymentController",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentController"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- When creating the service, default is 1; when updating the service, default uses\nthe current task number.",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 111
          },
          "name": "desiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For more information, see\n[Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)",
            "stability": "stable",
            "summary": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 177
          },
          "name": "enableECSManagedTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "stable",
            "summary": "Whether to enable the ability to execute into a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 207
          },
          "name": "enableExecuteCommand",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to 60 seconds if at least one load balancer is in-use and it is not already set",
            "stability": "stable",
            "summary": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 144
          },
          "name": "healthCheckGracePeriod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 100 if daemon, otherwise 200",
            "stability": "stable",
            "summary": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 127
          },
          "name": "maxHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0 if daemon, otherwise 50",
            "stability": "stable",
            "summary": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that must continue to run and remain healthy during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 136
          },
          "name": "minHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "PropagatedTagSource.NONE",
            "remarks": "Valid values are: PropagatedTagSource.SERVICE, PropagatedTagSource.TASK_DEFINITION or PropagatedTagSource.NONE",
            "stability": "stable",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 160
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "PropagatedTagSource.NONE",
            "deprecated": "Use `propagateTags` instead.",
            "remarks": "Tags can only be propagated to the tasks within the service during service creation.",
            "stability": "deprecated",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 169
          },
          "name": "propagateTaskTagsFrom",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CloudFormation-generated name.",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 118
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/base/base-service:BaseServiceOptions"
    },
    "@aws-cdk/aws-ecs.BaseServiceProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Complete base service properties that are required to be supplied by the implementation of the BaseService class.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const namespace: servicediscovery.INamespace;\nconst baseServiceProps: ecs.BaseServiceProps = {\n  cluster: cluster,\n  launchType: ecs.LaunchType.EC2,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  propagateTaskTagsFrom: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.BaseServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseServiceOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 214
      },
      "name": "BaseServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "LaunchType will be omitted if capacity provider strategies are specified on the service.",
            "see": "- https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-capacityproviderstrategy\n\nValid values are: LaunchType.ECS or LaunchType.FARGATE or LaunchType.EXTERNAL",
            "stability": "stable",
            "summary": "The launch type on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 224
          },
          "name": "launchType",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LaunchType"
          }
        }
      ],
      "symbolId": "lib/base/base-service:BaseServiceProps"
    },
    "@aws-cdk/aws-ecs.BinPackResource": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Instance resource used for bin packing."
      },
      "fqn": "@aws-cdk/aws-ecs.BinPackResource",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/placement.ts",
        "line": 7
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Fill up hosts' CPU allocations first."
          },
          "name": "CPU"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Fill up hosts' memory allocations first."
          },
          "name": "MEMORY"
        }
      ],
      "name": "BinPackResource",
      "symbolId": "lib/placement:BinPackResource"
    },
    "@aws-cdk/aws-ecs.BottleRocketImage": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Construct an Bottlerocket image from the latest AMI published in SSM.",
        "example": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.BottleRocketImage",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the BottleRocketImage class."
        },
        "locationInModule": {
          "filename": "lib/amis.ts",
          "line": 345
        },
        "parameters": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.BottleRocketImageProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ec2.IMachineImage"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 328
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the correct image."
          },
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 358
          },
          "name": "getImage",
          "overrides": "@aws-cdk/aws-ec2.IMachineImage",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ec2.MachineImageConfig"
            }
          }
        }
      ],
      "name": "BottleRocketImage",
      "symbolId": "lib/amis:BottleRocketImage"
    },
    "@aws-cdk/aws-ecs.BottleRocketImageProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties for BottleRocketImage.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst bottleRocketImageProps: ecs.BottleRocketImageProps = {\n  architecture: ec2.InstanceArchitecture.ARM_64,\n  cachedInContext: false,\n  variant: ecs.BottlerocketEcsVariant.AWS_ECS_1,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.BottleRocketImageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 287
      },
      "name": "BottleRocketImageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- x86_64",
            "stability": "stable",
            "summary": "The CPU architecture."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 301
          },
          "name": "architecture",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.InstanceArchitecture"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "By default, the newest image is used on each deployment. This will cause\ninstances to be replaced whenever a new version is released, and may cause\ndowntime if there aren't enough running instances in the AutoScalingGroup\nto reschedule the tasks on.\n\nIf set to true, the AMI ID will be cached in `cdk.context.json` and the\nsame value will be used on future runs. Your instances will not be replaced\nbut your AMI version will grow old over time. To refresh the AMI lookup,\nyou will have to evict the value from the cache using the `cdk context`\ncommand. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\nmore information.\n\nCan not be set to `true` in environment-agnostic stacks.",
            "stability": "stable",
            "summary": "Whether the AMI ID is cached to be stable between deployments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 322
          },
          "name": "cachedInContext",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- BottlerocketEcsVariant.AWS_ECS_1",
            "remarks": "Only `aws-ecs-1` is currently available",
            "stability": "stable",
            "summary": "The Amazon ECS variant to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 294
          },
          "name": "variant",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.BottlerocketEcsVariant"
          }
        }
      ],
      "symbolId": "lib/amis:BottleRocketImageProps"
    },
    "@aws-cdk/aws-ecs.BottlerocketEcsVariant": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Amazon ECS variant."
      },
      "fqn": "@aws-cdk/aws-ecs.BottlerocketEcsVariant",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 276
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "aws-ecs-1 variant."
          },
          "name": "AWS_ECS_1"
        }
      ],
      "name": "BottlerocketEcsVariant",
      "symbolId": "lib/amis:BottlerocketEcsVariant"
    },
    "@aws-cdk/aws-ecs.BuiltInAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The built-in container instance attributes.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst builtInAttributes = new ecs.BuiltInAttributes();",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.BuiltInAttributes",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ec2/ec2-service.ts",
        "line": 294
      },
      "name": "BuiltInAttributes",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "The AMI id the instance is using."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 308
          },
          "name": "AMI_ID",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "The AvailabilityZone where the instance is running in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 303
          },
          "name": "AVAILABILITY_ZONE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "The id of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 298
          },
          "name": "INSTANCE_ID",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "The EC2 instance type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 313
          },
          "name": "INSTANCE_TYPE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "remarks": "Either 'linux' or 'windows'.",
            "stability": "stable",
            "summary": "The operating system of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 320
          },
          "name": "OS_TYPE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ec2/ec2-service:BuiltInAttributes"
    },
    "@aws-cdk/aws-ecs.Capability": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "A Linux capability."
      },
      "fqn": "@aws-cdk/aws-ecs.Capability",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 188
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "ALL"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "AUDIT_CONTROL"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "AUDIT_WRITE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "BLOCK_SUSPEND"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "CHOWN"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "DAC_OVERRIDE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "DAC_READ_SEARCH"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "FOWNER"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "FSETID"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "IPC_LOCK"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "IPC_OWNER"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "KILL"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "LEASE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "LINUX_IMMUTABLE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MAC_ADMIN"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MAC_OVERRIDE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MKNOD"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NET_ADMIN"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NET_BIND_SERVICE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NET_BROADCAST"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NET_RAW"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SETFCAP"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SETGID"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SETPCAP"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SETUID"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_ADMIN"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_BOOT"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_CHROOT"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_MODULE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_NICE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_PACCT"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_PTRACE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_RAWIO"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_RESOURCE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_TIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYS_TTY_CONFIG"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYSLOG"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "WAKE_ALARM"
        }
      ],
      "name": "Capability",
      "symbolId": "lib/linux-parameters:Capability"
    },
    "@aws-cdk/aws-ecs.CapacityProviderStrategy": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "NOTE: defaultCapacityProviderStrategy on cluster not currently supported.",
        "stability": "stable",
        "summary": "A Capacity Provider strategy to use for the service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategy: ecs.CapacityProviderStrategy = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.CapacityProviderStrategy",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 917
      },
      "name": "CapacityProviderStrategy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 921
          },
          "name": "capacityProvider",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Only one\ncapacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default\nvalue of 0 is used.",
            "stability": "stable",
            "summary": "The base value designates how many tasks, at a minimum, to run on the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 930
          },
          "name": "base",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0",
            "remarks": "The weight value is taken into consideration after the base value, if defined, is satisfied.",
            "stability": "stable",
            "summary": "The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 939
          },
          "name": "weight",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/cluster:CapacityProviderStrategy"
    },
    "@aws-cdk/aws-ecs.CfnCapacityProvider": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ECS::CapacityProvider",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::ECS::CapacityProvider` resource creates an Amazon Elastic Container Service (Amazon ECS) capacity provider. Capacity providers are associated with an Amazon ECS cluster and are used in capacity provider strategies to facilitate cluster auto scaling.\n\nOnly capacity providers using an Auto Scaling group can be created. Amazon ECS tasks on AWS Fargate use the `FARGATE` and `FARGATE_SPOT` capacity providers which are already created and available to all accounts in Regions supported by AWS Fargate .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ECS::CapacityProvider`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnCapacityProvider = new ecs.CfnCapacityProvider(this, 'MyCfnCapacityProvider', {\n  autoScalingGroupProvider: {\n    autoScalingGroupArn: 'autoScalingGroupArn',\n\n    // the properties below are optional\n    managedScaling: {\n      instanceWarmupPeriod: 123,\n      maximumScalingStepSize: 123,\n      minimumScalingStepSize: 123,\n      status: 'status',\n      targetCapacity: 123,\n    },\n    managedTerminationProtection: 'managedTerminationProtection',\n  },\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ECS::CapacityProvider`."
        },
        "locationInModule": {
          "filename": "lib/ecs.generated.ts",
          "line": 180
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnCapacityProviderProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 117
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 195
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 208
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnCapacityProvider",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 121
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 200
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html#cfn-ecs-capacityprovider-tags"
            },
            "remarks": "Each tag consists of a key and an optional value. You define both.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the capacity provider to help you categorize and organize it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 171
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html#cfn-ecs-capacityprovider-autoscalinggroupprovider"
            },
            "stability": "external",
            "summary": "The Auto Scaling group settings for the capacity provider."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 147
          },
          "name": "autoScalingGroupProvider",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html#cfn-ecs-capacityprovider-name"
            },
            "remarks": "If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.",
            "stability": "external",
            "summary": "The name of the capacity provider."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 154
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCapacityProvider"
    },
    "@aws-cdk/aws-ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-autoscalinggroupprovider.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `AutoScalingGroupProvider` property specifies the details of the Auto Scaling group for the capacity provider.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst autoScalingGroupProviderProperty: ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty = {\n  autoScalingGroupArn: 'autoScalingGroupArn',\n\n  // the properties below are optional\n  managedScaling: {\n    instanceWarmupPeriod: 123,\n    maximumScalingStepSize: 123,\n    minimumScalingStepSize: 123,\n    status: 'status',\n    targetCapacity: 123,\n  },\n  managedTerminationProtection: 'managedTerminationProtection',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 222
      },
      "name": "AutoScalingGroupProviderProperty",
      "namespace": "CfnCapacityProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-autoscalinggroupprovider.html#cfn-ecs-capacityprovider-autoscalinggroupprovider-autoscalinggrouparn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) or short name that identifies the Auto Scaling group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 228
          },
          "name": "autoScalingGroupArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-autoscalinggroupprovider.html#cfn-ecs-capacityprovider-autoscalinggroupprovider-managedscaling"
            },
            "stability": "external",
            "summary": "The managed scaling settings for the Auto Scaling group capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 234
          },
          "name": "managedScaling",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider.ManagedScalingProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-autoscalinggroupprovider.html#cfn-ecs-capacityprovider-autoscalinggroupprovider-managedterminationprotection"
            },
            "remarks": "This determines whether the Auto Scaling group has managed termination protection. The default is off.\n\n> When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work.\n\nWhen managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions enabled as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the *AWS Auto Scaling User Guide* .\n\nWhen managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.",
            "stability": "external",
            "summary": "The managed termination protection setting to use for the Auto Scaling group capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 246
          },
          "name": "managedTerminationProtection",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCapacityProvider.AutoScalingGroupProviderProperty"
    },
    "@aws-cdk/aws-ecs.CfnCapacityProvider.ManagedScalingProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-managedscaling.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "When managed scaling is enabled, Amazon ECS manages the scale-in and scale-out actions of the Auto Scaling group. Amazon ECS manages a target tracking scaling policy using an Amazon ECS-managed CloudWatch metric with the specified `targetCapacity` value as the target value for the metric. For more information, see [Using Managed Scaling](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/asg-capacity-providers.html#asg-capacity-providers-managed-scaling) in the *Amazon Elastic Container Service Developer Guide* .\n\nIf managed scaling is disabled, the user must manage the scaling of the Auto Scaling group.",
        "stability": "external",
        "summary": "The `ManagedScaling` property specifies the settings for the Auto Scaling group capacity provider.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst managedScalingProperty: ecs.CfnCapacityProvider.ManagedScalingProperty = {\n  instanceWarmupPeriod: 123,\n  maximumScalingStepSize: 123,\n  minimumScalingStepSize: 123,\n  status: 'status',\n  targetCapacity: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider.ManagedScalingProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 318
      },
      "name": "ManagedScalingProperty",
      "namespace": "CfnCapacityProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-managedscaling.html#cfn-ecs-capacityprovider-managedscaling-instancewarmupperiod"
            },
            "remarks": "If this parameter is omitted, the default value of `300` seconds is used.",
            "stability": "external",
            "summary": "The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 324
          },
          "name": "instanceWarmupPeriod",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-managedscaling.html#cfn-ecs-capacityprovider-managedscaling-maximumscalingstepsize"
            },
            "remarks": "The scale in process is not affected by this parameter. If this parameter is omitted, the default value of `1` is used.",
            "stability": "external",
            "summary": "The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 330
          },
          "name": "maximumScalingStepSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-managedscaling.html#cfn-ecs-capacityprovider-managedscaling-minimumscalingstepsize"
            },
            "remarks": "The scale in process is not affected by this parameter If this parameter is omitted, the default value of `1` is used.\n\nWhen additional capacity is required, Amazon ECS will scale up the minimum scaling step size even if the actual demand is less than the minimum scaling step size.\n\nIf you use a capacity provider with an Auto Scaling group configured with more than one Amazon EC2 instance type or Availability Zone, Amazon ECS will scale up by the exact minimum scaling step size value and will ignore both the maximum scaling step size as well as the capacity demand.",
            "stability": "external",
            "summary": "The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 340
          },
          "name": "minimumScalingStepSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-managedscaling.html#cfn-ecs-capacityprovider-managedscaling-status"
            },
            "stability": "external",
            "summary": "Determines whether to use managed scaling for the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 346
          },
          "name": "status",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-managedscaling.html#cfn-ecs-capacityprovider-managedscaling-targetcapacity"
            },
            "remarks": "The specified value must be greater than `0` and less than or equal to `100` . A value of `100` results in the Amazon EC2 instances in your Auto Scaling group being completely used.",
            "stability": "external",
            "summary": "The target capacity value for the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 352
          },
          "name": "targetCapacity",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCapacityProvider.ManagedScalingProperty"
    },
    "@aws-cdk/aws-ecs.CfnCapacityProviderProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnCapacityProvider`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnCapacityProviderProps: ecs.CfnCapacityProviderProps = {\n  autoScalingGroupProvider: {\n    autoScalingGroupArn: 'autoScalingGroupArn',\n\n    // the properties below are optional\n    managedScaling: {\n      instanceWarmupPeriod: 123,\n      maximumScalingStepSize: 123,\n      minimumScalingStepSize: 123,\n      status: 'status',\n      targetCapacity: 123,\n    },\n    managedTerminationProtection: 'managedTerminationProtection',\n  },\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCapacityProviderProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 19
      },
      "name": "CfnCapacityProviderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html#cfn-ecs-capacityprovider-autoscalinggroupprovider"
            },
            "stability": "external",
            "summary": "The Auto Scaling group settings for the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 26
          },
          "name": "autoScalingGroupProvider",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html#cfn-ecs-capacityprovider-name"
            },
            "remarks": "If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.",
            "stability": "external",
            "summary": "The name of the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 33
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html#cfn-ecs-capacityprovider-tags"
            },
            "remarks": "Each tag consists of a key and an optional value. You define both.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the capacity provider to help you categorize and organize it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 50
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCapacityProviderProps"
    },
    "@aws-cdk/aws-ecs.CfnCluster": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ECS::Cluster",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::ECS::Cluster` resource creates an Amazon Elastic Container Service (Amazon ECS) cluster.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ECS::Cluster`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnCluster = new ecs.CfnCluster(this, 'MyCfnCluster', /* all optional props */ {\n  capacityProviders: ['capacityProviders'],\n  clusterName: 'clusterName',\n  clusterSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  configuration: {\n    executeCommandConfiguration: {\n      kmsKeyId: 'kmsKeyId',\n      logConfiguration: {\n        cloudWatchEncryptionEnabled: false,\n        cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n        s3BucketName: 's3BucketName',\n        s3EncryptionEnabled: false,\n        s3KeyPrefix: 's3KeyPrefix',\n      },\n      logging: 'logging',\n    },\n  },\n  defaultCapacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  serviceConnectDefaults: {\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCluster",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ECS::Cluster`."
        },
        "locationInModule": {
          "filename": "lib/ecs.generated.ts",
          "line": 668
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnClusterProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 565
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 687
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 704
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnCluster",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 569
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as `arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 594
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 692
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-tags"
            },
            "remarks": "Each tag consists of a key and an optional value. You define both.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the cluster to help you categorize and organize them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 659
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-capacityproviders"
            },
            "remarks": "A capacity provider must be associated with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a capacity provider strategy.\n\nIf specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created and not already associated with another cluster.\n\nTo use an AWS Fargate capacity provider, specify either the `FARGATE` or `FARGATE_SPOT` capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.",
            "stability": "external",
            "summary": "The short name of one or more capacity providers to associate with the cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 605
          },
          "name": "capacityProviders",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-clustername"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.",
            "stability": "external",
            "summary": "A user-generated string that you use to identify your cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 612
          },
          "name": "clusterName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-clustersettings"
            },
            "remarks": "This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the `containerInsights` value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html) .",
            "stability": "external",
            "summary": "The setting to use when creating a cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 619
          },
          "name": "clusterSettings",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterSettingsProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-configuration"
            },
            "stability": "external",
            "summary": "The execute command configuration for the cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 626
          },
          "name": "configuration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-defaultcapacityproviderstrategy"
            },
            "remarks": "When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.",
            "stability": "external",
            "summary": "The default capacity provider strategy for the cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 633
          },
          "name": "defaultCapacityProviderStrategy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnCluster.CapacityProviderStrategyItemProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-serviceconnectdefaults"
            },
            "remarks": "After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the `enabled` parameter to `true` in the `ServiceConnectConfiguration` . You can set the namespace of each service individually in the `ServiceConnectConfiguration` to override this default parameter.\n\nTasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "Use this parameter to set a default Service Connect namespace."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 642
          },
          "name": "serviceConnectDefaults",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCluster.ServiceConnectDefaultsProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCluster"
    },
    "@aws-cdk/aws-ecs.CfnCluster.CapacityProviderStrategyItemProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-capacityproviderstrategyitem.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.",
        "stability": "external",
        "summary": "The `CapacityProviderStrategyItem` property specifies the details of the default capacity provider strategy for the cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategyItemProperty: ecs.CfnCluster.CapacityProviderStrategyItemProperty = {\n  base: 123,\n  capacityProvider: 'capacityProvider',\n  weight: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCluster.CapacityProviderStrategyItemProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 718
      },
      "name": "CapacityProviderStrategyItemProperty",
      "namespace": "CfnCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-capacityproviderstrategyitem.html#cfn-ecs-cluster-capacityproviderstrategyitem-base"
            },
            "remarks": "Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of `0` is used.",
            "stability": "external",
            "summary": "The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 724
          },
          "name": "base",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-capacityproviderstrategyitem.html#cfn-ecs-cluster-capacityproviderstrategyitem-capacityprovider"
            },
            "stability": "external",
            "summary": "The short name of the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 730
          },
          "name": "capacityProvider",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-capacityproviderstrategyitem.html#cfn-ecs-cluster-capacityproviderstrategyitem-weight"
            },
            "remarks": "The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.\n\nIf no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0` , any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.\n\nAn example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of `1` , then when the `base` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of `1` for *capacityProviderA* and a weight of `4` for *capacityProviderB* , then for every one task that's run using *capacityProviderA* , four tasks would use *capacityProviderB* .",
            "stability": "external",
            "summary": "The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 740
          },
          "name": "weight",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCluster.CapacityProviderStrategyItemProperty"
    },
    "@aws-cdk/aws-ecs.CfnCluster.ClusterConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-clusterconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The execute command configuration for the cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst clusterConfigurationProperty: ecs.CfnCluster.ClusterConfigurationProperty = {\n  executeCommandConfiguration: {\n    kmsKeyId: 'kmsKeyId',\n    logConfiguration: {\n      cloudWatchEncryptionEnabled: false,\n      cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n      s3BucketName: 's3BucketName',\n      s3EncryptionEnabled: false,\n      s3KeyPrefix: 's3KeyPrefix',\n    },\n    logging: 'logging',\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 807
      },
      "name": "ClusterConfigurationProperty",
      "namespace": "CfnCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-clusterconfiguration.html#cfn-ecs-cluster-clusterconfiguration-executecommandconfiguration"
            },
            "stability": "external",
            "summary": "The details of the execute command configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 813
          },
          "name": "executeCommandConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCluster.ClusterConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnCluster.ClusterSettingsProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-clustersettings.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "This parameter is used to turn on CloudWatch Container Insights for a cluster.",
        "stability": "external",
        "summary": "The settings to use when creating a cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst clusterSettingsProperty: ecs.CfnCluster.ClusterSettingsProperty = {\n  name: 'name',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterSettingsProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 874
      },
      "name": "ClusterSettingsProperty",
      "namespace": "CfnCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-clustersettings.html#cfn-ecs-cluster-clustersettings-name"
            },
            "remarks": "The only supported value is `containerInsights` .",
            "stability": "external",
            "summary": "The name of the cluster setting."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 880
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-clustersettings.html#cfn-ecs-cluster-clustersettings-value"
            },
            "remarks": "The supported values are `enabled` and `disabled` . If `enabled` is specified, CloudWatch Container Insights will be enabled for the cluster, otherwise it will be disabled unless the `containerInsights` account setting is enabled. If a cluster value is specified, it will override the `containerInsights` value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html) .",
            "stability": "external",
            "summary": "The value to set for the cluster setting."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 886
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCluster.ClusterSettingsProperty"
    },
    "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The details of the execute command configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst executeCommandConfigurationProperty: ecs.CfnCluster.ExecuteCommandConfigurationProperty = {\n  kmsKeyId: 'kmsKeyId',\n  logConfiguration: {\n    cloudWatchEncryptionEnabled: false,\n    cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n    s3BucketName: 's3BucketName',\n    s3EncryptionEnabled: false,\n    s3KeyPrefix: 's3KeyPrefix',\n  },\n  logging: 'logging',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 950
      },
      "name": "ExecuteCommandConfigurationProperty",
      "namespace": "CfnCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandconfiguration.html#cfn-ecs-cluster-executecommandconfiguration-kmskeyid"
            },
            "stability": "external",
            "summary": "Specify an AWS Key Management Service key ID to encrypt the data between the local client and the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 956
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandconfiguration.html#cfn-ecs-cluster-executecommandconfiguration-logconfiguration"
            },
            "remarks": "The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When `logging=OVERRIDE` is specified, a `logConfiguration` must be provided.",
            "stability": "external",
            "summary": "The log configuration for the results of the execute command actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 962
          },
          "name": "logConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandLogConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandconfiguration.html#cfn-ecs-cluster-executecommandconfiguration-logging"
            },
            "remarks": "- `NONE` : The execute command session is not logged.\n- `DEFAULT` : The `awslogs` configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no `awslogs` log driver is configured in the task definition, the output won't be logged.\n- `OVERRIDE` : Specify the logging details as a part of `logConfiguration` . If the `OVERRIDE` logging option is specified, the `logConfiguration` is required.",
            "stability": "external",
            "summary": "The log setting to use for redirecting logs for your execute command results. The following log settings are available."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 972
          },
          "name": "logging",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCluster.ExecuteCommandConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandLogConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandlogconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.",
        "stability": "external",
        "summary": "The log configuration for the results of the execute command actions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst executeCommandLogConfigurationProperty: ecs.CfnCluster.ExecuteCommandLogConfigurationProperty = {\n  cloudWatchEncryptionEnabled: false,\n  cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n  s3BucketName: 's3BucketName',\n  s3EncryptionEnabled: false,\n  s3KeyPrefix: 's3KeyPrefix',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandLogConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1039
      },
      "name": "ExecuteCommandLogConfigurationProperty",
      "namespace": "CfnCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandlogconfiguration.html#cfn-ecs-cluster-executecommandlogconfiguration-cloudwatchencryptionenabled"
            },
            "remarks": "If not specified, encryption will be off.",
            "stability": "external",
            "summary": "Determines whether to use encryption on the CloudWatch logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1045
          },
          "name": "cloudWatchEncryptionEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandlogconfiguration.html#cfn-ecs-cluster-executecommandlogconfiguration-cloudwatchloggroupname"
            },
            "remarks": "> The CloudWatch log group must already be created.",
            "stability": "external",
            "summary": "The name of the CloudWatch log group to send logs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1053
          },
          "name": "cloudWatchLogGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandlogconfiguration.html#cfn-ecs-cluster-executecommandlogconfiguration-s3bucketname"
            },
            "remarks": "> The S3 bucket must already be created.",
            "stability": "external",
            "summary": "The name of the S3 bucket to send logs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1061
          },
          "name": "s3BucketName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandlogconfiguration.html#cfn-ecs-cluster-executecommandlogconfiguration-s3encryptionenabled"
            },
            "remarks": "If not specified, encryption is not used.",
            "stability": "external",
            "summary": "Determines whether to use encryption on the S3 logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1067
          },
          "name": "s3EncryptionEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandlogconfiguration.html#cfn-ecs-cluster-executecommandlogconfiguration-s3keyprefix"
            },
            "stability": "external",
            "summary": "An optional folder in the S3 bucket to place logs in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1073
          },
          "name": "s3KeyPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCluster.ExecuteCommandLogConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnCluster.ServiceConnectDefaultsProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-serviceconnectdefaults.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the `enabled` parameter to `true` in the `ServiceConnectConfiguration` . You can set the namespace of each service individually in the `ServiceConnectConfiguration` to override this default parameter.\n\nTasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "Use this parameter to set a default Service Connect namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectDefaultsProperty: ecs.CfnCluster.ServiceConnectDefaultsProperty = {\n  namespace: 'namespace',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnCluster.ServiceConnectDefaultsProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1148
      },
      "name": "ServiceConnectDefaultsProperty",
      "namespace": "CfnCluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-serviceconnectdefaults.html#cfn-ecs-cluster-serviceconnectdefaults-namespace"
            },
            "remarks": "The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or slash (/).\n\nIf you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region.\n\nIf you enter a new name, a AWS Cloud Map namespace will be created. Amazon ECS creates a AWS Cloud Map namespace with the \"API calls\" method of instance discovery only. This instance discovery method is the \"HTTP\" namespace type in the AWS Command Line Interface . Other types of instance discovery aren't used by Service Connect.\n\nIf you update the service with an empty string `\"\"` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in AWS Cloud Map and must be deleted separately.\n\nFor more information about AWS Cloud Map , see [Working with Services](https://docs.aws.amazon.com/) in the *AWS Cloud Map Developer Guide* .",
            "stability": "external",
            "summary": "The namespace name or full Amazon Resource Name (ARN) of the AWS Cloud Map namespace that's used when you create a service and don't specify a Service Connect configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1162
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnCluster.ServiceConnectDefaultsProperty"
    },
    "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ECS::ClusterCapacityProviderAssociations",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::ECS::ClusterCapacityProviderAssociations` resource associates one or more capacity providers and a default capacity provider strategy with a cluster.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ECS::ClusterCapacityProviderAssociations`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnClusterCapacityProviderAssociations = new ecs.CfnClusterCapacityProviderAssociations(this, 'MyCfnClusterCapacityProviderAssociations', {\n  capacityProviders: ['capacityProviders'],\n  cluster: 'cluster',\n  defaultCapacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ECS::ClusterCapacityProviderAssociations`."
        },
        "locationInModule": {
          "filename": "lib/ecs.generated.ts",
          "line": 1363
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociationsProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1310
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1380
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1393
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnClusterCapacityProviderAssociations",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1314
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1385
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html#cfn-ecs-clustercapacityproviderassociations-capacityproviders"
            },
            "stability": "external",
            "summary": "The capacity providers to associate with the cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1340
          },
          "name": "capacityProviders",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html#cfn-ecs-clustercapacityproviderassociations-cluster"
            },
            "stability": "external",
            "summary": "The cluster the capacity provider association is the target of."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1347
          },
          "name": "cluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html#cfn-ecs-clustercapacityproviderassociations-defaultcapacityproviderstrategy"
            },
            "stability": "external",
            "summary": "The default capacity provider strategy to associate with the cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1354
          },
          "name": "defaultCapacityProviderStrategy",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnClusterCapacityProviderAssociations"
    },
    "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-clustercapacityproviderassociations-capacityproviderstrategy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.",
        "stability": "external",
        "summary": "The `CapacityProviderStrategy` property specifies the details of the default capacity provider strategy for the cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategyProperty: ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1407
      },
      "name": "CapacityProviderStrategyProperty",
      "namespace": "CfnClusterCapacityProviderAssociations",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-clustercapacityproviderassociations-capacityproviderstrategy.html#cfn-ecs-clustercapacityproviderassociations-capacityproviderstrategy-capacityprovider"
            },
            "stability": "external",
            "summary": "The short name of the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1419
          },
          "name": "capacityProvider",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-clustercapacityproviderassociations-capacityproviderstrategy.html#cfn-ecs-clustercapacityproviderassociations-capacityproviderstrategy-base"
            },
            "remarks": "Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of `0` is used.",
            "stability": "external",
            "summary": "The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1413
          },
          "name": "base",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-clustercapacityproviderassociations-capacityproviderstrategy.html#cfn-ecs-clustercapacityproviderassociations-capacityproviderstrategy-weight"
            },
            "remarks": "The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.\n\nIf no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` will not be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0` , any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.\n\nAn example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of `1` , then when the `base` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of `1` for *capacityProviderA* and a weight of `4` for *capacityProviderB* , then for every one task that is run using *capacityProviderA* , four tasks would use *capacityProviderB* .",
            "stability": "external",
            "summary": "The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1429
          },
          "name": "weight",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty"
    },
    "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociationsProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnClusterCapacityProviderAssociations`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnClusterCapacityProviderAssociationsProps: ecs.CfnClusterCapacityProviderAssociationsProps = {\n  capacityProviders: ['capacityProviders'],\n  cluster: 'cluster',\n  defaultCapacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociationsProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1222
      },
      "name": "CfnClusterCapacityProviderAssociationsProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html#cfn-ecs-clustercapacityproviderassociations-capacityproviders"
            },
            "stability": "external",
            "summary": "The capacity providers to associate with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1229
          },
          "name": "capacityProviders",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html#cfn-ecs-clustercapacityproviderassociations-cluster"
            },
            "stability": "external",
            "summary": "The cluster the capacity provider association is the target of."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1236
          },
          "name": "cluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-clustercapacityproviderassociations.html#cfn-ecs-clustercapacityproviderassociations-defaultcapacityproviderstrategy"
            },
            "stability": "external",
            "summary": "The default capacity provider strategy to associate with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1243
          },
          "name": "defaultCapacityProviderStrategy",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnClusterCapacityProviderAssociationsProps"
    },
    "@aws-cdk/aws-ecs.CfnClusterProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnCluster`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnClusterProps: ecs.CfnClusterProps = {\n  capacityProviders: ['capacityProviders'],\n  clusterName: 'clusterName',\n  clusterSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  configuration: {\n    executeCommandConfiguration: {\n      kmsKeyId: 'kmsKeyId',\n      logConfiguration: {\n        cloudWatchEncryptionEnabled: false,\n        cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n        s3BucketName: 's3BucketName',\n        s3EncryptionEnabled: false,\n        s3KeyPrefix: 's3KeyPrefix',\n      },\n      logging: 'logging',\n    },\n  },\n  defaultCapacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  serviceConnectDefaults: {\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnClusterProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 424
      },
      "name": "CfnClusterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-capacityproviders"
            },
            "remarks": "A capacity provider must be associated with a cluster before it can be included as part of the default capacity provider strategy of the cluster or used in a capacity provider strategy.\n\nIf specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created and not already associated with another cluster.\n\nTo use an AWS Fargate capacity provider, specify either the `FARGATE` or `FARGATE_SPOT` capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.",
            "stability": "external",
            "summary": "The short name of one or more capacity providers to associate with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 435
          },
          "name": "capacityProviders",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-clustername"
            },
            "remarks": "If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.",
            "stability": "external",
            "summary": "A user-generated string that you use to identify your cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 442
          },
          "name": "clusterName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-clustersettings"
            },
            "remarks": "This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the `containerInsights` value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html) .",
            "stability": "external",
            "summary": "The setting to use when creating a cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 449
          },
          "name": "clusterSettings",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterSettingsProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-configuration"
            },
            "stability": "external",
            "summary": "The execute command configuration for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 456
          },
          "name": "configuration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-defaultcapacityproviderstrategy"
            },
            "remarks": "When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.",
            "stability": "external",
            "summary": "The default capacity provider strategy for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 463
          },
          "name": "defaultCapacityProviderStrategy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnCluster.CapacityProviderStrategyItemProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-serviceconnectdefaults"
            },
            "remarks": "After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the `enabled` parameter to `true` in the `ServiceConnectConfiguration` . You can set the namespace of each service individually in the `ServiceConnectConfiguration` to override this default parameter.\n\nTasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "Use this parameter to set a default Service Connect namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 472
          },
          "name": "serviceConnectDefaults",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnCluster.ServiceConnectDefaultsProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html#cfn-ecs-cluster-tags"
            },
            "remarks": "Each tag consists of a key and an optional value. You define both.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the cluster to help you categorize and organize them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 489
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnClusterProps"
    },
    "@aws-cdk/aws-ecs.CfnPrimaryTaskSet": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ECS::PrimaryTaskSet",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specifies which task set in a service is the primary task set. Any parameters that are updated on the primary task set in a service will transition to the service. This is used when a service uses the `EXTERNAL` deployment controller type. For more information, see [Amazon ECS Deployment Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ECS::PrimaryTaskSet`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnPrimaryTaskSet = new ecs.CfnPrimaryTaskSet(this, 'MyCfnPrimaryTaskSet', {\n  cluster: 'cluster',\n  service: 'service',\n  taskSetId: 'taskSetId',\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnPrimaryTaskSet",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ECS::PrimaryTaskSet`."
        },
        "locationInModule": {
          "filename": "lib/ecs.generated.ts",
          "line": 1637
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnPrimaryTaskSetProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1584
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1654
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1667
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnPrimaryTaskSet",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1588
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1659
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html#cfn-ecs-primarytaskset-cluster"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set exists in."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1614
          },
          "name": "cluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html#cfn-ecs-primarytaskset-service"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the service that the task set exists in."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1621
          },
          "name": "service",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html#cfn-ecs-primarytaskset-tasksetid"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the task set to set as the primary task set in the deployment."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1628
          },
          "name": "taskSetId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnPrimaryTaskSet"
    },
    "@aws-cdk/aws-ecs.CfnPrimaryTaskSetProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnPrimaryTaskSet`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnPrimaryTaskSetProps: ecs.CfnPrimaryTaskSetProps = {\n  cluster: 'cluster',\n  service: 'service',\n  taskSetId: 'taskSetId',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnPrimaryTaskSetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1496
      },
      "name": "CfnPrimaryTaskSetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html#cfn-ecs-primarytaskset-cluster"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task set exists in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1503
          },
          "name": "cluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html#cfn-ecs-primarytaskset-service"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the service that the task set exists in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1510
          },
          "name": "service",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html#cfn-ecs-primarytaskset-tasksetid"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the task set to set as the primary task set in the deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1517
          },
          "name": "taskSetId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnPrimaryTaskSetProps"
    },
    "@aws-cdk/aws-ecs.CfnService": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ECS::Service",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::ECS::Service` resource creates an Amazon Elastic Container Service (Amazon ECS) service that runs and maintains the requested number of tasks and associated load balancers.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ECS::Service`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnService = new ecs.CfnService(this, 'MyCfnService', /* all optional props */ {\n  capacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  cluster: 'cluster',\n  deploymentConfiguration: {\n    alarms: {\n      alarmNames: ['alarmNames'],\n      enable: false,\n      rollback: false,\n    },\n    deploymentCircuitBreaker: {\n      enable: false,\n      rollback: false,\n    },\n    maximumPercent: 123,\n    minimumHealthyPercent: 123,\n  },\n  deploymentController: {\n    type: 'type',\n  },\n  desiredCount: 123,\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriodSeconds: 123,\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsvpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  placementStrategies: [{\n    type: 'type',\n\n    // the properties below are optional\n    field: 'field',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  role: 'role',\n  schedulingStrategy: 'schedulingStrategy',\n  serviceConnectConfiguration: {\n    enabled: false,\n\n    // the properties below are optional\n    logConfiguration: {\n      logDriver: 'logDriver',\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    namespace: 'namespace',\n    services: [{\n      portName: 'portName',\n\n      // the properties below are optional\n      clientAliases: [{\n        port: 123,\n\n        // the properties below are optional\n        dnsName: 'dnsName',\n      }],\n      discoveryName: 'discoveryName',\n      ingressPortOverride: 123,\n    }],\n  },\n  serviceName: 'serviceName',\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskDefinition: 'taskDefinition',\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ECS::Service`."
        },
        "locationInModule": {
          "filename": "lib/ecs.generated.ts",
          "line": 2251
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2004
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2286
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2318
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnService",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2008
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "stability": "external",
            "summary": "The name of the Amazon ECS service, such as `sample-webapp` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2033
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "ServiceArn"
            },
            "stability": "external",
            "summary": "Not currently supported in AWS CloudFormation ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2039
          },
          "name": "attrServiceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2291
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the service to help you categorize and organize them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2231
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-capacityproviderstrategy"
            },
            "remarks": "A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.\n\nReview the [Capacity provider considerations](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-capacity-providers.html#capacity-providers-considerations) in the *Amazon Elastic Container Service Developer Guide.*\n\nIf a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or `launchType` is specified, the `defaultCapacityProviderStrategy` for the cluster is used.\n\nIf specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation.\n\nTo use an AWS Fargate capacity provider, specify either the `FARGATE` or `FARGATE_SPOT` capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.\n\nThe PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created.",
            "stability": "external",
            "summary": "The capacity provider strategy to use for the service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2058
          },
          "name": "capacityProviderStrategy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.CapacityProviderStrategyItemProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-cluster"
            },
            "remarks": "If you do not specify a cluster, the default cluster is assumed.",
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2065
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-deploymentconfiguration"
            },
            "stability": "external",
            "summary": "Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2072
          },
          "name": "deploymentConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-deploymentcontroller"
            },
            "remarks": "If no deployment controller is specified, the default value of `ECS` is used.",
            "stability": "external",
            "summary": "The deployment controller to use for the service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2079
          },
          "name": "deploymentController",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentControllerProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-desiredcount"
            },
            "remarks": "For new services, if a desired count is not specified, a default value of `1` is used. When using the `DAEMON` scheduling strategy, the desired count is not required.\n\nFor existing services, if a desired count is not specified, it is omitted from the operation.",
            "stability": "external",
            "summary": "The number of instantiations of the specified task definition to place and keep running on your cluster."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2090
          },
          "name": "desiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-enableecsmanagedtags"
            },
            "remarks": "For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "Specifies whether to turn on Amazon ECS managed tags for the tasks within the service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2097
          },
          "name": "enableEcsManagedTags",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-enableexecutecommand"
            },
            "remarks": "If `true` , the execute command functionality is enabled for all containers in tasks as part of the service.",
            "stability": "external",
            "summary": "Determines whether the execute command functionality is enabled for the service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2104
          },
          "name": "enableExecuteCommand",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-healthcheckgraceperiodseconds"
            },
            "remarks": "This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of `0` is used.\n\nIf you do not use an Elastic Load Balancing, we recommend that you use the `startPeriod` in the task definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html) .\n\nIf your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.",
            "stability": "external",
            "summary": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2115
          },
          "name": "healthCheckGracePeriodSeconds",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-launchtype"
            },
            "remarks": "For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The launch type on which to run your service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2122
          },
          "name": "launchType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-loadbalancers"
            },
            "remarks": "If you specify the `Role` property, `LoadBalancers` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "A list of load balancer objects to associate with the service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2129
          },
          "name": "loadBalancers",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.LoadBalancerProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-networkconfiguration"
            },
            "remarks": "This parameter is required for task definitions that use the `awsvpc` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The network configuration for the service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2136
          },
          "name": "networkConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.NetworkConfigurationProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-placementconstraints"
            },
            "remarks": "You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.",
            "stability": "external",
            "summary": "An array of placement constraint objects to use for tasks in your service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2143
          },
          "name": "placementConstraints",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementConstraintProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-placementstrategies"
            },
            "remarks": "You can specify a maximum of five strategy rules per service. For more information, see [Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The placement strategy objects to use for tasks in your service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2150
          },
          "name": "placementStrategies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementStrategyProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-platformversion"
            },
            "remarks": "A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the `LATEST` platform version is used. For more information, see [AWS Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The platform version that your tasks in the service are running on."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2157
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-propagatetags"
            },
            "remarks": "If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks within the service during service creation. To add tags to a task after service creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.",
            "stability": "external",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2164
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-role"
            },
            "remarks": "This parameter is only permitted if you are using a load balancer with your service and your task definition doesn't use the `awsvpc` network mode. If you specify the `role` parameter, you must also specify a load balancer object with the `loadBalancers` parameter.\n\n> If your account has already created the Amazon ECS service-linked role, that role is used for your service unless you specify a role here. The service-linked role is required if your task definition uses the `awsvpc` network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nIf your specified role has a path other than `/` , then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name `bar` has a path of `/foo/` then you would specify `/foo/bar` as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the *IAM User Guide* .",
            "stability": "external",
            "summary": "The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2175
          },
          "name": "role",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-schedulingstrategy"
            },
            "remarks": "There are two service scheduler strategies available:\n\n- `REPLICA` -The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the `CODE_DEPLOY` or `EXTERNAL` deployment controller types.\n- `DAEMON` -The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.\n\n> Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy.",
            "stability": "external",
            "summary": "The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html) ."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2189
          },
          "name": "schedulingStrategy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-serviceconnectconfiguration"
            },
            "remarks": "Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2198
          },
          "name": "serviceConnectConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-servicename"
            },
            "remarks": "Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.",
            "stability": "external",
            "summary": "The name of your service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2205
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-serviceregistries"
            },
            "remarks": "> Each service may be associated with one service registry. Multiple service registries for each service isn't supported.",
            "stability": "external",
            "summary": "The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html) ."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2214
          },
          "name": "serviceRegistries",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceRegistryProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-taskdefinition"
            },
            "remarks": "The `revision` is required in order for the resource to stabilize.\n\nA task definition must be specified if the service is using either the `ECS` or `CODE_DEPLOY` deployment controllers.\n\nFor more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html) .",
            "stability": "external",
            "summary": "The `family` and `revision` ( `family:revision` ) or full ARN of the task definition to run in your service."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2242
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService"
    },
    "@aws-cdk/aws-ecs.CfnService.AwsVpcConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-awsvpcconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "An object representing the networking details for a task or service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst awsVpcConfigurationProperty: ecs.CfnService.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.AwsVpcConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2332
      },
      "name": "AwsVpcConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-awsvpcconfiguration.html#cfn-ecs-service-awsvpcconfiguration-subnets"
            },
            "remarks": "There's a limit of 16 subnets that can be specified per `AwsVpcConfiguration` .\n\n> All specified subnets must be from the same VPC.",
            "stability": "external",
            "summary": "The IDs of the subnets associated with the task or service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2354
          },
          "name": "subnets",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-awsvpcconfiguration.html#cfn-ecs-service-awsvpcconfiguration-assignpublicip"
            },
            "remarks": "The default value is `DISABLED` .",
            "stability": "external",
            "summary": "Whether the task's elastic network interface receives a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2338
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-awsvpcconfiguration.html#cfn-ecs-service-awsvpcconfiguration-securitygroups"
            },
            "remarks": "If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified per `AwsVpcConfiguration` .\n\n> All specified security groups must be from the same VPC.",
            "stability": "external",
            "summary": "The IDs of the security groups associated with the task or service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2346
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.AwsVpcConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.CapacityProviderStrategyItemProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-capacityproviderstrategyitem.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "A capacity provider strategy can be set when using the `RunTask` or `CreateService` APIs or as the default capacity provider strategy for a cluster with the `CreateCluster` API.\n\nOnly capacity providers that are already associated with a cluster and have an `ACTIVE` or `UPDATING` status can be used in a capacity provider strategy. The `PutClusterCapacityProviders` API is used to associate a capacity provider with a cluster.\n\nIf specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the `CreateCapacityProvider` API operation.\n\nTo use an AWS Fargate capacity provider, specify either the `FARGATE` or `FARGATE_SPOT` capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.",
        "stability": "external",
        "summary": "The details of a capacity provider strategy.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategyItemProperty: ecs.CfnService.CapacityProviderStrategyItemProperty = {\n  base: 123,\n  capacityProvider: 'capacityProvider',\n  weight: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.CapacityProviderStrategyItemProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2428
      },
      "name": "CapacityProviderStrategyItemProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-capacityproviderstrategyitem.html#cfn-ecs-service-capacityproviderstrategyitem-base"
            },
            "remarks": "Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of `0` is used.",
            "stability": "external",
            "summary": "The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2434
          },
          "name": "base",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-capacityproviderstrategyitem.html#cfn-ecs-service-capacityproviderstrategyitem-capacityprovider"
            },
            "stability": "external",
            "summary": "The short name of the capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2440
          },
          "name": "capacityProvider",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-capacityproviderstrategyitem.html#cfn-ecs-service-capacityproviderstrategyitem-weight"
            },
            "remarks": "The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.\n\nIf no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0` , any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.\n\nAn example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of `1` , then when the `base` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of `1` for *capacityProviderA* and a weight of `4` for *capacityProviderB* , then for every one task that's run using *capacityProviderA* , four tasks would use *capacityProviderB* .",
            "stability": "external",
            "summary": "The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2450
          },
          "name": "weight",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.CapacityProviderStrategyItemProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.DeploymentAlarmsProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentalarms.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "When the alarms are generated, Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service to the last completed deployment after a failure.\n\nYou can only use the `DeploymentAlarms` method to detect failures when the `DeploymentController` is set to `ECS` (rolling update).\n\nFor more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the **Amazon Elastic Container Service Developer Guide** .",
        "stability": "external",
        "summary": "One of the methods which provide a way for you to quickly identify when a deployment has failed, and then to optionally roll back the failure to the last working deployment.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentAlarmsProperty: ecs.CfnService.DeploymentAlarmsProperty = {\n  alarmNames: ['alarmNames'],\n  enable: false,\n  rollback: false,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentAlarmsProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2523
      },
      "name": "DeploymentAlarmsProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentalarms.html#cfn-ecs-service-deploymentalarms-alarmnames"
            },
            "remarks": "Use a \",\" to separate the alarms.",
            "stability": "external",
            "summary": "One or more CloudWatch alarm names."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2529
          },
          "name": "alarmNames",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentalarms.html#cfn-ecs-service-deploymentalarms-enable"
            },
            "stability": "external",
            "summary": "Determines whether to use the CloudWatch alarm option in the service deployment process."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2535
          },
          "name": "enable",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentalarms.html#cfn-ecs-service-deploymentalarms-rollback"
            },
            "remarks": "If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
            "stability": "external",
            "summary": "Determines whether to configure Amazon ECS to roll back the service if a service deployment fails."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2541
          },
          "name": "rollback",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.DeploymentAlarmsProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.DeploymentCircuitBreakerProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentcircuitbreaker.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `DeploymentCircuitBreaker` property determines whether a service deployment will fail if the service can't reach a steady state. If deployment circuit breaker is enabled, a service deployment will transition to a failed state and stop launching new tasks. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
        "stability": "external",
        "summary": "> The deployment circuit breaker can only be used for services using the rolling update ( `ECS` ) deployment type.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentCircuitBreakerProperty: ecs.CfnService.DeploymentCircuitBreakerProperty = {\n  enable: false,\n  rollback: false,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentCircuitBreakerProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2613
      },
      "name": "DeploymentCircuitBreakerProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentcircuitbreaker.html#cfn-ecs-service-deploymentcircuitbreaker-enable"
            },
            "stability": "external",
            "summary": "Determines whether to use the deployment circuit breaker logic for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2619
          },
          "name": "enable",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentcircuitbreaker.html#cfn-ecs-service-deploymentcircuitbreaker-rollback"
            },
            "remarks": "If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.",
            "stability": "external",
            "summary": "Determines whether to configure Amazon ECS to roll back the service if a service deployment fails."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2625
          },
          "name": "rollback",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.DeploymentCircuitBreakerProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.DeploymentConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `DeploymentConfiguration` property specifies optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentConfigurationProperty: ecs.CfnService.DeploymentConfigurationProperty = {\n  alarms: {\n    alarmNames: ['alarmNames'],\n    enable: false,\n    rollback: false,\n  },\n  deploymentCircuitBreaker: {\n    enable: false,\n    rollback: false,\n  },\n  maximumPercent: 123,\n  minimumHealthyPercent: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2691
      },
      "name": "DeploymentConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentconfiguration.html#cfn-ecs-service-deploymentconfiguration-alarms"
            },
            "stability": "external",
            "summary": "Information about the CloudWatch alarms."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2697
          },
          "name": "alarms",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentAlarmsProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentconfiguration.html#cfn-ecs-service-deploymentconfiguration-deploymentcircuitbreaker"
            },
            "remarks": "The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If enabled, a service deployment will transition to a failed state and stop launching new tasks. You can also enable Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "> The deployment circuit breaker can only be used for services using the rolling update ( `ECS` ) deployment type that are not behind a Classic Load Balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2705
          },
          "name": "deploymentCircuitBreaker",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentCircuitBreakerProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentconfiguration.html#cfn-ecs-service-deploymentconfiguration-maximumpercent"
            },
            "remarks": "This parameter enables you to define the deployment batch size. For example, if your service is using the `REPLICA` service scheduler and has a `desiredCount` of four tasks and a `maximumPercent` value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default `maximumPercent` value for a service using the `REPLICA` service scheduler is 200%.\n\nIf a service is using either the blue/green ( `CODE_DEPLOY` ) or `EXTERNAL` deployment types and tasks that use the EC2 launch type, the *maximum percent* value is set to the default value and is used to define the upper limit on the number of the tasks in the service that remain in the `RUNNING` state while the container instances are in the `DRAINING` state. If the tasks in the service use the Fargate launch type, the maximum percent value is not used, although it is returned when describing your service.",
            "stability": "external",
            "summary": "If a service is using the rolling update ( `ECS` ) deployment type, the `maximumPercent` parameter represents an upper limit on the number of your service's tasks that are allowed in the `RUNNING` or `PENDING` state during a deployment, as a percentage of the `desiredCount` (rounded down to the nearest integer)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2713
          },
          "name": "maximumPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentconfiguration.html#cfn-ecs-service-deploymentconfiguration-minimumhealthypercent"
            },
            "remarks": "This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a `desiredCount` of four tasks and a `minimumHealthyPercent` of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks.\n\nFor services that *do not* use a load balancer, the following should be noted:\n\n- A service is considered healthy if all essential containers within the tasks in the service pass their health checks.\n- If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a `RUNNING` state before the task is counted towards the minimum healthy percent total.\n- If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings.\n\nFor services are that *do* use a load balancer, the following should be noted:\n\n- If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.\n- If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.\n\nIf a service is using either the blue/green ( `CODE_DEPLOY` ) or `EXTERNAL` deployment types and is running tasks that use the EC2 launch type, the *minimum healthy percent* value is set to the default value and is used to define the lower limit on the number of the tasks in the service that remain in the `RUNNING` state while the container instances are in the `DRAINING` state. If a service is using either the blue/green ( `CODE_DEPLOY` ) or `EXTERNAL` deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.",
            "stability": "external",
            "summary": "If a service is using the rolling update ( `ECS` ) deployment type, the `minimumHealthyPercent` represents a lower limit on the number of your service's tasks that must remain in the `RUNNING` state during a deployment, as a percentage of the `desiredCount` (rounded up to the nearest integer)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2732
          },
          "name": "minimumHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.DeploymentConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.DeploymentControllerProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentcontroller.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The deployment controller to use for the service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentControllerProperty: ecs.CfnService.DeploymentControllerProperty = {\n  type: 'type',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentControllerProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2802
      },
      "name": "DeploymentControllerProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-deploymentcontroller.html#cfn-ecs-service-deploymentcontroller-type"
            },
            "remarks": "- **ECS** - The rolling update ( `ECS` ) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the [DeploymentConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeploymentConfiguration.html) .\n- **CODE_DEPLOY** - The blue/green ( `CODE_DEPLOY` ) deployment type uses the blue/green deployment model powered by AWS CodeDeploy , which allows you to verify a new deployment of a service before sending production traffic to it.\n- **EXTERNAL** - The external ( `EXTERNAL` ) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.",
            "stability": "external",
            "summary": "The deployment controller type to use. There are three deployment controller types available:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2812
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.DeploymentControllerProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.LoadBalancerProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-loadbalancer.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "If the service is using the `CODE_DEPLOY` deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When you are creating an AWS CodeDeploy deployment group, you specify two target groups (referred to as a `targetGroupPair` ). Each target group binds to a separate task set in the deployment. The load balancer can also have up to two listeners, a required listener for production traffic and an optional listener that allows you to test new revisions of the service before routing production traffic to it.\n\nServices with tasks that use the `awsvpc` network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose `ip` as the target type, not `instance` . Tasks that use the `awsvpc` network mode are associated with an elastic network interface, not an Amazon EC2 instance.",
        "stability": "external",
        "summary": "The `LoadBalancer` property specifies details on a load balancer that is used with a service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst loadBalancerProperty: ecs.CfnService.LoadBalancerProperty = {\n  containerPort: 123,\n\n  // the properties below are optional\n  containerName: 'containerName',\n  loadBalancerName: 'loadBalancerName',\n  targetGroupArn: 'targetGroupArn',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.LoadBalancerProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2877
      },
      "name": "LoadBalancerProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-loadbalancer.html#cfn-ecs-service-loadbalancer-containerport"
            },
            "remarks": "This port must correspond to a `containerPort` in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they're launched on must allow ingress traffic on the `hostPort` of the port mapping.",
            "stability": "external",
            "summary": "The port on the container to associate with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2889
          },
          "name": "containerPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-loadbalancer.html#cfn-ecs-service-loadbalancer-containername"
            },
            "stability": "external",
            "summary": "The name of the container (as it appears in a container definition) to associate with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2883
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-loadbalancer.html#cfn-ecs-service-loadbalancer-loadbalancername"
            },
            "remarks": "A load balancer name is only specified when using a Classic Load Balancer. If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.",
            "stability": "external",
            "summary": "The name of the load balancer to associate with the Amazon ECS service or task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2897
          },
          "name": "loadBalancerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-loadbalancer.html#cfn-ecs-service-loadbalancer-targetgrouparn"
            },
            "remarks": "A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you're using a Classic Load Balancer, omit the target group ARN.\n\nFor services using the `ECS` deployment controller, you can specify one or multiple target groups. For more information, see [Registering multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nFor services using the `CODE_DEPLOY` deployment controller, you're required to define two target groups for the load balancer. For more information, see [Blue/green deployment with CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> If your service's task definition uses the `awsvpc` network mode, you must choose `ip` as the target type, not `instance` . Do this when creating your target groups because tasks that use the `awsvpc` network mode are associated with an elastic network interface, not an Amazon EC2 instance. This network mode is required for the Fargate launch type.",
            "stability": "external",
            "summary": "The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 2911
          },
          "name": "targetGroupArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.LoadBalancerProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.LogConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-logconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--log-driver` option to [`docker run`](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/) .\n\nBy default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.\n\nUnderstand the following when specifying a log configuration for your containers.\n\n- Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the valid values below). Additional log drivers may be available in future releases of the Amazon ECS container agent.\n- This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.\n- For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .\n- For tasks that are on AWS Fargate , because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.",
        "stability": "external",
        "summary": "The log configuration for the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst logConfigurationProperty: ecs.CfnService.LogConfigurationProperty = {\n  logDriver: 'logDriver',\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.LogConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 2991
      },
      "name": "LogConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-logconfiguration.html#cfn-ecs-service-logconfiguration-logdriver"
            },
            "remarks": "For tasks on AWS Fargate , the supported log drivers are `awslogs` , `splunk` , and `awsfirelens` .\n\nFor tasks hosted on Amazon EC2 instances, the supported log drivers are `awslogs` , `fluentd` , `gelf` , `json-file` , `journald` , `logentries` , `syslog` , `splunk` , and `awsfirelens` .\n\nFor more information about using the `awslogs` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nFor more information about using the `awsfirelens` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.",
            "stability": "external",
            "summary": "The log driver to use for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3007
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-logconfiguration.html#cfn-ecs-service-logconfiguration-options"
            },
            "remarks": "This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version --format '{{.Server.APIVersion}}'`",
            "stability": "external",
            "summary": "The configuration options to send to the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3013
          },
          "name": "options",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-logconfiguration.html#cfn-ecs-service-logconfiguration-secretoptions"
            },
            "remarks": "For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The secrets to pass to the log configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3019
          },
          "name": "secretOptions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.SecretProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.LogConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.NetworkConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-networkconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `NetworkConfiguration` property specifies an object representing the network configuration for a task or service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst networkConfigurationProperty: ecs.CfnService.NetworkConfigurationProperty = {\n  awsvpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.NetworkConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3086
      },
      "name": "NetworkConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-networkconfiguration.html#cfn-ecs-service-networkconfiguration-awsvpcconfiguration"
            },
            "remarks": "> All specified subnets and security groups must be from the same VPC.",
            "stability": "external",
            "summary": "The VPC subnets and security groups that are associated with a task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3094
          },
          "name": "awsvpcConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.AwsVpcConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.NetworkConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.PlacementConstraintProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-placementconstraint.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The `PlacementConstraint` property specifies an object representing a constraint on task placement in the task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst placementConstraintProperty: ecs.CfnService.PlacementConstraintProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  expression: 'expression',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementConstraintProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3155
      },
      "name": "PlacementConstraintProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-placementconstraint.html#cfn-ecs-service-placementconstraint-type"
            },
            "remarks": "Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.",
            "stability": "external",
            "summary": "The type of constraint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3167
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-placementconstraint.html#cfn-ecs-service-placementconstraint-expression"
            },
            "remarks": "The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is `distinctInstance` . For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "A cluster query language expression to apply to the constraint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3161
          },
          "name": "expression",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.PlacementConstraintProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.PlacementStrategyProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-placementstrategy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The `PlacementStrategy` property specifies the task placement strategy for a task or service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst placementStrategyProperty: ecs.CfnService.PlacementStrategyProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  field: 'field',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementStrategyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3232
      },
      "name": "PlacementStrategyProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-placementstrategy.html#cfn-ecs-service-placementstrategy-type"
            },
            "remarks": "The `random` placement strategy randomly places tasks on available candidates. The `spread` placement strategy spreads placement across available candidates evenly based on the `field` parameter. The `binpack` strategy places tasks on available candidates that have the least available amount of the resource that's specified with the `field` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.",
            "stability": "external",
            "summary": "The type of placement strategy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3244
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-placementstrategy.html#cfn-ecs-service-placementstrategy-field"
            },
            "remarks": "For the `spread` placement strategy, valid values are `instanceId` (or `host` , which has the same effect), or any platform or custom attribute that is applied to a container instance, such as `attribute:ecs.availability-zone` . For the `binpack` placement strategy, valid values are `CPU` and `MEMORY` . For the `random` placement strategy, this field is not used.",
            "stability": "external",
            "summary": "The field to apply the placement strategy against."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3238
          },
          "name": "field",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.PlacementStrategyProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.SecretProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-secret.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Secrets can be exposed to a container in the following ways:\n\n- To inject sensitive data into your containers as environment variables, use the `secrets` container definition parameter.\n- To reference sensitive information in the log configuration of a container, use the `secretOptions` container definition parameter.\n\nFor more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "An object representing the secret to expose to your container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst secretProperty: ecs.CfnService.SecretProperty = {\n  name: 'name',\n  valueFrom: 'valueFrom',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.SecretProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3314
      },
      "name": "SecretProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-secret.html#cfn-ecs-service-secret-name"
            },
            "stability": "external",
            "summary": "The name of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3320
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-secret.html#cfn-ecs-service-secret-valuefrom"
            },
            "remarks": "The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.\n\nFor information about the require AWS Identity and Access Management permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide* .\n\n> If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.",
            "stability": "external",
            "summary": "The secret to expose to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3330
          },
          "name": "valueFrom",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.SecretProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.ServiceConnectClientAliasProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectclientalias.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Each name and port mapping must be unique within the namespace.\n\nTasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "Each alias (\"endpoint\") is a fully-qualified name and port number that other tasks (\"clients\") can use to connect to this service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectClientAliasProperty: ecs.CfnService.ServiceConnectClientAliasProperty = {\n  port: 123,\n\n  // the properties below are optional\n  dnsName: 'dnsName',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectClientAliasProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3400
      },
      "name": "ServiceConnectClientAliasProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectclientalias.html#cfn-ecs-service-serviceconnectclientalias-port"
            },
            "remarks": "This port is available inside of all of the tasks within the same namespace.\n\nTo avoid changing your applications in client Amazon ECS services, set this to the same port that the client application uses by default. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The listening port number for the Service Connect proxy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3418
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectclientalias.html#cfn-ecs-service-serviceconnectclientalias-dnsname"
            },
            "remarks": "The name must be a valid DNS name but doesn't need to be fully-qualified. The name can include up to 127 characters. The name can include lowercase letters, numbers, underscores (_), hyphens (-), and periods (.). The name can't start with a hyphen.\n\nIf this parameter isn't specified, the default value of `discoveryName.namespace` is used. If the `discoveryName` isn't specified, the port mapping name from the task definition is used in `portName.namespace` .\n\nTo avoid changing your applications in client Amazon ECS services, set this to the same name that the client application uses by default. For example, a few common names are `database` , `db` , or the lowercase name of a database, such as `mysql` or `redis` . For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The `dnsName` is the name that you use in the applications of client tasks to connect to this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3410
          },
          "name": "dnsName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.ServiceConnectClientAliasProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.ServiceConnectConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.\n\nTasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The Service Connect configuration of your Amazon ECS service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectConfigurationProperty: ecs.CfnService.ServiceConnectConfigurationProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  logConfiguration: {\n    logDriver: 'logDriver',\n    options: {\n      optionsKey: 'options',\n    },\n    secretOptions: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n  },\n  namespace: 'namespace',\n  services: [{\n    portName: 'portName',\n\n    // the properties below are optional\n    clientAliases: [{\n      port: 123,\n\n      // the properties below are optional\n      dnsName: 'dnsName',\n    }],\n    discoveryName: 'discoveryName',\n    ingressPortOverride: 123,\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3485
      },
      "name": "ServiceConnectConfigurationProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectconfiguration.html#cfn-ecs-service-serviceconnectconfiguration-enabled"
            },
            "stability": "external",
            "summary": "Specifies whether to use Service Connect with this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3491
          },
          "name": "enabled",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectconfiguration.html#cfn-ecs-service-serviceconnectconfiguration-logconfiguration"
            },
            "stability": "external",
            "summary": "`CfnService.ServiceConnectConfigurationProperty.LogConfiguration`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3497
          },
          "name": "logConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.LogConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectconfiguration.html#cfn-ecs-service-serviceconnectconfiguration-namespace"
            },
            "remarks": "The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about AWS Cloud Map , see [Working with Services](https://docs.aws.amazon.com/) in the *AWS Cloud Map Developer Guide* .",
            "stability": "external",
            "summary": "The namespace name or full Amazon Resource Name (ARN) of the AWS Cloud Map namespace for use with Service Connect."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3503
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectconfiguration.html#cfn-ecs-service-serviceconnectconfiguration-services"
            },
            "remarks": "These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service.\n\nThis field is not required for a \"client\" Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means.\n\nAn object selects a port from the task definition, assigns a name for the AWS Cloud Map service, and a list of aliases (endpoints) and ports for client applications to refer to this service.",
            "stability": "external",
            "summary": "The list of Service Connect service objects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3513
          },
          "name": "services",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectServiceProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.ServiceConnectConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.ServiceConnectServiceProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectservice.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The Service Connect service object configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectServiceProperty: ecs.CfnService.ServiceConnectServiceProperty = {\n  portName: 'portName',\n\n  // the properties below are optional\n  clientAliases: [{\n    port: 123,\n\n    // the properties below are optional\n    dnsName: 'dnsName',\n  }],\n  discoveryName: 'discoveryName',\n  ingressPortOverride: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectServiceProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3584
      },
      "name": "ServiceConnectServiceProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectservice.html#cfn-ecs-service-serviceconnectservice-portname"
            },
            "stability": "external",
            "summary": "The `portName` must match the name of one of the `portMappings` from all the containers in the task definition of this Amazon ECS service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3620
          },
          "name": "portName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectservice.html#cfn-ecs-service-serviceconnectservice-clientaliases"
            },
            "remarks": "You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1.\n\nEach alias (\"endpoint\") is a fully-qualified name and port number that other Amazon ECS tasks (\"clients\") can use to connect to this service.\n\nEach name and port mapping must be unique within the namespace.\n\nFor each `ServiceConnectService` , you must provide at least one `clientAlias` with one `port` .",
            "stability": "external",
            "summary": "The list of client aliases for this Service Connect service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3596
          },
          "name": "clientAliases",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectClientAliasProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectservice.html#cfn-ecs-service-serviceconnectservice-discoveryname"
            },
            "remarks": "This must be unique within the AWS Cloud Map namespace. The name can contain up to 64 characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.\n\nIf this parameter isn't specified, the default value of `discoveryName.namespace` is used. If the `discoveryName` isn't specified, the port mapping name from the task definition is used in `portName.namespace` .",
            "stability": "external",
            "summary": "The `discoveryName` is the name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3604
          },
          "name": "discoveryName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceconnectservice.html#cfn-ecs-service-serviceconnectservice-ingressportoverride"
            },
            "remarks": "Use the value of this field to bypass the proxy for traffic on the port number specified in the named `portMapping` in the task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy for this Amazon ECS service.\n\nIn `awsvpc` mode and Fargate, the default value is the container port number. The container port number is in the `portMapping` in the task definition. In bridge mode, the default value is the ephemeral port of the Service Connect proxy.",
            "stability": "external",
            "summary": "The port number for the Service Connect proxy to listen on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3614
          },
          "name": "ingressPortOverride",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.ServiceConnectServiceProperty"
    },
    "@aws-cdk/aws-ecs.CfnService.ServiceRegistryProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceregistry.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Service Discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The `ServiceRegistry` property specifies details of the service registry.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceRegistryProperty: ecs.CfnService.ServiceRegistryProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  port: 123,\n  registryArn: 'registryArn',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceRegistryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3691
      },
      "name": "ServiceRegistryProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceregistry.html#cfn-ecs-service-serviceregistry-containername"
            },
            "remarks": "It's already specified in the task definition. If the task definition that your service task specifies uses the `bridge` or `host` network mode, you must specify a `containerName` and `containerPort` combination from the task definition. If the task definition that your service task specifies uses the `awsvpc` network mode and a type SRV DNS record is used, you must specify either a `containerName` and `containerPort` combination or a `port` value. However, you can't specify both.",
            "stability": "external",
            "summary": "The container name value to be used for your service discovery service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3697
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceregistry.html#cfn-ecs-service-serviceregistry-containerport"
            },
            "remarks": "It's already specified in the task definition. If the task definition your service task specifies uses the `bridge` or `host` network mode, you must specify a `containerName` and `containerPort` combination from the task definition. If the task definition your service task specifies uses the `awsvpc` network mode and a type SRV DNS record is used, you must specify either a `containerName` and `containerPort` combination or a `port` value. However, you can't specify both.",
            "stability": "external",
            "summary": "The port value to be used for your service discovery service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3703
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceregistry.html#cfn-ecs-service-serviceregistry-port"
            },
            "remarks": "This field might be used if both the `awsvpc` network mode and SRV records are used.",
            "stability": "external",
            "summary": "The port value used if your service discovery service specified an SRV record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3709
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-service-serviceregistry.html#cfn-ecs-service-serviceregistry-registryarn"
            },
            "remarks": "The currently supported service registry is AWS Cloud Map . For more information, see [CreateService](https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html) .",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the service registry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3715
          },
          "name": "registryArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnService.ServiceRegistryProperty"
    },
    "@aws-cdk/aws-ecs.CfnServiceProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnService`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnServiceProps: ecs.CfnServiceProps = {\n  capacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  cluster: 'cluster',\n  deploymentConfiguration: {\n    alarms: {\n      alarmNames: ['alarmNames'],\n      enable: false,\n      rollback: false,\n    },\n    deploymentCircuitBreaker: {\n      enable: false,\n      rollback: false,\n    },\n    maximumPercent: 123,\n    minimumHealthyPercent: 123,\n  },\n  deploymentController: {\n    type: 'type',\n  },\n  desiredCount: 123,\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriodSeconds: 123,\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsvpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  placementStrategies: [{\n    type: 'type',\n\n    // the properties below are optional\n    field: 'field',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  role: 'role',\n  schedulingStrategy: 'schedulingStrategy',\n  serviceConnectConfiguration: {\n    enabled: false,\n\n    // the properties below are optional\n    logConfiguration: {\n      logDriver: 'logDriver',\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    namespace: 'namespace',\n    services: [{\n      portName: 'portName',\n\n      // the properties below are optional\n      clientAliases: [{\n        port: 123,\n\n        // the properties below are optional\n        dnsName: 'dnsName',\n      }],\n      discoveryName: 'discoveryName',\n      ingressPortOverride: 123,\n    }],\n  },\n  serviceName: 'serviceName',\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskDefinition: 'taskDefinition',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 1680
      },
      "name": "CfnServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-capacityproviderstrategy"
            },
            "remarks": "A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.\n\nReview the [Capacity provider considerations](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-capacity-providers.html#capacity-providers-considerations) in the *Amazon Elastic Container Service Developer Guide.*\n\nIf a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or `launchType` is specified, the `defaultCapacityProviderStrategy` for the cluster is used.\n\nIf specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation.\n\nTo use an AWS Fargate capacity provider, specify either the `FARGATE` or `FARGATE_SPOT` capacity providers. The AWS Fargate capacity providers are available to all accounts and only need to be associated with a cluster to be used.\n\nThe PutClusterCapacityProviders API operation is used to update the list of available capacity providers for a cluster after the cluster is created.",
            "stability": "external",
            "summary": "The capacity provider strategy to use for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1699
          },
          "name": "capacityProviderStrategy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.CapacityProviderStrategyItemProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-cluster"
            },
            "remarks": "If you do not specify a cluster, the default cluster is assumed.",
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1706
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-deploymentconfiguration"
            },
            "stability": "external",
            "summary": "Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1713
          },
          "name": "deploymentConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-deploymentcontroller"
            },
            "remarks": "If no deployment controller is specified, the default value of `ECS` is used.",
            "stability": "external",
            "summary": "The deployment controller to use for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1720
          },
          "name": "deploymentController",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentControllerProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-desiredcount"
            },
            "remarks": "For new services, if a desired count is not specified, a default value of `1` is used. When using the `DAEMON` scheduling strategy, the desired count is not required.\n\nFor existing services, if a desired count is not specified, it is omitted from the operation.",
            "stability": "external",
            "summary": "The number of instantiations of the specified task definition to place and keep running on your cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1731
          },
          "name": "desiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-enableecsmanagedtags"
            },
            "remarks": "For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "Specifies whether to turn on Amazon ECS managed tags for the tasks within the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1738
          },
          "name": "enableEcsManagedTags",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-enableexecutecommand"
            },
            "remarks": "If `true` , the execute command functionality is enabled for all containers in tasks as part of the service.",
            "stability": "external",
            "summary": "Determines whether the execute command functionality is enabled for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1745
          },
          "name": "enableExecuteCommand",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-healthcheckgraceperiodseconds"
            },
            "remarks": "This is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of `0` is used.\n\nIf you do not use an Elastic Load Balancing, we recommend that you use the `startPeriod` in the task definition health check parameters. For more information, see [Health check](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html) .\n\nIf your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.",
            "stability": "external",
            "summary": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1756
          },
          "name": "healthCheckGracePeriodSeconds",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-launchtype"
            },
            "remarks": "For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The launch type on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1763
          },
          "name": "launchType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-loadbalancers"
            },
            "remarks": "If you specify the `Role` property, `LoadBalancers` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "A list of load balancer objects to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1770
          },
          "name": "loadBalancers",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.LoadBalancerProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-networkconfiguration"
            },
            "remarks": "This parameter is required for task definitions that use the `awsvpc` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The network configuration for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1777
          },
          "name": "networkConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.NetworkConfigurationProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-placementconstraints"
            },
            "remarks": "You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.",
            "stability": "external",
            "summary": "An array of placement constraint objects to use for tasks in your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1784
          },
          "name": "placementConstraints",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementConstraintProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-placementstrategies"
            },
            "remarks": "You can specify a maximum of five strategy rules per service. For more information, see [Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The placement strategy objects to use for tasks in your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1791
          },
          "name": "placementStrategies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementStrategyProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-platformversion"
            },
            "remarks": "A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the `LATEST` platform version is used. For more information, see [AWS Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The platform version that your tasks in the service are running on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1798
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-propagatetags"
            },
            "remarks": "If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks within the service during service creation. To add tags to a task after service creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.",
            "stability": "external",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1805
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-role"
            },
            "remarks": "This parameter is only permitted if you are using a load balancer with your service and your task definition doesn't use the `awsvpc` network mode. If you specify the `role` parameter, you must also specify a load balancer object with the `loadBalancers` parameter.\n\n> If your account has already created the Amazon ECS service-linked role, that role is used for your service unless you specify a role here. The service-linked role is required if your task definition uses the `awsvpc` network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nIf your specified role has a path other than `/` , then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name `bar` has a path of `/foo/` then you would specify `/foo/bar` as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the *IAM User Guide* .",
            "stability": "external",
            "summary": "The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1816
          },
          "name": "role",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-schedulingstrategy"
            },
            "remarks": "There are two service scheduler strategies available:\n\n- `REPLICA` -The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the `CODE_DEPLOY` or `EXTERNAL` deployment controller types.\n- `DAEMON` -The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.\n\n> Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy.",
            "stability": "external",
            "summary": "The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html) ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1830
          },
          "name": "schedulingStrategy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-serviceconnectconfiguration"
            },
            "remarks": "Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1839
          },
          "name": "serviceConnectConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-servicename"
            },
            "remarks": "Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.",
            "stability": "external",
            "summary": "The name of your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1846
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-serviceregistries"
            },
            "remarks": "> Each service may be associated with one service registry. Multiple service registries for each service isn't supported.",
            "stability": "external",
            "summary": "The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html) ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1855
          },
          "name": "serviceRegistries",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceRegistryProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the service to help you categorize and organize them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1872
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#cfn-ecs-service-taskdefinition"
            },
            "remarks": "The `revision` is required in order for the resource to stabilize.\n\nA task definition must be specified if the service is using either the `ECS` or `CODE_DEPLOY` deployment controllers.\n\nFor more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html) .",
            "stability": "external",
            "summary": "The `family` and `revision` ( `family:revision` ) or full ARN of the task definition to run in your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 1883
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnServiceProps"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ECS::TaskDefinition",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `AWS::ECS::TaskDefinition` resource describes the container and volume definitions of an Amazon Elastic Container Service (Amazon ECS) task. You can specify which Docker images to use, the required resources, and other configurations related to launching the task definition through an Amazon ECS service or task.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ECS::TaskDefinition`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskDefinition = new ecs.CfnTaskDefinition(this, 'MyCfnTaskDefinition', /* all optional props */ {\n  containerDefinitions: [{\n    image: 'image',\n    name: 'name',\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    dependsOn: [{\n      condition: 'condition',\n      containerName: 'containerName',\n    }],\n    disableNetworking: false,\n    dnsSearchDomains: ['dnsSearchDomains'],\n    dnsServers: ['dnsServers'],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    dockerSecurityOptions: ['dockerSecurityOptions'],\n    entryPoint: ['entryPoint'],\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    environmentFiles: [{\n      type: 'type',\n      value: 'value',\n    }],\n    essential: false,\n    extraHosts: [{\n      hostname: 'hostname',\n      ipAddress: 'ipAddress',\n    }],\n    firelensConfiguration: {\n      options: {\n        optionsKey: 'options',\n      },\n      type: 'type',\n    },\n    healthCheck: {\n      command: ['command'],\n      interval: 123,\n      retries: 123,\n      startPeriod: 123,\n      timeout: 123,\n    },\n    hostname: 'hostname',\n    interactive: false,\n    links: ['links'],\n    linuxParameters: {\n      capabilities: {\n        add: ['add'],\n        drop: ['drop'],\n      },\n      devices: [{\n        containerPath: 'containerPath',\n        hostPath: 'hostPath',\n        permissions: ['permissions'],\n      }],\n      initProcessEnabled: false,\n      maxSwap: 123,\n      sharedMemorySize: 123,\n      swappiness: 123,\n      tmpfs: [{\n        size: 123,\n\n        // the properties below are optional\n        containerPath: 'containerPath',\n        mountOptions: ['mountOptions'],\n      }],\n    },\n    logConfiguration: {\n      logDriver: 'logDriver',\n\n      // the properties below are optional\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    memory: 123,\n    memoryReservation: 123,\n    mountPoints: [{\n      containerPath: 'containerPath',\n      readOnly: false,\n      sourceVolume: 'sourceVolume',\n    }],\n    portMappings: [{\n      appProtocol: 'appProtocol',\n      containerPort: 123,\n      containerPortRange: 'containerPortRange',\n      hostPort: 123,\n      name: 'name',\n      protocol: 'protocol',\n    }],\n    privileged: false,\n    pseudoTerminal: false,\n    readonlyRootFilesystem: false,\n    repositoryCredentials: {\n      credentialsParameter: 'credentialsParameter',\n    },\n    resourceRequirements: [{\n      type: 'type',\n      value: 'value',\n    }],\n    secrets: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n    startTimeout: 123,\n    stopTimeout: 123,\n    systemControls: [{\n      namespace: 'namespace',\n      value: 'value',\n    }],\n    ulimits: [{\n      hardLimit: 123,\n      name: 'name',\n      softLimit: 123,\n    }],\n    user: 'user',\n    volumesFrom: [{\n      readOnly: false,\n      sourceContainer: 'sourceContainer',\n    }],\n    workingDirectory: 'workingDirectory',\n  }],\n  cpu: 'cpu',\n  ephemeralStorage: {\n    sizeInGiB: 123,\n  },\n  executionRoleArn: 'executionRoleArn',\n  family: 'family',\n  inferenceAccelerators: [{\n    deviceName: 'deviceName',\n    deviceType: 'deviceType',\n  }],\n  ipcMode: 'ipcMode',\n  memory: 'memory',\n  networkMode: 'networkMode',\n  pidMode: 'pidMode',\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  proxyConfiguration: {\n    containerName: 'containerName',\n\n    // the properties below are optional\n    proxyConfigurationProperties: [{\n      name: 'name',\n      value: 'value',\n    }],\n    type: 'type',\n  },\n  requiresCompatibilities: ['requiresCompatibilities'],\n  runtimePlatform: {\n    cpuArchitecture: 'cpuArchitecture',\n    operatingSystemFamily: 'operatingSystemFamily',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskRoleArn: 'taskRoleArn',\n  volumes: [{\n    dockerVolumeConfiguration: {\n      autoprovision: false,\n      driver: 'driver',\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n      scope: 'scope',\n    },\n    efsVolumeConfiguration: {\n      filesystemId: 'filesystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n    name: 'name',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ECS::TaskDefinition`."
        },
        "locationInModule": {
          "filename": "lib/ecs.generated.ts",
          "line": 4336
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 4094
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4365
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4392
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnTaskDefinition",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4098
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "TaskDefinitionArn"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4123
          },
          "name": "attrTaskDefinitionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4370
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-tags"
            },
            "remarks": "Each tag consists of a key and an optional value. You define both of them.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the task definition to help you categorize and organize them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4309
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-containerdefinitions"
            },
            "remarks": "For more information about container definition parameters and defaults, see [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "A list of container definitions in JSON format that describe the different containers that make up your task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4130
          },
          "name": "containerDefinitions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu"
            },
            "remarks": "If you use the EC2 launch type, this field is optional. Any value can be used. If you use the Fargate launch type, this field is required. You must use one of the following values. The value that you choose determines your range of valid values for the `memory` parameter.\n\nThe CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.\n\n- 256 (.25 vCPU) - Available `memory` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)\n- 512 (.5 vCPU) - Available `memory` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)\n- 1024 (1 vCPU) - Available `memory` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)\n- 2048 (2 vCPU) - Available `memory` values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)\n- 4096 (4 vCPU) - Available `memory` values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)\n- 8192 (8 vCPU) - Available `memory` values: 16 GB and 60 GB in 4 GB increments\n\nThis option requires Linux platform `1.4.0` or later.\n- 16384 (16vCPU) - Available `memory` values: 32GB and 120 GB in 8 GB increments\n\nThis option requires Linux platform `1.4.0` or later.",
            "stability": "external",
            "summary": "The number of `cpu` units used by the task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4151
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-ephemeralstorage"
            },
            "stability": "external",
            "summary": "The ephemeral storage settings to use for tasks run with the task definition."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4158
          },
          "name": "ephemeralStorage",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EphemeralStorageProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-executionrolearn"
            },
            "remarks": "The task execution IAM role is required depending on the requirements of your task. For more information, see [Amazon ECS task execution IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make AWS API calls on your behalf."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4165
          },
          "name": "executionRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-family"
            },
            "remarks": "Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.\n\nA family groups multiple versions of a task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers to each task definition that you add.\n\n> To use revision numbers when you update a task definition, specify this property. If you don't specify a value, AWS CloudFormation generates a new task definition each time that you update it.",
            "stability": "external",
            "summary": "The name of a family that this task definition is registered to."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4176
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-inferenceaccelerators"
            },
            "stability": "external",
            "summary": "The Elastic Inference accelerators to use for the containers in the task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4183
          },
          "name": "inferenceAccelerators",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.InferenceAcceleratorProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-ipcmode"
            },
            "remarks": "The valid values are `host` , `task` , or `none` . If `host` is specified, then all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If `task` is specified, all containers within the specified task share the same IPC resources. If `none` is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the *Docker run reference* .\n\nIf the `host` IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see [Docker security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/) .\n\nIf you are setting namespaced kernel parameters using `systemControls` for the containers in the task, the following will apply to your IPC resource namespace. For more information, see [System Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n- For tasks that use the `host` IPC mode, IPC namespace related `systemControls` are not supported.\n- For tasks that use the `task` IPC mode, IPC namespace related `systemControls` will apply to all containers within a task.\n\n> This parameter is not supported for Windows containers or tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "The IPC resource namespace to use for the containers in the task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4199
          },
          "name": "ipcMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-memory"
            },
            "remarks": "If your tasks runs on Amazon EC2 instances, you must specify either a task-level memory value or a container-level memory value. This field is optional and any value can be used. If a task-level memory value is specified, the container-level memory value is optional. For more information regarding container-level memory and memory reservation, see [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) .\n\nIf your tasks runs on AWS Fargate , this field is required. You must use one of the following values. The value you choose determines your range of valid values for the `cpu` parameter.\n\n- 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available `cpu` values: 256 (.25 vCPU)\n- 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available `cpu` values: 512 (.5 vCPU)\n- 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available `cpu` values: 1024 (1 vCPU)\n- Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available `cpu` values: 2048 (2 vCPU)\n- Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available `cpu` values: 4096 (4 vCPU)\n- Between 16 GB and 60 GB in 4 GB increments - Available `cpu` values: 8192 (8 vCPU)\n\nThis option requires Linux platform `1.4.0` or later.\n- Between 32GB and 120 GB in 8 GB increments - Available `cpu` values: 16384 (16 vCPU)\n\nThis option requires Linux platform `1.4.0` or later.",
            "stability": "external",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4222
          },
          "name": "memory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-networkmode"
            },
            "remarks": "The valid values are `none` , `bridge` , `awsvpc` , and `host` . The default Docker network mode is `bridge` . If you are using the Fargate launch type, the `awsvpc` network mode is required. If you are using the EC2 launch type, any network mode can be used. If the network mode is set to `none` , you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The `host` and `awsvpc` network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the `bridge` mode.\n\nWith the `host` and `awsvpc` network modes, exposed container ports are mapped directly to the corresponding host port (for the `host` network mode) or the attached elastic network interface port (for the `awsvpc` network mode), so you cannot take advantage of dynamic host port mappings.\n\nIf the network mode is `awsvpc` , the task is allocated an elastic network interface, and you must specify a [NetworkConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_NetworkConfiguration.html) value when you create a service or run a task with the task definition. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the `ecs-init` package, or AWS Fargate infrastructure support the `awsvpc` network mode.\n\nIf the network mode is `host` , you cannot run multiple instantiations of the same task on a single container instance when port mappings are used.\n\nDocker for Windows uses different network modes than Docker for Linux. When you register a task definition with Windows containers, you must not specify a network mode. If you use the console to register a task definition with Windows containers, you must choose the `<default>` network mode object.\n\nFor more information, see [Network settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#network-settings) in the *Docker run reference* .",
            "stability": "external",
            "summary": "The Docker networking mode to use for the containers in the task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4241
          },
          "name": "networkMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-pidmode"
            },
            "remarks": "The valid values are `host` or `task` . If `host` is specified, then all containers within the tasks that specified the `host` PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If `task` is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the *Docker run reference* .\n\nIf the `host` PID mode is used, be aware that there is a heightened risk of undesired process namespace expose. For more information, see [Docker security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/) .\n\n> This parameter is not supported for Windows containers or tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "The process namespace to use for the containers in the task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4252
          },
          "name": "pidMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-placementconstraints"
            },
            "remarks": "> This parameter isn't supported for tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "An array of placement constraint objects to use for tasks."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4261
          },
          "name": "placementConstraints",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-proxyconfiguration"
            },
            "remarks": "Your Amazon ECS container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the `ecs-init` package to enable a proxy configuration. If your container instances are launched from the Amazon ECS-optimized AMI version `20190301` or later, then they contain the required versions of the container agent and `ecs-init` . For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The `ProxyConfiguration` property specifies the configuration details for the App Mesh proxy."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4270
          },
          "name": "proxyConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-requirescompatibilities"
            },
            "remarks": "To determine which task launch types the task definition is validated for, see the `TaskDefinition$compatibilities` parameter.\n\nThe valid values are:\n\n- `EC2` - The EC2 launch type\n- `FARGATE` - The Fargate launch type\n- `EXTERNAL` - The external instance (ECS Anywhere) launch type",
            "stability": "external",
            "summary": "The task launch types the task definition was validated against."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4283
          },
          "name": "requiresCompatibilities",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-runtimeplatform"
            },
            "remarks": "A platform family is specified only for tasks using the Fargate launch type.\n\nWhen you specify a task definition in a service, this value must match the `runtimePlatform` value of the service.",
            "stability": "external",
            "summary": "The operating system that your tasks definitions run on."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4292
          },
          "name": "runtimePlatform",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RuntimePlatformProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-taskrolearn"
            },
            "remarks": "For more information, see [Amazon ECS Task Role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nIAM roles for tasks on Windows require that the `-EnableTaskIAMRole` option is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration code to use the feature. For more information, see [Windows IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4318
          },
          "name": "taskRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-volumes"
            },
            "remarks": "For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> The `host` and `sourcePath` parameters aren't supported for tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "The list of data volume definitions for the task."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4327
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.AuthorizationConfigProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-authorizationconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The authorization configuration details for the Amazon EFS file system.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst authorizationConfigProperty: ecs.CfnTaskDefinition.AuthorizationConfigProperty = {\n  accessPointId: 'accessPointId',\n  iam: 'iam',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.AuthorizationConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 4406
      },
      "name": "AuthorizationConfigProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-authorizationconfig.html#cfn-ecs-taskdefinition-authorizationconfig-accesspointid"
            },
            "remarks": "If an access point is specified, the root directory value specified in the `EFSVolumeConfiguration` must either be omitted or set to `/` which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the `EFSVolumeConfiguration` . For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide* .",
            "stability": "external",
            "summary": "The Amazon EFS access point ID to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4412
          },
          "name": "accessPointId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-authorizationconfig.html#cfn-ecs-taskdefinition-authorizationconfig-iam"
            },
            "remarks": "If enabled, transit encryption must be enabled in the `EFSVolumeConfiguration` . If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4418
          },
          "name": "iam",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.AuthorizationConfigProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Container definitions are used in task definitions to describe the different containers that are launched as part of a task.",
        "stability": "external",
        "summary": "The `ContainerDefinition` property specifies a container definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst containerDefinitionProperty: ecs.CfnTaskDefinition.ContainerDefinitionProperty = {\n  image: 'image',\n  name: 'name',\n\n  // the properties below are optional\n  command: ['command'],\n  cpu: 123,\n  dependsOn: [{\n    condition: 'condition',\n    containerName: 'containerName',\n  }],\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: [{\n    name: 'name',\n    value: 'value',\n  }],\n  environmentFiles: [{\n    type: 'type',\n    value: 'value',\n  }],\n  essential: false,\n  extraHosts: [{\n    hostname: 'hostname',\n    ipAddress: 'ipAddress',\n  }],\n  firelensConfiguration: {\n    options: {\n      optionsKey: 'options',\n    },\n    type: 'type',\n  },\n  healthCheck: {\n    command: ['command'],\n    interval: 123,\n    retries: 123,\n    startPeriod: 123,\n    timeout: 123,\n  },\n  hostname: 'hostname',\n  interactive: false,\n  links: ['links'],\n  linuxParameters: {\n    capabilities: {\n      add: ['add'],\n      drop: ['drop'],\n    },\n    devices: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n      permissions: ['permissions'],\n    }],\n    initProcessEnabled: false,\n    maxSwap: 123,\n    sharedMemorySize: 123,\n    swappiness: 123,\n    tmpfs: [{\n      size: 123,\n\n      // the properties below are optional\n      containerPath: 'containerPath',\n      mountOptions: ['mountOptions'],\n    }],\n  },\n  logConfiguration: {\n    logDriver: 'logDriver',\n\n    // the properties below are optional\n    options: {\n      optionsKey: 'options',\n    },\n    secretOptions: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n  },\n  memory: 123,\n  memoryReservation: 123,\n  mountPoints: [{\n    containerPath: 'containerPath',\n    readOnly: false,\n    sourceVolume: 'sourceVolume',\n  }],\n  portMappings: [{\n    appProtocol: 'appProtocol',\n    containerPort: 123,\n    containerPortRange: 'containerPortRange',\n    hostPort: 123,\n    name: 'name',\n    protocol: 'protocol',\n  }],\n  privileged: false,\n  pseudoTerminal: false,\n  readonlyRootFilesystem: false,\n  repositoryCredentials: {\n    credentialsParameter: 'credentialsParameter',\n  },\n  resourceRequirements: [{\n    type: 'type',\n    value: 'value',\n  }],\n  secrets: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n  startTimeout: 123,\n  stopTimeout: 123,\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  ulimits: [{\n    hardLimit: 123,\n    name: 'name',\n    softLimit: 123,\n  }],\n  user: 'user',\n  volumesFrom: [{\n    readOnly: false,\n    sourceContainer: 'sourceContainer',\n  }],\n  workingDirectory: 'workingDirectory',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 4482
      },
      "name": "ContainerDefinitionProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-image"
            },
            "remarks": "This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either `*repository-url* / *image* : *tag*` or `*repository-url* / *image* @ *digest*` . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n- When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image aren't propagated to already running tasks.\n- Images in Amazon ECR repositories can be specified by either using the full `registry/repository:tag` or `registry/repository@digest` . For example, `012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest` or `012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE` .\n- Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).\n- Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).\n- Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).",
            "stability": "external",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4642
          },
          "name": "image",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-name"
            },
            "remarks": "If you're linking multiple containers together in a task definition, the `name` of one container can be entered in the `links` of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to `name` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--name` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .",
            "stability": "external",
            "summary": "The name of a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4722
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-command"
            },
            "remarks": "This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) . If there are multiple arguments, each argument is a separated string in the array.",
            "stability": "external",
            "summary": "The command that's passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4488
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-cpu"
            },
            "remarks": "This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nThis field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level `cpu` value.\n\n> You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.\n\nLinux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that's the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover, each container could float to higher CPU usage if the other container was not using it. If both tasks were 100% active all of the time, they would be limited to 512 CPU units.\n\nOn Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. For more information, see [CPU share constraint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#cpu-share-constraint) in the Docker documentation. The minimum valid CPU share value that the Linux kernel allows is 2. However, the CPU parameter isn't required, and you can use CPU values below 2 in your container definitions. For CPU values below 2 (including null), the behavior varies based on your Amazon ECS container agent version:\n\n- *Agent versions less than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares.\n- *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2.\n\nOn Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is passed to Docker as `0` , which Windows interprets as 1% of one CPU.",
            "stability": "external",
            "summary": "The number of `cpu` units reserved for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4507
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-dependson"
            },
            "remarks": "A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.\n\nFor tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide* . If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the `ecs-init` package. If your container instances are launched from version `20190301` or later, then they contain the required versions of the container agent and `ecs-init` . For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nFor tasks using the Fargate launch type, the task or service requires the following platforms:\n\n- Linux platform version `1.3.0` or later.\n- Windows platform version `1.0.0` or later.\n\nIf the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html) , the `dependsOn` parameter is not supported. For more information see [Issue #680](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/680) on the on the GitHub website.",
            "stability": "external",
            "summary": "The dependencies defined for container startup and shutdown."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4522
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDependencyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-disablenetworking"
            },
            "remarks": "This parameter maps to `NetworkDisabled` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) .\n\n> This parameter is not supported for Windows containers.",
            "stability": "external",
            "summary": "When this parameter is true, networking is off within the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4530
          },
          "name": "disableNetworking",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-dnssearchdomains"
            },
            "remarks": "This parameter maps to `DnsSearch` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--dns-search` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> This parameter is not supported for Windows containers.",
            "stability": "external",
            "summary": "A list of DNS search domains that are presented to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4538
          },
          "name": "dnsSearchDomains",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-dnsservers"
            },
            "remarks": "This parameter maps to `Dns` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--dns` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> This parameter is not supported for Windows containers.",
            "stability": "external",
            "summary": "A list of DNS servers that are presented to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4546
          },
          "name": "dnsServers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-dockerlabels"
            },
            "remarks": "This parameter maps to `Labels` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--label` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) . This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version --format '{{.Server.APIVersion}}'`",
            "stability": "external",
            "summary": "A key/value map of labels to add to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4552
          },
          "name": "dockerLabels",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-dockersecurityoptions"
            },
            "remarks": "This field isn't valid for containers in tasks using the Fargate launch type.\n\nWith Windows containers, this parameter can be used to reference a credential spec file when configuring a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nThis parameter maps to `SecurityOpt` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--security-opt` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> The Amazon ECS container agent running on a container instance must register with the `ECS_SELINUX_CAPABLE=true` or `ECS_APPARMOR_CAPABLE=true` environment variables before containers placed on that instance can use these security options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nFor more information about valid values, see [Docker Run Security Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nValid values: \"no-new-privileges\" | \"apparmor:PROFILE\" | \"label:value\" | \"credentialspec:CredentialSpecFilePath\"",
            "stability": "external",
            "summary": "A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4568
          },
          "name": "dockerSecurityOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-entrypoint"
            },
            "remarks": "If you have problems using `entryPoint` , update your container agent or enter your commands and arguments as `command` array items instead.\n\nThe entry point that's passed to the container. This parameter maps to `Entrypoint` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--entrypoint` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) . For more information, see [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint) .",
            "stability": "external",
            "summary": "> Early versions of the Amazon ECS container agent don't properly handle `entryPoint` parameters."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4576
          },
          "name": "entryPoint",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-environment"
            },
            "remarks": "This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.",
            "stability": "external",
            "summary": "The environment variables to pass to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4584
          },
          "name": "environment",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.KeyValuePairProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-environmentfiles"
            },
            "remarks": "This parameter maps to the `--env-file` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nYou can specify up to ten environment files. The file must have a `.env` file extension. Each line in an environment file contains an environment variable in `VARIABLE=VALUE` format. Lines beginning with `#` are treated as comments and are ignored. For more information about the environment variable file syntax, see [Declare default environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/) .\n\nIf there are environment variables specified using the `environment` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying Environment Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "A list of files containing the environment variables to pass to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4594
          },
          "name": "environmentFiles",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EnvironmentFileProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-essential"
            },
            "remarks": "If the `essential` parameter of a container is marked as `false` , its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.\n\nAll tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "If the `essential` parameter of a container is marked as `true` , and that container fails or stops for any reason, all other containers that are part of the task are stopped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4602
          },
          "name": "essential",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-extrahosts"
            },
            "remarks": "This parameter maps to `ExtraHosts` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--add-host` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> This parameter isn't supported for Windows containers or tasks that use the `awsvpc` network mode.",
            "stability": "external",
            "summary": "A list of hostnames and IP address mappings to append to the `/etc/hosts` file on the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4610
          },
          "name": "extraHosts",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HostEntryProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-firelensconfiguration"
            },
            "remarks": "This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The FireLens configuration for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4616
          },
          "name": "firelensConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.FirelensConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-healthcheck"
            },
            "remarks": "This parameter maps to `HealthCheck` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `HEALTHCHECK` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .",
            "stability": "external",
            "summary": "The container health check command and associated configuration parameters for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4622
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HealthCheckProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-hostname"
            },
            "remarks": "This parameter maps to `Hostname` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--hostname` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> The `hostname` parameter is not supported if you're using the `awsvpc` network mode.",
            "stability": "external",
            "summary": "The hostname to use for your container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4630
          },
          "name": "hostname",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-interactive"
            },
            "remarks": "This parameter maps to `OpenStdin` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--interactive` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .",
            "stability": "external",
            "summary": "When this parameter is `true` , you can deploy containerized applications that require `stdin` or a `tty` to be allocated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4648
          },
          "name": "interactive",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-links"
            },
            "remarks": "This parameter is only supported if the network mode of a task definition is `bridge` . The `name:internalName` construct is analogous to `name:alias` in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers, go to [Legacy container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker documentation. This parameter maps to `Links` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--link` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> This parameter is not supported for Windows containers. > Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings.",
            "stability": "external",
            "summary": "The `links` parameter allows containers to communicate with each other without the need for port mappings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4656
          },
          "name": "links",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-linuxparameters"
            },
            "remarks": "> This parameter is not supported for Windows containers.",
            "stability": "external",
            "summary": "Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html) ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4664
          },
          "name": "linuxParameters",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.LinuxParametersProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-logconfiguration"
            },
            "remarks": "This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.\n\n> Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.\n\nThis parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version --format '{{.Server.APIVersion}}'`\n\n> The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The log configuration specification for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4678
          },
          "name": "logConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.LogConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-memory"
            },
            "remarks": "If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task `memory` value, if one is specified. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nIf using the Fargate launch type, this parameter is optional.\n\nIf using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level `memory` and `memoryReservation` value, `memory` must be greater than `memoryReservation` . If you specify `memoryReservation` , then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of `memory` is used.\n\nThe Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of memory for your containers.\n\nThe Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers.",
            "stability": "external",
            "summary": "The amount (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4692
          },
          "name": "memory",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation"
            },
            "remarks": "When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the `memory` parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to `MemoryReservation` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--memory-reservation` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nIf a task-level memory value is not specified, you must specify a non-zero integer for one or both of `memory` or `memoryReservation` in a container definition. If you specify both, `memory` must be greater than `memoryReservation` . If you specify `memoryReservation` , then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of `memory` is used.\n\nFor example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a `memoryReservation` of 128 MiB, and a `memory` hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed.\n\nThe Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers.\n\nThe Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.",
            "stability": "external",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4706
          },
          "name": "memoryReservation",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-mountpoints"
            },
            "remarks": "This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--volume` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nWindows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.",
            "stability": "external",
            "summary": "The mount points for data volumes in your container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4716
          },
          "name": "mountPoints",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.MountPointProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-portmappings"
            },
            "remarks": "Port mappings allow containers to access ports on the host container instance to send or receive traffic.\n\nFor task definitions that use the `awsvpc` network mode, you should only specify the `containerPort` . The `hostPort` can be left blank or it must be the same value as the `containerPort` .\n\nPort mappings on Windows use the `NetNAT` gateway address rather than `localhost` . There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.\n\nThis parameter maps to `PortBindings` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--publish` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . If the network mode of a task definition is set to `none` , then you can't specify port mappings. If the network mode of a task definition is set to `host` , then host ports must either be undefined or they must match the container port in the port mapping.\n\n> After a task reaches the `RUNNING` status, manual and automatic host and container port assignments are visible in the *Network Bindings* section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the `networkBindings` section [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.",
            "stability": "external",
            "summary": "The list of port mappings for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4736
          },
          "name": "portMappings",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.PortMappingProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-privileged"
            },
            "remarks": "This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> This parameter is not supported for Windows containers or tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "When this parameter is true, the container is given elevated privileges on the host container instance (similar to the `root` user)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4744
          },
          "name": "privileged",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-pseudoterminal"
            },
            "remarks": "This parameter maps to `Tty` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--tty` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .",
            "stability": "external",
            "summary": "When this parameter is `true` , a TTY is allocated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4750
          },
          "name": "pseudoTerminal",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-readonlyrootfilesystem"
            },
            "remarks": "This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--read-only` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> This parameter is not supported for Windows containers.",
            "stability": "external",
            "summary": "When this parameter is true, the container is given read-only access to its root file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4758
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-repositorycredentials"
            },
            "stability": "external",
            "summary": "The private repository authentication credentials to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4764
          },
          "name": "repositoryCredentials",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RepositoryCredentialsProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-resourcerequirements"
            },
            "remarks": "The only supported resource is a GPU.",
            "stability": "external",
            "summary": "The type and amount of a resource to assign to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4770
          },
          "name": "resourceRequirements",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ResourceRequirementProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-secrets"
            },
            "remarks": "For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The secrets to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4776
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SecretProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-starttimeout"
            },
            "remarks": "For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a `COMPLETE` , `SUCCESS` , or `HEALTHY` status. If a `startTimeout` value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a `STOPPED` state.\n\n> When the `ECS_CONTAINER_START_TIMEOUT` container agent configuration variable is used, it's enforced independently from this start timeout value.\n\nFor tasks using the Fargate launch type, the task or service requires the following platforms:\n\n- Linux platform version `1.3.0` or later.\n- Windows platform version `1.0.0` or later.\n\nFor tasks using the EC2 launch type, your container instances require at least version `1.26.0` of the container agent to use a container start timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide* . If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version `1.26.0-1` of the `ecs-init` package. If your container instances are launched from version `20190301` or later, then they contain the required versions of the container agent and `ecs-init` . For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "Time duration (in seconds) to wait before giving up on resolving dependencies for a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4791
          },
          "name": "startTimeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-stoptimeout"
            },
            "remarks": "For tasks using the Fargate launch type, the task or service requires the following platforms:\n\n- Linux platform version `1.3.0` or later.\n- Windows platform version `1.0.0` or later.\n\nThe max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.\n\nFor tasks that use the EC2 launch type, if the `stopTimeout` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable `ECS_CONTAINER_STOP_TIMEOUT` is used. If neither the `stopTimeout` parameter or the `ECS_CONTAINER_STOP_TIMEOUT` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide* . If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the `ecs-init` package. If your container instances are launched from version `20190301` or later, then they contain the required versions of the container agent and `ecs-init` . For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4806
          },
          "name": "stopTimeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-systemcontrols"
            },
            "remarks": "This parameter maps to `Sysctls` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--sysctl` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> We don't recommended that you specify network-related `systemControls` parameters for multiple containers in a single task that also uses either the `awsvpc` or `host` network modes. For tasks that use the `awsvpc` network mode, the container that's started last determines which `systemControls` parameters take effect. For tasks that use the `host` network mode, it changes the container instance's namespaced kernel parameters as well as the containers.",
            "stability": "external",
            "summary": "A list of namespaced kernel parameters to set in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4814
          },
          "name": "systemControls",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SystemControlProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-ulimits"
            },
            "remarks": "This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version --format '{{.Server.APIVersion}}'`\n\n> This parameter is not supported for Windows containers.",
            "stability": "external",
            "summary": "A list of `ulimits` to set in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4822
          },
          "name": "ulimits",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.UlimitProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-user"
            },
            "remarks": "This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> When running tasks using the `host` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.\n\nYou can specify the `user` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.\n\n- `user`\n- `user:group`\n- `uid`\n- `uid:gid`\n- `user:gid`\n- `uid:group`\n\n> This parameter is not supported for Windows containers.",
            "stability": "external",
            "summary": "The user to use inside the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4841
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-volumesfrom"
            },
            "remarks": "This parameter maps to `VolumesFrom` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--volumes-from` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .",
            "stability": "external",
            "summary": "Data volumes to mount from another container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4847
          },
          "name": "volumesFrom",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeFromProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-workingdirectory"
            },
            "remarks": "This parameter maps to `WorkingDir` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--workdir` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .",
            "stability": "external",
            "summary": "The working directory to run commands inside the container in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 4853
          },
          "name": "workingDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.ContainerDefinitionProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDependencyProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdependency.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.\n\nYour Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide* . If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the `ecs-init` package. If your container instances are launched from version `20190301` or later, then they contain the required versions of the container agent and `ecs-init` . For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> For tasks using the Fargate launch type, this parameter requires that the task or service uses platform version 1.3.0 or later.",
        "stability": "external",
        "summary": "The `ContainerDependency` property specifies the dependencies defined for container startup and shutdown.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst containerDependencyProperty: ecs.CfnTaskDefinition.ContainerDependencyProperty = {\n  condition: 'condition',\n  containerName: 'containerName',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDependencyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5034
      },
      "name": "ContainerDependencyProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdependency.html#cfn-ecs-taskdefinition-containerdependency-condition"
            },
            "remarks": "- `START` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.\n- `COMPLETE` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.\n- `SUCCESS` - This condition is the same as `COMPLETE` , but it also requires that the container exits with a `zero` status. This condition can't be set on an essential container.\n- `HEALTHY` - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.",
            "stability": "external",
            "summary": "The dependency condition of the container. The following are the available conditions and their behavior:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5045
          },
          "name": "condition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdependency.html#cfn-ecs-taskdefinition-containerdependency-containername"
            },
            "stability": "external",
            "summary": "The name of a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5051
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.ContainerDependencyProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.DeviceProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-device.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `Device` property specifies an object representing a container instance host device.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deviceProperty: ecs.CfnTaskDefinition.DeviceProperty = {\n  containerPath: 'containerPath',\n  hostPath: 'hostPath',\n  permissions: ['permissions'],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.DeviceProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5115
      },
      "name": "DeviceProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-device.html#cfn-ecs-taskdefinition-device-containerpath"
            },
            "stability": "external",
            "summary": "The path inside the container at which to expose the host device."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5121
          },
          "name": "containerPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-device.html#cfn-ecs-taskdefinition-device-hostpath"
            },
            "stability": "external",
            "summary": "The path for the device on the host container instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5127
          },
          "name": "hostPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-device.html#cfn-ecs-taskdefinition-device-permissions"
            },
            "remarks": "By default, the container has permissions for `read` , `write` , and `mknod` for the device.",
            "stability": "external",
            "summary": "The explicit permissions to provide to the container for the device."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5133
          },
          "name": "permissions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.DeviceProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-dockervolumeconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the `local` driver. To use bind mounts, specify a `host` instead.",
        "stability": "external",
        "summary": "The `DockerVolumeConfiguration` property specifies a Docker volume configuration and is used when you use Docker volumes.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst dockerVolumeConfigurationProperty: ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty = {\n  autoprovision: false,\n  driver: 'driver',\n  driverOpts: {\n    driverOptsKey: 'driverOpts',\n  },\n  labels: {\n    labelsKey: 'labels',\n  },\n  scope: 'scope',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5200
      },
      "name": "DockerVolumeConfigurationProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-dockervolumeconfiguration.html#cfn-ecs-taskdefinition-dockervolumeconfiguration-autoprovision"
            },
            "remarks": "> This field is only used if the `scope` is `shared` .",
            "stability": "external",
            "summary": "If this value is `true` , the Docker volume is created if it doesn't already exist."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5208
          },
          "name": "autoprovision",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-dockervolumeconfiguration.html#cfn-ecs-taskdefinition-dockervolumeconfiguration-driver"
            },
            "remarks": "The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use `docker plugin ls` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery) . This parameter maps to `Driver` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `xxdriver` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/) .",
            "stability": "external",
            "summary": "The Docker volume driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5214
          },
          "name": "driver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-dockervolumeconfiguration.html#cfn-ecs-taskdefinition-dockervolumeconfiguration-driveropts"
            },
            "remarks": "This parameter maps to `DriverOpts` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `xxopt` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/) .",
            "stability": "external",
            "summary": "A map of Docker driver-specific options passed through."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5220
          },
          "name": "driverOpts",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-dockervolumeconfiguration.html#cfn-ecs-taskdefinition-dockervolumeconfiguration-labels"
            },
            "remarks": "This parameter maps to `Labels` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `xxlabel` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/) .",
            "stability": "external",
            "summary": "Custom metadata to add to your Docker volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5226
          },
          "name": "labels",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-dockervolumeconfiguration.html#cfn-ecs-taskdefinition-dockervolumeconfiguration-scope"
            },
            "remarks": "Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.",
            "stability": "external",
            "summary": "The scope for the Docker volume that determines its lifecycle."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5232
          },
          "name": "scope",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.DockerVolumeConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-efsvolumeconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "This parameter is specified when you're using an Amazon Elastic File System file system for task storage.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst eFSVolumeConfigurationProperty: ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty = {\n  filesystemId: 'filesystemId',\n\n  // the properties below are optional\n  authorizationConfig: {\n    accessPointId: 'accessPointId',\n    iam: 'iam',\n  },\n  rootDirectory: 'rootDirectory',\n  transitEncryption: 'transitEncryption',\n  transitEncryptionPort: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5305
      },
      "name": "EFSVolumeConfigurationProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-efsvolumeconfiguration.html#cfn-ecs-taskdefinition-efsvolumeconfiguration-filesystemid"
            },
            "stability": "external",
            "summary": "The Amazon EFS file system ID to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5317
          },
          "name": "filesystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-efsvolumeconfiguration.html#cfn-ecs-taskdefinition-efsvolumeconfiguration-authorizationconfig"
            },
            "stability": "external",
            "summary": "The authorization configuration details for the Amazon EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5311
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.AuthorizationConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-efsvolumeconfiguration.html#cfn-ecs-taskdefinition-efsvolumeconfiguration-rootdirectory"
            },
            "remarks": "If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying `/` will have the same effect as omitting this parameter.\n\n> If an EFS access point is specified in the `authorizationConfig` , the root directory parameter must either be omitted or set to `/` which will enforce the path set on the EFS access point.",
            "stability": "external",
            "summary": "The directory within the Amazon EFS file system to mount as the root directory inside the host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5325
          },
          "name": "rootDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-efsvolumeconfiguration.html#cfn-ecs-taskdefinition-efsvolumeconfiguration-transitencryption"
            },
            "remarks": "Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide* .",
            "stability": "external",
            "summary": "Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5331
          },
          "name": "transitEncryption",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-efsvolumeconfiguration.html#cfn-ecs-taskdefinition-efsvolumeconfiguration-transitencryptionport"
            },
            "remarks": "If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide* .",
            "stability": "external",
            "summary": "The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5337
          },
          "name": "transitEncryptionPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.EFSVolumeConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.EnvironmentFileProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-environmentfile.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "You can specify up to ten environment files. The file must have a `.env` file extension. Each line in an environment file should contain an environment variable in `VARIABLE=VALUE` format. Lines beginning with `#` are treated as comments and are ignored. For more information about the environment variable file syntax, see [Declare default environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/) .\n\nIf there are environment variables specified using the `environment` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nThis parameter is only supported for tasks hosted on Fargate using the following platform versions:\n\n- Linux platform version `1.4.0` or later.\n- Windows platform version `1.0.0` or later.",
        "stability": "external",
        "summary": "A list of files containing the environment variables to pass to a container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst environmentFileProperty: ecs.CfnTaskDefinition.EnvironmentFileProperty = {\n  type: 'type',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EnvironmentFileProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5418
      },
      "name": "EnvironmentFileProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-environmentfile.html#cfn-ecs-taskdefinition-environmentfile-type"
            },
            "remarks": "The only supported value is `s3` .",
            "stability": "external",
            "summary": "The file type to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5424
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-environmentfile.html#cfn-ecs-taskdefinition-environmentfile-value"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5430
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.EnvironmentFileProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.EphemeralStorageProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-ephemeralstorage.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate . For more information, see [Fargate task storage](https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html) in the *Amazon ECS User Guide for AWS Fargate* .\n\n> This parameter is only supported for tasks hosted on Fargate using Linux platform version `1.4.0` or later. This parameter is not supported for Windows containers on Fargate.",
        "stability": "external",
        "summary": "The amount of ephemeral storage to allocate for the task.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst ephemeralStorageProperty: ecs.CfnTaskDefinition.EphemeralStorageProperty = {\n  sizeInGiB: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EphemeralStorageProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5496
      },
      "name": "EphemeralStorageProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-ephemeralstorage.html#cfn-ecs-taskdefinition-ephemeralstorage-sizeingib"
            },
            "remarks": "The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.",
            "stability": "external",
            "summary": "The total amount, in GiB, of ephemeral storage to set for the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5502
          },
          "name": "sizeInGiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.EphemeralStorageProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.FirelensConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-firelensconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The FireLens configuration for the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst firelensConfigurationProperty: ecs.CfnTaskDefinition.FirelensConfigurationProperty = {\n  options: {\n    optionsKey: 'options',\n  },\n  type: 'type',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.FirelensConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5563
      },
      "name": "FirelensConfigurationProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-firelensconfiguration.html#cfn-ecs-taskdefinition-firelensconfiguration-options"
            },
            "remarks": "This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.\n\nIf specified, valid option keys are:\n\n- `enable-ecs-log-metadata` , which can be `true` or `false`\n- `config-file-type` , which can be `s3` or `file`\n- `config-file-value` , which is either an S3 ARN or a file path",
            "stability": "external",
            "summary": "The options to use when configuring the log router."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5575
          },
          "name": "options",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-firelensconfiguration.html#cfn-ecs-taskdefinition-firelensconfiguration-type"
            },
            "remarks": "The valid values are `fluentd` or `fluentbit` .",
            "stability": "external",
            "summary": "The log router to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5581
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.FirelensConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.HealthCheckProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-healthcheck.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile).\n\nThe following are notes about container health check support:\n\n- Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) .\n- Container health checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information, see [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) .\n- Container health checks are not supported for tasks that are part of a service that is configured to use a Classic Load Balancer.",
        "stability": "external",
        "summary": "The `HealthCheck` property specifies an object representing a container health check.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst healthCheckProperty: ecs.CfnTaskDefinition.HealthCheckProperty = {\n  command: ['command'],\n  interval: 123,\n  retries: 123,\n  startPeriod: 123,\n  timeout: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HealthCheckProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5651
      },
      "name": "HealthCheckProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-healthcheck.html#cfn-ecs-taskdefinition-healthcheck-command"
            },
            "remarks": "The string array must start with `CMD` to run the command arguments directly, or `CMD-SHELL` to run the command with the container's default shell.\n\nWhen you use the AWS Management Console JSON panel, the AWS Command Line Interface , or the APIs, enclose the list of commands in double quotes and brackets.\n\n`[ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ]`\n\nYou don't include the double quotes and brackets when you use the AWS Management Console.\n\n`CMD-SHELL, curl -f http://localhost/ || exit 1`\n\nAn exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see `HealthCheck` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) .",
            "stability": "external",
            "summary": "A string array representing the command that the container runs to determine if it is healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5667
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-healthcheck.html#cfn-ecs-taskdefinition-healthcheck-interval"
            },
            "remarks": "You may specify between 5 and 300 seconds. The default value is 30 seconds.",
            "stability": "external",
            "summary": "The time period in seconds between each health check execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5673
          },
          "name": "interval",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-healthcheck.html#cfn-ecs-taskdefinition-healthcheck-retries"
            },
            "remarks": "You may specify between 1 and 10 retries. The default value is 3.",
            "stability": "external",
            "summary": "The number of times to retry a failed health check before the container is considered unhealthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5679
          },
          "name": "retries",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-healthcheck.html#cfn-ecs-taskdefinition-healthcheck-startperiod"
            },
            "remarks": "You can specify between 0 and 300 seconds. By default, the `startPeriod` is off.\n\n> If a health check succeeds within the `startPeriod` , then the container is considered healthy and any subsequent failures count toward the maximum number of retries.",
            "stability": "external",
            "summary": "The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5687
          },
          "name": "startPeriod",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-healthcheck.html#cfn-ecs-taskdefinition-healthcheck-timeout"
            },
            "remarks": "You may specify between 2 and 60 seconds. The default value is 5.",
            "stability": "external",
            "summary": "The time period in seconds to wait for a health check to succeed before it is considered a failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5693
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.HealthCheckProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.HostEntryProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-hostentry.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `HostEntry` property specifies a hostname and an IP address that are added to the `/etc/hosts` file of a container through the `extraHosts` parameter of its `ContainerDefinition` resource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst hostEntryProperty: ecs.CfnTaskDefinition.HostEntryProperty = {\n  hostname: 'hostname',\n  ipAddress: 'ipAddress',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HostEntryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5766
      },
      "name": "HostEntryProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-hostentry.html#cfn-ecs-taskdefinition-hostentry-hostname"
            },
            "stability": "external",
            "summary": "The hostname to use in the `/etc/hosts` entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5772
          },
          "name": "hostname",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-hostentry.html#cfn-ecs-taskdefinition-hostentry-ipaddress"
            },
            "stability": "external",
            "summary": "The IP address to use in the `/etc/hosts` entry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5778
          },
          "name": "ipAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.HostEntryProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.HostVolumePropertiesProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-hostvolumeproperties.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `HostVolumeProperties` property specifies details on a container instance bind mount host volume.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst hostVolumePropertiesProperty: ecs.CfnTaskDefinition.HostVolumePropertiesProperty = {\n  sourcePath: 'sourcePath',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HostVolumePropertiesProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5842
      },
      "name": "HostVolumePropertiesProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-hostvolumeproperties.html#cfn-ecs-taskdefinition-hostvolumeproperties-sourcepath"
            },
            "remarks": "If this parameter is empty, then the Docker daemon has assigned a host path for you. If the `host` parameter contains a `sourcePath` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the `sourcePath` value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.\n\nIf you're using the Fargate launch type, the `sourcePath` parameter is not supported.",
            "stability": "external",
            "summary": "When the `host` parameter is used, specify a `sourcePath` to declare the path on the host container instance that's presented to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5850
          },
          "name": "sourcePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.HostVolumePropertiesProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.InferenceAcceleratorProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-inferenceaccelerator.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "Details on an Elastic Inference accelerator.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst inferenceAcceleratorProperty: ecs.CfnTaskDefinition.InferenceAcceleratorProperty = {\n  deviceName: 'deviceName',\n  deviceType: 'deviceType',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.InferenceAcceleratorProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5911
      },
      "name": "InferenceAcceleratorProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-inferenceaccelerator.html#cfn-ecs-taskdefinition-inferenceaccelerator-devicename"
            },
            "remarks": "The `deviceName` must also be referenced in a container definition as a [ResourceRequirement](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-resourcerequirement.html) .",
            "stability": "external",
            "summary": "The Elastic Inference accelerator device name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5917
          },
          "name": "deviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-inferenceaccelerator.html#cfn-ecs-taskdefinition-inferenceaccelerator-devicetype"
            },
            "stability": "external",
            "summary": "The Elastic Inference accelerator type to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5923
          },
          "name": "deviceType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.InferenceAcceleratorProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.KernelCapabilitiesProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-kernelcapabilities.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information on the default capabilities and the non-default available capabilities, see [Runtime privilege and Linux capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) in the *Docker run reference* . For more detailed information on these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.",
        "stability": "external",
        "summary": "The `KernelCapabilities` property specifies the Linux capabilities for the container that are added to or dropped from the default configuration that is provided by Docker.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst kernelCapabilitiesProperty: ecs.CfnTaskDefinition.KernelCapabilitiesProperty = {\n  add: ['add'],\n  drop: ['drop'],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.KernelCapabilitiesProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 5987
      },
      "name": "KernelCapabilitiesProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-kernelcapabilities.html#cfn-ecs-taskdefinition-kernelcapabilities-add"
            },
            "remarks": "This parameter maps to `CapAdd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--cap-add` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> Tasks launched on AWS Fargate only support adding the `SYS_PTRACE` kernel capability.\n\nValid values: `\"ALL\" | \"AUDIT_CONTROL\" | \"AUDIT_WRITE\" | \"BLOCK_SUSPEND\" | \"CHOWN\" | \"DAC_OVERRIDE\" | \"DAC_READ_SEARCH\" | \"FOWNER\" | \"FSETID\" | \"IPC_LOCK\" | \"IPC_OWNER\" | \"KILL\" | \"LEASE\" | \"LINUX_IMMUTABLE\" | \"MAC_ADMIN\" | \"MAC_OVERRIDE\" | \"MKNOD\" | \"NET_ADMIN\" | \"NET_BIND_SERVICE\" | \"NET_BROADCAST\" | \"NET_RAW\" | \"SETFCAP\" | \"SETGID\" | \"SETPCAP\" | \"SETUID\" | \"SYS_ADMIN\" | \"SYS_BOOT\" | \"SYS_CHROOT\" | \"SYS_MODULE\" | \"SYS_NICE\" | \"SYS_PACCT\" | \"SYS_PTRACE\" | \"SYS_RAWIO\" | \"SYS_RESOURCE\" | \"SYS_TIME\" | \"SYS_TTY_CONFIG\" | \"SYSLOG\" | \"WAKE_ALARM\"`",
            "stability": "external",
            "summary": "The Linux capabilities for the container that have been added to the default configuration provided by Docker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 5997
          },
          "name": "add",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-kernelcapabilities.html#cfn-ecs-taskdefinition-kernelcapabilities-drop"
            },
            "remarks": "This parameter maps to `CapDrop` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--cap-drop` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nValid values: `\"ALL\" | \"AUDIT_CONTROL\" | \"AUDIT_WRITE\" | \"BLOCK_SUSPEND\" | \"CHOWN\" | \"DAC_OVERRIDE\" | \"DAC_READ_SEARCH\" | \"FOWNER\" | \"FSETID\" | \"IPC_LOCK\" | \"IPC_OWNER\" | \"KILL\" | \"LEASE\" | \"LINUX_IMMUTABLE\" | \"MAC_ADMIN\" | \"MAC_OVERRIDE\" | \"MKNOD\" | \"NET_ADMIN\" | \"NET_BIND_SERVICE\" | \"NET_BROADCAST\" | \"NET_RAW\" | \"SETFCAP\" | \"SETGID\" | \"SETPCAP\" | \"SETUID\" | \"SYS_ADMIN\" | \"SYS_BOOT\" | \"SYS_CHROOT\" | \"SYS_MODULE\" | \"SYS_NICE\" | \"SYS_PACCT\" | \"SYS_PTRACE\" | \"SYS_RAWIO\" | \"SYS_RESOURCE\" | \"SYS_TIME\" | \"SYS_TTY_CONFIG\" | \"SYSLOG\" | \"WAKE_ALARM\"`",
            "stability": "external",
            "summary": "The Linux capabilities for the container that have been removed from the default configuration provided by Docker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6005
          },
          "name": "drop",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.KernelCapabilitiesProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.KeyValuePairProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-keyvaluepair.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `KeyValuePair` property specifies a key-value pair object.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst keyValuePairProperty: ecs.CfnTaskDefinition.KeyValuePairProperty = {\n  name: 'name',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.KeyValuePairProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6069
      },
      "name": "KeyValuePairProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-keyvaluepair.html#cfn-ecs-taskdefinition-keyvaluepair-name"
            },
            "remarks": "For environment variables, this is the name of the environment variable.",
            "stability": "external",
            "summary": "The name of the key-value pair."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6075
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-keyvaluepair.html#cfn-ecs-taskdefinition-keyvaluepair-value"
            },
            "remarks": "For environment variables, this is the value of the environment variable.",
            "stability": "external",
            "summary": "The value of the key-value pair."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6081
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.KeyValuePairProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.LinuxParametersProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `LinuxParameters` property specifies Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html) .",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst linuxParametersProperty: ecs.CfnTaskDefinition.LinuxParametersProperty = {\n  capabilities: {\n    add: ['add'],\n    drop: ['drop'],\n  },\n  devices: [{\n    containerPath: 'containerPath',\n    hostPath: 'hostPath',\n    permissions: ['permissions'],\n  }],\n  initProcessEnabled: false,\n  maxSwap: 123,\n  sharedMemorySize: 123,\n  swappiness: 123,\n  tmpfs: [{\n    size: 123,\n\n    // the properties below are optional\n    containerPath: 'containerPath',\n    mountOptions: ['mountOptions'],\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.LinuxParametersProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6145
      },
      "name": "LinuxParametersProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html#cfn-ecs-taskdefinition-linuxparameters-capabilities"
            },
            "remarks": "> For tasks that use the Fargate launch type, `capabilities` is supported for all platform versions but the `add` parameter is only supported if using platform version 1.4.0 or later.",
            "stability": "external",
            "summary": "The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6153
          },
          "name": "capabilities",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.KernelCapabilitiesProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html#cfn-ecs-taskdefinition-linuxparameters-devices"
            },
            "remarks": "This parameter maps to `Devices` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--device` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> If you're using tasks that use the Fargate launch type, the `devices` parameter isn't supported.",
            "stability": "external",
            "summary": "Any host devices to expose to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6161
          },
          "name": "devices",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.DeviceProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html#cfn-ecs-taskdefinition-linuxparameters-initprocessenabled"
            },
            "remarks": "This parameter maps to the `--init` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) . This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version --format '{{.Server.APIVersion}}'`",
            "stability": "external",
            "summary": "Run an `init` process inside the container that forwards signals and reaps processes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6167
          },
          "name": "initProcessEnabled",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html#cfn-ecs-taskdefinition-linuxparameters-maxswap"
            },
            "remarks": "This parameter will be translated to the `--memory-swap` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the value would be the sum of the container memory plus the `maxSwap` value.\n\nIf a `maxSwap` value of `0` is specified, the container will not use swap. Accepted values are `0` or any positive integer. If the `maxSwap` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A `maxSwap` value must be set for the `swappiness` parameter to be used.\n\n> If you're using tasks that use the Fargate launch type, the `maxSwap` parameter isn't supported.",
            "stability": "external",
            "summary": "The total amount of swap memory (in MiB) a container can use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6177
          },
          "name": "maxSwap",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html#cfn-ecs-taskdefinition-linuxparameters-sharedmemorysize"
            },
            "remarks": "This parameter maps to the `--shm-size` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> If you are using tasks that use the Fargate launch type, the `sharedMemorySize` parameter is not supported.",
            "stability": "external",
            "summary": "The value for the size (in MiB) of the `/dev/shm` volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6185
          },
          "name": "sharedMemorySize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html#cfn-ecs-taskdefinition-linuxparameters-swappiness"
            },
            "remarks": "A `swappiness` value of `0` will cause swapping to not happen unless absolutely necessary. A `swappiness` value of `100` will cause pages to be swapped very aggressively. Accepted values are whole numbers between `0` and `100` . If the `swappiness` parameter is not specified, a default value of `60` is used. If a value is not specified for `maxSwap` then this parameter is ignored. This parameter maps to the `--memory-swappiness` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> If you're using tasks that use the Fargate launch type, the `swappiness` parameter isn't supported.",
            "stability": "external",
            "summary": "This allows you to tune a container's memory swappiness behavior."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6193
          },
          "name": "swappiness",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-linuxparameters.html#cfn-ecs-taskdefinition-linuxparameters-tmpfs"
            },
            "remarks": "This parameter maps to the `--tmpfs` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\n> If you're using tasks that use the Fargate launch type, the `tmpfs` parameter isn't supported.",
            "stability": "external",
            "summary": "The container path, mount options, and size (in MiB) of the tmpfs mount."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6201
          },
          "name": "tmpfs",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.TmpfsProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.LinuxParametersProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.LogConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-logconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `LogConfiguration` property specifies log configuration options to send to a custom log driver for the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst logConfigurationProperty: ecs.CfnTaskDefinition.LogConfigurationProperty = {\n  logDriver: 'logDriver',\n\n  // the properties below are optional\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.LogConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6280
      },
      "name": "LogConfigurationProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-logconfiguration.html#cfn-ecs-taskdefinition-logconfiguration-logdriver"
            },
            "remarks": "For tasks on AWS Fargate , the supported log drivers are `awslogs` , `splunk` , and `awsfirelens` .\n\nFor tasks hosted on Amazon EC2 instances, the supported log drivers are `awslogs` , `fluentd` , `gelf` , `json-file` , `journald` , `logentries` , `syslog` , `splunk` , and `awsfirelens` .\n\nFor more information about using the `awslogs` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nFor more information about using the `awsfirelens` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.",
            "stability": "external",
            "summary": "The log driver to use for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6296
          },
          "name": "logDriver",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions-logconfiguration.html#cfn-ecs-taskdefinition-containerdefinition-logconfiguration-options"
            },
            "remarks": "This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version --format '{{.Server.APIVersion}}'`",
            "stability": "external",
            "summary": "The configuration options to send to the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6302
          },
          "name": "options",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "map"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-logconfiguration.html#cfn-ecs-taskdefinition-logconfiguration-secretoptions"
            },
            "remarks": "For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The secrets to pass to the log configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6308
          },
          "name": "secretOptions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SecretProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.LogConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.MountPointProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-mountpoint.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `MountPoint` property specifies details on a volume mount point that is used in a container definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst mountPointProperty: ecs.CfnTaskDefinition.MountPointProperty = {\n  containerPath: 'containerPath',\n  readOnly: false,\n  sourceVolume: 'sourceVolume',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.MountPointProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6376
      },
      "name": "MountPointProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-mountpoint.html#cfn-ecs-taskdefinition-mountpoint-containerpath"
            },
            "stability": "external",
            "summary": "The path on the container to mount the host volume at."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6382
          },
          "name": "containerPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-mountpoint.html#cfn-ecs-taskdefinition-mountpoint-readonly"
            },
            "remarks": "If this value is `false` , then the container can write to the volume. The default value is `false` .",
            "stability": "external",
            "summary": "If this value is `true` , the container has read-only access to the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6388
          },
          "name": "readOnly",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-mountpoint.html#cfn-ecs-taskdefinition-mountpoint-sourcevolume"
            },
            "remarks": "Must be a volume name referenced in the `name` parameter of task definition `volume` .",
            "stability": "external",
            "summary": "The name of the volume to mount."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6394
          },
          "name": "sourceVolume",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.MountPointProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.PortMappingProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-portmapping.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.\n\nIf you are using containers in a task with the `awsvpc` or `host` network mode, exposed ports should be specified using `containerPort` . The `hostPort` can be left blank or it must be the same value as the `containerPort` .\n\nAfter a task reaches the `RUNNING` status, manual and automatic host and container port assignments are visible in the `networkBindings` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.",
        "stability": "external",
        "summary": "The `PortMapping` property specifies a port mapping.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst portMappingProperty: ecs.CfnTaskDefinition.PortMappingProperty = {\n  appProtocol: 'appProtocol',\n  containerPort: 123,\n  containerPortRange: 'containerPortRange',\n  hostPort: 123,\n  name: 'name',\n  protocol: 'protocol',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.PortMappingProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6465
      },
      "name": "PortMappingProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-portmapping.html#cfn-ecs-taskdefinition-portmapping-appprotocol"
            },
            "remarks": "This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.\n\nIf you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.\n\nTasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The application protocol that's used for the port mapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6475
          },
          "name": "appProtocol",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-portmapping.html#cfn-ecs-taskdefinition-portmapping-containerport"
            },
            "remarks": "If you use containers in a task with the `awsvpc` or `host` network mode, specify the exposed ports using `containerPort` .\n\nIf you use containers in a task with the `bridge` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see `hostPort` . Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.",
            "stability": "external",
            "summary": "The port number on the container that's bound to the user-specified or automatically assigned host port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6485
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-portmapping.html#cfn-ecs-taskdefinition-portmapping-containerportrange"
            },
            "remarks": "The following rules apply when you specify a `containerPortRange` :\n\n- You must use either the `bridge` network mode or the `awsvpc` network mode.\n- This parameter is available for both the EC2 and AWS Fargate launch types.\n- This parameter is available for both the Linux and Windows operating systems.\n- The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the `ecs-init` package\n- You can specify a maximum of 100 port ranges per container.\n- You do not specify a `hostPortRange` . The value of the `hostPortRange` is set as follows:\n\n- For containers in a task with the `awsvpc` network mode, the `hostPort` is set to the same value as the `containerPort` . This is a static mapping strategy.\n- For containers in a task with the `bridge` network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.\n- The `containerPortRange` valid values are between 1 and 65535.\n- A port can only be included in one port mapping per container.\n- You cannot specify overlapping port ranges.\n- The first port in the range must be less than last port in the range.\n- Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.\n\nFor more information, see [Issue #11185](https://docs.aws.amazon.com/https://github.com/moby/moby/issues/11185) on the Github website.\n\nFor information about how to turn off the docker-proxy in the Docker daemon config file, see [Docker daemon](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon) in the *Amazon ECS Developer Guide* .\n\nYou can call [`DescribeTasks`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) to view the `hostPortRange` which are the host ports that are bound to the container ports.",
            "stability": "external",
            "summary": "The port number range on the container that's bound to the dynamically mapped host port range."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6514
          },
          "name": "containerPortRange",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-portmapping.html#cfn-ecs-taskdefinition-portmapping-hostport"
            },
            "remarks": "If you are using containers in a task with the `awsvpc` or `host` network mode, the `hostPort` can either be left blank or set to the same value as the `containerPort` .\n\nIf you are using containers in a task with the `bridge` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the `hostPort` (or set it to `0` ) while specifying a `containerPort` and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version.\n\nThe default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under `/proc/sys/net/ipv4/ip_local_port_range` . If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.\n\n> The default ephemeral port range from 49153 through 65535 is always used for Docker versions before 1.6.0.\n\nThe default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running (after a task stops, the host port is released). The current reserved ports are displayed in the `remainingResources` of [DescribeContainerInstances](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeContainerInstances.html) output. A container instance can have up to 100 reserved ports at a time, including the default reserved ports. Automatically assigned ports don't count toward the 100 reserved ports limit.",
            "stability": "external",
            "summary": "The port number on the container instance to reserve for your container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6530
          },
          "name": "hostPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-portmapping.html#cfn-ecs-taskdefinition-portmapping-name"
            },
            "remarks": "This parameter only applies to Service Connect. This parameter is the name that you use in the `serviceConnectConfiguration` of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.\n\nFor more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The name that's used for the port mapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6538
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-portmapping.html#cfn-ecs-taskdefinition-portmapping-protocol"
            },
            "remarks": "Valid values are `tcp` and `udp` . The default is `tcp` .",
            "stability": "external",
            "summary": "The protocol used for the port mapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6544
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.PortMappingProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-proxyconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the `ecs-init` package to enable a proxy configuration. If your container instances are launched from the Amazon ECS-optimized AMI version `20190301` or later, then they contain the required versions of the container agent and `ecs-init` . For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nFor tasks using the Fargate launch type, the task or service requires platform version 1.3.0 or later.",
        "stability": "external",
        "summary": "The `ProxyConfiguration` property specifies the details for the App Mesh proxy.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst proxyConfigurationProperty: ecs.CfnTaskDefinition.ProxyConfigurationProperty = {\n  containerName: 'containerName',\n\n  // the properties below are optional\n  proxyConfigurationProperties: [{\n    name: 'name',\n    value: 'value',\n  }],\n  type: 'type',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6624
      },
      "name": "ProxyConfigurationProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-proxyconfiguration.html#cfn-ecs-taskdefinition-proxyconfiguration-containername"
            },
            "stability": "external",
            "summary": "The name of the container that will serve as the App Mesh proxy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6630
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-proxyconfiguration.html#cfn-ecs-taskdefinition-proxyconfiguration-proxyconfigurationproperties"
            },
            "remarks": "- `IgnoredUID` - (Required) The user ID (UID) of the proxy container as defined by the `user` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If `IgnoredGID` is specified, this field can be empty.\n- `IgnoredGID` - (Required) The group ID (GID) of the proxy container as defined by the `user` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If `IgnoredUID` is specified, this field can be empty.\n- `AppPorts` - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the `ProxyIngressPort` and `ProxyEgressPort` .\n- `ProxyIngressPort` - (Required) Specifies the port that incoming traffic to the `AppPorts` is directed to.\n- `ProxyEgressPort` - (Required) Specifies the port that outgoing traffic from the `AppPorts` is directed to.\n- `EgressIgnoredPorts` - (Required) The egress traffic going to the specified ports is ignored and not redirected to the `ProxyEgressPort` . It can be an empty list.\n- `EgressIgnoredIPs` - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the `ProxyEgressPort` . It can be an empty list.",
            "stability": "external",
            "summary": "The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6644
          },
          "name": "proxyConfigurationProperties",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.KeyValuePairProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-proxyconfiguration.html#cfn-ecs-taskdefinition-proxyconfiguration-type"
            },
            "remarks": "The only supported value is `APPMESH` .",
            "stability": "external",
            "summary": "The proxy type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6650
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.ProxyConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.RepositoryCredentialsProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-repositorycredentials.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `RepositoryCredentials` property specifies the repository credentials for private registry authentication.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst repositoryCredentialsProperty: ecs.CfnTaskDefinition.RepositoryCredentialsProperty = {\n  credentialsParameter: 'credentialsParameter',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RepositoryCredentialsProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6718
      },
      "name": "RepositoryCredentialsProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-repositorycredentials.html#cfn-ecs-taskdefinition-repositorycredentials-credentialsparameter"
            },
            "remarks": "> When you use the Amazon ECS API, AWS CLI , or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the secret containing the private repository credentials."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6726
          },
          "name": "credentialsParameter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.RepositoryCredentialsProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.ResourceRequirementProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-resourcerequirement.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The only supported resource is a GPU. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) in the *Amazon Elastic Container Service Developer Guide*",
        "stability": "external",
        "summary": "The `ResourceRequirement` property specifies the type and amount of a resource to assign to a container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst resourceRequirementProperty: ecs.CfnTaskDefinition.ResourceRequirementProperty = {\n  type: 'type',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ResourceRequirementProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6787
      },
      "name": "ResourceRequirementProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-resourcerequirement.html#cfn-ecs-taskdefinition-resourcerequirement-type"
            },
            "remarks": "The supported values are `GPU` or `InferenceAccelerator` .",
            "stability": "external",
            "summary": "The type of resource to assign to a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6793
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-resourcerequirement.html#cfn-ecs-taskdefinition-resourcerequirement-value"
            },
            "remarks": "If the `GPU` type is used, the value is the number of physical `GPUs` the Amazon ECS container agent will reserve for the container. The number of GPUs reserved for all containers in a task should not exceed the number of available GPUs on the container instance the task is launched on.\n\nIf the `InferenceAccelerator` type is used, the `value` should match the `DeviceName` for an [InferenceAccelerator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-inferenceaccelerator.html) specified in a task definition.",
            "stability": "external",
            "summary": "The value for the specified resource type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6803
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.ResourceRequirementProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.RuntimePlatformProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-runtimeplatform.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information about `RuntimePlatform` , see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "Information about the platform for the Amazon ECS service or task.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst runtimePlatformProperty: ecs.CfnTaskDefinition.RuntimePlatformProperty = {\n  cpuArchitecture: 'cpuArchitecture',\n  operatingSystemFamily: 'operatingSystemFamily',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RuntimePlatformProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6871
      },
      "name": "RuntimePlatformProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-runtimeplatform.html#cfn-ecs-taskdefinition-runtimeplatform-cpuarchitecture"
            },
            "remarks": "You can run your Linux tasks on an ARM-based platform by setting the value to `ARM64` . This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.",
            "stability": "external",
            "summary": "The CPU architecture."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6879
          },
          "name": "cpuArchitecture",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-runtimeplatform.html#cfn-ecs-taskdefinition-runtimeplatform-operatingsystemfamily"
            },
            "stability": "external",
            "summary": "The operating system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6885
          },
          "name": "operatingSystemFamily",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.RuntimePlatformProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.SecretProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-secret.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The `Secret` property specifies an object representing the secret to expose to your container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst secretProperty: ecs.CfnTaskDefinition.SecretProperty = {\n  name: 'name',\n  valueFrom: 'valueFrom',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SecretProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 6949
      },
      "name": "SecretProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-secret.html#cfn-ecs-taskdefinition-secret-name"
            },
            "stability": "external",
            "summary": "The name of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6955
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-secret.html#cfn-ecs-taskdefinition-secret-valuefrom"
            },
            "remarks": "The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.\n\nFor information about the require AWS Identity and Access Management permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide* .\n\n> If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.",
            "stability": "external",
            "summary": "The secret to expose to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 6965
          },
          "name": "valueFrom",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.SecretProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.SystemControlProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-systemcontrol.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "This parameter maps to `Sysctls` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--sysctl` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .\n\nWe don't recommend that you specify network-related `systemControls` parameters for multiple containers in a single task. This task also uses either the `awsvpc` or `host` network mode. It does it for the following reasons.\n\n- For tasks that use the `awsvpc` network mode, if you set `systemControls` for any container, it applies to all containers in the task. If you set different `systemControls` for multiple containers in a single task, the container that's started last determines which `systemControls` take effect.\n- For tasks that use the `host` network mode, the `systemControls` parameter applies to the container instance's kernel parameter and that of all containers of any tasks running on that container instance.",
        "stability": "external",
        "summary": "A list of namespaced kernel parameters to set in the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst systemControlProperty: ecs.CfnTaskDefinition.SystemControlProperty = {\n  namespace: 'namespace',\n  value: 'value',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SystemControlProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7036
      },
      "name": "SystemControlProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-systemcontrol.html#cfn-ecs-taskdefinition-systemcontrol-namespace"
            },
            "stability": "external",
            "summary": "The namespaced kernel parameter to set a `value` for."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7042
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-systemcontrol.html#cfn-ecs-taskdefinition-systemcontrol-value"
            },
            "stability": "external",
            "summary": "The value for the namespaced kernel parameter that's specified in `namespace` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7048
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.SystemControlProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-taskdefinitionplacementconstraint.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "If you are using the Fargate launch type, task placement constraints are not supported.\n\nFor more information, see [Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "The `TaskDefinitionPlacementConstraint` property specifies an object representing a constraint on task placement in the task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst taskDefinitionPlacementConstraintProperty: ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  expression: 'expression',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7116
      },
      "name": "TaskDefinitionPlacementConstraintProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-taskdefinitionplacementconstraint.html#cfn-ecs-taskdefinition-taskdefinitionplacementconstraint-type"
            },
            "remarks": "The `MemberOf` constraint restricts selection to be from a group of valid candidates.",
            "stability": "external",
            "summary": "The type of constraint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7128
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-taskdefinitionplacementconstraint.html#cfn-ecs-taskdefinition-taskdefinitionplacementconstraint-expression"
            },
            "remarks": "For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "A cluster query language expression to apply to the constraint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7122
          },
          "name": "expression",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.TmpfsProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-tmpfs.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `Tmpfs` property specifies the container path, mount options, and size of the tmpfs mount.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst tmpfsProperty: ecs.CfnTaskDefinition.TmpfsProperty = {\n  size: 123,\n\n  // the properties below are optional\n  containerPath: 'containerPath',\n  mountOptions: ['mountOptions'],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.TmpfsProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7193
      },
      "name": "TmpfsProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-tmpfs.html#cfn-ecs-taskdefinition-tmpfs-size"
            },
            "stability": "external",
            "summary": "The maximum size (in MiB) of the tmpfs volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7213
          },
          "name": "size",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-tmpfs.html#cfn-ecs-taskdefinition-tmpfs-containerpath"
            },
            "stability": "external",
            "summary": "The absolute file path where the tmpfs volume is to be mounted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7199
          },
          "name": "containerPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-tmpfs.html#cfn-ecs-taskdefinition-tmpfs-mountoptions"
            },
            "remarks": "Valid values: `\"defaults\" | \"ro\" | \"rw\" | \"suid\" | \"nosuid\" | \"dev\" | \"nodev\" | \"exec\" | \"noexec\" | \"sync\" | \"async\" | \"dirsync\" | \"remount\" | \"mand\" | \"nomand\" | \"atime\" | \"noatime\" | \"diratime\" | \"nodiratime\" | \"bind\" | \"rbind\" | \"unbindable\" | \"runbindable\" | \"private\" | \"rprivate\" | \"shared\" | \"rshared\" | \"slave\" | \"rslave\" | \"relatime\" | \"norelatime\" | \"strictatime\" | \"nostrictatime\" | \"mode\" | \"uid\" | \"gid\" | \"nr_inodes\" | \"nr_blocks\" | \"mpol\"`",
            "stability": "external",
            "summary": "The list of tmpfs volume mount options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7207
          },
          "name": "mountOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.TmpfsProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.UlimitProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-ulimit.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `Ulimit` property specifies the `ulimit` settings to pass to the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst ulimitProperty: ecs.CfnTaskDefinition.UlimitProperty = {\n  hardLimit: 123,\n  name: 'name',\n  softLimit: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.UlimitProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7281
      },
      "name": "UlimitProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-ulimit.html#cfn-ecs-taskdefinition-ulimit-hardlimit"
            },
            "stability": "external",
            "summary": "The hard limit for the `ulimit` type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7287
          },
          "name": "hardLimit",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-ulimit.html#cfn-ecs-taskdefinition-ulimit-name"
            },
            "stability": "external",
            "summary": "The `type` of the `ulimit` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7293
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-ulimit.html#cfn-ecs-taskdefinition-ulimit-softlimit"
            },
            "stability": "external",
            "summary": "The soft limit for the `ulimit` type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7299
          },
          "name": "softLimit",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.UlimitProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeFromProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volumefrom.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The `VolumeFrom` property specifies details on a data volume from another container in the same task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst volumeFromProperty: ecs.CfnTaskDefinition.VolumeFromProperty = {\n  readOnly: false,\n  sourceContainer: 'sourceContainer',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeFromProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7469
      },
      "name": "VolumeFromProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volumefrom.html#cfn-ecs-taskdefinition-volumefrom-readonly"
            },
            "remarks": "If this value is `false` , then the container can write to the volume. The default value is `false` .",
            "stability": "external",
            "summary": "If this value is `true` , the container has read-only access to the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7475
          },
          "name": "readOnly",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volumefrom.html#cfn-ecs-taskdefinition-volumefrom-sourcecontainer"
            },
            "stability": "external",
            "summary": "The name of another container within the same task definition to mount volumes from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7481
          },
          "name": "sourceContainer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.VolumeFromProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volume.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "For tasks that use a Docker volume, specify a `DockerVolumeConfiguration` . For tasks that use a bind mount host volume, specify a `host` and optional `sourcePath` . For more information about `host` and optional `sourcePath` , see [Volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#volumes) and [Using Data Volumes in Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) .",
        "stability": "external",
        "summary": "The `Volume` property specifies a data volume used in a task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst volumeProperty: ecs.CfnTaskDefinition.VolumeProperty = {\n  dockerVolumeConfiguration: {\n    autoprovision: false,\n    driver: 'driver',\n    driverOpts: {\n      driverOptsKey: 'driverOpts',\n    },\n    labels: {\n      labelsKey: 'labels',\n    },\n    scope: 'scope',\n  },\n  efsVolumeConfiguration: {\n    filesystemId: 'filesystemId',\n\n    // the properties below are optional\n    authorizationConfig: {\n      accessPointId: 'accessPointId',\n      iam: 'iam',\n    },\n    rootDirectory: 'rootDirectory',\n    transitEncryption: 'transitEncryption',\n    transitEncryptionPort: 123,\n  },\n  host: {\n    sourcePath: 'sourcePath',\n  },\n  name: 'name',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7369
      },
      "name": "VolumeProperty",
      "namespace": "CfnTaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volume.html#cfn-ecs-taskdefinition-volume-dockervolumeconfiguration"
            },
            "remarks": "Windows containers only support the use of the `local` driver. To use bind mounts, specify the `host` parameter instead.\n\n> Docker volumes aren't supported by tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "This parameter is specified when you use Docker volumes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7379
          },
          "name": "dockerVolumeConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volume.html#cfn-ecs-taskdefinition-volume-efsvolumeconfiguration"
            },
            "stability": "external",
            "summary": "This parameter is specified when you use an Amazon Elastic File System file system for task storage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7385
          },
          "name": "efsVolumeConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volume.html#cfn-ecs-taskdefinition-volume-host"
            },
            "remarks": "The contents of the `host` parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the `host` parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.\n\nWindows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount `C:\\my\\path:C:\\my\\path` and `D:\\:D:\\` , but not `D:\\my\\path:C:\\my\\path` or `D:\\:C:\\my\\path` .",
            "stability": "external",
            "summary": "This parameter is specified when you use bind mount host volumes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7393
          },
          "name": "host",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HostVolumePropertiesProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-volume.html#cfn-ecs-taskdefinition-volume-name"
            },
            "remarks": "Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This name is referenced in the `sourceVolume` parameter of container definition `mountPoints` .",
            "stability": "external",
            "summary": "The name of the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7399
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinition.VolumeProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskDefinitionProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnTaskDefinition`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskDefinitionProps: ecs.CfnTaskDefinitionProps = {\n  containerDefinitions: [{\n    image: 'image',\n    name: 'name',\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    dependsOn: [{\n      condition: 'condition',\n      containerName: 'containerName',\n    }],\n    disableNetworking: false,\n    dnsSearchDomains: ['dnsSearchDomains'],\n    dnsServers: ['dnsServers'],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    dockerSecurityOptions: ['dockerSecurityOptions'],\n    entryPoint: ['entryPoint'],\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    environmentFiles: [{\n      type: 'type',\n      value: 'value',\n    }],\n    essential: false,\n    extraHosts: [{\n      hostname: 'hostname',\n      ipAddress: 'ipAddress',\n    }],\n    firelensConfiguration: {\n      options: {\n        optionsKey: 'options',\n      },\n      type: 'type',\n    },\n    healthCheck: {\n      command: ['command'],\n      interval: 123,\n      retries: 123,\n      startPeriod: 123,\n      timeout: 123,\n    },\n    hostname: 'hostname',\n    interactive: false,\n    links: ['links'],\n    linuxParameters: {\n      capabilities: {\n        add: ['add'],\n        drop: ['drop'],\n      },\n      devices: [{\n        containerPath: 'containerPath',\n        hostPath: 'hostPath',\n        permissions: ['permissions'],\n      }],\n      initProcessEnabled: false,\n      maxSwap: 123,\n      sharedMemorySize: 123,\n      swappiness: 123,\n      tmpfs: [{\n        size: 123,\n\n        // the properties below are optional\n        containerPath: 'containerPath',\n        mountOptions: ['mountOptions'],\n      }],\n    },\n    logConfiguration: {\n      logDriver: 'logDriver',\n\n      // the properties below are optional\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    memory: 123,\n    memoryReservation: 123,\n    mountPoints: [{\n      containerPath: 'containerPath',\n      readOnly: false,\n      sourceVolume: 'sourceVolume',\n    }],\n    portMappings: [{\n      appProtocol: 'appProtocol',\n      containerPort: 123,\n      containerPortRange: 'containerPortRange',\n      hostPort: 123,\n      name: 'name',\n      protocol: 'protocol',\n    }],\n    privileged: false,\n    pseudoTerminal: false,\n    readonlyRootFilesystem: false,\n    repositoryCredentials: {\n      credentialsParameter: 'credentialsParameter',\n    },\n    resourceRequirements: [{\n      type: 'type',\n      value: 'value',\n    }],\n    secrets: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n    startTimeout: 123,\n    stopTimeout: 123,\n    systemControls: [{\n      namespace: 'namespace',\n      value: 'value',\n    }],\n    ulimits: [{\n      hardLimit: 123,\n      name: 'name',\n      softLimit: 123,\n    }],\n    user: 'user',\n    volumesFrom: [{\n      readOnly: false,\n      sourceContainer: 'sourceContainer',\n    }],\n    workingDirectory: 'workingDirectory',\n  }],\n  cpu: 'cpu',\n  ephemeralStorage: {\n    sizeInGiB: 123,\n  },\n  executionRoleArn: 'executionRoleArn',\n  family: 'family',\n  inferenceAccelerators: [{\n    deviceName: 'deviceName',\n    deviceType: 'deviceType',\n  }],\n  ipcMode: 'ipcMode',\n  memory: 'memory',\n  networkMode: 'networkMode',\n  pidMode: 'pidMode',\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  proxyConfiguration: {\n    containerName: 'containerName',\n\n    // the properties below are optional\n    proxyConfigurationProperties: [{\n      name: 'name',\n      value: 'value',\n    }],\n    type: 'type',\n  },\n  requiresCompatibilities: ['requiresCompatibilities'],\n  runtimePlatform: {\n    cpuArchitecture: 'cpuArchitecture',\n    operatingSystemFamily: 'operatingSystemFamily',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskRoleArn: 'taskRoleArn',\n  volumes: [{\n    dockerVolumeConfiguration: {\n      autoprovision: false,\n      driver: 'driver',\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n      scope: 'scope',\n    },\n    efsVolumeConfiguration: {\n      filesystemId: 'filesystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n    name: 'name',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinitionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 3784
      },
      "name": "CfnTaskDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-containerdefinitions"
            },
            "remarks": "For more information about container definition parameters and defaults, see [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "A list of container definitions in JSON format that describe the different containers that make up your task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3791
          },
          "name": "containerDefinitions",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-cpu"
            },
            "remarks": "If you use the EC2 launch type, this field is optional. Any value can be used. If you use the Fargate launch type, this field is required. You must use one of the following values. The value that you choose determines your range of valid values for the `memory` parameter.\n\nThe CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.\n\n- 256 (.25 vCPU) - Available `memory` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)\n- 512 (.5 vCPU) - Available `memory` values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)\n- 1024 (1 vCPU) - Available `memory` values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)\n- 2048 (2 vCPU) - Available `memory` values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)\n- 4096 (4 vCPU) - Available `memory` values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)\n- 8192 (8 vCPU) - Available `memory` values: 16 GB and 60 GB in 4 GB increments\n\nThis option requires Linux platform `1.4.0` or later.\n- 16384 (16vCPU) - Available `memory` values: 32GB and 120 GB in 8 GB increments\n\nThis option requires Linux platform `1.4.0` or later.",
            "stability": "external",
            "summary": "The number of `cpu` units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3812
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-ephemeralstorage"
            },
            "stability": "external",
            "summary": "The ephemeral storage settings to use for tasks run with the task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3819
          },
          "name": "ephemeralStorage",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EphemeralStorageProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-executionrolearn"
            },
            "remarks": "The task execution IAM role is required depending on the requirements of your task. For more information, see [Amazon ECS task execution IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make AWS API calls on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3826
          },
          "name": "executionRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-family"
            },
            "remarks": "Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.\n\nA family groups multiple versions of a task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of 1. Amazon ECS gives sequential revision numbers to each task definition that you add.\n\n> To use revision numbers when you update a task definition, specify this property. If you don't specify a value, AWS CloudFormation generates a new task definition each time that you update it.",
            "stability": "external",
            "summary": "The name of a family that this task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3837
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-inferenceaccelerators"
            },
            "stability": "external",
            "summary": "The Elastic Inference accelerators to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3844
          },
          "name": "inferenceAccelerators",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.InferenceAcceleratorProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-ipcmode"
            },
            "remarks": "The valid values are `host` , `task` , or `none` . If `host` is specified, then all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If `task` is specified, all containers within the specified task share the same IPC resources. If `none` is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the *Docker run reference* .\n\nIf the `host` IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see [Docker security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/) .\n\nIf you are setting namespaced kernel parameters using `systemControls` for the containers in the task, the following will apply to your IPC resource namespace. For more information, see [System Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n- For tasks that use the `host` IPC mode, IPC namespace related `systemControls` are not supported.\n- For tasks that use the `task` IPC mode, IPC namespace related `systemControls` will apply to all containers within a task.\n\n> This parameter is not supported for Windows containers or tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "The IPC resource namespace to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3860
          },
          "name": "ipcMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-memory"
            },
            "remarks": "If your tasks runs on Amazon EC2 instances, you must specify either a task-level memory value or a container-level memory value. This field is optional and any value can be used. If a task-level memory value is specified, the container-level memory value is optional. For more information regarding container-level memory and memory reservation, see [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) .\n\nIf your tasks runs on AWS Fargate , this field is required. You must use one of the following values. The value you choose determines your range of valid values for the `cpu` parameter.\n\n- 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available `cpu` values: 256 (.25 vCPU)\n- 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available `cpu` values: 512 (.5 vCPU)\n- 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available `cpu` values: 1024 (1 vCPU)\n- Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available `cpu` values: 2048 (2 vCPU)\n- Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available `cpu` values: 4096 (4 vCPU)\n- Between 16 GB and 60 GB in 4 GB increments - Available `cpu` values: 8192 (8 vCPU)\n\nThis option requires Linux platform `1.4.0` or later.\n- Between 32GB and 120 GB in 8 GB increments - Available `cpu` values: 16384 (16 vCPU)\n\nThis option requires Linux platform `1.4.0` or later.",
            "stability": "external",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3883
          },
          "name": "memory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-networkmode"
            },
            "remarks": "The valid values are `none` , `bridge` , `awsvpc` , and `host` . The default Docker network mode is `bridge` . If you are using the Fargate launch type, the `awsvpc` network mode is required. If you are using the EC2 launch type, any network mode can be used. If the network mode is set to `none` , you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The `host` and `awsvpc` network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the `bridge` mode.\n\nWith the `host` and `awsvpc` network modes, exposed container ports are mapped directly to the corresponding host port (for the `host` network mode) or the attached elastic network interface port (for the `awsvpc` network mode), so you cannot take advantage of dynamic host port mappings.\n\nIf the network mode is `awsvpc` , the task is allocated an elastic network interface, and you must specify a [NetworkConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_NetworkConfiguration.html) value when you create a service or run a task with the task definition. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> Currently, only Amazon ECS-optimized AMIs, other Amazon Linux variants with the `ecs-init` package, or AWS Fargate infrastructure support the `awsvpc` network mode.\n\nIf the network mode is `host` , you cannot run multiple instantiations of the same task on a single container instance when port mappings are used.\n\nDocker for Windows uses different network modes than Docker for Linux. When you register a task definition with Windows containers, you must not specify a network mode. If you use the console to register a task definition with Windows containers, you must choose the `<default>` network mode object.\n\nFor more information, see [Network settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#network-settings) in the *Docker run reference* .",
            "stability": "external",
            "summary": "The Docker networking mode to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3902
          },
          "name": "networkMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-pidmode"
            },
            "remarks": "The valid values are `host` or `task` . If `host` is specified, then all containers within the tasks that specified the `host` PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If `task` is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the *Docker run reference* .\n\nIf the `host` PID mode is used, be aware that there is a heightened risk of undesired process namespace expose. For more information, see [Docker security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/) .\n\n> This parameter is not supported for Windows containers or tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "The process namespace to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3913
          },
          "name": "pidMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-placementconstraints"
            },
            "remarks": "> This parameter isn't supported for tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "An array of placement constraint objects to use for tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3922
          },
          "name": "placementConstraints",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-proxyconfiguration"
            },
            "remarks": "Your Amazon ECS container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the `ecs-init` package to enable a proxy configuration. If your container instances are launched from the Amazon ECS-optimized AMI version `20190301` or later, then they contain the required versions of the container agent and `ecs-init` . For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The `ProxyConfiguration` property specifies the configuration details for the App Mesh proxy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3931
          },
          "name": "proxyConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-requirescompatibilities"
            },
            "remarks": "To determine which task launch types the task definition is validated for, see the `TaskDefinition$compatibilities` parameter.\n\nThe valid values are:\n\n- `EC2` - The EC2 launch type\n- `FARGATE` - The Fargate launch type\n- `EXTERNAL` - The external instance (ECS Anywhere) launch type",
            "stability": "external",
            "summary": "The task launch types the task definition was validated against."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3944
          },
          "name": "requiresCompatibilities",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-runtimeplatform"
            },
            "remarks": "A platform family is specified only for tasks using the Fargate launch type.\n\nWhen you specify a task definition in a service, this value must match the `runtimePlatform` value of the service.",
            "stability": "external",
            "summary": "The operating system that your tasks definitions run on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3953
          },
          "name": "runtimePlatform",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RuntimePlatformProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-tags"
            },
            "remarks": "Each tag consists of a key and an optional value. You define both of them.\n\nThe following basic restrictions apply to tags:\n\n- Maximum number of tags per resource - 50\n- For each resource, each tag key must be unique, and each tag key can have only one value.\n- Maximum key length - 128 Unicode characters in UTF-8\n- Maximum value length - 256 Unicode characters in UTF-8\n- If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.\n- Tag keys and values are case-sensitive.\n- Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.",
            "stability": "external",
            "summary": "The metadata that you apply to the task definition to help you categorize and organize them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3970
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-taskrolearn"
            },
            "remarks": "For more information, see [Amazon ECS Task Role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nIAM roles for tasks on Windows require that the `-EnableTaskIAMRole` option is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration code to use the feature. For more information, see [Windows IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html) in the *Amazon Elastic Container Service Developer Guide* .",
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the AWS Identity and Access Management role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3979
          },
          "name": "taskRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html#cfn-ecs-taskdefinition-volumes"
            },
            "remarks": "For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> The `host` and `sourcePath` parameters aren't supported for tasks run on AWS Fargate .",
            "stability": "external",
            "summary": "The list of data volume definitions for the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 3988
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskDefinitionProps"
    },
    "@aws-cdk/aws-ecs.CfnTaskSet": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ECS::TaskSet",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Create a task set in the specified cluster and service. This is used when a service uses the `EXTERNAL` deployment controller type. For more information, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html) in the *Amazon Elastic Container Service Developer Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ECS::TaskSet`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskSet = new ecs.CfnTaskSet(this, 'MyCfnTaskSet', {\n  cluster: 'cluster',\n  service: 'service',\n  taskDefinition: 'taskDefinition',\n\n  // the properties below are optional\n  externalId: 'externalId',\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  platformVersion: 'platformVersion',\n  scale: {\n    unit: 'unit',\n    value: 123,\n  },\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskSet",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ECS::TaskSet`."
        },
        "locationInModule": {
          "filename": "lib/ecs.generated.ts",
          "line": 7814
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnTaskSetProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7704
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7839
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7859
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnTaskSet",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7708
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Id"
            },
            "stability": "external",
            "summary": "The ID of the task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7733
          },
          "name": "attrId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7844
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-cluster"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7740
          },
          "name": "cluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-service"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the service to create the task set in."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7747
          },
          "name": "service",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-taskdefinition"
            },
            "stability": "external",
            "summary": "The task definition for the tasks in the task set to use."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7754
          },
          "name": "taskDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-externalid"
            },
            "remarks": "If the task set is associated with a service discovery registry, the tasks in this task set will have the `ECS_TASK_SET_EXTERNAL_ID` AWS Cloud Map attribute set to the provided value.",
            "stability": "external",
            "summary": "An optional non-unique tag that identifies this task set in external systems."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7761
          },
          "name": "externalId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-launchtype"
            },
            "remarks": "For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nIf a `launchType` is specified, the `capacityProviderStrategy` parameter must be omitted.",
            "stability": "external",
            "summary": "The launch type that new tasks in the task set uses."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7770
          },
          "name": "launchType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-loadbalancers"
            },
            "remarks": "The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.",
            "stability": "external",
            "summary": "A load balancer object representing the load balancer to use with the task set."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7777
          },
          "name": "loadBalancers",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.LoadBalancerProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-networkconfiguration"
            },
            "stability": "external",
            "summary": "The network configuration for the task set."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7784
          },
          "name": "networkConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.NetworkConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-platformversion"
            },
            "remarks": "A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the `LATEST` platform version is used.",
            "stability": "external",
            "summary": "The platform version that the tasks in the task set uses."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7791
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-scale"
            },
            "stability": "external",
            "summary": "A floating-point percentage of your desired number of tasks to place and keep running in the task set."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7798
          },
          "name": "scale",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ScaleProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-serviceregistries"
            },
            "remarks": "For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html) .",
            "stability": "external",
            "summary": "The details of the service discovery registries to assign to this task set."
          },
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7805
          },
          "name": "serviceRegistries",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ServiceRegistryProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskSet"
    },
    "@aws-cdk/aws-ecs.CfnTaskSet.AwsVpcConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-awsvpcconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The networking details for a task.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst awsVpcConfigurationProperty: ecs.CfnTaskSet.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.AwsVpcConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7873
      },
      "name": "AwsVpcConfigurationProperty",
      "namespace": "CfnTaskSet",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-awsvpcconfiguration.html#cfn-ecs-taskset-awsvpcconfiguration-subnets"
            },
            "remarks": "There's a limit of 16 subnets that can be specified per `AwsVpcConfiguration` .\n\n> All specified subnets must be from the same VPC.",
            "stability": "external",
            "summary": "The IDs of the subnets associated with the task or service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7895
          },
          "name": "subnets",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-awsvpcconfiguration.html#cfn-ecs-taskset-awsvpcconfiguration-assignpublicip"
            },
            "remarks": "The default value is `DISABLED` .",
            "stability": "external",
            "summary": "Whether the task's elastic network interface receives a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7879
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-awsvpcconfiguration.html#cfn-ecs-taskset-awsvpcconfiguration-securitygroups"
            },
            "remarks": "If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified per `AwsVpcConfiguration` .\n\n> All specified security groups must be from the same VPC.",
            "stability": "external",
            "summary": "The IDs of the security groups associated with the task or service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7887
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskSet.AwsVpcConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskSet.LoadBalancerProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-loadbalancer.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Details on the load balancer or load balancers to use with a task set.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst loadBalancerProperty: ecs.CfnTaskSet.LoadBalancerProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  loadBalancerName: 'loadBalancerName',\n  targetGroupArn: 'targetGroupArn',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.LoadBalancerProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7963
      },
      "name": "LoadBalancerProperty",
      "namespace": "CfnTaskSet",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-loadbalancer.html#cfn-ecs-taskset-loadbalancer-containername"
            },
            "stability": "external",
            "summary": "The name of the container (as it appears in a container definition) to associate with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7969
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-loadbalancer.html#cfn-ecs-taskset-loadbalancer-containerport"
            },
            "remarks": "This port must correspond to a `containerPort` in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they're launched on must allow ingress traffic on the `hostPort` of the port mapping.",
            "stability": "external",
            "summary": "The port on the container to associate with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7975
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-loadbalancer.html#cfn-ecs-taskset-loadbalancer-loadbalancername"
            },
            "remarks": "A load balancer name is only specified when using a Classic Load Balancer. If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.",
            "stability": "external",
            "summary": "The name of the load balancer to associate with the Amazon ECS service or task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7983
          },
          "name": "loadBalancerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-loadbalancer.html#cfn-ecs-taskset-loadbalancer-targetgrouparn"
            },
            "remarks": "A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you're using a Classic Load Balancer, omit the target group ARN.\n\nFor services using the `ECS` deployment controller, you can specify one or multiple target groups. For more information, see [Registering multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nFor services using the `CODE_DEPLOY` deployment controller, you're required to define two target groups for the load balancer. For more information, see [Blue/green deployment with CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the *Amazon Elastic Container Service Developer Guide* .\n\n> If your service's task definition uses the `awsvpc` network mode, you must choose `ip` as the target type, not `instance` . Do this when creating your target groups because tasks that use the `awsvpc` network mode are associated with an elastic network interface, not an Amazon EC2 instance. This network mode is required for the Fargate launch type.",
            "stability": "external",
            "summary": "The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7997
          },
          "name": "targetGroupArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskSet.LoadBalancerProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskSet.NetworkConfigurationProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-networkconfiguration.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "The network configuration for a task.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst networkConfigurationProperty: ecs.CfnTaskSet.NetworkConfigurationProperty = {\n  awsVpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.NetworkConfigurationProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 8067
      },
      "name": "NetworkConfigurationProperty",
      "namespace": "CfnTaskSet",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-networkconfiguration.html#cfn-ecs-taskset-networkconfiguration-awsvpcconfiguration"
            },
            "remarks": "> All specified subnets and security groups must be from the same VPC.",
            "stability": "external",
            "summary": "The VPC subnets and security groups that are associated with a task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 8075
          },
          "name": "awsVpcConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.AwsVpcConfigurationProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskSet.NetworkConfigurationProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskSet.ScaleProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-scale.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "A floating-point percentage of the desired number of tasks to place and keep running in the task set.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst scaleProperty: ecs.CfnTaskSet.ScaleProperty = {\n  unit: 'unit',\n  value: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ScaleProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 8136
      },
      "name": "ScaleProperty",
      "namespace": "CfnTaskSet",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-scale.html#cfn-ecs-taskset-scale-unit"
            },
            "stability": "external",
            "summary": "The unit of measure for the scale value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 8142
          },
          "name": "unit",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-scale.html#cfn-ecs-taskset-scale-value"
            },
            "remarks": "Accepted values are numbers between 0 and 100.",
            "stability": "external",
            "summary": "The value, specified as a percent total of a service's `desiredCount` , to scale the task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 8148
          },
          "name": "value",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskSet.ScaleProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskSet.ServiceRegistryProperty": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-serviceregistry.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Each service may be associated with one service registry. Multiple service registries for each service are not supported.\n\nWhen you add, update, or remove the service registries configuration, Amazon ECS starts a new deployment. New tasks are registered and deregistered to the updated service registry configuration.",
        "stability": "external",
        "summary": "The details for the service registry.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceRegistryProperty: ecs.CfnTaskSet.ServiceRegistryProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  port: 123,\n  registryArn: 'registryArn',\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ServiceRegistryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 8216
      },
      "name": "ServiceRegistryProperty",
      "namespace": "CfnTaskSet",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-serviceregistry.html#cfn-ecs-taskset-serviceregistry-containername"
            },
            "remarks": "It's already specified in the task definition. If the task definition that your service task specifies uses the `bridge` or `host` network mode, you must specify a `containerName` and `containerPort` combination from the task definition. If the task definition that your service task specifies uses the `awsvpc` network mode and a type SRV DNS record is used, you must specify either a `containerName` and `containerPort` combination or a `port` value. However, you can't specify both.",
            "stability": "external",
            "summary": "The container name value to be used for your service discovery service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 8222
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-serviceregistry.html#cfn-ecs-taskset-serviceregistry-containerport"
            },
            "remarks": "It's already specified in the task definition. If the task definition your service task specifies uses the `bridge` or `host` network mode, you must specify a `containerName` and `containerPort` combination from the task definition. If the task definition your service task specifies uses the `awsvpc` network mode and a type SRV DNS record is used, you must specify either a `containerName` and `containerPort` combination or a `port` value. However, you can't specify both.",
            "stability": "external",
            "summary": "The port value to be used for your service discovery service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 8228
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-serviceregistry.html#cfn-ecs-taskset-serviceregistry-port"
            },
            "remarks": "This field might be used if both the `awsvpc` network mode and SRV records are used.",
            "stability": "external",
            "summary": "The port value used if your service discovery service specified an SRV record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 8234
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskset-serviceregistry.html#cfn-ecs-taskset-serviceregistry-registryarn"
            },
            "remarks": "The currently supported service registry is AWS Cloud Map . For more information, see [CreateService](https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html) .",
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the service registry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 8240
          },
          "name": "registryArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskSet.ServiceRegistryProperty"
    },
    "@aws-cdk/aws-ecs.CfnTaskSetProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnTaskSet`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskSetProps: ecs.CfnTaskSetProps = {\n  cluster: 'cluster',\n  service: 'service',\n  taskDefinition: 'taskDefinition',\n\n  // the properties below are optional\n  externalId: 'externalId',\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  platformVersion: 'platformVersion',\n  scale: {\n    unit: 'unit',\n    value: 123,\n  },\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-ecs.CfnTaskSetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs.generated.ts",
        "line": 7544
      },
      "name": "CfnTaskSetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-cluster"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7551
          },
          "name": "cluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-service"
            },
            "stability": "external",
            "summary": "The short name or full Amazon Resource Name (ARN) of the service to create the task set in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7558
          },
          "name": "service",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-taskdefinition"
            },
            "stability": "external",
            "summary": "The task definition for the tasks in the task set to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7565
          },
          "name": "taskDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-externalid"
            },
            "remarks": "If the task set is associated with a service discovery registry, the tasks in this task set will have the `ECS_TASK_SET_EXTERNAL_ID` AWS Cloud Map attribute set to the provided value.",
            "stability": "external",
            "summary": "An optional non-unique tag that identifies this task set in external systems."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7572
          },
          "name": "externalId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-launchtype"
            },
            "remarks": "For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide* .\n\nIf a `launchType` is specified, the `capacityProviderStrategy` parameter must be omitted.",
            "stability": "external",
            "summary": "The launch type that new tasks in the task set uses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7581
          },
          "name": "launchType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-loadbalancers"
            },
            "remarks": "The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.",
            "stability": "external",
            "summary": "A load balancer object representing the load balancer to use with the task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7588
          },
          "name": "loadBalancers",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.LoadBalancerProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-networkconfiguration"
            },
            "stability": "external",
            "summary": "The network configuration for the task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7595
          },
          "name": "networkConfiguration",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.NetworkConfigurationProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-platformversion"
            },
            "remarks": "A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the `LATEST` platform version is used.",
            "stability": "external",
            "summary": "The platform version that the tasks in the task set uses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7602
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-scale"
            },
            "stability": "external",
            "summary": "A floating-point percentage of your desired number of tasks to place and keep running in the task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7609
          },
          "name": "scale",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ScaleProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html#cfn-ecs-taskset-serviceregistries"
            },
            "remarks": "For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html) .",
            "stability": "external",
            "summary": "The details of the service discovery registries to assign to this task set."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs.generated.ts",
            "line": 7616
          },
          "name": "serviceRegistries",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ServiceRegistryProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/ecs.generated:CfnTaskSetProps"
    },
    "@aws-cdk/aws-ecs.CloudMapNamespaceOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The options for creating an AWS Cloud Map namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const vpc: ec2.Vpc;\nconst cloudMapNamespaceOptions: ecs.CloudMapNamespaceOptions = {\n  name: 'name',\n\n  // the properties below are optional\n  type: servicediscovery.NamespaceType.HTTP,\n  vpc: vpc,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.CloudMapNamespaceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 878
      },
      "name": "CloudMapNamespaceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the namespace, such as example.com."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 882
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "PrivateDns",
            "stability": "stable",
            "summary": "The type of CloudMap Namespace to create."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 889
          },
          "name": "type",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.NamespaceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "VPC of the cluster for Private DNS Namespace, otherwise none",
            "remarks": "This property is required for private DNS namespaces.",
            "stability": "stable",
            "summary": "The VPC to associate the namespace with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 896
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/cluster:CloudMapNamespaceOptions"
    },
    "@aws-cdk/aws-ecs.CloudMapOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The options to enabling AWS Cloud Map for an Amazon ECS service.",
        "example": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.CloudMapOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 967
      },
      "name": "CloudMapOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- the defaultCloudMapNamespace associated to the cluster",
            "stability": "stable",
            "summary": "The service discovery namespace for the Cloud Map service to attach to the ECS service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 980
          },
          "name": "cloudMapNamespace",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the task definition's default container",
            "stability": "stable",
            "summary": "The container to point to for a SRV record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 1008
          },
          "name": "container",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the default port of the task definition's default container",
            "stability": "stable",
            "summary": "The port to point to for a SRV record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 1014
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- DnsRecordType.A if TaskDefinition.networkMode = AWS_VPC, otherwise DnsRecordType.SRV",
            "remarks": "The supported record types are A or SRV.",
            "stability": "stable",
            "summary": "The DNS record type that you want AWS Cloud Map to create."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 987
          },
          "name": "dnsRecordType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(1)",
            "stability": "stable",
            "summary": "The amount of time that you want DNS resolvers to cache the settings for this record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 994
          },
          "name": "dnsTtl",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "NOTE: This is used for HealthCheckCustomConfig",
            "stability": "stable",
            "summary": "The number of 30-second intervals that you want Cloud Map to wait after receiving an UpdateInstanceCustomHealthStatus request before it changes the health status of a service instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 1002
          },
          "name": "failureThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CloudFormation-generated name",
            "stability": "stable",
            "summary": "The name of the Cloud Map service to attach to the ECS service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 973
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/base/base-service:CloudMapOptions"
    },
    "@aws-cdk/aws-ecs.Cluster": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "A regional grouping of one or more container instances on which you can run tasks and services.",
        "example": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Cluster",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the Cluster class."
        },
        "locationInModule": {
          "filename": "lib/cluster.ts",
          "line": 191
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ClusterProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 100
      },
      "methods": [
        {
          "docs": {
            "remarks": "This does not provide access to the vpc, hasEc2Capacity, or connections -\nuse the `fromClusterAttributes` method to access those properties.",
            "stability": "stable",
            "summary": "Import an existing cluster to the stack from the cluster ARN."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 113
          },
          "name": "fromClusterArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "clusterArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ICluster"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing cluster to the stack from its attributes."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 104
          },
          "name": "fromClusterAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ClusterAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ICluster"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds an Auto Scaling Group Capacity Provider to a cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 362
          },
          "name": "addAsgCapacityProvider",
          "parameters": [
            {
              "docs": {
                "summary": "the capacity provider to add to this cluster."
              },
              "name": "provider",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AsgCapacityProvider"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "deprecated": "Use {@link Cluster.addAsgCapacityProvider} instead.",
            "stability": "deprecated",
            "summary": "This method adds compute capacity to a cluster using the specified AutoScalingGroup."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 387
          },
          "name": "addAutoScalingGroup",
          "parameters": [
            {
              "docs": {
                "remarks": "[disable-awslint:ref-via-interface] is needed in order to install the ECS\nagent by updating the ASGs user data.",
                "summary": "the ASG to add to this cluster."
              },
              "name": "autoScalingGroup",
              "type": {
                "fqn": "@aws-cdk/aws-autoscaling.AutoScalingGroup"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "This method adds compute capacity to a cluster by creating an AutoScalingGroup with the specified options.\n\nReturns the AutoScalingGroup so you can add autoscaling settings to it.",
            "stability": "stable",
            "summary": "It is highly recommended to use {@link Cluster.addAsgCapacityProvider} instead of this method."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 331
          },
          "name": "addCapacity",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AddCapacityOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-autoscaling.AutoScalingGroup"
            }
          }
        },
        {
          "docs": {
            "deprecated": "Use {@link enableFargateCapacityProviders} instead.",
            "see": "{@link addAsgCapacityProvider} to add an Auto Scaling Group capacity provider to the cluster.",
            "stability": "deprecated",
            "summary": "This method enables the Fargate or Fargate Spot capacity providers on the cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 493
          },
          "name": "addCapacityProvider",
          "parameters": [
            {
              "docs": {
                "summary": "the capacity provider to add to this cluster."
              },
              "name": "provider",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "NOTE: HttpNamespaces are not supported, as ECS always requires a DNSConfig when registering an instance to a Cloud\nMap service.",
            "stability": "stable",
            "summary": "Add an AWS Cloud Map DNS namespace for this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 294
          },
          "name": "addDefaultCloudMapNamespace",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.CloudMapNamespaceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Enable the Fargate capacity providers for this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 254
          },
          "name": "enableFargateCapacityProviders"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method returns the specifed CloudWatch metric for this cluster."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 590
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "This method returns the CloudWatch metric for this clusters CPU reservation."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 556
          },
          "name": "metricCpuReservation",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "This method returns the CloudWatch metric for this clusters CPU utilization."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 565
          },
          "name": "metricCpuUtilization",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "This method returns the CloudWatch metric for this clusters memory reservation."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 574
          },
          "name": "metricMemoryReservation",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "stable",
            "summary": "This method returns the CloudWatch metric for this clusters memory utilization."
          },
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 583
          },
          "name": "metricMemoryUtilization",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "Cluster",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The Amazon Resource Name (ARN) that identifies the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 156
          },
          "name": "clusterArn",
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 161
          },
          "name": "clusterName",
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Manage the allowed network connections for the cluster with Security Groups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 146
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Whether the cluster has EC2 capacity associated with it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 540
          },
          "name": "hasEc2Capacity",
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The VPC associated with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 151
          },
          "name": "vpc",
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Getter for autoscaling group added to cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 533
          },
          "name": "autoscalingGroup",
          "optional": true,
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-autoscaling.IAutoScalingGroup"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Getter for namespace added to cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 320
          },
          "name": "defaultCloudMapNamespace",
          "optional": true,
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Getter for execute command configuration associated with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 547
          },
          "name": "executeCommandConfiguration",
          "optional": true,
          "overrides": "@aws-cdk/aws-ecs.ICluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ExecuteCommandConfiguration"
          }
        }
      ],
      "symbolId": "lib/cluster:Cluster"
    },
    "@aws-cdk/aws-ecs.ClusterAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties to import from the ECS cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\ndeclare const bucket: s3.Bucket;\ndeclare const key: kms.Key;\ndeclare const logGroup: logs.LogGroup;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const vpc: ec2.Vpc;\nconst clusterAttributes: ecs.ClusterAttributes = {\n  clusterName: 'clusterName',\n  securityGroups: [securityGroup],\n  vpc: vpc,\n\n  // the properties below are optional\n  autoscalingGroup: autoScalingGroup,\n  clusterArn: 'clusterArn',\n  defaultCloudMapNamespace: namespace,\n  executeCommandConfiguration: {\n    kmsKey: key,\n    logConfiguration: {\n      cloudWatchEncryptionEnabled: false,\n      cloudWatchLogGroup: logGroup,\n      s3Bucket: bucket,\n      s3EncryptionEnabled: false,\n      s3KeyPrefix: 's3KeyPrefix',\n    },\n    logging: ecs.ExecuteCommandLogging.NONE,\n  },\n  hasEc2Capacity: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ClusterAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 659
      },
      "name": "ClusterAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 663
          },
          "name": "clusterName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The security groups associated with the container instances registered to the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 680
          },
          "name": "securityGroups",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The VPC associated with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 675
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No default autoscaling group",
            "stability": "stable",
            "summary": "Autoscaling group added to the cluster if capacity is added."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 701
          },
          "name": "autoscalingGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-autoscaling.IAutoScalingGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Derived from clusterName",
            "stability": "stable",
            "summary": "The Amazon Resource Name (ARN) that identifies the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 670
          },
          "name": "clusterArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No default namespace",
            "stability": "stable",
            "summary": "The AWS Cloud Map namespace to associate with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 694
          },
          "name": "defaultCloudMapNamespace",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none.",
            "stability": "stable",
            "summary": "The execute command configuration for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 708
          },
          "name": "executeCommandConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ExecuteCommandConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Specifies whether the cluster has EC2 instance capacity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 687
          },
          "name": "hasEc2Capacity",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/cluster:ClusterAttributes"
    },
    "@aws-cdk/aws-ecs.ClusterProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties used to define an ECS cluster.",
        "example": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ClusterProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 23
      },
      "name": "ClusterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no EC2 capacity will be added, you can use `addCapacity` to add capacity later.",
            "stability": "stable",
            "summary": "The ec2 capacity to add to the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 51
          },
          "name": "capacity",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.AddCapacityOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None. Currently only FARGATE and FARGATE_SPOT are supported.",
            "deprecated": "Use {@link ClusterProps.enableFargateCapacityProviders} instead.",
            "stability": "deprecated",
            "summary": "The capacity providers to add to the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 59
          },
          "name": "capacityProviders",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CloudFormation-generated name",
            "stability": "stable",
            "summary": "The name for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 29
          },
          "name": "clusterName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Container Insights will be disabled for this cluser.",
            "stability": "stable",
            "summary": "If true CloudWatch Container Insights will be enabled for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 73
          },
          "name": "containerInsights",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no service discovery namespace created, you can use `addDefaultCloudMapNamespace` to add a\ndefault service discovery namespace later.",
            "stability": "stable",
            "summary": "The service discovery namespace created in this cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 44
          },
          "name": "defaultCloudMapNamespace",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CloudMapNamespaceOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether to enable Fargate Capacity Providers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 66
          },
          "name": "enableFargateCapacityProviders",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no configuration will be provided.",
            "stability": "stable",
            "summary": "The execute command configuration for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 80
          },
          "name": "executeCommandConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ExecuteCommandConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- creates a new VPC with two AZs",
            "stability": "stable",
            "summary": "The VPC where your ECS instances will be running or your ENIs will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 36
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/cluster:ClusterProps"
    },
    "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The common task definition attributes used across all types of task definitions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst commonTaskDefinitionAttributes: ecs.CommonTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 226
      },
      "name": "CommonTaskDefinitionAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The arn of the task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 230
          },
          "name": "taskDefinitionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Network mode cannot be provided to the imported task.",
            "stability": "stable",
            "summary": "The networking mode to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 237
          },
          "name": "networkMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.NetworkMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Permissions cannot be granted to the imported task.",
            "stability": "stable",
            "summary": "The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 244
          },
          "name": "taskRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:CommonTaskDefinitionAttributes"
    },
    "@aws-cdk/aws-ecs.CommonTaskDefinitionProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "For more information, see\n[Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html).",
        "stability": "stable",
        "summary": "The common properties for all task definitions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const proxyConfiguration: ecs.ProxyConfiguration;\ndeclare const role: iam.Role;\nconst commonTaskDefinitionProps: ecs.CommonTaskDefinitionProps = {\n  executionRole: role,\n  family: 'family',\n  proxyConfiguration: proxyConfiguration,\n  taskRole: role,\n  volumes: [{\n    name: 'name',\n\n    // the properties below are optional\n    dockerVolumeConfiguration: {\n      driver: 'driver',\n      scope: ecs.Scope.TASK,\n\n      // the properties below are optional\n      autoprovision: false,\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n    },\n    efsVolumeConfiguration: {\n      fileSystemId: 'fileSystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n  }],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.CommonTaskDefinitionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 65
      },
      "name": "CommonTaskDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- An execution role will be automatically created if you use ECR images in your task definition.",
            "remarks": "The role will be used to retrieve container images from ECR and create CloudWatch log groups.",
            "stability": "stable",
            "summary": "The name of the IAM task execution role that grants the ECS agent permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 80
          },
          "name": "executionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name.",
            "remarks": "A family groups multiple versions of a task definition.",
            "stability": "stable",
            "summary": "The name of a family that this task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 71
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No proxy configuration.",
            "stability": "stable",
            "summary": "The configuration details for the App Mesh proxy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 94
          },
          "name": "proxyConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ProxyConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A task role is automatically created for you.",
            "stability": "stable",
            "summary": "The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 87
          },
          "name": "taskRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No volumes are passed to the Docker daemon on a container instance.",
            "remarks": "For more information, see\n[Task Definition Parameter Volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide//task_definition_parameters.html#volumes).",
            "stability": "stable",
            "summary": "The list of volume definitions for the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 102
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Volume"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/base/task-definition:CommonTaskDefinitionProps"
    },
    "@aws-cdk/aws-ecs.Compatibility": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The task launch type compatibility requirement.",
        "example": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Compatibility",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 1070
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The task should specify the EC2 launch type."
          },
          "name": "EC2"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The task should specify the Fargate launch type."
          },
          "name": "FARGATE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The task can specify either the EC2 or Fargate launch types."
          },
          "name": "EC2_AND_FARGATE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The task should specify the External launch type."
          },
          "name": "EXTERNAL"
        }
      ],
      "name": "Compatibility",
      "symbolId": "lib/base/task-definition:Compatibility"
    },
    "@aws-cdk/aws-ecs.ContainerDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "A container definition is used in a task definition to describe the containers that are launched as part of a task.",
        "example": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ContainerDefinition",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ContainerDefinition class."
        },
        "locationInModule": {
          "filename": "lib/container-definition.ts",
          "line": 472
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerDefinitionProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 373
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds one or more container dependencies to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 633
          },
          "name": "addContainerDependencies",
          "parameters": [
            {
              "name": "containerDependencies",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDependency"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds an environment variable to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 605
          },
          "name": "addEnvironment",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds one or more resources to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 612
          },
          "name": "addInferenceAcceleratorResource",
          "parameters": [
            {
              "name": "inferenceAcceleratorResources",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This parameter is only supported if the task definition is using the bridge network mode.\nWarning: The --link flag is a legacy feature of Docker. It may eventually be removed.",
            "stability": "stable",
            "summary": "This method adds a link which allows containers to communicate with each other without the need for port mappings."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 537
          },
          "name": "addLink",
          "parameters": [
            {
              "name": "container",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            },
            {
              "name": "alias",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds one or more mount points for data volumes to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 551
          },
          "name": "addMountPoints",
          "parameters": [
            {
              "name": "mountPoints",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.MountPoint"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds one or more port mappings to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 581
          },
          "name": "addPortMappings",
          "parameters": [
            {
              "name": "portMappings",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.PortMapping"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This adds the correct container mountPoint and task definition volume.",
            "stability": "stable",
            "summary": "This method mounts temporary disk space to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 560
          },
          "name": "addScratch",
          "parameters": [
            {
              "name": "scratch",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ScratchSpace"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds the specified statement to the IAM task execution policy in the task definition."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 647
          },
          "name": "addToExecutionPolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds one or more ulimits to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 626
          },
          "name": "addUlimits",
          "parameters": [
            {
              "name": "ulimits",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Ulimit"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This method adds one or more volumes to the container."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 640
          },
          "name": "addVolumesFrom",
          "parameters": [
            {
              "name": "volumesFrom",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.VolumeFrom"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the host port for the requested container port if it exists."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 654
          },
          "name": "findPortMapping",
          "parameters": [
            {
              "name": "containerPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "protocol",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Protocol"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PortMapping"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Render this container definition to a CloudFormation object."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 702
          },
          "name": "renderContainerDefinition",
          "parameters": [
            {
              "docs": {
                "summary": "[disable-awslint:ref-via-interface] (unused but kept to avoid breaking change)."
              },
              "name": "_taskDefinition",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty"
            }
          }
        }
      ],
      "name": "ContainerDefinition",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "An array dependencies defined for container startup and shutdown."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 403
          },
          "name": "containerDependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDependency"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 420
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The port the container will listen on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 689
          },
          "name": "containerPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "remarks": "If the essential parameter of a container is marked as true, and that container\nfails or stops for any reason, all other containers that are part of the task are\nstopped. If the essential parameter of a container is marked as false, then its\nfailure does not affect the rest of the containers in a task.\n\nIf this parameter is omitted, a container is assumed to be essential.",
            "stability": "stable",
            "summary": "Specifies whether the container will be marked essential."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 415
          },
          "name": "essential",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of the image referenced by this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 451
          },
          "name": "imageName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "This property is only used for tasks that use the awsvpc network mode.",
            "stability": "stable",
            "summary": "The inbound rules associated with the security group the task or service will use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 670
          },
          "name": "ingressPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Whether there was at least one memory limit specified in this definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 425
          },
          "name": "memoryLimitSpecified",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The mount points for data volumes in your container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 382
          },
          "name": "mountPoints",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.MountPoint"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "Port mappings allow containers to access ports\non the host container instance to send or receive traffic.",
            "stability": "stable",
            "summary": "The list of port mappings for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 388
          },
          "name": "portMappings",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.PortMapping"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of the task definition that includes this container definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 430
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "An array of ulimits to set in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 398
          },
          "name": "ulimits",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Ulimit"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The data volumes to mount from another container in the same task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 393
          },
          "name": "volumesFrom",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.VolumeFrom"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The environment files for this container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 435
          },
          "name": "environmentFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.EnvironmentFileConfig"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Linux-specific modifications that are applied to the container, such as Linux kernel capabilities."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 377
          },
          "name": "linuxParameters",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LinuxParameters"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The log configuration specification for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 440
          },
          "name": "logDriverConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Whether this container definition references a specific JSON field of a secret stored in Secrets Manager."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 446
          },
          "name": "referencesSecretJsonField",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/container-definition:ContainerDefinition"
    },
    "@aws-cdk/aws-ecs.ContainerDefinitionOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 106
      },
      "name": "ContainerDefinitionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "This string is passed directly to the Docker daemon.\nImages in the Docker Hub registry are available by default.\nOther repositories are specified with either repository-url/image:tag or repository-url/image@digest.\nTODO: Update these to specify using classes of IContainerImage",
            "stability": "stable",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 115
          },
          "name": "image",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CMD value built into container image.",
            "remarks": "If you provide a shell command as a single string, you have to quote command-line arguments.",
            "stability": "stable",
            "summary": "The command that is passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 131
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- id of node associated with ContainerDefinition.",
            "stability": "stable",
            "summary": "The name of the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 122
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No minimum CPU units reserved.",
            "stability": "stable",
            "summary": "The minimum number of CPU units to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 138
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "When this parameter is true, networking is disabled within the container.",
            "stability": "stable",
            "summary": "Specifies whether networking is disabled within the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 147
          },
          "name": "disableNetworking",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No search domains.",
            "stability": "stable",
            "summary": "A list of DNS search domains that are presented to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 154
          },
          "name": "dnsSearchDomains",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Default DNS servers.",
            "stability": "stable",
            "summary": "A list of DNS servers that are presented to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 161
          },
          "name": "dnsServers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No labels.",
            "stability": "stable",
            "summary": "A key/value map of labels to add to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 168
          },
          "name": "dockerLabels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No security labels.",
            "stability": "stable",
            "summary": "A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 175
          },
          "name": "dockerSecurityOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Entry point configured in container.",
            "see": "https://docs.docker.com/engine/reference/builder/#entrypoint",
            "stability": "stable",
            "summary": "The ENTRYPOINT value to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 184
          },
          "name": "entryPoint",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables.",
            "stability": "stable",
            "summary": "The environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 191
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment files.",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html",
            "stability": "stable",
            "summary": "The environment files to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 200
          },
          "name": "environmentFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.EnvironmentFile"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "If the essential parameter of a container is marked as true, and that container fails\nor stops for any reason, all other containers that are part of the task are stopped.\nIf the essential parameter of a container is marked as false, then its failure does not\naffect the rest of the containers in a task. All tasks must have at least one essential container.\n\nIf this parameter is omitted, a container is assumed to be essential.",
            "stability": "stable",
            "summary": "Specifies whether the container is marked essential."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 235
          },
          "name": "essential",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No extra hosts.",
            "stability": "stable",
            "summary": "A list of hostnames and IP address mappings to append to the /etc/hosts file on the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 242
          },
          "name": "extraHosts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No GPUs assigned.",
            "stability": "stable",
            "summary": "The number of GPUs assigned to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 334
          },
          "name": "gpuCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Health check configuration from container.",
            "stability": "stable",
            "summary": "The health check command and associated configuration parameters for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 249
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.HealthCheck"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatic hostname.",
            "stability": "stable",
            "summary": "The hostname to use for your container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 256
          },
          "name": "hostname",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No inference accelerators assigned.",
            "stability": "stable",
            "summary": "The inference accelerators referenced by the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 346
          },
          "name": "inferenceAcceleratorResources",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Linux parameters.",
            "remarks": "For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).",
            "stability": "stable",
            "summary": "Linux-specific modifications that are applied to the container, such as Linux kernel capabilities."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 327
          },
          "name": "linuxParameters",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LinuxParameters"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Containers use the same logging driver that the Docker daemon uses.",
            "stability": "stable",
            "summary": "The log configuration specification for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 319
          },
          "name": "logging",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit.",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 268
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved.",
            "remarks": "When system memory is under heavy contention, Docker attempts to keep the\ncontainer memory to this soft limit. However, your container can consume more\nmemory when it needs to, up to either the hard limit specified with the memory\nparameter (if applicable), or all of the available memory on the container\ninstance, whichever comes first.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.",
            "stability": "stable",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 283
          },
          "name": "memoryReservationMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No ports are mapped.",
            "stability": "stable",
            "summary": "The port mappings to add to the container definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 340
          },
          "name": "portMappings",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.PortMapping"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user).",
            "stability": "stable",
            "summary": "Specifies whether the container is marked as privileged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 291
          },
          "name": "privileged",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "When this parameter is true, the container is given read-only access to its root file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 298
          },
          "name": "readonlyRootFilesystem",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret environment variables.",
            "stability": "stable",
            "summary": "The secret environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 207
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Time duration (in seconds) to wait before giving up on resolving dependencies for a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 214
          },
          "name": "startTimeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 221
          },
          "name": "stopTimeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No system controls are set.",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_systemcontrols",
            "stability": "stable",
            "summary": "A list of namespaced kernel parameters to set in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 355
          },
          "name": "systemControls",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.SystemControl"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "root",
            "stability": "stable",
            "summary": "The user name to use inside the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 305
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "/",
            "stability": "stable",
            "summary": "The working directory in which to run commands inside the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 312
          },
          "name": "workingDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/container-definition:ContainerDefinitionOptions"
    },
    "@aws-cdk/aws-ecs.ContainerDefinitionProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties in a container definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst containerDefinitionProps: ecs.ContainerDefinitionProps = {\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ContainerDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 361
      },
      "name": "ContainerDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The name of the task definition that includes this container definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 367
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/container-definition:ContainerDefinitionProps"
    },
    "@aws-cdk/aws-ecs.ContainerDependency": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDependency.html",
        "stability": "stable",
        "summary": "The details of a dependency on another container in the task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const containerDefinition: ecs.ContainerDefinition;\nconst containerDependency: ecs.ContainerDependency = {\n  container: containerDefinition,\n\n  // the properties below are optional\n  condition: ecs.ContainerDependencyCondition.START,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ContainerDependency",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 926
      },
      "name": "ContainerDependency",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The container to depend on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 930
          },
          "name": "container",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ContainerDependencyCondition.HEALTHY",
            "remarks": "Valid values are ContainerDependencyCondition.START, ContainerDependencyCondition.COMPLETE,\nContainerDependencyCondition.SUCCESS and ContainerDependencyCondition.HEALTHY.",
            "stability": "stable",
            "summary": "The state the container needs to be in to satisfy the dependency and proceed with startup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 939
          },
          "name": "condition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerDependencyCondition"
          }
        }
      ],
      "symbolId": "lib/container-definition:ContainerDependency"
    },
    "@aws-cdk/aws-ecs.ContainerDependencyCondition": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-ecs.ContainerDependencyCondition",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 942
      },
      "members": [
        {
          "docs": {
            "remarks": "It validates that a dependent container is started before permitting other containers to start.",
            "stability": "stable",
            "summary": "This condition emulates the behavior of links and volumes today."
          },
          "name": "START"
        },
        {
          "docs": {
            "remarks": "This can be useful for nonessential containers that run a script and then exit.",
            "stability": "stable",
            "summary": "This condition validates that a dependent container runs to completion (exits) before permitting other containers to start."
          },
          "name": "COMPLETE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "This condition is the same as COMPLETE, but it also requires that the container exits with a zero status."
          },
          "name": "SUCCESS"
        },
        {
          "docs": {
            "remarks": "This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.",
            "stability": "stable",
            "summary": "This condition validates that the dependent container passes its Docker health check before permitting other containers to start."
          },
          "name": "HEALTHY"
        }
      ],
      "name": "ContainerDependencyCondition",
      "symbolId": "lib/container-definition:ContainerDependencyCondition"
    },
    "@aws-cdk/aws-ecs.ContainerImage": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Constructs for types of container images.",
        "example": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ContainerImage",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/container-image.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "remarks": "If you already have a `DockerImageAsset` instance, you can use the\n`ContainerImage.fromDockerImageAsset` method instead.",
            "stability": "stable",
            "summary": "Reference an image that's constructed directly from sources on disk."
          },
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 36
          },
          "name": "fromAsset",
          "parameters": [
            {
              "docs": {
                "summary": "The directory containing the Dockerfile."
              },
              "name": "directory",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AssetImageProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AssetImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Use an existing `DockerImageAsset` for this container image."
          },
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 45
          },
          "name": "fromDockerImageAsset",
          "parameters": [
            {
              "docs": {
                "summary": "The `DockerImageAsset` to use for this container definition."
              },
              "name": "asset",
              "type": {
                "fqn": "@aws-cdk/aws-ecr-assets.DockerImageAsset"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Reference an image in an ECR repository."
          },
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 24
          },
          "name": "fromEcrRepository",
          "parameters": [
            {
              "name": "repository",
              "type": {
                "fqn": "@aws-cdk/aws-ecr.IRepository"
              }
            },
            {
              "name": "tag",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EcrImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Reference an image on DockerHub or another online registry."
          },
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 17
          },
          "name": "fromRegistry",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.RepositoryImageProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.RepositoryImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Use this method if the container image has already been created by another process (e.g. jib)\nand you want to add it as a container image asset.",
            "stability": "stable",
            "summary": "Use an existing tarball for this container image."
          },
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 65
          },
          "name": "fromTarball",
          "parameters": [
            {
              "docs": {
                "remarks": "You can use language-specific idioms (such as `__dirname` in Node.js)\nto create an absolute path based on the current script running directory.",
                "summary": "Absolute path to the tarball."
              },
              "name": "tarballFile",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerImage"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Called when the image is used by a ContainerDefinition."
          },
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 82
          },
          "name": "bind",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerImageConfig"
            }
          }
        }
      ],
      "name": "ContainerImage",
      "symbolId": "lib/container-image:ContainerImage"
    },
    "@aws-cdk/aws-ecs.ContainerImageConfig": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The configuration for creating a container image.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst containerImageConfig: ecs.ContainerImageConfig = {\n  imageName: 'imageName',\n\n  // the properties below are optional\n  repositoryCredentials: {\n    credentialsParameter: 'credentialsParameter',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ContainerImageConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-image.ts",
        "line": 88
      },
      "name": "ContainerImageConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Specifies the name of the container image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 92
          },
          "name": "imageName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Specifies the credentials used to access the image repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-image.ts",
            "line": 97
          },
          "name": "repositoryCredentials",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RepositoryCredentialsProperty"
          }
        }
      ],
      "symbolId": "lib/container-image:ContainerImageConfig"
    },
    "@aws-cdk/aws-ecs.CpuArchitecture": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The CpuArchitecture for Fargate Runtime Platform.",
        "example": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.CpuArchitecture",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/runtime-platform.ts",
        "line": 4
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-runtimeplatform.html#cfn-ecs-taskdefinition-runtimeplatform-cpuarchitecture for all available cpu architecture.",
            "stability": "stable",
            "summary": "Other cpu architecture."
          },
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 23
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "cpu architecture."
              },
              "name": "cpuArchitecture",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CpuArchitecture"
            }
          },
          "static": true
        }
      ],
      "name": "CpuArchitecture",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "ARM64."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 8
          },
          "name": "ARM64",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CpuArchitecture"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "X86_64."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 13
          },
          "name": "X86_64",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CpuArchitecture"
          }
        }
      ],
      "symbolId": "lib/runtime-platform:CpuArchitecture"
    },
    "@aws-cdk/aws-ecs.CpuUtilizationScalingProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for enabling scaling based on CPU utilization.",
        "example": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
      "interfaces": [
        "@aws-cdk/aws-applicationautoscaling.BaseTargetTrackingProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/scalable-task-count.ts",
        "line": 103
      },
      "name": "CpuUtilizationScalingProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The target value for CPU utilization across all tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 107
          },
          "name": "targetUtilizationPercent",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/base/scalable-task-count:CpuUtilizationScalingProps"
    },
    "@aws-cdk/aws-ecs.DeploymentCircuitBreaker": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The deployment circuit breaker to use for the service.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 50
      },
      "name": "DeploymentCircuitBreaker",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether to enable rollback on deployment failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 55
          },
          "name": "rollback",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/base/base-service:DeploymentCircuitBreaker"
    },
    "@aws-cdk/aws-ecs.DeploymentController": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The deployment controller to use for the service.",
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.DeploymentController",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 38
      },
      "name": "DeploymentController",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "DeploymentControllerType.ECS",
            "stability": "stable",
            "summary": "The deployment controller type to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 44
          },
          "name": "type",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentControllerType"
          }
        }
      ],
      "symbolId": "lib/base/base-service:DeploymentController"
    },
    "@aws-cdk/aws-ecs.DeploymentControllerType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The deployment controller type to use for the service.",
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.DeploymentControllerType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 1090
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The rolling update (ECS) deployment type involves replacing the current running version of the container with the latest version."
          },
          "name": "ECS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by AWS CodeDeploy."
          },
          "name": "CODE_DEPLOY"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The external (EXTERNAL) deployment type enables you to use any third-party deployment controller."
          },
          "name": "EXTERNAL"
        }
      ],
      "name": "DeploymentControllerType",
      "symbolId": "lib/base/base-service:DeploymentControllerType"
    },
    "@aws-cdk/aws-ecs.Device": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "A container instance host device.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst device: ecs.Device = {\n  hostPath: 'hostPath',\n\n  // the properties below are optional\n  containerPath: 'containerPath',\n  permissions: [ecs.DevicePermission.READ],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Device",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 126
      },
      "name": "Device",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The path for the device on the host container instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 137
          },
          "name": "hostPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Same path as the host",
            "stability": "stable",
            "summary": "The path inside the container at which to expose the host device."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 132
          },
          "name": "containerPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Readonly",
            "remarks": "By default, the container has permissions for read, write, and mknod for the device.",
            "stability": "stable",
            "summary": "The explicit permissions to provide to the container for the device."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 145
          },
          "name": "permissions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.DevicePermission"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/linux-parameters:Device"
    },
    "@aws-cdk/aws-ecs.DevicePermission": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Permissions for device access."
      },
      "fqn": "@aws-cdk/aws-ecs.DevicePermission",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 232
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Read."
          },
          "name": "READ"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Write."
          },
          "name": "WRITE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Make a node."
          },
          "name": "MKNOD"
        }
      ],
      "name": "DevicePermission",
      "symbolId": "lib/linux-parameters:DevicePermission"
    },
    "@aws-cdk/aws-ecs.DockerVolumeConfiguration": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "Docker volumes are only supported when you are using the EC2 launch type.",
        "stability": "stable",
        "summary": "The configuration for a Docker volume.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst dockerVolumeConfiguration: ecs.DockerVolumeConfiguration = {\n  driver: 'driver',\n  scope: ecs.Scope.TASK,\n\n  // the properties below are optional\n  autoprovision: false,\n  driverOpts: {\n    driverOptsKey: 'driverOpts',\n  },\n  labels: {\n    labelsKey: 'labels',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.DockerVolumeConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 955
      },
      "name": "DockerVolumeConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Docker volume driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 966
          },
          "name": "driver",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The scope for the Docker volume that determines its lifecycle."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 982
          },
          "name": "scope",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Scope"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If true is specified, the Docker volume will be created for you.",
            "stability": "stable",
            "summary": "Specifies whether the Docker volume should be created if it does not already exist."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 962
          },
          "name": "autoprovision",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No options",
            "stability": "stable",
            "summary": "A map of Docker driver-specific options passed through."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 972
          },
          "name": "driverOpts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No labels",
            "stability": "stable",
            "summary": "Custom metadata to add to your Docker volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 978
          },
          "name": "labels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/base/task-definition:DockerVolumeConfiguration"
    },
    "@aws-cdk/aws-ecs.Ec2Service": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.BaseService",
      "docs": {
        "custom": {
          "resource": "AWS::ECS::Service",
          "exampleMetadata": "infused"
        },
        "stability": "stable",
        "summary": "This creates a service using the EC2 launch type on an ECS cluster.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));"
      },
      "fqn": "@aws-cdk/aws-ecs.Ec2Service",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the Ec2Service class."
        },
        "locationInModule": {
          "filename": "lib/ec2/ec2-service.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Ec2ServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.IEc2Service"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ec2/ec2-service.ts",
        "line": 123
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports from the specified service ARN."
          },
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 128
          },
          "name": "fromEc2ServiceArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "ec2ServiceArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IEc2Service"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports from the specified service attributes."
          },
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 139
          },
          "name": "fromEc2ServiceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Ec2ServiceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IBaseService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "For more information, see\n[Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).",
            "stability": "stable",
            "summary": "Adds one or more placement constraints to use for tasks in the service."
          },
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 239
          },
          "name": "addPlacementConstraints",
          "parameters": [
            {
              "name": "constraints",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "For more information, see\n[Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).",
            "stability": "stable",
            "summary": "Adds one or more placement strategies to use for tasks in the service."
          },
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 225
          },
          "name": "addPlacementStrategies",
          "parameters": [
            {
              "name": "strategies",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Validates this Ec2Service."
          },
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 248
          },
          "name": "validate",
          "overrides": "@aws-cdk/core.Construct",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Ec2Service",
      "symbolId": "lib/ec2/ec2-service:Ec2Service"
    },
    "@aws-cdk/aws-ecs.Ec2ServiceAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties to import from the service using the EC2 launch type.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\nconst ec2ServiceAttributes: ecs.Ec2ServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Ec2ServiceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ec2/ec2-service.ts",
        "line": 97
      },
      "name": "Ec2ServiceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 101
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- either this, or {@link serviceName}, is required",
            "stability": "stable",
            "summary": "The service ARN."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 108
          },
          "name": "serviceArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- either this, or {@link serviceArn}, is required",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 115
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/ec2/ec2-service:Ec2ServiceAttributes"
    },
    "@aws-cdk/aws-ecs.Ec2ServiceProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for defining a service using the EC2 launch type.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Ec2ServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseServiceOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ec2/ec2-service.ts",
        "line": 14
      },
      "name": "Ec2ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 20
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If true, each task will receive a public IP address.\n\nThis property is only used for tasks that use the awsvpc network mode.",
            "stability": "stable",
            "summary": "Specifies whether the task's elastic network interface receives a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 30
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If true, the service scheduler deploys exactly one task on each container instance in your cluster.\n\nWhen you are using this strategy, do not specify a desired number of tasks orany task placement strategies.",
            "stability": "stable",
            "summary": "Specifies whether the service will use the daemon scheduling strategy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 84
          },
          "name": "daemon",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No constraints.",
            "remarks": "For more information, see\n[Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).",
            "stability": "stable",
            "summary": "The placement constraints to use for tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 66
          },
          "name": "placementConstraints",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No strategies.",
            "remarks": "For more information, see\n[Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).",
            "stability": "stable",
            "summary": "The placement strategies to use for tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 74
          },
          "name": "placementStrategies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new security group is created.",
            "deprecated": "use securityGroups instead.",
            "remarks": "If you do not specify a security group, a new security group is created.\n\nThis property is only used for tasks that use the awsvpc network mode.",
            "stability": "deprecated",
            "summary": "The security groups to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 49
          },
          "name": "securityGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new security group is created.",
            "remarks": "If you do not specify a security group, a new security group is created.\n\nThis property is only used for tasks that use the awsvpc network mode.",
            "stability": "stable",
            "summary": "The security groups to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 58
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.",
            "remarks": "This property is only used for tasks that use the awsvpc network mode.",
            "stability": "stable",
            "summary": "The subnets to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-service.ts",
            "line": 39
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/ec2/ec2-service:Ec2ServiceProps"
    },
    "@aws-cdk/aws-ecs.Ec2TaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.TaskDefinition",
      "docs": {
        "custom": {
          "resource": "AWS::ECS::TaskDefinition",
          "exampleMetadata": "infused"
        },
        "stability": "stable",
        "summary": "The details of a task definition run on an EC2 cluster.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the Ec2TaskDefinition class."
        },
        "locationInModule": {
          "filename": "lib/ec2/ec2-task-definition.ts",
          "line": 115
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.IEc2TaskDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ec2/ec2-task-definition.ts",
        "line": 85
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports a task definition from the specified task definition ARN."
          },
          "locationInModule": {
            "filename": "lib/ec2/ec2-task-definition.ts",
            "line": 90
          },
          "name": "fromEc2TaskDefinitionArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "ec2TaskDefinitionArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IEc2TaskDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports an existing Ec2 task definition from its attributes."
          },
          "locationInModule": {
            "filename": "lib/ec2/ec2-task-definition.ts",
            "line": 99
          },
          "name": "fromEc2TaskDefinitionAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinitionAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IEc2TaskDefinition"
            }
          },
          "static": true
        }
      ],
      "name": "Ec2TaskDefinition",
      "symbolId": "lib/ec2/ec2-task-definition:Ec2TaskDefinition"
    },
    "@aws-cdk/aws-ecs.Ec2TaskDefinitionAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Attributes used to import an existing EC2 task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst ec2TaskDefinitionAttributes: ecs.Ec2TaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinitionAttributes",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ec2/ec2-task-definition.ts",
        "line": 76
      },
      "name": "Ec2TaskDefinitionAttributes",
      "symbolId": "lib/ec2/ec2-task-definition:Ec2TaskDefinitionAttributes"
    },
    "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for a task definition run on an EC2 cluster.",
        "example": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ec2/ec2-task-definition.ts",
        "line": 19
      },
      "name": "Ec2TaskDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No inference accelerators.",
            "remarks": "Not supported in Fargate.",
            "stability": "stable",
            "summary": "The inference accelerators to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-task-definition.ts",
            "line": 63
          },
          "name": "inferenceAccelerators",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.InferenceAccelerator"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- IpcMode used by the task is not specified",
            "remarks": "Not supported in Fargate and Windows containers.",
            "stability": "stable",
            "summary": "The IPC resource namespace to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-task-definition.ts",
            "line": 45
          },
          "name": "ipcMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.IpcMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- NetworkMode.BRIDGE for EC2 tasks, AWS_VPC for Fargate tasks.",
            "remarks": "The valid values are NONE, BRIDGE, AWS_VPC, and HOST.",
            "stability": "stable",
            "summary": "The Docker networking mode to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-task-definition.ts",
            "line": 27
          },
          "name": "networkMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.NetworkMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- PidMode used by the task is not specified",
            "remarks": "Not supported in Fargate and Windows containers.",
            "stability": "stable",
            "summary": "The process namespace to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-task-definition.ts",
            "line": 54
          },
          "name": "pidMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PidMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No placement constraints.",
            "remarks": "You can\nspecify a maximum of 10 constraints per task (this limit includes\nconstraints in the task definition and those specified at run time).",
            "stability": "stable",
            "summary": "An array of placement constraint objects to use for the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ec2/ec2-task-definition.ts",
            "line": 36
          },
          "name": "placementConstraints",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/ec2/ec2-task-definition:Ec2TaskDefinitionProps"
    },
    "@aws-cdk/aws-ecs.EcrImage": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.ContainerImage",
      "docs": {
        "stability": "stable",
        "summary": "An image from an Amazon ECR repository.",
        "example": "import * as ecr from '@aws-cdk/aws-ecr';\n\nconst repo = ecr.Repository.fromRepositoryName(this, 'batch-job-repo', 'todo-list');\n\nnew batch.JobDefinition(this, 'batch-job-def-from-ecr', {\n  container: {\n    image: new ecs.EcrImage(repo, 'latest'),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EcrImage",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the EcrImage class."
        },
        "locationInModule": {
          "filename": "lib/images/ecr.ts",
          "line": 25
        },
        "parameters": [
          {
            "name": "repository",
            "type": {
              "fqn": "@aws-cdk/aws-ecr.IRepository"
            }
          },
          {
            "name": "tagOrDigest",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/images/ecr.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the image is used by a ContainerDefinition."
          },
          "locationInModule": {
            "filename": "lib/images/ecr.ts",
            "line": 31
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.ContainerImage",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerImageConfig"
            }
          }
        }
      ],
      "name": "EcrImage",
      "properties": [
        {
          "docs": {
            "remarks": "For example, 012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest or\n012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE.",
            "stability": "stable",
            "summary": "The image name. Images in Amazon ECR repositories can be specified by either using the full registry/repository:tag or registry/repository@digest."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/images/ecr.ts",
            "line": 20
          },
          "name": "imageName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/images/ecr:EcrImage"
    },
    "@aws-cdk/aws-ecs.EcsOptimizedAmi": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "deprecated": "see {@link EcsOptimizedImage#amazonLinux}, {@link EcsOptimizedImage#amazonLinux} and {@link EcsOptimizedImage#windows}",
        "stability": "deprecated",
        "summary": "Construct a Linux or Windows machine image from the latest ECS Optimized AMI published in SSM.",
        "example": "declare const vpc: ec2.Vpc;\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EcsOptimizedAmi",
      "initializer": {
        "docs": {
          "stability": "deprecated",
          "summary": "Constructs a new instance of the EcsOptimizedAmi class."
        },
        "locationInModule": {
          "filename": "lib/amis.ts",
          "line": 112
        },
        "parameters": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EcsOptimizedAmiProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ec2.IMachineImage"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 101
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Return the correct image."
          },
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 148
          },
          "name": "getImage",
          "overrides": "@aws-cdk/aws-ec2.IMachineImage",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ec2.MachineImageConfig"
            }
          }
        }
      ],
      "name": "EcsOptimizedAmi",
      "symbolId": "lib/amis:EcsOptimizedAmi"
    },
    "@aws-cdk/aws-ecs.EcsOptimizedAmiProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "deprecated": "see {@link EcsOptimizedImage}",
        "stability": "deprecated",
        "summary": "The properties that define which ECS-optimized AMI is used.",
        "example": "declare const vpc: ec2.Vpc;\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EcsOptimizedAmiProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 49
      },
      "name": "EcsOptimizedAmiProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "By default, the newest image is used on each deployment. This will cause\ninstances to be replaced whenever a new version is released, and may cause\ndowntime if there aren't enough running instances in the AutoScalingGroup\nto reschedule the tasks on.\n\nIf set to true, the AMI ID will be cached in `cdk.context.json` and the\nsame value will be used on future runs. Your instances will not be replaced\nbut your AMI version will grow old over time. To refresh the AMI lookup,\nyou will have to evict the value from the cache using the `cdk context`\ncommand. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\nmore information.\n\nCan not be set to `true` in environment-agnostic stacks.",
            "stability": "deprecated",
            "summary": "Whether the AMI ID is cached to be stable between deployments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 90
          },
          "name": "cachedInContext",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "AmazonLinuxGeneration.AmazonLinux2",
            "stability": "deprecated",
            "summary": "The Amazon Linux generation to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 55
          },
          "name": "generation",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.AmazonLinuxGeneration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "AmiHardwareType.Standard",
            "stability": "deprecated",
            "summary": "The ECS-optimized AMI variant to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 69
          },
          "name": "hardwareType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.AmiHardwareType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none, uses Linux generation",
            "stability": "deprecated",
            "summary": "The Windows Server version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 62
          },
          "name": "windowsVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.WindowsOptimizedVersion"
          }
        }
      ],
      "symbolId": "lib/amis:EcsOptimizedAmiProps"
    },
    "@aws-cdk/aws-ecs.EcsOptimizedImage": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Construct a Linux or Windows machine image from the latest ECS Optimized AMI published in SSM.",
        "example": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImage",
      "interfaces": [
        "@aws-cdk/aws-ec2.IMachineImage"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 189
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Construct an Amazon Linux AMI image from the latest ECS Optimized AMI published in SSM."
          },
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 206
          },
          "name": "amazonLinux",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Construct an Amazon Linux 2 image from the latest ECS Optimized AMI published in SSM."
          },
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 195
          },
          "name": "amazonLinux2",
          "parameters": [
            {
              "docs": {
                "summary": "ECS-optimized AMI variant to use."
              },
              "name": "hardwareType",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AmiHardwareType"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Construct a Windows image from the latest ECS Optimized AMI published in SSM."
          },
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 218
          },
          "name": "windows",
          "parameters": [
            {
              "docs": {
                "summary": "Windows Version to use."
              },
              "name": "windowsVersion",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.WindowsOptimizedVersion"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the correct image."
          },
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 261
          },
          "name": "getImage",
          "overrides": "@aws-cdk/aws-ec2.IMachineImage",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ec2.MachineImageConfig"
            }
          }
        }
      ],
      "name": "EcsOptimizedImage",
      "symbolId": "lib/amis:EcsOptimizedImage"
    },
    "@aws-cdk/aws-ecs.EcsOptimizedImageOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Additional configuration properties for EcsOptimizedImage factory functions.",
        "example": "declare const vpc: ec2.Vpc;\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImageOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 163
      },
      "name": "EcsOptimizedImageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "By default, the newest image is used on each deployment. This will cause\ninstances to be replaced whenever a new version is released, and may cause\ndowntime if there aren't enough running instances in the AutoScalingGroup\nto reschedule the tasks on.\n\nIf set to true, the AMI ID will be cached in `cdk.context.json` and the\nsame value will be used on future runs. Your instances will not be replaced\nbut your AMI version will grow old over time. To refresh the AMI lookup,\nyou will have to evict the value from the cache using the `cdk context`\ncommand. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\nmore information.\n\nCan not be set to `true` in environment-agnostic stacks.",
            "stability": "stable",
            "summary": "Whether the AMI ID is cached to be stable between deployments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/amis.ts",
            "line": 183
          },
          "name": "cachedInContext",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/amis:EcsOptimizedImageOptions"
    },
    "@aws-cdk/aws-ecs.EcsTarget": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EcsTarget",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 59
      },
      "name": "EcsTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 63
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Listener and properties for adding target group to the listener."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 87
          },
          "name": "listener",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ListenerConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "ID for a target group to be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 82
          },
          "name": "newTargetGroupId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Container port of the first added port mapping.",
            "remarks": "Only applicable when using application/network load balancers.",
            "stability": "stable",
            "summary": "The port number of the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 70
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Protocol.TCP",
            "remarks": "Only applicable when using application load balancers.",
            "stability": "stable",
            "summary": "The protocol used for the port mapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 77
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Protocol"
          }
        }
      ],
      "symbolId": "lib/base/base-service:EcsTarget"
    },
    "@aws-cdk/aws-ecs.EfsVolumeConfiguration": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The configuration for an Elastic FileSystem volume.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst efsVolumeConfiguration: ecs.EfsVolumeConfiguration = {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  authorizationConfig: {\n    accessPointId: 'accessPointId',\n    iam: 'iam',\n  },\n  rootDirectory: 'rootDirectory',\n  transitEncryption: 'transitEncryption',\n  transitEncryptionPort: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EfsVolumeConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 1013
      },
      "name": "EfsVolumeConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Amazon EFS file system ID to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 1017
          },
          "name": "fileSystemId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No configuration.",
            "stability": "stable",
            "summary": "The authorization configuration details for the Amazon EFS file system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 1047
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.AuthorizationConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "The root of the Amazon EFS volume",
            "remarks": "Specifying / will have the same effect as omitting this parameter.",
            "stability": "stable",
            "summary": "The directory within the Amazon EFS file system to mount as the root directory inside the host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 1024
          },
          "name": "rootDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "DISABLED",
            "remarks": "Transit encryption must be enabled if Amazon EFS IAM authorization is used.\n\nValid values: ENABLED | DISABLED",
            "stability": "stable",
            "summary": "Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 1034
          },
          "name": "transitEncryption",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Port selection strategy that the Amazon EFS mount helper uses.",
            "remarks": "EFS mount helper uses.",
            "stability": "stable",
            "summary": "The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 1041
          },
          "name": "transitEncryptionPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:EfsVolumeConfiguration"
    },
    "@aws-cdk/aws-ecs.EnvironmentFile": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Constructs for types of environment files.",
        "example": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EnvironmentFile",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/environment-file.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Loads the environment file from a local disk path."
          },
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 15
          },
          "name": "fromAsset",
          "parameters": [
            {
              "docs": {
                "summary": "Local disk path."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-s3-assets.AssetOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AssetEnvironmentFile"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "`S3EnvironmentFile` associated with the specified S3 object.",
            "stability": "stable",
            "summary": "Loads the environment file from an S3 bucket."
          },
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 27
          },
          "name": "fromBucket",
          "parameters": [
            {
              "docs": {
                "summary": "The S3 bucket."
              },
              "name": "bucket",
              "type": {
                "fqn": "@aws-cdk/aws-s3.IBucket"
              }
            },
            {
              "docs": {
                "summary": "The object key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Optional S3 object version."
              },
              "name": "objectVersion",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.S3EnvironmentFile"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Called when the container is initialized to allow this object to bind to the stack."
          },
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 37
          },
          "name": "bind",
          "parameters": [
            {
              "docs": {
                "summary": "The binding scope."
              },
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EnvironmentFileConfig"
            }
          }
        }
      ],
      "name": "EnvironmentFile",
      "symbolId": "lib/environment-file:EnvironmentFile"
    },
    "@aws-cdk/aws-ecs.EnvironmentFileConfig": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Configuration for the environment file.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst environmentFileConfig: ecs.EnvironmentFileConfig = {\n  fileType: ecs.EnvironmentFileType.S3,\n  s3Location: {\n    bucketName: 'bucketName',\n    objectKey: 'objectKey',\n\n    // the properties below are optional\n    objectVersion: 'objectVersion',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.EnvironmentFileConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/environment-file.ts",
        "line": 108
      },
      "name": "EnvironmentFileConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The type of environment file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 112
          },
          "name": "fileType",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.EnvironmentFileType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The location of the environment file in S3."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 117
          },
          "name": "s3Location",
          "type": {
            "fqn": "@aws-cdk/aws-s3.Location"
          }
        }
      ],
      "symbolId": "lib/environment-file:EnvironmentFileConfig"
    },
    "@aws-cdk/aws-ecs.EnvironmentFileType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Type of environment file to be included in the container definition."
      },
      "fqn": "@aws-cdk/aws-ecs.EnvironmentFileType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/environment-file.ts",
        "line": 123
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Environment file hosted on S3, referenced by object ARN."
          },
          "name": "S3"
        }
      ],
      "name": "EnvironmentFileType",
      "symbolId": "lib/environment-file:EnvironmentFileType"
    },
    "@aws-cdk/aws-ecs.ExecuteCommandConfiguration": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "For more information, see\n[ExecuteCommandConfiguration] https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandconfiguration.html",
        "stability": "stable",
        "summary": "The details of the execute command configuration.",
        "example": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 946
      },
      "name": "ExecuteCommandConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "The AWS Key Management Service key ID to encrypt the data between the local client and the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 952
          },
          "name": "kmsKey",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-kms.IKey"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.",
            "stability": "stable",
            "summary": "The log configuration for the results of the execute command actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 959
          },
          "name": "logConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "The log settings to use for logging the execute command session."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 966
          },
          "name": "logging",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogging"
          }
        }
      ],
      "symbolId": "lib/cluster:ExecuteCommandConfiguration"
    },
    "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "The logs can be sent to CloudWatch Logs and/ or an Amazon S3 bucket.\nFor more information, see [ExecuteCommandLogConfiguration] https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandlogconfiguration.html",
        "stability": "stable",
        "summary": "The log configuration for the results of the execute command actions.",
        "example": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 994
      },
      "name": "ExecuteCommandLogConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- encryption will be disabled.",
            "stability": "stable",
            "summary": "Whether or not to enable encryption on the CloudWatch logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1000
          },
          "name": "cloudWatchEncryptionEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "The CloudWatch log group must already be created.",
            "stability": "stable",
            "summary": "The name of the CloudWatch log group to send logs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1006
          },
          "name": "cloudWatchLogGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-logs.ILogGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "The S3 bucket must already be created.",
            "stability": "stable",
            "summary": "The name of the S3 bucket to send logs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1013
          },
          "name": "s3Bucket",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-s3.IBucket"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- encryption will be disabled.",
            "stability": "stable",
            "summary": "Whether or not to enable encryption on the CloudWatch logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1020
          },
          "name": "s3EncryptionEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "An optional folder in the S3 bucket to place logs in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 1027
          },
          "name": "s3KeyPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cluster:ExecuteCommandLogConfiguration"
    },
    "@aws-cdk/aws-ecs.ExecuteCommandLogging": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "For more information, see\n[Logging] https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-cluster-executecommandconfiguration.html#cfn-ecs-cluster-executecommandconfiguration-logging",
        "stability": "stable",
        "summary": "The log settings to use to for logging the execute command session.",
        "example": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogging",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 973
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The execute command session is not logged."
          },
          "name": "NONE"
        },
        {
          "docs": {
            "remarks": "If no logging parameter is specified, it defaults to this value. If no awslogs log driver is configured in the task definition, the output won't be logged.",
            "stability": "stable",
            "summary": "The awslogs configuration in the task definition is used."
          },
          "name": "DEFAULT"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Specify the logging details as a part of logConfiguration."
          },
          "name": "OVERRIDE"
        }
      ],
      "name": "ExecuteCommandLogging",
      "symbolId": "lib/cluster:ExecuteCommandLogging"
    },
    "@aws-cdk/aws-ecs.ExternalService": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.BaseService",
      "docs": {
        "custom": {
          "resource": "AWS::ECS::Service",
          "exampleMetadata": "infused"
        },
        "stability": "stable",
        "summary": "This creates a service using the External launch type on an ECS cluster.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.ExternalService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ExternalService class."
        },
        "locationInModule": {
          "filename": "lib/external/external-service.ts",
          "line": 91
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ExternalServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.IExternalService"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/external/external-service.ts",
        "line": 68
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports from the specified service ARN."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 73
          },
          "name": "fromExternalServiceArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "externalServiceArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IExternalService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports from the specified service attributes."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 84
          },
          "name": "fromExternalServiceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ExternalServiceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IBaseService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as `associateCloudMapService` is not supported for external service."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 187
          },
          "name": "associateCloudMapService",
          "overrides": "@aws-cdk/aws-ecs.BaseService",
          "parameters": [
            {
              "name": "_options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as `attachToApplicationTargetGroup` is not supported for external service."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 144
          },
          "name": "attachToApplicationTargetGroup",
          "overrides": "@aws-cdk/aws-ecs.BaseService",
          "parameters": [
            {
              "name": "_targetGroup",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.IApplicationTargetGroup"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancingv2.LoadBalancerTargetProps"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as `autoScaleTaskCount` is not supported for external service."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 173
          },
          "name": "autoScaleTaskCount",
          "overrides": "@aws-cdk/aws-ecs.BaseService",
          "parameters": [
            {
              "name": "_props",
              "type": {
                "fqn": "@aws-cdk/aws-applicationautoscaling.EnableScalingProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ScalableTaskCount"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as `configureAwsVpcNetworkingWithSecurityGroups` is not supported for external service."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 166
          },
          "name": "configureAwsVpcNetworkingWithSecurityGroups",
          "overrides": "@aws-cdk/aws-ecs.BaseService",
          "parameters": [
            {
              "name": "_vpc",
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            },
            {
              "name": "_assignPublicIp",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            },
            {
              "name": "_vpcSubnets",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
              }
            },
            {
              "name": "_securityGroups",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as `enableCloudMap` is not supported for external service."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 180
          },
          "name": "enableCloudMap",
          "overrides": "@aws-cdk/aws-ecs.BaseService",
          "parameters": [
            {
              "name": "_options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.Service"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as `loadBalancerTarget` is not supported for external service."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 151
          },
          "name": "loadBalancerTarget",
          "overrides": "@aws-cdk/aws-ecs.BaseService",
          "parameters": [
            {
              "name": "_options",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.LoadBalancerTargetOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IEcsLoadBalancerTarget"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as `registerLoadBalancerTargets` is not supported for external service."
          },
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 158
          },
          "name": "registerLoadBalancerTargets",
          "overrides": "@aws-cdk/aws-ecs.BaseService",
          "parameters": [
            {
              "name": "_targets",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.EcsTarget"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "ExternalService",
      "symbolId": "lib/external/external-service:ExternalService"
    },
    "@aws-cdk/aws-ecs.ExternalServiceAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties to import from the service using the External launch type.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\nconst externalServiceAttributes: ecs.ExternalServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ExternalServiceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/external/external-service.ts",
        "line": 42
      },
      "name": "ExternalServiceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 46
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- either this, or {@link serviceName}, is required",
            "stability": "stable",
            "summary": "The service ARN."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 53
          },
          "name": "serviceArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- either this, or {@link serviceArn}, is required",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 60
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/external/external-service:ExternalServiceAttributes"
    },
    "@aws-cdk/aws-ecs.ExternalServiceProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for defining a service using the External launch type.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ExternalServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseServiceOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/external/external-service.ts",
        "line": 15
      },
      "name": "ExternalServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 21
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new security group is created.",
            "remarks": "If you do not specify a security group, a new security group is created.",
            "stability": "stable",
            "summary": "The security groups to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/external/external-service.ts",
            "line": 29
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/external/external-service:ExternalServiceProps"
    },
    "@aws-cdk/aws-ecs.ExternalTaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.TaskDefinition",
      "docs": {
        "custom": {
          "resource": "AWS::ECS::TaskDefinition",
          "exampleMetadata": "infused"
        },
        "stability": "stable",
        "summary": "The details of a task definition run on an External cluster.",
        "example": "const externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinition",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ExternalTaskDefinition class."
        },
        "locationInModule": {
          "filename": "lib/external/external-task-definition.ts",
          "line": 69
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.IExternalTaskDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/external/external-task-definition.ts",
        "line": 39
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports a task definition from the specified task definition ARN."
          },
          "locationInModule": {
            "filename": "lib/external/external-task-definition.ts",
            "line": 44
          },
          "name": "fromEc2TaskDefinitionArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "externalTaskDefinitionArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IExternalTaskDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports an existing External task definition from its attributes."
          },
          "locationInModule": {
            "filename": "lib/external/external-task-definition.ts",
            "line": 53
          },
          "name": "fromExternalTaskDefinitionAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinitionAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IExternalTaskDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Overriden method to throw error as interface accelerators are not supported for external tasks."
          },
          "locationInModule": {
            "filename": "lib/external/external-task-definition.ts",
            "line": 80
          },
          "name": "addInferenceAccelerator",
          "overrides": "@aws-cdk/aws-ecs.TaskDefinition",
          "parameters": [
            {
              "name": "_inferenceAccelerator",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.InferenceAccelerator"
              }
            }
          ]
        }
      ],
      "name": "ExternalTaskDefinition",
      "symbolId": "lib/external/external-task-definition:ExternalTaskDefinition"
    },
    "@aws-cdk/aws-ecs.ExternalTaskDefinitionAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Attributes used to import an existing External task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst externalTaskDefinitionAttributes: ecs.ExternalTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinitionAttributes",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/external/external-task-definition.ts",
        "line": 30
      },
      "name": "ExternalTaskDefinitionAttributes",
      "symbolId": "lib/external/external-task-definition:ExternalTaskDefinitionAttributes"
    },
    "@aws-cdk/aws-ecs.ExternalTaskDefinitionProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for a task definition run on an External cluster.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const proxyConfiguration: ecs.ProxyConfiguration;\ndeclare const role: iam.Role;\nconst externalTaskDefinitionProps: ecs.ExternalTaskDefinitionProps = {\n  executionRole: role,\n  family: 'family',\n  proxyConfiguration: proxyConfiguration,\n  taskRole: role,\n  volumes: [{\n    name: 'name',\n\n    // the properties below are optional\n    dockerVolumeConfiguration: {\n      driver: 'driver',\n      scope: ecs.Scope.TASK,\n\n      // the properties below are optional\n      autoprovision: false,\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n    },\n    efsVolumeConfiguration: {\n      fileSystemId: 'fileSystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n  }],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/external/external-task-definition.ts",
        "line": 16
      },
      "name": "ExternalTaskDefinitionProps",
      "symbolId": "lib/external/external-task-definition:ExternalTaskDefinitionProps"
    },
    "@aws-cdk/aws-ecs.FargatePlatformVersion": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html",
        "stability": "stable",
        "summary": "The platform version on which to run your service.",
        "example": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/fargate/fargate-service.ts",
        "line": 169
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The latest, recommended platform version."
          },
          "name": "LATEST"
        },
        {
          "docs": {
            "remarks": "Supports EFS endpoints, CAP_SYS_PTRACE Linux capability,\nnetwork performance metrics in CloudWatch Container Insights,\nconsolidated 20 GB ephemeral volume.",
            "stability": "stable",
            "summary": "Version 1.4.0."
          },
          "name": "VERSION1_4"
        },
        {
          "docs": {
            "remarks": "Supports secrets, task recycling.",
            "stability": "stable",
            "summary": "Version 1.3.0."
          },
          "name": "VERSION1_3"
        },
        {
          "docs": {
            "remarks": "Supports private registries.",
            "stability": "stable",
            "summary": "Version 1.2.0."
          },
          "name": "VERSION1_2"
        },
        {
          "docs": {
            "remarks": "Supports task metadata, health checks, service discovery.",
            "stability": "stable",
            "summary": "Version 1.1.0."
          },
          "name": "VERSION1_1"
        },
        {
          "docs": {
            "remarks": "Based on Amazon Linux 2017.09.",
            "stability": "stable",
            "summary": "Initial release."
          },
          "name": "VERSION1_0"
        }
      ],
      "name": "FargatePlatformVersion",
      "symbolId": "lib/fargate/fargate-service:FargatePlatformVersion"
    },
    "@aws-cdk/aws-ecs.FargateService": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.BaseService",
      "docs": {
        "custom": {
          "resource": "AWS::ECS::Service",
          "exampleMetadata": "infused"
        },
        "stability": "stable",
        "summary": "This creates a service using the Fargate launch type on an ECS cluster.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);"
      },
      "fqn": "@aws-cdk/aws-ecs.FargateService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the FargateService class."
        },
        "locationInModule": {
          "filename": "lib/fargate/fargate-service.ts",
          "line": 123
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.FargateServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.IFargateService"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/fargate-service.ts",
        "line": 100
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports from the specified service ARN."
          },
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 105
          },
          "name": "fromFargateServiceArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fargateServiceArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IFargateService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports from the specified service attributes."
          },
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 116
          },
          "name": "fromFargateServiceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.FargateServiceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IBaseService"
            }
          },
          "static": true
        }
      ],
      "name": "FargateService",
      "symbolId": "lib/fargate/fargate-service:FargateService"
    },
    "@aws-cdk/aws-ecs.FargateServiceAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties to import from the service using the Fargate launch type.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\nconst fargateServiceAttributes: ecs.FargateServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FargateServiceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/fargate-service.ts",
        "line": 74
      },
      "name": "FargateServiceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 78
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- either this, or {@link serviceName}, is required",
            "stability": "stable",
            "summary": "The service ARN."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 85
          },
          "name": "serviceArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- either this, or {@link serviceArn}, is required",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 92
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/fargate/fargate-service:FargateServiceAttributes"
    },
    "@aws-cdk/aws-ecs.FargateServiceProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for defining a service using the Fargate launch type.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FargateServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseServiceOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/fargate-service.ts",
        "line": 13
      },
      "name": "FargateServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 19
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If true, each task will receive a public IP address.",
            "stability": "stable",
            "summary": "Specifies whether the task's elastic network interface receives a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 28
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Latest",
            "remarks": "If one is not specified, the LATEST platform version is used by default. For more information, see\n[AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The platform version on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 61
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new security group is created.",
            "deprecated": "use securityGroups instead.",
            "remarks": "If you do not specify a security group, a new security group is created.",
            "stability": "deprecated",
            "summary": "The security groups to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 43
          },
          "name": "securityGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new security group is created.",
            "remarks": "If you do not specify a security group, a new security group is created.",
            "stability": "stable",
            "summary": "The security groups to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 50
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.",
            "stability": "stable",
            "summary": "The subnets to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-service.ts",
            "line": 35
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/fargate/fargate-service:FargateServiceProps"
    },
    "@aws-cdk/aws-ecs.FargateTaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.TaskDefinition",
      "docs": {
        "custom": {
          "resource": "AWS::ECS::TaskDefinition",
          "exampleMetadata": "infused"
        },
        "stability": "stable",
        "summary": "The details of a task definition run on a Fargate cluster.",
        "example": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});"
      },
      "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the FargateTaskDefinition class."
        },
        "locationInModule": {
          "filename": "lib/fargate/fargate-task-definition.ts",
          "line": 134
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.IFargateTaskDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/fargate-task-definition.ts",
        "line": 93
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Imports a task definition from the specified task definition ARN."
          },
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 98
          },
          "name": "fromFargateTaskDefinitionArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fargateTaskDefinitionArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IFargateTaskDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Import an existing Fargate task definition from its attributes."
          },
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 105
          },
          "name": "fromFargateTaskDefinitionAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinitionAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.IFargateTaskDefinition"
            }
          },
          "static": true
        }
      ],
      "name": "FargateTaskDefinition",
      "properties": [
        {
          "docs": {
            "remarks": "Fargate tasks require the awsvpc network mode.",
            "stability": "stable",
            "summary": "The Docker networking mode to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 121
          },
          "name": "networkMode",
          "overrides": "@aws-cdk/aws-ecs.TaskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.NetworkMode"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The amount (in GiB) of ephemeral storage to be allocated to the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 129
          },
          "name": "ephemeralStorageGiB",
          "optional": true,
          "overrides": "@aws-cdk/aws-ecs.TaskDefinition",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/fargate/fargate-task-definition:FargateTaskDefinition"
    },
    "@aws-cdk/aws-ecs.FargateTaskDefinitionAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Attributes used to import an existing Fargate task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst fargateTaskDefinitionAttributes: ecs.FargateTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinitionAttributes",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/fargate-task-definition.ts",
        "line": 84
      },
      "name": "FargateTaskDefinitionAttributes",
      "symbolId": "lib/fargate/fargate-task-definition:FargateTaskDefinitionAttributes"
    },
    "@aws-cdk/aws-ecs.FargateTaskDefinitionProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for a task definition.",
        "example": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/fargate-task-definition.ts",
        "line": 17
      },
      "name": "FargateTaskDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "For tasks using the Fargate launch type,\nthis field is required and you must use one of the following values,\nwhich determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)\n\n512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)\n\n1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)\n\n2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)\n\n4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 35
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "20",
            "remarks": "The maximum supported value is 200 GiB.\n\nNOTE: This parameter is only supported for tasks hosted on AWS Fargate using platform version 1.4.0 or later.",
            "stability": "stable",
            "summary": "The amount (in GiB) of ephemeral storage to be allocated to the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 62
          },
          "name": "ephemeralStorageGiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "For tasks using the Fargate launch type,\nthis field is required and you must use one of the following values, which determines your range of valid values for the cpu parameter:\n\n512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n\n1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n\n2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n\nBetween 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n\nBetween 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 53
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Undefined.",
            "remarks": "A runtimePlatform is supported only for tasks using the Fargate launch type.",
            "stability": "stable",
            "summary": "The operating system that your task definitions are running on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/fargate-task-definition.ts",
            "line": 71
          },
          "name": "runtimePlatform",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.RuntimePlatform"
          }
        }
      ],
      "symbolId": "lib/fargate/fargate-task-definition:FargateTaskDefinitionProps"
    },
    "@aws-cdk/aws-ecs.FireLensLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "FireLens enables you to use task definition parameters to route logs to an AWS service   or AWS Partner Network (APN) destination for log storage and analytics.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const secret: ecs.Secret;\nconst fireLensLogDriver = new ecs.FireLensLogDriver({\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: {\n    secretOptionsKey: secret,\n  },\n  tag: 'tag',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FireLensLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the FireLensLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/firelens-log-driver.ts",
          "line": 48
        },
        "parameters": [
          {
            "docs": {
              "summary": "the awsfirelens log driver configuration options."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.FireLensLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/firelens-log-driver.ts",
        "line": 31
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/firelens-log-driver.ts",
            "line": 58
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "FireLensLogDriver",
      "symbolId": "lib/log-drivers/firelens-log-driver:FireLensLogDriver"
    },
    "@aws-cdk/aws-ecs.FireLensLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Specifies the firelens log driver configuration options.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FireLensLogDriverProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/firelens-log-driver.ts",
        "line": 13
      },
      "name": "FireLensLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- the log driver options",
            "stability": "stable",
            "summary": "The configuration options to send to the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/firelens-log-driver.ts",
            "line": 18
          },
          "name": "options",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret options provided.",
            "stability": "stable",
            "summary": "The secrets to pass to the log configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/firelens-log-driver.ts",
            "line": 24
          },
          "name": "secretOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/log-drivers/firelens-log-driver:FireLensLogDriverProps"
    },
    "@aws-cdk/aws-ecs.FirelensConfig": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Firelens Configuration https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst firelensConfig: ecs.FirelensConfig = {\n  type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n  // the properties below are optional\n  options: {\n    configFileType: ecs.FirelensConfigFileType.S3,\n    configFileValue: 'configFileValue',\n    enableECSLogMetadata: false,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FirelensConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/firelens-log-router.ts",
        "line": 78
      },
      "name": "FirelensConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- fluentbit",
            "stability": "stable",
            "summary": "The log router to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 84
          },
          "name": "type",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional options",
            "stability": "stable",
            "summary": "Firelens options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 90
          },
          "name": "options",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FirelensOptions"
          }
        }
      ],
      "symbolId": "lib/firelens-log-router:FirelensConfig"
    },
    "@aws-cdk/aws-ecs.FirelensConfigFileType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef-customconfig",
        "stability": "stable",
        "summary": "Firelens configuration file type, s3 or file path."
      },
      "fqn": "@aws-cdk/aws-ecs.FirelensConfigFileType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/firelens-log-router.ts",
        "line": 31
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "s3."
          },
          "name": "S3"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "fluentd."
          },
          "name": "FILE"
        }
      ],
      "name": "FirelensConfigFileType",
      "symbolId": "lib/firelens-log-router:FirelensConfigFileType"
    },
    "@aws-cdk/aws-ecs.FirelensLogRouter": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.ContainerDefinition",
      "docs": {
        "stability": "stable",
        "summary": "Firelens log router.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst firelensLogRouter = new ecs.FirelensLogRouter(this, 'MyFirelensLogRouter', {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FirelensLogRouter",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the FirelensLogRouter class."
        },
        "locationInModule": {
          "filename": "lib/firelens-log-router.ts",
          "line": 217
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/firelens-log-router.ts",
        "line": 207
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Render this container definition to a CloudFormation object."
          },
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 267
          },
          "name": "renderContainerDefinition",
          "overrides": "@aws-cdk/aws-ecs.ContainerDefinition",
          "parameters": [
            {
              "name": "_taskDefinition",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty"
            }
          }
        }
      ],
      "name": "FirelensLogRouter",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Firelens configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 212
          },
          "name": "firelensConfig",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FirelensConfig"
          }
        }
      ],
      "symbolId": "lib/firelens-log-router:FirelensLogRouter"
    },
    "@aws-cdk/aws-ecs.FirelensLogRouterDefinitionOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The options for creating a firelens log router.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\nconst firelensLogRouterDefinitionOptions: ecs.FirelensLogRouterDefinitionOptions = {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterDefinitionOptions",
      "interfaces": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/firelens-log-router.ts",
        "line": 106
      },
      "name": "FirelensLogRouterDefinitionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Firelens configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 110
          },
          "name": "firelensConfig",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FirelensConfig"
          }
        }
      ],
      "symbolId": "lib/firelens-log-router:FirelensLogRouterDefinitionOptions"
    },
    "@aws-cdk/aws-ecs.FirelensLogRouterProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties in a firelens log router.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst firelensLogRouterProps: ecs.FirelensLogRouterProps = {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.ContainerDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/firelens-log-router.ts",
        "line": 96
      },
      "name": "FirelensLogRouterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Firelens configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 100
          },
          "name": "firelensConfig",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FirelensConfig"
          }
        }
      ],
      "symbolId": "lib/firelens-log-router:FirelensLogRouterProps"
    },
    "@aws-cdk/aws-ecs.FirelensLogRouterType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html",
        "stability": "stable",
        "summary": "Firelens log router type, fluentbit or fluentd."
      },
      "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/firelens-log-router.ts",
        "line": 15
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "fluentbit."
          },
          "name": "FLUENTBIT"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "fluentd."
          },
          "name": "FLUENTD"
        }
      ],
      "name": "FirelensLogRouterType",
      "symbolId": "lib/firelens-log-router:FirelensLogRouterType"
    },
    "@aws-cdk/aws-ecs.FirelensOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The options for firelens log router https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef-customconfig.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst firelensOptions: ecs.FirelensOptions = {\n  configFileType: ecs.FirelensConfigFileType.S3,\n  configFileValue: 'configFileValue',\n  enableECSLogMetadata: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FirelensOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/firelens-log-router.ts",
        "line": 47
      },
      "name": "FirelensOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- determined by checking configFileValue with S3 ARN.",
            "remarks": "Both configFileType and configFileValue must be used together\nto define a custom configuration source.",
            "stability": "stable",
            "summary": "Custom configuration file, s3 or file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 62
          },
          "name": "configFileType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FirelensConfigFileType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no config file value",
            "stability": "stable",
            "summary": "Custom configuration file, S3 ARN or a file path Both configFileType and configFileValue must be used together to define a custom configuration source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 71
          },
          "name": "configFileValue",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true",
            "remarks": "You can disable this action by setting enable-ecs-log-metadata to false.",
            "stability": "stable",
            "summary": "By default, Amazon ECS adds additional fields in your log entries that help identify the source of the logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/firelens-log-router.ts",
            "line": 53
          },
          "name": "enableECSLogMetadata",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/firelens-log-router:FirelensOptions"
    },
    "@aws-cdk/aws-ecs.FluentdLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends log information to journald Logs.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\nconst fluentdLogDriver = new ecs.FluentdLogDriver(/* all optional props */ {\n  address: 'address',\n  asyncConnect: false,\n  bufferLimit: 123,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxRetries: 123,\n  retryWait: cdk.Duration.minutes(30),\n  subSecondPrecision: false,\n  tag: 'tag',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FluentdLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the FluentdLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/fluentd-log-driver.ts",
          "line": 72
        },
        "parameters": [
          {
            "docs": {
              "summary": "the fluentd log driver configuration options."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.FluentdLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/fluentd-log-driver.ts",
        "line": 66
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/fluentd-log-driver.ts",
            "line": 79
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "FluentdLogDriver",
      "symbolId": "lib/log-drivers/fluentd-log-driver:FluentdLogDriver"
    },
    "@aws-cdk/aws-ecs.FluentdLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "[Source](https://docs.docker.com/config/containers/logging/fluentd/)",
        "stability": "stable",
        "summary": "Specifies the fluentd log driver configuration options.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\nconst fluentdLogDriverProps: ecs.FluentdLogDriverProps = {\n  address: 'address',\n  asyncConnect: false,\n  bufferLimit: 123,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxRetries: 123,\n  retryWait: cdk.Duration.minutes(30),\n  subSecondPrecision: false,\n  tag: 'tag',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.FluentdLogDriverProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/fluentd-log-driver.ts",
        "line": 16
      },
      "name": "FluentdLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- address not set.",
            "remarks": "Supply the\naddress option to connect to a different address. tcp(default) and unix\nsockets are supported.",
            "stability": "stable",
            "summary": "By default, the logging driver connects to localhost:24224."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/fluentd-log-driver.ts",
            "line": 24
          },
          "name": "address",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Messages are buffered until\nthe connection is established.",
            "stability": "stable",
            "summary": "Docker connects to Fluentd in the background."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/fluentd-log-driver.ts",
            "line": 32
          },
          "name": "asyncConnect",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The amount of RAM available to the container.",
            "stability": "stable",
            "summary": "The amount of data to buffer before flushing to disk."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/fluentd-log-driver.ts",
            "line": 39
          },
          "name": "bufferLimit",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 4294967295 (2**32 - 1).",
            "stability": "stable",
            "summary": "The maximum number of retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/fluentd-log-driver.ts",
            "line": 53
          },
          "name": "maxRetries",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 1 second",
            "stability": "stable",
            "summary": "How long to wait between retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/fluentd-log-driver.ts",
            "line": 46
          },
          "name": "retryWait",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "stable",
            "summary": "Generates event logs in nanosecond resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/fluentd-log-driver.ts",
            "line": 60
          },
          "name": "subSecondPrecision",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/log-drivers/fluentd-log-driver:FluentdLogDriverProps"
    },
    "@aws-cdk/aws-ecs.GelfCompressionType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The type of compression the GELF driver uses to compress each log message."
      },
      "fqn": "@aws-cdk/aws-ecs.GelfCompressionType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/log-drivers/gelf-log-driver.ts",
        "line": 14
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "GZIP"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "ZLIB"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NONE"
        }
      ],
      "name": "GelfCompressionType",
      "symbolId": "lib/log-drivers/gelf-log-driver:GelfCompressionType"
    },
    "@aws-cdk/aws-ecs.GelfLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends log information to journald Logs.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\nconst gelfLogDriver = new ecs.GelfLogDriver({\n  address: 'address',\n\n  // the properties below are optional\n  compressionLevel: 123,\n  compressionType: ecs.GelfCompressionType.GZIP,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n  tcpMaxReconnect: 123,\n  tcpReconnectDelay: cdk.Duration.minutes(30),\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.GelfLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the GelfLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/gelf-log-driver.ts",
          "line": 75
        },
        "parameters": [
          {
            "docs": {
              "summary": "the gelf log driver configuration options."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.GelfLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/gelf-log-driver.ts",
        "line": 69
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/gelf-log-driver.ts",
            "line": 91
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "GelfLogDriver",
      "symbolId": "lib/log-drivers/gelf-log-driver:GelfLogDriver"
    },
    "@aws-cdk/aws-ecs.GelfLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "[Source](https://docs.docker.com/config/containers/logging/gelf/)",
        "stability": "stable",
        "summary": "Specifies the journald log driver configuration options.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.GelfLogDriverProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/gelf-log-driver.ts",
        "line": 25
      },
      "name": "GelfLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "tcp and udp are the only supported URI\nspecifier and you must specify the port.",
            "stability": "stable",
            "summary": "The address of the GELF server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/gelf-log-driver.ts",
            "line": 30
          },
          "name": "address",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 1",
            "remarks": "An integer in the range of -1 to 9 (BestCompression). Higher levels provide more\ncompression at lower speed. Either -1 or 0 disables compression.",
            "stability": "stable",
            "summary": "UDP Only The level of compression when gzip or zlib is the gelf-compression-type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/gelf-log-driver.ts",
            "line": 47
          },
          "name": "compressionLevel",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- gzip",
            "remarks": "Allowed values are gzip, zlib and none.",
            "stability": "stable",
            "summary": "UDP Only The type of compression the GELF driver uses to compress each log message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/gelf-log-driver.ts",
            "line": 38
          },
          "name": "compressionType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.GelfCompressionType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 3",
            "remarks": "A positive integer.",
            "stability": "stable",
            "summary": "TCP Only The maximum number of reconnection attempts when the connection drop."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/gelf-log-driver.ts",
            "line": 55
          },
          "name": "tcpMaxReconnect",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 1",
            "remarks": "A positive integer.",
            "stability": "stable",
            "summary": "TCP Only The number of seconds to wait between reconnection attempts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/gelf-log-driver.ts",
            "line": 63
          },
          "name": "tcpReconnectDelay",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/log-drivers/gelf-log-driver:GelfLogDriverProps"
    },
    "@aws-cdk/aws-ecs.GenericLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends logs to the specified driver.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.GenericLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the GenericLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/generic-log-driver.ts",
          "line": 69
        },
        "parameters": [
          {
            "docs": {
              "summary": "the generic log driver configuration options."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.GenericLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/generic-log-driver.ts",
        "line": 42
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/generic-log-driver.ts",
            "line": 80
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "GenericLogDriver",
      "symbolId": "lib/log-drivers/generic-log-driver:GenericLogDriver"
    },
    "@aws-cdk/aws-ecs.GenericLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The configuration to use when creating a log driver.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.GenericLogDriverProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/generic-log-driver.ts",
        "line": 12
      },
      "name": "GenericLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The valid values listed for this parameter are log drivers\nthat the Amazon ECS container agent can communicate with by default.\n\nFor tasks using the Fargate launch type, the supported log drivers are awslogs and splunk.\nFor tasks using the EC2 launch type, the supported log drivers are awslogs, syslog, gelf, fluentd, splunk, journald, and json-file.\n\nFor more information about using the awslogs log driver, see\n[Using the awslogs Log Driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The log driver to use for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/generic-log-driver.ts",
            "line": 24
          },
          "name": "logDriver",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the log driver options.",
            "stability": "stable",
            "summary": "The configuration options to send to the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/generic-log-driver.ts",
            "line": 30
          },
          "name": "options",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no secret options provided.",
            "stability": "stable",
            "summary": "The secrets to pass to the log configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/generic-log-driver.ts",
            "line": 36
          },
          "name": "secretOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/log-drivers/generic-log-driver:GenericLogDriverProps"
    },
    "@aws-cdk/aws-ecs.HealthCheck": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The health check command and associated configuration parameters for the container.",
        "example": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  healthCheck: {\n    command: [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ],\n    // the properties below are optional\n    interval: Duration.minutes(30),\n    retries: 123,\n    startPeriod: Duration.minutes(30),\n    timeout: Duration.minutes(30),\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.HealthCheck",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 748
      },
      "name": "HealthCheck",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The string array must start with CMD to execute the command arguments directly, or\nCMD-SHELL to run the command with the container's default shell.\n\nFor example: [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ]",
            "stability": "stable",
            "summary": "A string array representing the command that the container runs to determine if it is healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 756
          },
          "name": "command",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(30)",
            "remarks": "You may specify between 5 and 300 seconds.",
            "stability": "stable",
            "summary": "The time period in seconds between each health check execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 765
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3",
            "remarks": "You may specify between 1 and 10 retries.",
            "stability": "stable",
            "summary": "The number of times to retry a failed health check before the container is considered unhealthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 774
          },
          "name": "retries",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No start period",
            "remarks": "You may specify between 0 and 300 seconds.",
            "stability": "stable",
            "summary": "The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 784
          },
          "name": "startPeriod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(5)",
            "remarks": "You may specify between 2 and 60 seconds.",
            "stability": "stable",
            "summary": "The time period in seconds to wait for a health check to succeed before it is considered a failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 793
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ],
      "symbolId": "lib/container-definition:HealthCheck"
    },
    "@aws-cdk/aws-ecs.Host": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The details on a container instance bind mount host volume.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst host: ecs.Host = {\n  sourcePath: 'sourcePath',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Host",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 900
      },
      "name": "Host",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If the sourcePath value does not exist on the host container instance, the Docker daemon creates it.\nIf the location does exist, the contents of the source path folder are exported.\n\nThis property is not supported for tasks that use the Fargate launch type.",
            "stability": "stable",
            "summary": "Specifies the path on the host container instance that is presented to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 908
          },
          "name": "sourcePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:Host"
    },
    "@aws-cdk/aws-ecs.IBaseService": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface for BaseService."
      },
      "fqn": "@aws-cdk/aws-ecs.IBaseService",
      "interfaces": [
        "@aws-cdk/aws-ecs.IService"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 306
      },
      "name": "IBaseService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 310
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        }
      ],
      "symbolId": "lib/base/base-service:IBaseService"
    },
    "@aws-cdk/aws-ecs.ICluster": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "A regional grouping of one or more container instances on which you can run tasks and services."
      },
      "fqn": "@aws-cdk/aws-ecs.ICluster",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 612
      },
      "name": "ICluster",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The Amazon Resource Name (ARN) that identifies the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 623
          },
          "name": "clusterArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 617
          },
          "name": "clusterName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Manage the allowed network connections for the cluster with Security Groups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 633
          },
          "name": "connections",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Specifies whether the cluster has EC2 instance capacity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 638
          },
          "name": "hasEc2Capacity",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The VPC associated with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 628
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The autoscaling group added to the cluster if capacity is associated to the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 648
          },
          "name": "autoscalingGroup",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-autoscaling.IAutoScalingGroup"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The AWS Cloud Map namespace to associate with the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 643
          },
          "name": "defaultCloudMapNamespace",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The execute command configuration for the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cluster.ts",
            "line": 653
          },
          "name": "executeCommandConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ExecuteCommandConfiguration"
          }
        }
      ],
      "symbolId": "lib/cluster:ICluster"
    },
    "@aws-cdk/aws-ecs.IEc2Service": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface for a service using the EC2 launch type on an ECS cluster."
      },
      "fqn": "@aws-cdk/aws-ecs.IEc2Service",
      "interfaces": [
        "@aws-cdk/aws-ecs.IService"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ec2/ec2-service.ts",
        "line": 90
      },
      "name": "IEc2Service",
      "symbolId": "lib/ec2/ec2-service:IEc2Service"
    },
    "@aws-cdk/aws-ecs.IEc2TaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface of a task definition run on an EC2 cluster."
      },
      "fqn": "@aws-cdk/aws-ecs.IEc2TaskDefinition",
      "interfaces": [
        "@aws-cdk/aws-ecs.ITaskDefinition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ec2/ec2-task-definition.ts",
        "line": 69
      },
      "name": "IEc2TaskDefinition",
      "symbolId": "lib/ec2/ec2-task-definition:IEc2TaskDefinition"
    },
    "@aws-cdk/aws-ecs.IEcsLoadBalancerTarget": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Interface for ECS load balancer target."
      },
      "fqn": "@aws-cdk/aws-ecs.IEcsLoadBalancerTarget",
      "interfaces": [
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 93
      },
      "name": "IEcsLoadBalancerTarget",
      "symbolId": "lib/base/base-service:IEcsLoadBalancerTarget"
    },
    "@aws-cdk/aws-ecs.IExternalService": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface for a service using the External launch type on an ECS cluster."
      },
      "fqn": "@aws-cdk/aws-ecs.IExternalService",
      "interfaces": [
        "@aws-cdk/aws-ecs.IService"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/external/external-service.ts",
        "line": 35
      },
      "name": "IExternalService",
      "symbolId": "lib/external/external-service:IExternalService"
    },
    "@aws-cdk/aws-ecs.IExternalTaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface of a task definition run on an External cluster."
      },
      "fqn": "@aws-cdk/aws-ecs.IExternalTaskDefinition",
      "interfaces": [
        "@aws-cdk/aws-ecs.ITaskDefinition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/external/external-task-definition.ts",
        "line": 23
      },
      "name": "IExternalTaskDefinition",
      "symbolId": "lib/external/external-task-definition:IExternalTaskDefinition"
    },
    "@aws-cdk/aws-ecs.IFargateService": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface for a service using the Fargate launch type on an ECS cluster."
      },
      "fqn": "@aws-cdk/aws-ecs.IFargateService",
      "interfaces": [
        "@aws-cdk/aws-ecs.IService"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/fargate-service.ts",
        "line": 67
      },
      "name": "IFargateService",
      "symbolId": "lib/fargate/fargate-service:IFargateService"
    },
    "@aws-cdk/aws-ecs.IFargateTaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface of a task definition run on a Fargate cluster."
      },
      "fqn": "@aws-cdk/aws-ecs.IFargateTaskDefinition",
      "interfaces": [
        "@aws-cdk/aws-ecs.ITaskDefinition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/fargate-task-definition.ts",
        "line": 77
      },
      "name": "IFargateTaskDefinition",
      "symbolId": "lib/fargate/fargate-task-definition:IFargateTaskDefinition"
    },
    "@aws-cdk/aws-ecs.IService": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface for a service."
      },
      "fqn": "@aws-cdk/aws-ecs.IService",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 19
      },
      "name": "IService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The Amazon Resource Name (ARN) of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 25
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 32
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/base/base-service:IService"
    },
    "@aws-cdk/aws-ecs.ITaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The interface for all task definitions."
      },
      "fqn": "@aws-cdk/aws-ecs.ITaskDefinition",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 17
      },
      "name": "ITaskDefinition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "What launch types this task definition should be compatible with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 32
          },
          "name": "compatibility",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Compatibility"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return true if the task definition can be run on an EC2 cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 37
          },
          "name": "isEc2Compatible",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return true if the task definition can be run on a ECS Anywhere cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 47
          },
          "name": "isExternalCompatible",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Return true if the task definition can be run on a Fargate cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 42
          },
          "name": "isFargateCompatible",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The networking mode to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 53
          },
          "name": "networkMode",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.NetworkMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "ARN of this task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 22
          },
          "name": "taskDefinitionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 58
          },
          "name": "taskRole",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Execution role for this task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 27
          },
          "name": "executionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:ITaskDefinition"
    },
    "@aws-cdk/aws-ecs.ITaskDefinitionExtension": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "Classes that want to make changes to a TaskDefinition (such as\nadding helper containers) can implement this interface, and can\nthen be \"added\" to a TaskDefinition like so:\n\n    taskDefinition.addExtension(new MyExtension(\"some_parameter\"));",
        "stability": "stable",
        "summary": "An extension for Task Definitions."
      },
      "fqn": "@aws-cdk/aws-ecs.ITaskDefinitionExtension",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 1101
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Apply the extension to the given TaskDefinition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 1107
          },
          "name": "extend",
          "parameters": [
            {
              "docs": {
                "summary": "[disable-awslint:ref-via-interface]."
              },
              "name": "taskDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
              }
            }
          ]
        }
      ],
      "name": "ITaskDefinitionExtension",
      "symbolId": "lib/base/task-definition:ITaskDefinitionExtension"
    },
    "@aws-cdk/aws-ecs.InferenceAccelerator": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "For more information, see [Elastic Inference Basics](https://docs.aws.amazon.com/elastic-inference/latest/developerguide/basics.html)",
        "stability": "stable",
        "summary": "Elastic Inference Accelerator.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst inferenceAccelerator: ecs.InferenceAccelerator = {\n  deviceName: 'deviceName',\n  deviceType: 'deviceType',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.InferenceAccelerator",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 832
      },
      "name": "InferenceAccelerator",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- empty",
            "stability": "stable",
            "summary": "The Elastic Inference accelerator device name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 837
          },
          "name": "deviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- empty",
            "remarks": "The allowed values are: eia2.medium, eia2.large and eia2.xlarge.",
            "stability": "stable",
            "summary": "The Elastic Inference accelerator type to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 843
          },
          "name": "deviceType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:InferenceAccelerator"
    },
    "@aws-cdk/aws-ecs.IpcMode": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The IPC resource namespace to use for the containers in the task."
      },
      "fqn": "@aws-cdk/aws-ecs.IpcMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 793
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "If none is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance."
          },
          "name": "NONE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "If host is specified, then all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance."
          },
          "name": "HOST"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "If task is specified, all containers within the specified task share the same IPC resources."
          },
          "name": "TASK"
        }
      ],
      "name": "IpcMode",
      "symbolId": "lib/base/task-definition:IpcMode"
    },
    "@aws-cdk/aws-ecs.JournaldLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends log information to journald Logs.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst journaldLogDriver = new ecs.JournaldLogDriver(/* all optional props */ {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.JournaldLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the JournaldLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/journald-log-driver.ts",
          "line": 26
        },
        "parameters": [
          {
            "docs": {
              "summary": "the journald log driver configuration options."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.JournaldLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/journald-log-driver.ts",
        "line": 20
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/journald-log-driver.ts",
            "line": 33
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "JournaldLogDriver",
      "symbolId": "lib/log-drivers/journald-log-driver:JournaldLogDriver"
    },
    "@aws-cdk/aws-ecs.JournaldLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "[Source](https://docs.docker.com/config/containers/logging/journald/)",
        "stability": "stable",
        "summary": "Specifies the journald log driver configuration options.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst journaldLogDriverProps: ecs.JournaldLogDriverProps = {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.JournaldLogDriverProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/journald-log-driver.ts",
        "line": 15
      },
      "name": "JournaldLogDriverProps",
      "symbolId": "lib/log-drivers/journald-log-driver:JournaldLogDriverProps"
    },
    "@aws-cdk/aws-ecs.JsonFileLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends log information to json-file Logs.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst jsonFileLogDriver = new ecs.JsonFileLogDriver(/* all optional props */ {\n  compress: false,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxFile: 123,\n  maxSize: 'maxSize',\n  tag: 'tag',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.JsonFileLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the JsonFileLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/json-file-log-driver.ts",
          "line": 50
        },
        "parameters": [
          {
            "docs": {
              "summary": "the json-file log driver configuration options."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.JsonFileLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/json-file-log-driver.ts",
        "line": 44
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/json-file-log-driver.ts",
            "line": 62
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "JsonFileLogDriver",
      "symbolId": "lib/log-drivers/json-file-log-driver:JsonFileLogDriver"
    },
    "@aws-cdk/aws-ecs.JsonFileLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "[Source](https://docs.docker.com/config/containers/logging/json-file/)",
        "stability": "stable",
        "summary": "Specifies the json-file log driver configuration options.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst jsonFileLogDriverProps: ecs.JsonFileLogDriverProps = {\n  compress: false,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxFile: 123,\n  maxSize: 'maxSize',\n  tag: 'tag',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.JsonFileLogDriverProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/json-file-log-driver.ts",
        "line": 15
      },
      "name": "JsonFileLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "stable",
            "summary": "Toggles compression for rotated logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/json-file-log-driver.ts",
            "line": 38
          },
          "name": "compress",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 1",
            "remarks": "If rolling the logs creates\nexcess files, the oldest file is removed. Only effective when max-size is also set.\nA positive integer.",
            "stability": "stable",
            "summary": "The maximum number of log files that can be present."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/json-file-log-driver.ts",
            "line": 31
          },
          "name": "maxFile",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- -1 (unlimited)",
            "remarks": "A positive integer plus a modifier\nrepresenting the unit of measure (k, m, or g).",
            "stability": "stable",
            "summary": "The maximum size of the log before it is rolled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/json-file-log-driver.ts",
            "line": 22
          },
          "name": "maxSize",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/log-drivers/json-file-log-driver:JsonFileLogDriverProps"
    },
    "@aws-cdk/aws-ecs.LaunchType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The launch type of an ECS service."
      },
      "fqn": "@aws-cdk/aws-ecs.LaunchType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 1070
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The service will be launched using the EC2 launch type."
          },
          "name": "EC2"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The service will be launched using the FARGATE launch type."
          },
          "name": "FARGATE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The service will be launched using the EXTERNAL launch type."
          },
          "name": "EXTERNAL"
        }
      ],
      "name": "LaunchType",
      "symbolId": "lib/base/base-service:LaunchType"
    },
    "@aws-cdk/aws-ecs.LinuxParameters": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "Linux-specific options that are applied to the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst linuxParameters = new ecs.LinuxParameters(this, 'MyLinuxParameters', /* all optional props */ {\n  initProcessEnabled: false,\n  sharedMemorySize: 123,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.LinuxParameters",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the LinuxParameters class."
        },
        "locationInModule": {
          "filename": "lib/linux-parameters.ts",
          "line": 65
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LinuxParametersProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 31
      },
      "methods": [
        {
          "docs": {
            "remarks": "Only works with EC2 launch type.",
            "stability": "stable",
            "summary": "Adds one or more Linux capabilities to the Docker configuration of a container."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 77
          },
          "name": "addCapabilities",
          "parameters": [
            {
              "name": "cap",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Capability"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds one or more host devices to a container."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 93
          },
          "name": "addDevices",
          "parameters": [
            {
              "name": "device",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Device"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Only works with EC2 launch type.",
            "stability": "stable",
            "summary": "Specifies the container path, mount options, and size (in MiB) of the tmpfs mount for a container."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 102
          },
          "name": "addTmpfs",
          "parameters": [
            {
              "name": "tmpfs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Tmpfs"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Only works with EC2 launch type.",
            "stability": "stable",
            "summary": "Removes one or more Linux capabilities to the Docker configuration of a container."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 86
          },
          "name": "dropCapabilities",
          "parameters": [
            {
              "name": "cap",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Capability"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Renders the Linux parameters to a CloudFormation object."
          },
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 109
          },
          "name": "renderLinuxParameters",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.LinuxParametersProperty"
            }
          }
        }
      ],
      "name": "LinuxParameters",
      "symbolId": "lib/linux-parameters:LinuxParameters"
    },
    "@aws-cdk/aws-ecs.LinuxParametersProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for defining Linux-specific options that are applied to the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst linuxParametersProps: ecs.LinuxParametersProps = {\n  initProcessEnabled: false,\n  sharedMemorySize: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.LinuxParametersProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 12
      },
      "name": "LinuxParametersProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Specifies whether to run an init process inside the container that forwards signals and reaps processes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 18
          },
          "name": "initProcessEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No shared memory.",
            "stability": "stable",
            "summary": "The value for the size (in MiB) of the /dev/shm volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 25
          },
          "name": "sharedMemorySize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/linux-parameters:LinuxParametersProps"
    },
    "@aws-cdk/aws-ecs.ListenerConfig": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Base class for configuring listener when registering targets.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ListenerConfig",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 230
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a config for adding target group to ALB listener."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 234
          },
          "name": "applicationListener",
          "parameters": [
            {
              "name": "listener",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ListenerConfig"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a config for adding target group to NLB listener."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 241
          },
          "name": "networkListener",
          "parameters": [
            {
              "name": "listener",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ListenerConfig"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Create and attach a target group to listener."
          },
          "locationInModule": {
            "filename": "lib/base/base-service.ts",
            "line": 248
          },
          "name": "addTargets",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.LoadBalancerTargetOptions"
              }
            },
            {
              "name": "service",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BaseService"
              }
            }
          ]
        }
      ],
      "name": "ListenerConfig",
      "symbolId": "lib/base/base-service:ListenerConfig"
    },
    "@aws-cdk/aws-ecs.LoadBalancerTargetOptions": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "The port mapping for it must already have been created through addPortMapping().",
        "stability": "stable",
        "summary": "Properties for defining an ECS target.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 931
      },
      "name": "LoadBalancerTargetOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 935
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Container port of the first added port mapping.",
            "remarks": "Only applicable when using application/network load balancers.",
            "stability": "stable",
            "summary": "The port number of the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 942
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Protocol.TCP",
            "remarks": "Only applicable when using application load balancers.",
            "stability": "stable",
            "summary": "The protocol used for the port mapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 949
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Protocol"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:LoadBalancerTargetOptions"
    },
    "@aws-cdk/aws-ecs.LogDriver": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The base class for log drivers.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.LogDriver",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/log-driver.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to CloudWatch Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-driver.ts",
            "line": 16
          },
          "name": "awsLogs",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AwsLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-driver.ts",
            "line": 23
          },
          "name": "bind",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "LogDriver",
      "symbolId": "lib/log-drivers/log-driver:LogDriver"
    },
    "@aws-cdk/aws-ecs.LogDriverConfig": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The configuration to use when creating a log driver.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst logDriverConfig: ecs.LogDriverConfig = {\n  logDriver: 'logDriver',\n\n  // the properties below are optional\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.LogDriverConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/log-driver.ts",
        "line": 29
      },
      "name": "LogDriverConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The valid values listed for this parameter are log drivers\nthat the Amazon ECS container agent can communicate with by default.\n\nFor tasks using the Fargate launch type, the supported log drivers are awslogs, splunk, and awsfirelens.\nFor tasks using the EC2 launch type, the supported log drivers are awslogs, fluentd, gelf, json-file, journald,\nlogentries,syslog, splunk, and awsfirelens.\n\nFor more information about using the awslogs log driver, see\n[Using the awslogs Log Driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html)\nin the Amazon Elastic Container Service Developer Guide.\n\nFor more information about using the awsfirelens log driver, see\n[Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The log driver to use for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/log-driver.ts",
            "line": 46
          },
          "name": "logDriver",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The configuration options to send to the log driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/log-driver.ts",
            "line": 51
          },
          "name": "options",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret options provided.",
            "stability": "stable",
            "summary": "The secrets to pass to the log configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/log-driver.ts",
            "line": 57
          },
          "name": "secretOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SecretProperty"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/log-drivers/log-driver:LogDriverConfig"
    },
    "@aws-cdk/aws-ecs.LogDrivers": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The base class for log drivers.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.LogDrivers",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/log-drivers.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to CloudWatch Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 18
          },
          "name": "awsLogs",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AwsLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "For detail configurations, please refer to Amazon ECS FireLens Examples:\nhttps://github.com/aws-samples/amazon-ecs-firelens-examples",
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to firelens log router."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 69
          },
          "name": "firelens",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.FireLensLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to fluentd Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 25
          },
          "name": "fluentd",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.FluentdLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to gelf Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 32
          },
          "name": "gelf",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.GelfLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to journald Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 39
          },
          "name": "journald",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.JournaldLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to json-file Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 46
          },
          "name": "jsonFile",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.JsonFileLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to splunk Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 53
          },
          "name": "splunk",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.SplunkLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a log driver configuration that sends log information to syslog Logs."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/log-drivers.ts",
            "line": 60
          },
          "name": "syslog",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ecs.SyslogLogDriverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriver"
            }
          },
          "static": true
        }
      ],
      "name": "LogDrivers",
      "symbolId": "lib/log-drivers/log-drivers:LogDrivers"
    },
    "@aws-cdk/aws-ecs.MachineImageType": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The machine image type.",
        "example": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.MachineImageType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/cluster.ts",
        "line": 86
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Amazon ECS-optimized Amazon Linux 2 AMI."
          },
          "name": "AMAZON_LINUX_2"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Bottlerocket AMI."
          },
          "name": "BOTTLEROCKET"
        }
      ],
      "name": "MachineImageType",
      "symbolId": "lib/cluster:MachineImageType"
    },
    "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for enabling scaling based on memory utilization.",
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
      "interfaces": [
        "@aws-cdk/aws-applicationautoscaling.BaseTargetTrackingProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/scalable-task-count.ts",
        "line": 113
      },
      "name": "MemoryUtilizationScalingProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The target value for memory utilization across all tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 117
          },
          "name": "targetUtilizationPercent",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/base/scalable-task-count:MemoryUtilizationScalingProps"
    },
    "@aws-cdk/aws-ecs.MountPoint": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The details of data volume mount points for a container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst mountPoint: ecs.MountPoint = {\n  containerPath: 'containerPath',\n  readOnly: false,\n  sourceVolume: 'sourceVolume',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.MountPoint",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 1060
      },
      "name": "MountPoint",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The path on the container to mount the host volume at."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1064
          },
          "name": "containerPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If this value is true, the container has read-only access to the volume.\nIf this value is false, then the container can write to the volume.",
            "stability": "stable",
            "summary": "Specifies whether to give the container read-only access to the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1071
          },
          "name": "readOnly",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Must be a volume name referenced in the name parameter of task definition volume.",
            "stability": "stable",
            "summary": "The name of the volume to mount."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1077
          },
          "name": "sourceVolume",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/container-definition:MountPoint"
    },
    "@aws-cdk/aws-ecs.NetworkMode": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The networking mode to use for the containers in the task.",
        "example": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.NetworkMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 757
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The task's containers do not have external connectivity and port mappings can't be specified in the container definition."
          },
          "name": "NONE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The task utilizes Docker's built-in virtual network which runs inside each container instance."
          },
          "name": "BRIDGE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The task is allocated an elastic network interface."
          },
          "name": "AWS_VPC"
        },
        {
          "docs": {
            "remarks": "In this mode, you can't run multiple instantiations of the same task on a\nsingle container instance when port mappings are used.",
            "stability": "stable",
            "summary": "The task bypasses Docker's built-in virtual network and maps container ports directly to the EC2 instance's network interface directly."
          },
          "name": "HOST"
        },
        {
          "docs": {
            "remarks": "This is the only supported network mode for Windows containers. For more information, see\n[Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#network_mode).",
            "stability": "stable",
            "summary": "The task utilizes NAT network mode required by Windows containers."
          },
          "name": "NAT"
        }
      ],
      "name": "NetworkMode",
      "symbolId": "lib/base/task-definition:NetworkMode"
    },
    "@aws-cdk/aws-ecs.OperatingSystemFamily": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The operating system for Fargate Runtime Platform.",
        "example": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/runtime-platform.ts",
        "line": 35
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-runtimeplatform.html#cfn-ecs-taskdefinition-runtimeplatform-operatingsystemfamily for all available operating system family.",
            "stability": "stable",
            "summary": "Other operating system family."
          },
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 84
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "operating system family."
              },
              "name": "family",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
            }
          },
          "static": true
        }
      ],
      "name": "OperatingSystemFamily",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "LINUX."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 39
          },
          "name": "LINUX",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "WINDOWS_SERVER_2004_CORE."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 44
          },
          "name": "WINDOWS_SERVER_2004_CORE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "WINDOWS_SERVER_2016_FULL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 49
          },
          "name": "WINDOWS_SERVER_2016_FULL",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "WINDOWS_SERVER_2019_CORE."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 54
          },
          "name": "WINDOWS_SERVER_2019_CORE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "WINDOWS_SERVER_2019_FULL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 59
          },
          "name": "WINDOWS_SERVER_2019_FULL",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "WINDOWS_SERVER_2022_CORE."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 64
          },
          "name": "WINDOWS_SERVER_2022_CORE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "WINDOWS_SERVER_2022_FULL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 69
          },
          "name": "WINDOWS_SERVER_2022_FULL",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "stable",
            "summary": "WINDOWS_SERVER_20H2_CORE."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 74
          },
          "name": "WINDOWS_SERVER_20H2_CORE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        }
      ],
      "symbolId": "lib/runtime-platform:OperatingSystemFamily"
    },
    "@aws-cdk/aws-ecs.PidMode": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The process namespace to use for the containers in the task."
      },
      "fqn": "@aws-cdk/aws-ecs.PidMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 815
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "If host is specified, then all containers within the tasks that specified the host PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance."
          },
          "name": "HOST"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "If task is specified, all containers within the specified task share the same process namespace."
          },
          "name": "TASK"
        }
      ],
      "name": "PidMode",
      "symbolId": "lib/base/task-definition:PidMode"
    },
    "@aws-cdk/aws-ecs.PlacementConstraint": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "Tasks will only be placed on instances that match these rules.",
        "stability": "stable",
        "summary": "The placement constraints to use for tasks in the service. For more information, see [Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).",
        "example": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.PlacementConstraint",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/placement.ts",
        "line": 101
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Use distinctInstance to ensure that each task in a particular group is running on a different container instance."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 105
          },
          "name": "distinctInstances",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Multiple expressions can be specified. For more information, see\n[Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).\n\nYou can specify multiple expressions in one call. The tasks will only be placed on instances matching all expressions.",
            "see": "https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html",
            "stability": "stable",
            "summary": "Use memberOf to restrict the selection to a group of valid candidates specified by a query expression."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 119
          },
          "name": "memberOf",
          "parameters": [
            {
              "name": "expressions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the placement JSON."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 132
          },
          "name": "toJson",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementConstraintProperty"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "PlacementConstraint",
      "symbolId": "lib/placement:PlacementConstraint"
    },
    "@aws-cdk/aws-ecs.PlacementStrategy": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "Tasks will preferentially be placed on instances that match these rules.",
        "stability": "stable",
        "summary": "The placement strategies to use for tasks in the service. For more information, see [Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).",
        "example": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.PlacementStrategy",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/placement.ts",
        "line": 25
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Places tasks on the container instances with the least available capacity of the specified resource."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 70
          },
          "name": "packedBy",
          "parameters": [
            {
              "name": "resource",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BinPackResource"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This minimizes the number of instances in use.",
            "stability": "stable",
            "summary": "Places tasks on container instances with the least available amount of CPU capacity."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 54
          },
          "name": "packedByCpu",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This minimizes the number of instances in use.",
            "stability": "stable",
            "summary": "Places tasks on container instances with the least available amount of memory capacity."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 63
          },
          "name": "packedByMemory",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Places tasks randomly."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 77
          },
          "name": "randomly",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "attributes instanceId",
            "remarks": "You can use one of the built-in attributes found on `BuiltInAttributes`\nor supply your own custom instance attributes. If more than one attribute\nis supplied, spreading is done in order.",
            "stability": "stable",
            "summary": "Places tasks evenly based on the specified value."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 42
          },
          "name": "spreadAcross",
          "parameters": [
            {
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Places tasks evenly across all container instances in the cluster."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 29
          },
          "name": "spreadAcrossInstances",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return the placement JSON."
          },
          "locationInModule": {
            "filename": "lib/placement.ts",
            "line": 90
          },
          "name": "toJson",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementStrategyProperty"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "PlacementStrategy",
      "symbolId": "lib/placement:PlacementStrategy"
    },
    "@aws-cdk/aws-ecs.PortMapping": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Port mappings allow containers to access ports on the host container instance to send or receive traffic.",
        "example": "declare const container: ecs.ContainerDefinition;\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.PortMapping",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 977
      },
      "name": "PortMapping",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\nIf you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\nyour container automatically receives a host port in the ephemeral port range.\n\nFor more information, see hostPort.\nPort mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.",
            "stability": "stable",
            "summary": "The port number on the container that is bound to the user-specified or automatically assigned host port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 988
          },
          "name": "containerPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If you are using containers in a task with the awsvpc or host network mode,\nthe hostPort can either be left blank or set to the same value as the containerPort.\n\nIf you are using containers in a task with the bridge network mode,\nyou can specify a non-reserved host port for your container port mapping, or\nyou can omit the hostPort (or set it to 0) while specifying a containerPort and\nyour container automatically receives a port in the ephemeral port range for\nyour container instance operating system and Docker version.",
            "stability": "stable",
            "summary": "The port number on the container instance to reserve for your container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1002
          },
          "name": "hostPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "TCP",
            "remarks": "Valid values are Protocol.TCP and Protocol.UDP.",
            "stability": "stable",
            "summary": "The protocol used for the port mapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1009
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Protocol"
          }
        }
      ],
      "symbolId": "lib/container-definition:PortMapping"
    },
    "@aws-cdk/aws-ecs.PropagatedTagSource": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Propagate tags from either service or task definition."
      },
      "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/base-service.ts",
        "line": 1111
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Propagate tags from service."
          },
          "name": "SERVICE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Propagate tags from task definition."
          },
          "name": "TASK_DEFINITION"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Do not propagate."
          },
          "name": "NONE"
        }
      ],
      "name": "PropagatedTagSource",
      "symbolId": "lib/base/base-service:PropagatedTagSource"
    },
    "@aws-cdk/aws-ecs.Protocol": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Network protocol.",
        "example": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Protocol",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 1015
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "TCP."
          },
          "name": "TCP"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "UDP."
          },
          "name": "UDP"
        }
      ],
      "name": "Protocol",
      "symbolId": "lib/container-definition:Protocol"
    },
    "@aws-cdk/aws-ecs.ProxyConfiguration": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The base class for proxy configurations."
      },
      "fqn": "@aws-cdk/aws-ecs.ProxyConfiguration",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/proxy-configuration/proxy-configuration.ts",
        "line": 11
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Called when the proxy configuration is configured on a task definition."
          },
          "locationInModule": {
            "filename": "lib/proxy-configuration/proxy-configuration.ts",
            "line": 15
          },
          "name": "bind",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_taskDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty"
            }
          }
        }
      ],
      "name": "ProxyConfiguration",
      "symbolId": "lib/proxy-configuration/proxy-configuration:ProxyConfiguration"
    },
    "@aws-cdk/aws-ecs.ProxyConfigurations": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The base class for proxy configurations.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst proxyConfigurations = new ecs.ProxyConfigurations();",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ProxyConfigurations",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/proxy-configuration/proxy-configurations.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Constructs a new instance of the ProxyConfiguration class."
          },
          "locationInModule": {
            "filename": "lib/proxy-configuration/proxy-configurations.ts",
            "line": 11
          },
          "name": "appMeshProxyConfiguration",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfigurationConfigProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ProxyConfiguration"
            }
          },
          "static": true
        }
      ],
      "name": "ProxyConfigurations",
      "symbolId": "lib/proxy-configuration/proxy-configurations:ProxyConfigurations"
    },
    "@aws-cdk/aws-ecs.RepositoryImage": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.ContainerImage",
      "docs": {
        "remarks": "For images hosted in Amazon ECR, see\n[EcrImage](https://docs.aws.amazon.com/AmazonECR/latest/userguide/images.html).",
        "stability": "stable",
        "summary": "An image hosted in a public or private repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const dockerImageAsset: ecr_assets.DockerImageAsset;\nconst repositoryImage = ecs.RepositoryImage.fromDockerImageAsset(dockerImageAsset);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.RepositoryImage",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the RepositoryImage class."
        },
        "locationInModule": {
          "filename": "lib/images/repository.ts",
          "line": 36
        },
        "parameters": [
          {
            "name": "imageName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.RepositoryImageProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/images/repository.ts",
        "line": 31
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the image is used by a ContainerDefinition."
          },
          "locationInModule": {
            "filename": "lib/images/repository.ts",
            "line": 40
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.ContainerImage",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerImageConfig"
            }
          }
        }
      ],
      "name": "RepositoryImage",
      "symbolId": "lib/images/repository:RepositoryImage"
    },
    "@aws-cdk/aws-ecs.RepositoryImageProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for an image hosted in a public or private repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\nconst repositoryImageProps: ecs.RepositoryImageProps = {\n  credentials: secret,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.RepositoryImageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/images/repository.ts",
        "line": 19
      },
      "name": "RepositoryImageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The supported value is the full ARN of an AWS Secrets Manager secret.",
            "stability": "stable",
            "summary": "The secret to expose to the container that contains the credentials for the image repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/images/repository.ts",
            "line": 24
          },
          "name": "credentials",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
          }
        }
      ],
      "symbolId": "lib/images/repository:RepositoryImageProps"
    },
    "@aws-cdk/aws-ecs.RequestCountScalingProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for enabling scaling based on Application Load Balancer (ALB) request counts.",
        "example": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.RequestCountScalingProps",
      "interfaces": [
        "@aws-cdk/aws-applicationautoscaling.BaseTargetTrackingProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/scalable-task-count.ts",
        "line": 123
      },
      "name": "RequestCountScalingProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The number of ALB requests per target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 127
          },
          "name": "requestsPerTarget",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The ALB target group name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 132
          },
          "name": "targetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
          }
        }
      ],
      "symbolId": "lib/base/scalable-task-count:RequestCountScalingProps"
    },
    "@aws-cdk/aws-ecs.RuntimePlatform": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The interface for Runtime Platform.",
        "example": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.RuntimePlatform",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/runtime-platform.ts",
        "line": 97
      },
      "name": "RuntimePlatform",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Undefined.",
            "stability": "stable",
            "summary": "The CpuArchitecture for Fargate Runtime Platform."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 103
          },
          "name": "cpuArchitecture",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CpuArchitecture"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Undefined.",
            "stability": "stable",
            "summary": "The operating system for Fargate Runtime Platform."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/runtime-platform.ts",
            "line": 110
          },
          "name": "operatingSystemFamily",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
          }
        }
      ],
      "symbolId": "lib/runtime-platform:RuntimePlatform"
    },
    "@aws-cdk/aws-ecs.S3EnvironmentFile": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.EnvironmentFile",
      "docs": {
        "stability": "stable",
        "summary": "Environment file from S3.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\nconst s3EnvironmentFile = new ecs.S3EnvironmentFile(bucket, 'key', /* all optional props */ 'objectVersion');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.S3EnvironmentFile",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/environment-file.ts",
          "line": 83
        },
        "parameters": [
          {
            "name": "bucket",
            "type": {
              "fqn": "@aws-cdk/aws-s3.IBucket"
            }
          },
          {
            "name": "key",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "objectVersion",
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/environment-file.ts",
        "line": 80
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the container is initialized to allow this object to bind to the stack."
          },
          "locationInModule": {
            "filename": "lib/environment-file.ts",
            "line": 93
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.EnvironmentFile",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.EnvironmentFileConfig"
            }
          }
        }
      ],
      "name": "S3EnvironmentFile",
      "symbolId": "lib/environment-file:S3EnvironmentFile"
    },
    "@aws-cdk/aws-ecs.ScalableTaskCount": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-applicationautoscaling.BaseScalableAttribute",
      "docs": {
        "stability": "stable",
        "summary": "The scalable attribute representing task count.",
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ScalableTaskCount",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ScalableTaskCount class."
        },
        "locationInModule": {
          "filename": "lib/base/scalable-task-count.ts",
          "line": 21
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ScalableTaskCountProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/scalable-task-count.ts",
        "line": 16
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Scales in or out to achieve a target CPU utilization."
          },
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 42
          },
          "name": "scaleOnCpuUtilization",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.CpuUtilizationScalingProps"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Scales in or out to achieve a target memory utilization."
          },
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 56
          },
          "name": "scaleOnMemoryUtilization",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Scales in or out based on a specified metric value."
          },
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 35
          },
          "name": "scaleOnMetric",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-applicationautoscaling.BasicStepScalingPolicyProps"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Scales in or out to achieve a target Application Load Balancer request count per target."
          },
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 70
          },
          "name": "scaleOnRequestCount",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.RequestCountScalingProps"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Scales in or out based on a specified scheduled time."
          },
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 28
          },
          "name": "scaleOnSchedule",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-applicationautoscaling.ScalingSchedule"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Scales in or out to achieve a target on a custom metric."
          },
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 88
          },
          "name": "scaleToTrackCustomMetric",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TrackCustomMetricProps"
              }
            }
          ]
        }
      ],
      "name": "ScalableTaskCount",
      "symbolId": "lib/base/scalable-task-count:ScalableTaskCount"
    },
    "@aws-cdk/aws-ecs.ScalableTaskCountProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties of a scalable attribute representing task count.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst scalableTaskCountProps: ecs.ScalableTaskCountProps = {\n  dimension: 'dimension',\n  maxCapacity: 123,\n  resourceId: 'resourceId',\n  role: role,\n  serviceNamespace: appscaling.ServiceNamespace.ECS,\n\n  // the properties below are optional\n  minCapacity: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ScalableTaskCountProps",
      "interfaces": [
        "@aws-cdk/aws-applicationautoscaling.BaseScalableAttributeProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/scalable-task-count.ts",
        "line": 9
      },
      "name": "ScalableTaskCountProps",
      "symbolId": "lib/base/scalable-task-count:ScalableTaskCountProps"
    },
    "@aws-cdk/aws-ecs.Scope": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "remarks": "Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops.\nDocker volumes that are scoped as shared persist after the task stops.",
        "stability": "stable",
        "summary": "The scope for the Docker volume that determines its lifecycle."
      },
      "fqn": "@aws-cdk/aws-ecs.Scope",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 1055
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops."
          },
          "name": "TASK"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Docker volumes that are scoped as shared persist after the task stops."
          },
          "name": "SHARED"
        }
      ],
      "name": "Scope",
      "symbolId": "lib/base/task-definition:Scope"
    },
    "@aws-cdk/aws-ecs.ScratchSpace": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The temporary disk space mounted to the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst scratchSpace: ecs.ScratchSpace = {\n  containerPath: 'containerPath',\n  name: 'name',\n  readOnly: false,\n  sourcePath: 'sourcePath',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.ScratchSpace",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 1038
      },
      "name": "ScratchSpace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The path on the container to mount the scratch volume at."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1042
          },
          "name": "containerPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Must be a volume name referenced in the name parameter of task definition volume.",
            "stability": "stable",
            "summary": "The name of the scratch volume to mount."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1054
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If this value is true, the container has read-only access to the scratch volume.\nIf this value is false, then the container can write to the scratch volume.",
            "stability": "stable",
            "summary": "Specifies whether to give the container read-only access to the scratch volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1049
          },
          "name": "readOnly",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1050
          },
          "name": "sourcePath",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/container-definition:ScratchSpace"
    },
    "@aws-cdk/aws-ecs.Secret": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "A secret environment variable.",
        "example": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Secret",
      "initializer": {
        "docs": {
          "stability": "stable"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 38
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a environment variable value from a secret stored in AWS Secrets Manager."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 60
          },
          "name": "fromSecretsManager",
          "parameters": [
            {
              "docs": {
                "summary": "the secret stored in AWS Secrets Manager."
              },
              "name": "secret",
              "type": {
                "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "remarks": "Only values in JSON format are supported.\nIf you do not specify a JSON field, then the full content of the secret is\nused.",
                "summary": "the name of the field with the value that you want to set as the environment variable value."
              },
              "name": "field",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Secret"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a environment variable value from a secret stored in AWS Secrets Manager."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 79
          },
          "name": "fromSecretsManagerVersion",
          "parameters": [
            {
              "docs": {
                "summary": "the secret stored in AWS Secrets Manager."
              },
              "name": "secret",
              "type": {
                "fqn": "@aws-cdk/aws-secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "summary": "the version information to reference the secret."
              },
              "name": "versionInfo",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.SecretVersionInfo"
              }
            },
            {
              "docs": {
                "remarks": "Only values in JSON format are supported.\nIf you do not specify a JSON field, then the full content of the secret is\nused.",
                "summary": "the name of the field with the value that you want to set as the environment variable value."
              },
              "name": "field",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Secret"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates an environment variable value from a parameter stored in AWS Systems Manager Parameter Store."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 43
          },
          "name": "fromSsmParameter",
          "parameters": [
            {
              "name": "parameter",
              "type": {
                "fqn": "@aws-cdk/aws-ssm.IParameter"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Secret"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Grants reading the secret to a principal."
          },
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 100
          },
          "name": "grantRead",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        }
      ],
      "name": "Secret",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The ARN of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 90
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Whether this secret uses a specific JSON field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 95
          },
          "name": "hasField",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/container-definition:Secret"
    },
    "@aws-cdk/aws-ecs.SecretVersionInfo": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Specify the secret's version id or version stage.",
        "example": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.SecretVersionInfo",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 20
      },
      "name": "SecretVersionInfo",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- use default version id",
            "stability": "stable",
            "summary": "version id of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 26
          },
          "name": "versionId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use default version stage",
            "stability": "stable",
            "summary": "version stage of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 32
          },
          "name": "versionStage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/container-definition:SecretVersionInfo"
    },
    "@aws-cdk/aws-ecs.SplunkLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends log information to splunk Logs.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secret: ecs.Secret;\ndeclare const secretValue: cdk.SecretValue;\nconst splunkLogDriver = new ecs.SplunkLogDriver({\n  url: 'url',\n\n  // the properties below are optional\n  caName: 'caName',\n  caPath: 'caPath',\n  env: ['env'],\n  envRegex: 'envRegex',\n  format: ecs.SplunkLogFormat.INLINE,\n  gzip: false,\n  gzipLevel: 123,\n  index: 'index',\n  insecureSkipVerify: 'insecureSkipVerify',\n  labels: ['labels'],\n  secretToken: secret,\n  source: 'source',\n  sourceType: 'sourceType',\n  tag: 'tag',\n  token: secretValue,\n  verifyConnection: false,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.SplunkLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the SplunkLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/splunk-log-driver.ts",
          "line": 139
        },
        "parameters": [
          {
            "docs": {
              "summary": "the splunk log driver configuration options."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.SplunkLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/splunk-log-driver.ts",
        "line": 133
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 153
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "SplunkLogDriver",
      "symbolId": "lib/log-drivers/splunk-log-driver:SplunkLogDriver"
    },
    "@aws-cdk/aws-ecs.SplunkLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "[Source](https://docs.docker.com/config/containers/logging/splunk/)",
        "stability": "stable",
        "summary": "Specifies the splunk log driver configuration options.",
        "example": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.SplunkLogDriverProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/splunk-log-driver.ts",
        "line": 25
      },
      "name": "SplunkLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Path to your Splunk Enterprise, self-service Splunk Cloud instance, or Splunk Cloud managed cluster (including port and scheme used by HTTP Event Collector) in one of the following formats: https://your_splunk_instance:8088 or https://input-prd-p-XXXXXXX.cloud.splunk.com:8088 or https://http-inputs-XXXXXXXX.splunkcloud.com."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 55
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The hostname of the splunk-url",
            "stability": "stable",
            "summary": "Name to use for validating server certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 90
          },
          "name": "caName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- caPath not set.",
            "stability": "stable",
            "summary": "Path to root certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 83
          },
          "name": "caPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- inline",
            "remarks": "Can be inline, json or raw.",
            "stability": "stable",
            "summary": "Message format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 104
          },
          "name": "format",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.SplunkLogFormat"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "stable",
            "summary": "Enable/disable gzip compression to send events to Splunk Enterprise or Splunk Cloud instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 119
          },
          "name": "gzip",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- -1 (Default Compression)",
            "remarks": "Valid values are -1 (default), 0 (no compression),\n1 (best speed) ... 9 (best compression).",
            "stability": "stable",
            "summary": "Set compression level for gzip."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 127
          },
          "name": "gzipLevel",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- index not set.",
            "stability": "stable",
            "summary": "Event index."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 76
          },
          "name": "index",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- insecureSkipVerify not set.",
            "stability": "stable",
            "summary": "Ignore server certificate validation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 97
          },
          "name": "insecureSkipVerify",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If secret token is not provided, then the value provided in `token` will be used.",
            "remarks": "The splunk-token is added to the SecretOptions property of the Log Driver Configuration. So the secret value will not be\nresolved or viewable as plain text.\n\nPlease provide at least one of `token` or `secretToken`.",
            "stability": "stable",
            "summary": "Splunk HTTP Event Collector token (Secret)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 47
          },
          "name": "secretToken",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Secret"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- source not set.",
            "stability": "stable",
            "summary": "Event source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 62
          },
          "name": "source",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- sourceType not set.",
            "stability": "stable",
            "summary": "Event source type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 69
          },
          "name": "sourceType",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- token not provided.",
            "deprecated": "Use {@link SplunkLogDriverProps.secretToken} instead.",
            "remarks": "The splunk-token is added to the Options property of the Log Driver Configuration. So the secret value will be resolved and\nviewable in plain text in the console.\n\nPlease provide at least one of `token` or `secretToken`.",
            "stability": "deprecated",
            "summary": "Splunk HTTP Event Collector token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 36
          },
          "name": "token",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.SecretValue"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true",
            "stability": "stable",
            "summary": "Verify on start, that docker can connect to Splunk server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/splunk-log-driver.ts",
            "line": 111
          },
          "name": "verifyConnection",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/log-drivers/splunk-log-driver:SplunkLogDriverProps"
    },
    "@aws-cdk/aws-ecs.SplunkLogFormat": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Log Message Format."
      },
      "fqn": "@aws-cdk/aws-ecs.SplunkLogFormat",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/log-drivers/splunk-log-driver.ts",
        "line": 14
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "INLINE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "JSON"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RAW"
        }
      ],
      "name": "SplunkLogFormat",
      "symbolId": "lib/log-drivers/splunk-log-driver:SplunkLogFormat"
    },
    "@aws-cdk/aws-ecs.SyslogLogDriver": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.LogDriver",
      "docs": {
        "stability": "stable",
        "summary": "A log driver that sends log information to syslog Logs.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst syslogLogDriver = new ecs.SyslogLogDriver(/* all optional props */ {\n  address: 'address',\n  env: ['env'],\n  envRegex: 'envRegex',\n  facility: 'facility',\n  format: 'format',\n  labels: ['labels'],\n  tag: 'tag',\n  tlsCaCert: 'tlsCaCert',\n  tlsCert: 'tlsCert',\n  tlsKey: 'tlsKey',\n  tlsSkipVerify: false,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.SyslogLogDriver",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the SyslogLogDriver class."
        },
        "locationInModule": {
          "filename": "lib/log-drivers/syslog-log-driver.ts",
          "line": 85
        },
        "parameters": [
          {
            "docs": {
              "summary": "the syslog log driver configuration options."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.SyslogLogDriverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/log-drivers/syslog-log-driver.ts",
        "line": 79
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the log driver is configured on a container."
          },
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 92
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.LogDriver",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "_containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
            }
          }
        }
      ],
      "name": "SyslogLogDriver",
      "symbolId": "lib/log-drivers/syslog-log-driver:SyslogLogDriver"
    },
    "@aws-cdk/aws-ecs.SyslogLogDriverProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "[Source](https://docs.docker.com/config/containers/logging/syslog/)",
        "stability": "stable",
        "summary": "Specifies the syslog log driver configuration options.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst syslogLogDriverProps: ecs.SyslogLogDriverProps = {\n  address: 'address',\n  env: ['env'],\n  envRegex: 'envRegex',\n  facility: 'facility',\n  format: 'format',\n  labels: ['labels'],\n  tag: 'tag',\n  tlsCaCert: 'tlsCaCert',\n  tlsCert: 'tlsCert',\n  tlsKey: 'tlsKey',\n  tlsSkipVerify: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.SyslogLogDriverProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/log-drivers/syslog-log-driver.ts",
        "line": 15
      },
      "name": "SyslogLogDriverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- If the transport is tcp, udp, or tcp+tls, the default port is 514.",
            "remarks": "The URI specifier may be\n[tcp|udp|tcp+tls]://host:port, unix://path, or unixgram://path.",
            "stability": "stable",
            "summary": "The address of an external syslog server."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 22
          },
          "name": "address",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- facility not set",
            "remarks": "Can be the number or name for any valid\nsyslog facility. See the syslog documentation:\nhttps://tools.ietf.org/html/rfc5424#section-6.2.1.",
            "stability": "stable",
            "summary": "The syslog facility to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 31
          },
          "name": "facility",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- format not set",
            "remarks": "If not specified the local UNIX syslog\nformat is used, without a specified hostname. Specify rfc3164 for the RFC-3164\ncompatible format, rfc5424 for RFC-5424 compatible format, or rfc5424micro\nfor RFC-5424 compatible format with microsecond timestamp resolution.",
            "stability": "stable",
            "summary": "The syslog message format to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 73
          },
          "name": "format",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- tlsCaCert not set",
            "remarks": "Ignored\nif the address protocol is not tcp+tls.",
            "stability": "stable",
            "summary": "The absolute path to the trust certificates signed by the CA."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 39
          },
          "name": "tlsCaCert",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- tlsCert not set",
            "remarks": "Ignored if the address\nprotocol is not tcp+tls.",
            "stability": "stable",
            "summary": "The absolute path to the TLS certificate file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 47
          },
          "name": "tlsCert",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- tlsKey not set",
            "remarks": "Ignored if the address protocol\nis not tcp+tls.",
            "stability": "stable",
            "summary": "The absolute path to the TLS key file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 55
          },
          "name": "tlsKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Ignored if the address protocol is not tcp+tls.",
            "stability": "stable",
            "summary": "If set to true, TLS verification is skipped when connecting to the syslog daemon."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/log-drivers/syslog-log-driver.ts",
            "line": 63
          },
          "name": "tlsSkipVerify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/log-drivers/syslog-log-driver:SyslogLogDriverProps"
    },
    "@aws-cdk/aws-ecs.SystemControl": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Kernel parameters to set in the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst systemControl: ecs.SystemControl = {\n  namespace: 'namespace',\n  value: 'value',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.SystemControl",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 1116
      },
      "name": "SystemControl",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The namespaced kernel parameter for which to set a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1120
          },
          "name": "namespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The value for the namespaced kernel parameter specified in namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1125
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/container-definition:SystemControl"
    },
    "@aws-cdk/aws-ecs.TagParameterContainerImage": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/aws-ecs.ContainerImage",
      "docs": {
        "remarks": "This allows providing this tag through the Parameter at deploy time,\nfor example in a CodePipeline that pushes a new tag of the image to the repository during a build step,\nand then provides that new tag through the CloudFormation Parameter in the deploy step.",
        "see": "#tagParameterName",
        "stability": "stable",
        "summary": "A special type of {@link ContainerImage} that uses an ECR repository for the image, but a CloudFormation Parameter for the tag of the image in that repository.",
        "example": "\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});",
        "custom": {
          "exampleMetadata": "lit=test/integ.pipeline-ecs-separate-source.lit.ts infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.TagParameterContainerImage",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/images/tag-parameter-container-image.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "repository",
            "type": {
              "fqn": "@aws-cdk/aws-ecr.IRepository"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/images/tag-parameter-container-image.ts",
        "line": 19
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Called when the image is used by a ContainerDefinition."
          },
          "locationInModule": {
            "filename": "lib/images/tag-parameter-container-image.ts",
            "line": 28
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-ecs.ContainerImage",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "containerDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerImageConfig"
            }
          }
        }
      ],
      "name": "TagParameterContainerImage",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the name of the CloudFormation Parameter that represents the tag of the image in the ECR repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/images/tag-parameter-container-image.ts",
            "line": 41
          },
          "name": "tagParameterName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the value of the CloudFormation Parameter that represents the tag of the image in the ECR repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/images/tag-parameter-container-image.ts",
            "line": 57
          },
          "name": "tagParameterValue",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/images/tag-parameter-container-image:TagParameterContainerImage"
    },
    "@aws-cdk/aws-ecs.TaskDefinition": {
      "assembly": "@aws-cdk/aws-ecs",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable",
        "summary": "The base class for all task definitions.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.TaskDefinition",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the TaskDefinition class."
        },
        "locationInModule": {
          "filename": "lib/base/task-definition.ts",
          "line": 387
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs.TaskDefinitionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ecs.ITaskDefinition"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 292
      },
      "methods": [
        {
          "docs": {
            "remarks": "The task will have a compatibility of EC2+Fargate.",
            "stability": "stable",
            "summary": "Imports a task definition from the specified task definition ARN."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 299
          },
          "name": "fromTaskDefinitionArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "taskDefinitionArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ITaskDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a task definition from a task definition reference."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 306
          },
          "name": "fromTaskDefinitionAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TaskDefinitionAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ITaskDefinition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds a new container to the task definition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 589
          },
          "name": "addContainer",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinitionOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
            }
          }
        },
        {
          "docs": {
            "remarks": "Extension can be used to apply a packaged modification to\na task definition.",
            "stability": "stable",
            "summary": "Adds the specified extension to the task definition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 642
          },
          "name": "addExtension",
          "parameters": [
            {
              "name": "extension",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ITaskDefinitionExtension"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds a firelens log router to the task definition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 596
          },
          "name": "addFirelensLogRouter",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterDefinitionOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.FirelensLogRouter"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds an inference accelerator to the task definition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 649
          },
          "name": "addInferenceAccelerator",
          "parameters": [
            {
              "name": "inferenceAccelerator",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.InferenceAccelerator"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds the specified placement constraint to the task definition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 629
          },
          "name": "addPlacementConstraint",
          "parameters": [
            {
              "name": "constraint",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds a policy statement to the task execution IAM role."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 582
          },
          "name": "addToExecutionRolePolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds a policy statement to the task IAM role."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 575
          },
          "name": "addToTaskRolePolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds a volume to the task definition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 622
          },
          "name": "addVolume",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.Volume"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the container that match the provided containerName."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 700
          },
          "name": "findContainer",
          "parameters": [
            {
              "name": "containerName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates the task execution IAM role if it doesn't already exist."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 659
          },
          "name": "obtainExecutionRole",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.IRole"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Validates the task definition."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 681
          },
          "name": "validate",
          "overrides": "@aws-cdk/core.Construct",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "TaskDefinition",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The task launch type compatibility requirement."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 349
          },
          "name": "compatibility",
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Compatibility"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The container definitions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 361
          },
          "name": "containers",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "remarks": "A family groups multiple versions of a task definition.",
            "stability": "stable",
            "summary": "The name of a family that this task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 319
          },
          "name": "family",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Public getter method to access list of inference accelerators attached to the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 493
          },
          "name": "inferenceAccelerators",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.InferenceAccelerator"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return true if the task definition can be run on an EC2 cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 270
          },
          "name": "isEc2Compatible",
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return true if the task definition can be run on a ECS anywhere cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 284
          },
          "name": "isExternalCompatible",
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Return true if the task definition can be run on a Fargate cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 277
          },
          "name": "isFargateCompatible",
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The networking mode to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 335
          },
          "name": "networkMode",
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.NetworkMode"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The full Amazon Resource Name (ARN) of the task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 325
          },
          "name": "taskDefinitionArn",
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 330
          },
          "name": "taskRole",
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "docs": {
            "remarks": "Only supported in Fargate platform version 1.4.0 or later.",
            "stability": "stable",
            "summary": "The amount (in GiB) of ephemeral storage to be allocated to the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 356
          },
          "name": "ephemeralStorageGiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Execution role for this task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 486
          },
          "name": "executionRole",
          "optional": true,
          "overrides": "@aws-cdk/aws-ecs.ITaskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Whether this task definition has at least a container that references a specific JSON field of a secret stored in Secrets Manager."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 674
          },
          "name": "referencesSecretJsonField",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "Load balancers will send traffic to this container. The first\nessential container that is added to this task will become the default\ncontainer.",
            "stability": "stable",
            "summary": "Default container for this task."
          },
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 344
          },
          "name": "defaultContainer",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:TaskDefinition"
    },
    "@aws-cdk/aws-ecs.TaskDefinitionAttributes": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "A reference to an existing task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst taskDefinitionAttributes: ecs.TaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  compatibility: ecs.Compatibility.EC2,\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.TaskDefinitionAttributes",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 250
      },
      "name": "TaskDefinitionAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "Compatibility.EC2_AND_FARGATE",
            "stability": "stable",
            "summary": "What launch types this task definition should be compatible with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 256
          },
          "name": "compatibility",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Compatibility"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:TaskDefinitionAttributes"
    },
    "@aws-cdk/aws-ecs.TaskDefinitionProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for task definitions.",
        "example": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.TaskDefinitionProps",
      "interfaces": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 108
      },
      "name": "TaskDefinitionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The task launch type compatiblity requirement."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 133
          },
          "name": "compatibility",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Compatibility"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CPU units are not specified.",
            "remarks": "If you are using the EC2 launch type, this field is optional and any value can be used.\nIf you are using the Fargate launch type, this field is required and you must use one of the following values,\nwhich determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)\n\n512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)\n\n1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)\n\n2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)\n\n4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 154
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Undefined, in which case, the task will receive 20GiB ephemeral storage.",
            "remarks": "Only supported in Fargate platform version 1.4.0 or later.",
            "stability": "stable",
            "summary": "The amount (in GiB) of ephemeral storage to be allocated to the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 211
          },
          "name": "ephemeralStorageGiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No inference accelerators.",
            "remarks": "Not supported in Fargate.",
            "stability": "stable",
            "summary": "The inference accelerators to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 202
          },
          "name": "inferenceAccelerators",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.InferenceAccelerator"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- IpcMode used by the task is not specified",
            "remarks": "Not supported in Fargate and Windows containers.",
            "stability": "stable",
            "summary": "The IPC resource namespace to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 184
          },
          "name": "ipcMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.IpcMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Memory used by task is not specified.",
            "remarks": "If using the EC2 launch type, this field is optional and any value can be used.\nIf using the Fargate launch type, this field is required and you must use one of the following values,\nwhich determines your range of valid values for the cpu parameter:\n\n512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n\n1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n\n2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n\nBetween 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n\nBetween 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 175
          },
          "name": "memoryMiB",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- NetworkMode.Bridge for EC2 & External tasks, AwsVpc for Fargate tasks.",
            "remarks": "On Fargate, the only supported networking mode is AwsVpc.",
            "stability": "stable",
            "summary": "The networking mode to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 116
          },
          "name": "networkMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.NetworkMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- PidMode used by the task is not specified",
            "remarks": "Not supported in Fargate and Windows containers.",
            "stability": "stable",
            "summary": "The process namespace to use for the containers in the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 193
          },
          "name": "pidMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PidMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No placement constraints.",
            "remarks": "You can specify a maximum of 10 constraints per task (this limit includes\nconstraints in the task definition and those specified at run time).\n\nNot supported in Fargate.",
            "stability": "stable",
            "summary": "The placement constraints to use for tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 128
          },
          "name": "placementConstraints",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Undefined.",
            "remarks": "A runtimePlatform is supported only for tasks using the Fargate launch type.",
            "stability": "stable",
            "summary": "The operating system that your task definitions are running on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 220
          },
          "name": "runtimePlatform",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.RuntimePlatform"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:TaskDefinitionProps"
    },
    "@aws-cdk/aws-ecs.Tmpfs": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The details of a tmpfs mount for a container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst tmpfs: ecs.Tmpfs = {\n  containerPath: 'containerPath',\n  size: 123,\n\n  // the properties below are optional\n  mountOptions: [ecs.TmpfsMountOption.DEFAULTS],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Tmpfs",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 159
      },
      "name": "Tmpfs",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The absolute file path where the tmpfs volume is to be mounted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 163
          },
          "name": "containerPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The size (in MiB) of the tmpfs volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 168
          },
          "name": "size",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "For more information, see\n[TmpfsMountOptions](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Tmpfs.html).",
            "stability": "stable",
            "summary": "The list of tmpfs volume mount options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/linux-parameters.ts",
            "line": 174
          },
          "name": "mountOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.TmpfsMountOption"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/linux-parameters:Tmpfs"
    },
    "@aws-cdk/aws-ecs.TmpfsMountOption": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "The supported options for a tmpfs mount for a container."
      },
      "fqn": "@aws-cdk/aws-ecs.TmpfsMountOption",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/linux-parameters.ts",
        "line": 252
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "DEFAULTS"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RO"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RW"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SUID"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NOSUID"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "DEV"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NODEV"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "EXEC"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NOEXEC"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SYNC"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "ASYNC"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "DIRSYNC"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "REMOUNT"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MAND"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NOMAND"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "ATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NOATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "DIRATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NODIRATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "BIND"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RBIND"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "UNBINDABLE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RUNBINDABLE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "PRIVATE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RPRIVATE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SHARED"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RSHARED"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SLAVE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RSLAVE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RELATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NORELATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "STRICTATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NOSTRICTATIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MODE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "UID"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "GID"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NR_INODES"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NR_BLOCKS"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MPOL"
        }
      ],
      "name": "TmpfsMountOption",
      "symbolId": "lib/linux-parameters:TmpfsMountOption"
    },
    "@aws-cdk/aws-ecs.TrackCustomMetricProps": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for enabling target tracking scaling based on a custom CloudWatch metric.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metric: cloudwatch.Metric;\nconst trackCustomMetricProps: ecs.TrackCustomMetricProps = {\n  metric: metric,\n  targetValue: 123,\n\n  // the properties below are optional\n  disableScaleIn: false,\n  policyName: 'policyName',\n  scaleInCooldown: cdk.Duration.minutes(30),\n  scaleOutCooldown: cdk.Duration.minutes(30),\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.TrackCustomMetricProps",
      "interfaces": [
        "@aws-cdk/aws-applicationautoscaling.BaseTargetTrackingProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/scalable-task-count.ts",
        "line": 138
      },
      "name": "TrackCustomMetricProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The metric must represent utilization; that is, you will always get the following behavior:\n\n- metric > targetValue => scale out\n- metric < targetValue => scale in",
            "stability": "stable",
            "summary": "The custom CloudWatch metric to track."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 147
          },
          "name": "metric",
          "type": {
            "fqn": "@aws-cdk/aws-cloudwatch.IMetric"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The target value for the custom CloudWatch metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scalable-task-count.ts",
            "line": 152
          },
          "name": "targetValue",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/base/scalable-task-count:TrackCustomMetricProps"
    },
    "@aws-cdk/aws-ecs.Ulimit": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "NOTE: Does not work for Windows containers.",
        "stability": "stable",
        "summary": "The ulimit settings to pass to the container.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst ulimit: ecs.Ulimit = {\n  hardLimit: 123,\n  name: ecs.UlimitName.CORE,\n  softLimit: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Ulimit",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 874
      },
      "name": "Ulimit",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The hard limit for the ulimit type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 890
          },
          "name": "hardLimit",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "For more information, see [UlimitName](https://docs.aws.amazon.com/cdk/api/latest/typescript/api/aws-ecs/ulimitname.html#aws_ecs_UlimitName).",
            "stability": "stable",
            "summary": "The type of the ulimit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 880
          },
          "name": "name",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.UlimitName"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The soft limit for the ulimit type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 885
          },
          "name": "softLimit",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/container-definition:Ulimit"
    },
    "@aws-cdk/aws-ecs.UlimitName": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "Type of resource to set a limit on."
      },
      "fqn": "@aws-cdk/aws-ecs.UlimitName",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 896
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "CORE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "CPU"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "DATA"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "FSIZE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "LOCKS"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MEMLOCK"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "MSGQUEUE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NICE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NOFILE"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "NPROC"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RSS"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RTPRIO"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "RTTIME"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SIGPENDING"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "STACK"
        }
      ],
      "name": "UlimitName",
      "symbolId": "lib/container-definition:UlimitName"
    },
    "@aws-cdk/aws-ecs.Volume": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "remarks": "For tasks that use a Docker volume, specify a DockerVolumeConfiguration.\nFor tasks that use a bind mount host volume, specify a host and optional sourcePath.\n\nFor more information, see [Using Data Volumes in Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).",
        "stability": "stable",
        "summary": "A data volume used in a task definition.",
        "example": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.Volume",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/task-definition.ts",
        "line": 854
      },
      "name": "Volume",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed.\nThis name is referenced in the sourceVolume parameter of container definition mountPoints.",
            "stability": "stable",
            "summary": "The name of the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 872
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Docker volumes are only supported when you are using the EC2 launch type.\nWindows containers only support the use of the local driver.\nTo use bind mounts, specify a host instead.",
            "stability": "stable",
            "summary": "This property is specified when you are using Docker volumes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 881
          },
          "name": "dockerVolumeConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DockerVolumeConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No Elastic FileSystem is setup",
            "remarks": "When specifying Amazon EFS volumes in tasks using the Fargate launch type,\nFargate creates a supervisor container that is responsible for managing the Amazon EFS volume.\nThe supervisor container uses a small amount of the task's memory.\nThe supervisor container is visible when querying the task metadata version 4 endpoint,\nbut is not visible in CloudWatch Container Insights.",
            "stability": "stable",
            "summary": "This property is specified when you are using Amazon EFS."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 894
          },
          "name": "efsVolumeConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.EfsVolumeConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Bind mount host volumes are supported when you are using either the EC2 or Fargate launch types.\nThe contents of the host parameter determine whether your bind mount host volume persists on the\nhost container instance and where it is stored. If the host parameter is empty, then the Docker\ndaemon assigns a host path for your data volume. However, the data is not guaranteed to persist\nafter the containers associated with it stop running.",
            "stability": "stable",
            "summary": "This property is specified when you are using bind mount host volumes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/task-definition.ts",
            "line": 864
          },
          "name": "host",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Host"
          }
        }
      ],
      "symbolId": "lib/base/task-definition:Volume"
    },
    "@aws-cdk/aws-ecs.VolumeFrom": {
      "assembly": "@aws-cdk/aws-ecs",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The details on a data volume from another container in the same task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst volumeFrom: ecs.VolumeFrom = {\n  readOnly: false,\n  sourceContainer: 'sourceContainer',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs.VolumeFrom",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/container-definition.ts",
        "line": 1091
      },
      "name": "VolumeFrom",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If this value is true, the container has read-only access to the volume.\nIf this value is false, then the container can write to the volume.",
            "stability": "stable",
            "summary": "Specifies whether the container has read-only access to the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1103
          },
          "name": "readOnly",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The name of another container within the same task definition from which to mount volumes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/container-definition.ts",
            "line": 1095
          },
          "name": "sourceContainer",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/container-definition:VolumeFrom"
    },
    "@aws-cdk/aws-ecs.WindowsOptimizedVersion": {
      "assembly": "@aws-cdk/aws-ecs",
      "docs": {
        "stability": "stable",
        "summary": "ECS-optimized Windows version list."
      },
      "fqn": "@aws-cdk/aws-ecs.WindowsOptimizedVersion",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/amis.ts",
        "line": 34
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SERVER_2019"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SERVER_2016"
        }
      ],
      "name": "WindowsOptimizedVersion",
      "symbolId": "lib/amis:WindowsOptimizedVersion"
    }
  },
  "version": "1.193.0",
  "fingerprint": "**********"
}