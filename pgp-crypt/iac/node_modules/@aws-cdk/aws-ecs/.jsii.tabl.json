{
  "version": "2",
  "toolVersion": "1.74.0",
  "snippets": {
    "c9c6a8c88b4fb7be990cedb097c2f2aa75160427b4dacd11ef3f72821155191d": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\n# Create an ECS cluster\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Add capacity to it\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"DefaultContainer\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=512\n)\n\n# Instantiate an Amazon ECS Service\necs_service = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\n// Create an ECS cluster\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Add capacity to it\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"DefaultContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 512\n});\n\n// Instantiate an Amazon ECS Service\nEc2Service ecsService = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\n// Create an ECS cluster\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Add capacity to it\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"DefaultContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(512)\n        .build());\n\n// Instantiate an Amazon ECS Service\nEc2Service ecsService = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\n// Create an ECS cluster\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\n// Add capacity to it\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroupCapacity\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.xlarge\")),\n\tdesiredCapacity: jsii.Number(3),\n})\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"DefaultContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(512),\n})\n\n// Instantiate an Amazon ECS Service\necsService := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 28,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 3,
        "197": 4,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "3e7a584768aedabc6e65dd57722ebd947f0014ebe561bae3cbd75a7777c18cba"
    },
    "b3dac31f45ff994dbec7c0d5143e78caf2e31c19670a2aa03606cabaeae774c1": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cd7deef9b7dc0e852e95713e0435e2f1b8b79745499dbffd37dd0ccf93b45782"
    },
    "0aa974c1559781be7c1b1677dd4da586e52114e261982a87fe40d8e440ebe91d": {
      "translations": {
        "python": {
          "source": "cluster_arn = \"arn:aws:ecs:us-east-1:012345678910:cluster/clusterName\"\n\ncluster = ecs.Cluster.from_cluster_arn(self, \"Cluster\", cluster_arn)",
          "version": "2"
        },
        "csharp": {
          "source": "string clusterArn = \"arn:aws:ecs:us-east-1:012345678910:cluster/clusterName\";\n\nICluster cluster = Cluster.FromClusterArn(this, \"Cluster\", clusterArn);",
          "version": "1"
        },
        "java": {
          "source": "String clusterArn = \"arn:aws:ecs:us-east-1:012345678910:cluster/clusterName\";\n\nICluster cluster = Cluster.fromClusterArn(this, \"Cluster\", clusterArn);",
          "version": "1"
        },
        "go": {
          "source": "clusterArn := \"arn:aws:ecs:us-east-1:012345678910:cluster/clusterName\"\n\ncluster := ecs.cluster.fromClusterArn(this, jsii.String(\"Cluster\"), clusterArn)",
          "version": "1"
        },
        "$": {
          "source": "const clusterArn = 'arn:aws:ecs:us-east-1:012345678910:cluster/clusterName';\n\nconst cluster = ecs.Cluster.fromClusterArn(this, 'Cluster', clusterArn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 102
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#fromClusterArn",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst clusterArn = 'arn:aws:ecs:us-east-1:012345678910:cluster/clusterName';\n\nconst cluster = ecs.Cluster.fromClusterArn(this, 'Cluster', clusterArn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "640eb5a59470b50b6123ea6f9d70aa961ac8e0e3279fbdddf0c62a5c5accf81b"
    },
    "8430417a661796828b530ad96f46dffc2c9dadf923ba5f1771e28966dca94704": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Either add default capacity\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\n# Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(),\n    # Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    # machineImage: EcsOptimizedImage.amazonLinux2(),\n    desired_capacity=3\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Either add default capacity\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux(),\n    // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    // machineImage: EcsOptimizedImage.amazonLinux2(),\n    DesiredCapacity = 3\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Either add default capacity\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .machineImage(EcsOptimizedImage.amazonLinux())\n        // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n        // machineImage: EcsOptimizedImage.amazonLinux2(),\n        .desiredCapacity(3)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\n// Either add default capacity\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroupCapacity\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.xlarge\")),\n\tdesiredCapacity: jsii.Number(3),\n})\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.xlarge\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux(),\n\t// Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n\t// machineImage: EcsOptimizedImage.amazonLinux2(),\n\tdesiredCapacity: jsii.Number(3),\n})\n\ncapacityProvider := ecs.NewAsgCapacityProvider(this, jsii.String(\"AsgCapacityProvider\"), &asgCapacityProviderProps{\n\tautoScalingGroup: autoScalingGroup,\n})\ncluster.addAsgCapacityProvider(capacityProvider)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 118
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 32,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "ae2235b7911b1583d38c930fb66794916f54f79b4bf7e228d205074f793147af"
    },
    "00471cdcbafcff42bd1b016db774055e9fb4a0c3ec03e93bc10e985be876d2f9": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(cached_in_context=True),\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    MachineImage = EcsOptimizedImage.AmazonLinux(new EcsOptimizedImageOptions { CachedInContext = true }),\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .machineImage(EcsOptimizedImage.amazonLinux(EcsOptimizedImageOptions.builder().cachedInContext(true).build()))\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux(&ecsOptimizedImageOptions{\n\t\tcachedInContext: jsii.Boolean(true),\n\t}),\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 161
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux",
        "@aws-cdk/aws-ecs.EcsOptimizedImageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a8976a2b7d9775cfe2a33de56be4b9c2b38219655138a62f74b230140beabab9"
    },
    "121007239be1194e23fd944eec608101cae029f6c9952b50622f624318feebf8": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n\ncluster.add_capacity(\"bottlerocket-asg\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c5.large\"),\n    machine_image=ecs.BottleRocketImage()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"bottlerocket-asg\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c5.large\"),\n    MachineImage = new BottleRocketImage()\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"bottlerocket-asg\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c5.large\"))\n        .machineImage(new BottleRocketImage())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\ncluster.addCapacity(jsii.String(\"bottlerocket-asg\"), &addCapacityOptions{\n\tminCapacity: jsii.Number(2),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"c5.large\")),\n\tmachineImage: ecs.NewBottleRocketImage(),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 179
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.BottleRocketImage",
        "@aws-cdk/aws-ecs.Cluster#addCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7ddc81982a655cc7f31bf710e88d5c590df9d43746d0697f34e629e300b1848e"
    },
    "617f46cc0f772b3e05233dc1b103f5072a60d5882f8c0e638a9d381818d98583": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(ecs.AmiHardwareType.ARM)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(AmiHardwareType.ARM)\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2(AmiHardwareType.ARM))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\ncluster.addCapacity(jsii.String(\"graviton-cluster\"), &addCapacityOptions{\n\tminCapacity: jsii.Number(2),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"c6g.large\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux2(ecs.amiHardwareType_ARM),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 196
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.AmiHardwareType",
        "@aws-cdk/aws-ecs.AmiHardwareType#ARM",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 16,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "efc558df2efd70a9b9f2aa7b6cc650da1cb4b55a08aa86968be9baf0bed7fd5e"
    },
    "5db6bf91e6482b9a5286f7036c9f951d7de11f8b2a8fea10171cf690bdbe98ef": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image_type=ecs.MachineImageType.BOTTLEROCKET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImageType = MachineImageType.BOTTLEROCKET\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImageType(MachineImageType.BOTTLEROCKET)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\ncluster.addCapacity(jsii.String(\"graviton-cluster\"), &addCapacityOptions{\n\tminCapacity: jsii.Number(2),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"c6g.large\")),\n\tmachineImageType: ecs.machineImageType_BOTTLEROCKET,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 208
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.MachineImageType",
        "@aws-cdk/aws-ecs.MachineImageType#BOTTLEROCKET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "63dd6d3996d48036fc8ca202267807d855e5390efc7c04339d3faf456d671686"
    },
    "1bb9cfdd26f05f212a90917efd32f414bd3c3e440a45a9723cc5886e54f527b8": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n\n# Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.add_capacity(\"AsgSpot\",\n    max_capacity=2,\n    min_capacity=2,\n    desired_capacity=2,\n    instance_type=ec2.InstanceType(\"c5.xlarge\"),\n    spot_price=\"0.0735\",\n    # Enable the Automated Spot Draining support for Amazon ECS\n    spot_instance_draining=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.AddCapacity(\"AsgSpot\", new AddCapacityOptions {\n    MaxCapacity = 2,\n    MinCapacity = 2,\n    DesiredCapacity = 2,\n    InstanceType = new InstanceType(\"c5.xlarge\"),\n    SpotPrice = \"0.0735\",\n    // Enable the Automated Spot Draining support for Amazon ECS\n    SpotInstanceDraining = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity(\"AsgSpot\", AddCapacityOptions.builder()\n        .maxCapacity(2)\n        .minCapacity(2)\n        .desiredCapacity(2)\n        .instanceType(new InstanceType(\"c5.xlarge\"))\n        .spotPrice(\"0.0735\")\n        // Enable the Automated Spot Draining support for Amazon ECS\n        .spotInstanceDraining(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity(jsii.String(\"AsgSpot\"), &addCapacityOptions{\n\tmaxCapacity: jsii.Number(2),\n\tminCapacity: jsii.Number(2),\n\tdesiredCapacity: jsii.Number(2),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"c5.xlarge\")),\n\tspotPrice: jsii.String(\"0.0735\"),\n\t// Enable the Automated Spot Draining support for Amazon ECS\n\tspotInstanceDraining: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity('AsgSpot', {\n  maxCapacity: 2,\n  minCapacity: 2,\n  desiredCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.xlarge'),\n  spotPrice: '0.0735',\n  // Enable the Automated Spot Draining support for Amazon ECS\n  spotInstanceDraining: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 222
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity('AsgSpot', {\n  maxCapacity: 2,\n  minCapacity: 2,\n  desiredCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.xlarge'),\n  spotPrice: '0.0735',\n  // Enable the Automated Spot Draining support for Amazon ECS\n  spotInstanceDraining: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 13,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d37a1c9b95771269894f1404fcf6d0af7b9d47b3137e12b2ffbb48194f82a971"
    },
    "9160d872aa0e50f4fd6737806775c28b280ac47895a3eea288872a9714be1bae": {
      "translations": {
        "python": {
          "source": "# Given\n# cluster: ecs.Cluster\n# key: kms.Key\n\n# Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.add_capacity(\"ASGEncryptedSNS\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3,\n    topic_encryption_key=key\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Given\nCluster cluster;\nKey key;\n\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.AddCapacity(\"ASGEncryptedSNS\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3,\n    TopicEncryptionKey = key\n});",
          "version": "1"
        },
        "java": {
          "source": "// Given\nCluster cluster;\nKey key;\n\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity(\"ASGEncryptedSNS\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .topicEncryptionKey(key)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Given\nvar cluster cluster\nvar key key\n\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity(jsii.String(\"ASGEncryptedSNS\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.xlarge\")),\n\tdesiredCapacity: jsii.Number(3),\n\ttopicEncryptionKey: key,\n})",
          "version": "1"
        },
        "$": {
          "source": "// Given\ndeclare const cluster: ecs.Cluster;\ndeclare const key: kms.Key;\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity('ASGEncryptedSNS', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n  topicEncryptionKey: key,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 244
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-kms.IKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Given\ndeclare const cluster: ecs.Cluster;\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity('ASGEncryptedSNS', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n  topicEncryptionKey: key,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6e589c607129ff89117ed419b23c716b680fcf4513bb5dded1e7d3d5206f56e1"
    },
    "698e45bf0b8b2a82b165279ebc980100a0ff997bf6120bc5625912c513742012": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fargateTaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\tmemoryLimitMiB: jsii.Number(512),\n\tcpu: jsii.Number(256),\n})",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 271
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "853b0b8cd9ff487ff8c3f37e73c5d357a82825d59272728a82b40e59e72cb4bb"
    },
    "97126429621d8f886e480e83bc2d80b113c1284b7e6223d272dc48028210ed23": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256,\n    ephemeral_storage_gi_b=100\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256,\n    EphemeralStorageGiB = 100\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .ephemeralStorageGiB(100)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "fargateTaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\tmemoryLimitMiB: jsii.Number(512),\n\tcpu: jsii.Number(256),\n\tephemeralStorageGiB: jsii.Number(100),\n})",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n  ephemeralStorageGiB: 100,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 281
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n  ephemeralStorageGiB: 100,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "853b0b8cd9ff487ff8c3f37e73c5d357a82825d59272728a82b40e59e72cb4bb"
    },
    "d6554b770077ed84ad594117c6f82140fcf6d223a461fef717f1cc5159bbdb34": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\ncontainer = fargate_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nContainerDefinition container = fargateTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nContainerDefinition container = fargateTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "fargateTaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\tmemoryLimitMiB: jsii.Number(512),\n\tcpu: jsii.Number(256),\n})\ncontainer := fargateTaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 291
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "40de7df4ec691b7f7b18b9a672d7c0b6840f5d731b90f1a97fe5b801f6a6360f"
    },
    "5412adb846a43ca4b6449551dfc28013875e657263e8d999f53b98ff5271064d": {
      "translations": {
        "python": {
          "source": "ec2_task_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\",\n    network_mode=ecs.NetworkMode.BRIDGE\n)\n\ncontainer = ec2_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = new Ec2TaskDefinition(this, \"TaskDef\", new Ec2TaskDefinitionProps {\n    NetworkMode = NetworkMode.BRIDGE\n});\n\nContainerDefinition container = ec2TaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = Ec2TaskDefinition.Builder.create(this, \"TaskDef\")\n        .networkMode(NetworkMode.BRIDGE)\n        .build();\n\nContainerDefinition container = ec2TaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "ec2TaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"), &ec2TaskDefinitionProps{\n\tnetworkMode: ecs.networkMode_BRIDGE,\n})\n\ncontainer := ec2TaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n})",
          "version": "1"
        },
        "$": {
          "source": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 305
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#BRIDGE",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "271c11c7bcf04c6609e7edef38029293fee1e176b75cf229dec4d513aed9659f"
    },
    "8e8449e5a66be33a53689cc1585e1c53906fdf339f726b5a932589973b760c01": {
      "translations": {
        "python": {
          "source": "external_task_definition = ecs.ExternalTaskDefinition(self, \"TaskDef\")\n\ncontainer = external_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "externalTaskDefinition := ecs.NewExternalTaskDefinition(this, jsii.String(\"TaskDef\"))\n\ncontainer := externalTaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n})",
          "version": "1"
        },
        "$": {
          "source": "const externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 320
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ExternalTaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "038863ee0c2fd690c91a78619b159856370b47719127a206cc8e73f50884d8d6"
    },
    "4c4be3d143fb5d60d538ca5139c6cb3590084ef71170e941cc8c7efa2ee47d47": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n\n\ntask_definition.add_container(\"WebContainer\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    port_mappings=[ecs.PortMapping(container_port=3000)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    PortMappings = new [] { new PortMapping { ContainerPort = 3000 } }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .portMappings(List.of(PortMapping.builder().containerPort(3000).build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\n\n\ntaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(3000),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\n\ntaskDefinition.addContainer(\"WebContainer\", {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  portMappings: [{ containerPort: 3000 }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 335
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ntaskDefinition.addContainer(\"WebContainer\", {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  portMappings: [{ containerPort: 3000 }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "326ab44a5d5da2a23f2418a673cdbc26c0cbf403db51fb8f05fb4776f8a67d05"
    },
    "120aea3a2de6e7bc6b6373c542fa27abb3f8abb604346ddf1b16e0b8026503ae": {
      "translations": {
        "python": {
          "source": "# container: ecs.ContainerDefinition\n\n\ncontainer.add_port_mappings(\n    container_port=3000\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ContainerDefinition container;\n\n\ncontainer.AddPortMappings(new PortMapping {\n    ContainerPort = 3000\n});",
          "version": "1"
        },
        "java": {
          "source": "ContainerDefinition container;\n\n\ncontainer.addPortMappings(PortMapping.builder()\n        .containerPort(3000)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var container containerDefinition\n\n\ncontainer.addPortMappings(&portMapping{\n\tcontainerPort: jsii.Number(3000),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const container: ecs.ContainerDefinition;\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 347
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.PortMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const container: ecs.ContainerDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2b1381460d33dca05f605d00e2868645bcb73c3bc3f5e7da230cc028b0ec8477"
    },
    "e87a3180b41545552231bc30602ec12b9ad3a7a64fdf78e289e1adb3f715dcb4": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\nvolume = {\n    # Use an Elastic FileSystem\n    \"name\": \"mydatavolume\",\n    \"efs_volume_configuration\": {\n        \"file_system_id\": \"EFS\"\n    }\n}\n\ncontainer = fargate_task_definition.add_volume(volume)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nIDictionary<string, object> volume = new Dictionary<string, object> {\n    // Use an Elastic FileSystem\n    { \"name\", \"mydatavolume\" },\n    { \"efsVolumeConfiguration\", new Dictionary<string, string> {\n        { \"fileSystemId\", \"EFS\" }\n    } }\n};\n\nvoid container = fargateTaskDefinition.AddVolume(volume);",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nMap<String, Object> volume = Map.of(\n        // Use an Elastic FileSystem\n        \"name\", \"mydatavolume\",\n        \"efsVolumeConfiguration\", Map.of(\n                \"fileSystemId\", \"EFS\"));\n\nvoid container = fargateTaskDefinition.addVolume(volume);",
          "version": "1"
        },
        "go": {
          "source": "fargateTaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\tmemoryLimitMiB: jsii.Number(512),\n\tcpu: jsii.Number(256),\n})\nvolume := map[string]interface{}{\n\t// Use an Elastic FileSystem\n\t\"name\": jsii.String(\"mydatavolume\"),\n\t\"efsVolumeConfiguration\": map[string]*string{\n\t\t\"fileSystemId\": jsii.String(\"EFS\"),\n\t},\n}\n\ncontainer := fargateTaskDefinition.addVolume(volume)",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 357
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addVolume",
        "@aws-cdk/aws-ecs.Volume",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "311a6f645f12a4acbe84b4d12012630044436e840d0c803dc38a6a651018108e"
    },
    "381cf4ed7560075a6242c6766d0374a9b067d968d4aa41a08a31dd91d12c081e": {
      "translations": {
        "python": {
          "source": "task_definition = ecs.TaskDefinition(self, \"TaskDef\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    network_mode=ecs.NetworkMode.AWS_VPC,\n    compatibility=ecs.Compatibility.EC2_AND_FARGATE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition = new TaskDefinition(this, \"TaskDef\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    NetworkMode = NetworkMode.AWS_VPC,\n    Compatibility = Compatibility.EC2_AND_FARGATE\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .networkMode(NetworkMode.AWS_VPC)\n        .compatibility(Compatibility.EC2_AND_FARGATE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "taskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TaskDef\"), &taskDefinitionProps{\n\tmemoryMiB: jsii.String(\"512\"),\n\tcpu: jsii.String(\"256\"),\n\tnetworkMode: ecs.networkMode_AWS_VPC,\n\tcompatibility: ecs.compatibility_EC2_AND_FARGATE,\n})",
          "version": "1"
        },
        "$": {
          "source": "const taskDefinition = new ecs.TaskDefinition(this, 'TaskDef', {\n  memoryMiB: '512',\n  cpu: '256',\n  networkMode: ecs.NetworkMode.AWS_VPC,\n  compatibility: ecs.Compatibility.EC2_AND_FARGATE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 383
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2_AND_FARGATE",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#AWS_VPC",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst taskDefinition = new ecs.TaskDefinition(this, 'TaskDef', {\n  memoryMiB: '512',\n  cpu: '256',\n  networkMode: ecs.NetworkMode.AWS_VPC,\n  compatibility: ecs.Compatibility.EC2_AND_FARGATE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "45e1bff0d1dd97859de0c410fee0cabff2c0cf68137f958529843d53fcbf8703"
    },
    "8a8f3d0cf3f5bdde3358986cf4a29c526e0b83bd8a63ee6138b3a9ef202d8f50": {
      "translations": {
        "python": {
          "source": "# secret: secretsmanager.Secret\n# db_secret: secretsmanager.Secret\n# parameter: ssm.StringParameter\n# task_definition: ecs.TaskDefinition\n# s3_bucket: s3.Bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"STAGE\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or S3\n        ecs.EnvironmentFile.from_asset(\"./demo-env-file.env\"),\n        ecs.EnvironmentFile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        \"SECRET\": ecs.Secret.from_secrets_manager(secret),\n        \"DB_PASSWORD\": ecs.Secret.from_secrets_manager(db_secret, \"password\"),  # Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        \"API_KEY\": ecs.Secret.from_secrets_manager_version(secret, ecs.SecretVersionInfo(version_id=\"12345\"), \"apiKey\"),  # Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        \"PARAMETER\": ecs.Secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"QUEUE_NAME\", \"MyQueue\")",
          "version": "2"
        },
        "csharp": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    Environment = new Dictionary<string, string> {  // clear text, not for sensitive data\n        { \"STAGE\", \"prod\" } },\n    EnvironmentFiles = new [] { EnvironmentFile.FromAsset(\"./demo-env-file.env\"), EnvironmentFile.FromBucket(s3Bucket, \"assets/demo-env-file.env\") },\n    Secrets = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        { \"SECRET\", Secret.FromSecretsManager(secret) },\n        { \"DB_PASSWORD\", Secret.FromSecretsManager(dbSecret, \"password\") },  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"API_KEY\", Secret.FromSecretsManagerVersion(secret, new SecretVersionInfo { VersionId = \"12345\" }, \"apiKey\") },  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"PARAMETER\", Secret.FromSsmParameter(parameter) } }\n});\nnewContainer.AddEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .environment(Map.of( // clear text, not for sensitive data\n                \"STAGE\", \"prod\"))\n        .environmentFiles(List.of(EnvironmentFile.fromAsset(\"./demo-env-file.env\"), EnvironmentFile.fromBucket(s3Bucket, \"assets/demo-env-file.env\")))\n        .secrets(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n                \"SECRET\", Secret.fromSecretsManager(secret),\n                \"DB_PASSWORD\", Secret.fromSecretsManager(dbSecret, \"password\"),  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n                \"API_KEY\", Secret.fromSecretsManagerVersion(secret, SecretVersionInfo.builder().versionId(\"12345\").build(), \"apiKey\"),  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n                \"PARAMETER\", Secret.fromSsmParameter(parameter)))\n        .build());\nnewContainer.addEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "go": {
          "source": "var secret secret\nvar dbSecret secret\nvar parameter stringParameter\nvar taskDefinition taskDefinition\nvar s3Bucket bucket\n\n\nnewContainer := taskDefinition.addContainer(jsii.String(\"container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n\tenvironment: map[string]*string{\n\t\t // clear text, not for sensitive data\n\t\t\"STAGE\": jsii.String(\"prod\"),\n\t},\n\tenvironmentFiles: []environmentFile{\n\t\tecs.*environmentFile.fromAsset(jsii.String(\"./demo-env-file.env\")),\n\t\tecs.*environmentFile.fromBucket(s3Bucket, jsii.String(\"assets/demo-env-file.env\")),\n\t},\n\tsecrets: map[string]secret{\n\t\t // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n\t\t\"SECRET\": ecs.*secret.fromSecretsManager(secret),\n\t\t\"DB_PASSWORD\": ecs.*secret.fromSecretsManager(dbSecret, jsii.String(\"password\")),\n\t\t // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"API_KEY\": ecs.*secret.fromSecretsManagerVersion(secret, &SecretVersionInfo{\n\t\t\t\"versionId\": jsii.String(\"12345\"),\n\t\t}, jsii.String(\"apiKey\")),\n\t\t // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"PARAMETER\": ecs.*secret.fromSsmParameter(parameter),\n\t},\n})\nnewContainer.addEnvironment(jsii.String(\"QUEUE_NAME\"), jsii.String(\"MyQueue\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 413
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addEnvironment",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EnvironmentFile",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromAsset",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromBucket",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManagerVersion",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.SecretVersionInfo",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 57,
        "130": 5,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 4,
        "194": 16,
        "196": 9,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "57d0240bc176193be8a376f6c0ae32def30f9aced433861943cb3c9279deab05"
    },
    "46fa35a60ce38eabadf852fc67ffaf8e5a3267f03351b49ff17b071820dbd0fe": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n\n\ntask_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    system_controls=[ecs.SystemControl(\n        namespace=\"net\",\n        value=\"ipv4.tcp_tw_recycle\"\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    SystemControls = new [] { new SystemControl {\n        Namespace = \"net\",\n        Value = \"ipv4.tcp_tw_recycle\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .systemControls(List.of(SystemControl.builder()\n                .namespace(\"net\")\n                .value(\"ipv4.tcp_tw_recycle\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\n\n\ntaskDefinition.addContainer(jsii.String(\"container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n\tsystemControls: []systemControl{\n\t\t&systemControl{\n\t\t\tnamespace: jsii.String(\"net\"),\n\t\t\tvalue: jsii.String(\"ipv4.tcp_tw_recycle\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\n\ntaskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  systemControls: [\n    {\n      namespace: 'net',\n      value: 'ipv4.tcp_tw_recycle',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 448
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ntaskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  systemControls: [\n    {\n      namespace: 'net',\n      value: 'ipv4.tcp_tw_recycle',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "326ab44a5d5da2a23f2418a673cdbc26c0cbf403db51fb8f05fb4776f8a67d05"
    },
    "82da3700a5e641e29829134231456f74d09cb5a0bee457e9fe453cae15e1e2e7": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the Windows container to start\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    runtime_platform=ecs.RuntimePlatform(\n        operating_system_family=ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        cpu_architecture=ecs.CpuArchitecture.X86_64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"windowsservercore\",\n    logging=ecs.LogDriver.aws_logs(stream_prefix=\"win-iis-on-fargate\"),\n    port_mappings=[ecs.PortMapping(container_port=80)],\n    image=ecs.ContainerImage.from_registry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    RuntimePlatform = new RuntimePlatform {\n        OperatingSystemFamily = OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        CpuArchitecture = CpuArchitecture.X86_64\n    },\n    Cpu = 1024,\n    MemoryLimitMiB = 2048\n});\n\ntaskDefinition.AddContainer(\"windowsservercore\", new ContainerDefinitionOptions {\n    Logging = LogDriver.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"win-iis-on-fargate\" }),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } },\n    Image = ContainerImage.FromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .runtimePlatform(RuntimePlatform.builder()\n                .operatingSystemFamily(OperatingSystemFamily.WINDOWS_SERVER_2019_CORE)\n                .cpuArchitecture(CpuArchitecture.X86_64)\n                .build())\n        .cpu(1024)\n        .memoryLimitMiB(2048)\n        .build();\n\ntaskDefinition.addContainer(\"windowsservercore\", ContainerDefinitionOptions.builder()\n        .logging(LogDriver.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"win-iis-on-fargate\").build()))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .image(ContainerImage.fromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the Windows container to start\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\truntimePlatform: &runtimePlatform{\n\t\toperatingSystemFamily: ecs.operatingSystemFamily_WINDOWS_SERVER_2019_CORE(),\n\t\tcpuArchitecture: ecs.cpuArchitecture_X86_64(),\n\t},\n\tcpu: jsii.Number(1024),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\ntaskDefinition.addContainer(jsii.String(\"windowsservercore\"), &containerDefinitionOptions{\n\tlogging: ecs.logDriver.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"win-iis-on-fargate\"),\n\t}),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(80),\n\t\t},\n\t},\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 467
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuArchitecture",
        "@aws-cdk/aws-ecs.CpuArchitecture#X86_64",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDriver#awsLogs",
        "@aws-cdk/aws-ecs.OperatingSystemFamily",
        "@aws-cdk/aws-ecs.OperatingSystemFamily#WINDOWS_SERVER_2019_CORE",
        "@aws-cdk/aws-ecs.RuntimePlatform",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 27,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 10,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "5f16697e57d87b5c90a6ef559b358d66b14ec5a4aebf32a647df7a3923ba813f"
    },
    "3aaf19f41d2c4dce1d6532142c0c01c5fb4629338557b109e47d8c3b84b6e777": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for running container on Graviton Runtime.\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    runtime_platform=ecs.RuntimePlatform(\n        operating_system_family=ecs.OperatingSystemFamily.LINUX,\n        cpu_architecture=ecs.CpuArchitecture.ARM64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"webarm64\",\n    logging=ecs.LogDriver.aws_logs(stream_prefix=\"graviton2-on-fargate\"),\n    port_mappings=[ecs.PortMapping(container_port=80)],\n    image=ecs.ContainerImage.from_registry(\"public.ecr.aws/nginx/nginx:latest-arm64v8\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for running container on Graviton Runtime.\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    RuntimePlatform = new RuntimePlatform {\n        OperatingSystemFamily = OperatingSystemFamily.LINUX,\n        CpuArchitecture = CpuArchitecture.ARM64\n    },\n    Cpu = 1024,\n    MemoryLimitMiB = 2048\n});\n\ntaskDefinition.AddContainer(\"webarm64\", new ContainerDefinitionOptions {\n    Logging = LogDriver.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"graviton2-on-fargate\" }),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } },\n    Image = ContainerImage.FromRegistry(\"public.ecr.aws/nginx/nginx:latest-arm64v8\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for running container on Graviton Runtime.\nFargateTaskDefinition taskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .runtimePlatform(RuntimePlatform.builder()\n                .operatingSystemFamily(OperatingSystemFamily.LINUX)\n                .cpuArchitecture(CpuArchitecture.ARM64)\n                .build())\n        .cpu(1024)\n        .memoryLimitMiB(2048)\n        .build();\n\ntaskDefinition.addContainer(\"webarm64\", ContainerDefinitionOptions.builder()\n        .logging(LogDriver.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"graviton2-on-fargate\").build()))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .image(ContainerImage.fromRegistry(\"public.ecr.aws/nginx/nginx:latest-arm64v8\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for running container on Graviton Runtime.\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\truntimePlatform: &runtimePlatform{\n\t\toperatingSystemFamily: ecs.operatingSystemFamily_LINUX(),\n\t\tcpuArchitecture: ecs.cpuArchitecture_ARM64(),\n\t},\n\tcpu: jsii.Number(1024),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\ntaskDefinition.addContainer(jsii.String(\"webarm64\"), &containerDefinitionOptions{\n\tlogging: ecs.logDriver.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"graviton2-on-fargate\"),\n\t}),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(80),\n\t\t},\n\t},\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"public.ecr.aws/nginx/nginx:latest-arm64v8\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for running container on Graviton Runtime.\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.LINUX,\n    cpuArchitecture: ecs.CpuArchitecture.ARM64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('webarm64', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'graviton2-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('public.ecr.aws/nginx/nginx:latest-arm64v8'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 489
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuArchitecture",
        "@aws-cdk/aws-ecs.CpuArchitecture#ARM64",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDriver#awsLogs",
        "@aws-cdk/aws-ecs.OperatingSystemFamily",
        "@aws-cdk/aws-ecs.OperatingSystemFamily#LINUX",
        "@aws-cdk/aws-ecs.RuntimePlatform",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for running container on Graviton Runtime.\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.LINUX,\n    cpuArchitecture: ecs.CpuArchitecture.ARM64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('webarm64', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'graviton2-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('public.ecr.aws/nginx/nginx:latest-arm64v8'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 27,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 10,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "5013e4cce4189b62bd0cf022998865787d730facbc7f0c14bbc91564489f6ff6"
    },
    "e8b651d062f2d85d8caf0abe34ab39177209d9438ed2b260a58767b9ca2f66e9": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\n\nservice = ecs.FargateService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nFargateService service = FargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\n\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tdesiredCount: jsii.Number(5),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 514
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "21e28ca8eb1e9cea6d407b18f7e643cbd964e720d7ea0fceb15eecabcedc3f8e"
    },
    "fd8d2c7ab4906bbd6195ab3071f8e947210298cfea914c93a4a6013a6b1fb127": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\n\nservice = ecs.ExternalService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = new ExternalService(this, \"Service\", new ExternalServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = ExternalService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\n\n\nservice := ecs.NewExternalService(this, jsii.String(\"Service\"), &externalServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tdesiredCount: jsii.Number(5),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 527
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalService",
        "@aws-cdk/aws-ecs.ExternalServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a18b43b6755d4d7392d9c5186b3afd36c97fcae5590b719e5e4cb53affcb4711"
    },
    "541db7bbd666c4b4d4f3f2b9fa054683272d4b45a2aad28102096ecb721441b7": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\nservice = ecs.FargateService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    circuit_breaker=ecs.DeploymentCircuitBreaker(rollback=True)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CircuitBreaker = new DeploymentCircuitBreaker { Rollback = true }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = FargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .circuitBreaker(DeploymentCircuitBreaker.builder().rollback(true).build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcircuitBreaker: &deploymentCircuitBreaker{\n\t\trollback: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 548
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "01c5be3b7c5d0db46c8a14108bfe05ddb1d292f4a5a1e3f3bf68269d23828f7a"
    },
    "d78c73caed034995306b36fcca116cacda4655b2c6957b95ff608f0b2c566d9e": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\ntarget_group1 = listener.add_targets(\"ECS1\",\n    port=80,\n    targets=[service]\n)\ntarget_group2 = listener.add_targets(\"ECS2\",\n    port=80,\n    targets=[service.load_balancer_target(\n        container_name=\"MyContainer\",\n        container_port=8080\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nCluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nApplicationTargetGroup targetGroup1 = listener.AddTargets(\"ECS1\", new AddApplicationTargetsProps {\n    Port = 80,\n    Targets = new [] { service }\n});\nApplicationTargetGroup targetGroup2 = listener.AddTargets(\"ECS2\", new AddApplicationTargetsProps {\n    Port = 80,\n    Targets = new [] { service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n        ContainerName = \"MyContainer\",\n        ContainerPort = 8080\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nCluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nApplicationTargetGroup targetGroup1 = listener.addTargets(\"ECS1\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .targets(List.of(service))\n        .build());\nApplicationTargetGroup targetGroup2 = listener.addTargets(\"ECS2\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .targets(List.of(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n                .containerName(\"MyContainer\")\n                .containerPort(8080)\n                .build())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar cluster cluster\nvar taskDefinition taskDefinition\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\nlistener := lb.addListener(jsii.String(\"Listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\ntargetGroup1 := listener.addTargets(jsii.String(\"ECS1\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n\ttargets: []iApplicationLoadBalancerTarget{\n\t\tservice,\n\t},\n})\ntargetGroup2 := listener.addTargets(jsii.String(\"ECS2\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n\ttargets: []*iApplicationLoadBalancerTarget{\n\t\tservice.loadBalancerTarget(&loadBalancerTargetOptions{\n\t\t\tcontainerName: jsii.String(\"MyContainer\"),\n\t\t\tcontainerPort: jsii.Number(8080),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nconst targetGroup1 = listener.addTargets('ECS1', {\n  port: 80,\n  targets: [service],\n});\nconst targetGroup2 = listener.addTargets('ECS2', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 8080\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 564
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nconst targetGroup1 = listener.addTargets('ECS1', {\n  port: 80,\n  targets: [service],\n});\nconst targetGroup2 = listener.addTargets('ECS2', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 8080\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 6,
        "75": 38,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 6,
        "194": 6,
        "196": 4,
        "197": 2,
        "225": 8,
        "242": 8,
        "243": 8,
        "281": 8,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "2852a1bd8451afa5b009de9ff11a821f23b9f38d8c9f663483e18c8241c37e61"
    },
    "f0f11321cf1c3065a3c46e8bb539e9860c2297544500dd3febe805f4e907d6b1": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\nlistener := lb.addListener(jsii.String(\"Listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nservice.registerLoadBalancerTargets(&ecsTarget{\n\tcontainerName: jsii.String(\"web\"),\n\tcontainerPort: jsii.Number(80),\n\tnewTargetGroupId: jsii.String(\"ECS\"),\n\tlistener: ecs.listenerConfig.applicationListener(listener, &addApplicationTargetsProps{\n\t\tprotocol: elbv2.applicationProtocol_HTTPS,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 591
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62bbc966736ec630b7e87ab4690d0362c33cfaf1ad7cc7936ab997a36a39e6d6"
    },
    "0c758c7d76859776b20f377801abe2a91c9957c5589ccf702a5722ae431b0c83": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n})\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})\nlb.addTarget(service)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 630
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "0dc42aae6f8342e5623e720fc6ed292a530ee2af6dd943d7358fb0ee3067c325"
    },
    "f458dc15a67446790f4b0f012eaa66383c9c366e71e5647e0126cde9a8fdc6eb": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n})\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})\nlb.addTarget(service.loadBalancerTarget(&loadBalancerTargetOptions{\n\tcontainerName: jsii.String(\"MyContainer\"),\n\tcontainerPort: jsii.Number(80),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 643
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62ee75a8ee3a3c43c54101d48d798b2aeaeb07623c502cf608cb70be5dd20f72"
    },
    "451d7fbe0f7e0379b802cf7dbe342a5864581e6366559ab18f1d907e83c35e0a": {
      "translations": {
        "python": {
          "source": "# target: elbv2.ApplicationTargetGroup\n# service: ecs.BaseService\n\nscaling = service.auto_scale_task_count(max_capacity=10)\nscaling.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscaling.scale_on_request_count(\"RequestScaling\",\n    requests_per_target=10000,\n    target_group=target\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.AutoScaleTaskCount(new EnableScalingProps { MaxCapacity = 10 });\nscaling.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscaling.ScaleOnRequestCount(\"RequestScaling\", new RequestCountScalingProps {\n    RequestsPerTarget = 10000,\n    TargetGroup = target\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.autoScaleTaskCount(EnableScalingProps.builder().maxCapacity(10).build());\nscaling.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscaling.scaleOnRequestCount(\"RequestScaling\", RequestCountScalingProps.builder()\n        .requestsPerTarget(10000)\n        .targetGroup(target)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var target applicationTargetGroup\nvar service baseService\n\nscaling := service.autoScaleTaskCount(&enableScalingProps{\n\tmaxCapacity: jsii.Number(10),\n})\nscaling.scaleOnCpuUtilization(jsii.String(\"CpuScaling\"), &cpuUtilizationScalingProps{\n\ttargetUtilizationPercent: jsii.Number(50),\n})\n\nscaling.scaleOnRequestCount(jsii.String(\"RequestScaling\"), &requestCountScalingProps{\n\trequestsPerTarget: jsii.Number(10000),\n\ttargetGroup: target,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 667
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.RequestCountScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnRequestCount",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "430e9ac1673ad3ff4031c726865de07b9780c1461a916dc12e37b21e485e1ca4"
    },
    "82abfdc8afc0dbbfa6566b8a68a0b5fc4ec7a048c3228a738b62b3a9fc947489": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.AwsLogDriver(stream_prefix=\"EventDemo\", mode=ecs.AwsLogDriverMode.NON_BLOCKING)\n)\n\n# An Rule that describes the event trigger (in this case a scheduled run)\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 min)\")\n)\n\n# Pass an environment variable to the container 'TheContainer' in the task\nrule.add_target(targets.EcsTask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.ContainerOverride(\n        container_name=\"TheContainer\",\n        environment=[targets.TaskEnvironmentVariable(\n            name=\"I_WAS_TRIGGERED\",\n            value=\"From CloudWatch Events\"\n        )]\n    )]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromAsset(Resolve(__dirname, \"..\", \"eventhandler-image\")),\n    MemoryLimitMiB = 256,\n    Logging = new AwsLogDriver(new AwsLogDriverProps { StreamPrefix = \"EventDemo\", Mode = AwsLogDriverMode.NON_BLOCKING })\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 min)\")\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.AddTarget(new EcsTask(new EcsTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    TaskCount = 1,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerName = \"TheContainer\",\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"I_WAS_TRIGGERED\",\n            Value = \"From CloudWatch Events\"\n        } }\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromAsset(resolve(__dirname, \"..\", \"eventhandler-image\")))\n        .memoryLimitMiB(256)\n        .logging(AwsLogDriver.Builder.create().streamPrefix(\"EventDemo\").mode(AwsLogDriverMode.NON_BLOCKING).build())\n        .build());\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 min)\"))\n        .build();\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(EcsTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .taskCount(1)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerName(\"TheContainer\")\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"I_WAS_TRIGGERED\")\n                        .value(\"From CloudWatch Events\")\n                        .build()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromAsset(path.resolve(__dirname, jsii.String(\"..\"), jsii.String(\"eventhandler-image\"))),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.NewAwsLogDriver(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"EventDemo\"),\n\t\tmode: ecs.awsLogDriverMode_NON_BLOCKING,\n\t}),\n})\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.expression(jsii.String(\"rate(1 min)\")),\n})\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(targets.NewEcsTask(&ecsTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\ttaskCount: jsii.Number(1),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerName: jsii.String(\"TheContainer\"),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"I_WAS_TRIGGERED\"),\n\t\t\t\t\tvalue: jsii.String(\"From CloudWatch Events\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 689
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriver",
        "@aws-cdk/aws-ecs.AwsLogDriverMode",
        "@aws-cdk/aws-ecs.AwsLogDriverMode#NON_BLOCKING",
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromAsset",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 43,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 13,
        "196": 5,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a88964f16e0abf60649c7f9646c4841d2900114f5a89ffb753571d27466d46df"
    },
    "045259ccf1467b2d664ca9ba7611240d47d74be6ef8d955c3f2e34a5d9093f12": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.aws_logs(stream_prefix=\"EventDemo\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"EventDemo\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"EventDemo\").build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"EventDemo\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 735
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#awsLogs",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "4cf3f8eca2a725ff1abf8bae15affe3d08fbe2e8d50a0099722cbec042441077"
    },
    "83dad95f7c72227931c5f80d167dec2ec72d6abea9f060a003f8fad0a35a70e6": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.fluentd()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Fluentd()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.fluentd())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.fluentd(),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.fluentd(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 747
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#fluentd",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.fluentd(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "e3540a9665d51eda72659dca88afc99a86347f50c3dec71d63c219679c12bfd3"
    },
    "bf8d3e105af9ec1b9b5d087bb45d55131fa8f04a39bae371796452ff7d90afde": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.gelf(address=\"my-gelf-address\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Gelf(new GelfLogDriverProps { Address = \"my-gelf-address\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.gelf(GelfLogDriverProps.builder().address(\"my-gelf-address\").build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.gelf(&gelfLogDriverProps{\n\t\taddress: jsii.String(\"my-gelf-address\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 759
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GelfLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#gelf",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "a2d2ca238928e5f8a13b5101c816dabcc5f7fbe7162a39e551a88c778de55646"
    },
    "38489fa18b1d7f1d505d6e6c1584935f49a0700d9df1d939ae5e2a16eda90401": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.journald()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Journald()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.journald())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.journald(),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.journald(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 771
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#journald",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.journald(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "8dae935c22ef3418f54ef316781ace551517c64b7b7805784a38df14f6014642"
    },
    "92a20a42eb9f3826be754efb0c6c03d2af85014858596d443c54c4c33681f30f": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.json_file()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.JsonFile()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.jsonFile())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.jsonFile(),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.jsonFile(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 783
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#jsonFile",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.jsonFile(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "e04497c0e4a513c1fb8c99a94dc616bb72f2cd893dd5273a9ab7fafac411948c"
    },
    "a08d23b119c49300e0fd7ada1ba960da3ada7fe77df7b0707121761c13030176": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.splunk(&splunkLogDriverProps{\n\t\ttoken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-splunk-token\")),\n\t\turl: jsii.String(\"my-splunk-url\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 795
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "cbcee149029bb834f61f6271a2374a988f65487af1f16259b9f633676fad53b4"
    },
    "77a1fc893ea52b5b463f231f86b61b4748c0ffd9c3c2d7391446246f458657a4": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.syslog()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Syslog()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.syslog())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.syslog(),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.syslog(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 810
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#syslog",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.syslog(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "c3fc59205302de5c8445f6ae72ef39f1d256923818a2854cf7d8966d5a7c8a57"
    },
    "10c4deb9ed309a1514e57b723335b60c6d2eccb1d685925cc7041a540b7546f2": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.firelens(\n        options={\n            \"Name\": \"firehose\",\n            \"region\": \"us-west-2\",\n            \"delivery_stream\": \"my-stream\"\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Firelens(new FireLensLogDriverProps {\n        Options = new Dictionary<string, string> {\n            { \"Name\", \"firehose\" },\n            { \"region\", \"us-west-2\" },\n            { \"delivery_stream\", \"my-stream\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.firelens(FireLensLogDriverProps.builder()\n                .options(Map.of(\n                        \"Name\", \"firehose\",\n                        \"region\", \"us-west-2\",\n                        \"delivery_stream\", \"my-stream\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.firelens(&fireLensLogDriverProps{\n\t\toptions: map[string]*string{\n\t\t\t\"Name\": jsii.String(\"firehose\"),\n\t\t\t\"region\": jsii.String(\"us-west-2\"),\n\t\t\t\"delivery_stream\": jsii.String(\"my-stream\"),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 822
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.FireLensLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#firelens",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 18,
        "104": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "79c17949c0e0c8d2393b7db2dd518698327cf7e97cce5eb0523e244259b79dcb"
    },
    "f5ebe8cfc8ee2d59532ab90bdbf93a56732a2e3212866c550971b4124cb86dc4": {
      "translations": {
        "python": {
          "source": "# secret: secretsmanager.Secret\n# parameter: ssm.StringParameter\n\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.firelens(\n        options={},\n        secret_options={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n            \"apikey\": ecs.Secret.from_secrets_manager(secret),\n            \"host\": ecs.Secret.from_ssm_parameter(parameter)}\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Secret secret;\nStringParameter parameter;\n\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Firelens(new FireLensLogDriverProps {\n        Options = new Dictionary<string, object> { },\n        SecretOptions = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n            { \"apikey\", Secret.FromSecretsManager(secret) },\n            { \"host\", Secret.FromSsmParameter(parameter) } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nStringParameter parameter;\n\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.firelens(FireLensLogDriverProps.builder()\n                .options(Map.of())\n                .secretOptions(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n                        \"apikey\", Secret.fromSecretsManager(secret),\n                        \"host\", Secret.fromSsmParameter(parameter)))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var secret secret\nvar parameter stringParameter\n\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.firelens(&fireLensLogDriverProps{\n\t\toptions: map[string]interface{}{\n\t\t},\n\t\tsecretOptions: map[string]secret{\n\t\t\t // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n\t\t\t\"apikey\": ecs.*secret.fromSecretsManager(secret),\n\t\t\t\"host\": ecs.*secret.fromSsmParameter(parameter),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n      // ... log driver options here ...\n    },\n    secretOptions: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n      apikey: ecs.Secret.fromSecretsManager(secret),\n      host: ecs.Secret.fromSsmParameter(parameter),\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 840
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.FireLensLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#firelens",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n      // ... log driver options here ...\n    },\n    secretOptions: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n      apikey: ecs.Secret.fromSecretsManager(secret),\n      host: ecs.Secret.fromSsmParameter(parameter),\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 32,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 10,
        "196": 5,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9765438a9bbc411a29b19f8fc503f4d08777d60852b9066e94a7961d3f60bb26"
    },
    "4ccae69164ebedec699eb10ac15c88a3e6eb4b33fd95e7e2fcdda2c698ea5c5f": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.GenericLogDriver(\n        log_driver=\"fluentd\",\n        options={\n            \"tag\": \"example-tag\"\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = new GenericLogDriver(new GenericLogDriverProps {\n        LogDriver = \"fluentd\",\n        Options = new Dictionary<string, string> {\n            { \"tag\", \"example-tag\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(GenericLogDriver.Builder.create()\n                .logDriver(\"fluentd\")\n                .options(Map.of(\n                        \"tag\", \"example-tag\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.NewGenericLogDriver(&genericLogDriverProps{\n\t\tlogDriver: jsii.String(\"fluentd\"),\n\t\toptions: map[string]*string{\n\t\t\t\"tag\": jsii.String(\"example-tag\"),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 864
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GenericLogDriver",
        "@aws-cdk/aws-ecs.GenericLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "2ffdded2f40cf6f50b46811041ded2b65e8ad3f7ad863164e33604d4aac46ead"
    },
    "2bc3c9c2e9dfac716cb4a444f4b16178eb20e412413e991f3828bb8babb87d02": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n# cluster: ecs.Cluster\n\n\nservice = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create A records - useful for AWSVPC network mode.\n        dns_record_type=cloudmap.DnsRecordType.A\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create A records - useful for AWSVPC network mode.\n        DnsRecordType = DnsRecordType.A\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create A records - useful for AWSVPC network mode.\n                .dnsRecordType(DnsRecordType.A)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\nvar cluster cluster\n\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcloudMapOptions: &cloudMapOptions{\n\t\t// Create A records - useful for AWSVPC network mode.\n\t\tdnsRecordType: cloudmap.dnsRecordType_A,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 884
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a4a9912d2348c78fbabb6d83a34ff47fb0eb7dd9b026206d1afd7ebd5c4fffb4"
    },
    "8c50fe6169819a2b8bb4d4c73ed3f62b2caf61b32031acf10aed900489eeaa53": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n# cluster: ecs.Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\nvar cluster cluster\n\n\n// Add a container to the task definition\nspecificContainer := taskDefinition.addContainer(jsii.String(\"Container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"/aws/aws-example-app\")),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\n// Add a port mapping\nspecificContainer.addPortMappings(&portMapping{\n\tcontainerPort: jsii.Number(7600),\n\tprotocol: ecs.protocol_TCP,\n})\n\necs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcloudMapOptions: &cloudMapOptions{\n\t\t// Create SRV records - useful for bridge networking\n\t\tdnsRecordType: cloudmap.dnsRecordType_SRV,\n\t\t// Targets port TCP port 7600 `specificContainer`\n\t\tcontainer: specificContainer,\n\t\tcontainerPort: jsii.Number(7600),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 902
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "78820572e0f7e299c80246e2632db8bbac221621afcd808251be99bd8040857d"
    },
    "e937737ac1cfcacc47628cceba36819899cb88787a7997971da072ff69f637f9": {
      "translations": {
        "python": {
          "source": "# cloud_map_service: cloudmap.Service\n# ecs_service: ecs.FargateService\n\n\necs_service.associate_cloud_map_service(\n    service=cloud_map_service\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.AssociateCloudMapService(new AssociateCloudMapServiceOptions {\n    Service = cloudMapService\n});",
          "version": "1"
        },
        "java": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.associateCloudMapService(AssociateCloudMapServiceOptions.builder()\n        .service(cloudMapService)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cloudMapService service\nvar ecsService fargateService\n\n\necsService.associateCloudMapService(&associateCloudMapServiceOptions{\n\tservice: cloudMapService,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 936
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions",
        "@aws-cdk/aws-ecs.BaseService#associateCloudMapService",
        "@aws-cdk/aws-servicediscovery.IService"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "82fc44076b73f7f63a4ad3300998ee0a5e703d3f3218dca775ed059e7506fb76"
    },
    "431959bec7b8f40d17b8387390f6f3833abf66f5ea6f9df349736f261a5dba47": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"FargateCPCluster\",\n    vpc=vpc,\n    enable_fargate_capacity_providers=True\n)\n\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)\n\necs.FargateService(self, \"FargateService\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE_SPOT\",\n        weight=2\n    ), ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE\",\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"FargateCPCluster\", new ClusterProps {\n    Vpc = vpc,\n    EnableFargateCapacityProviders = true\n});\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});\n\nnew FargateService(this, \"FargateService\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE_SPOT\",\n        Weight = 2\n    }, new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE\",\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCPCluster\")\n        .vpc(vpc)\n        .enableFargateCapacityProviders(true)\n        .build();\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());\n\nFargateService.Builder.create(this, \"FargateService\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE_SPOT\")\n                .weight(2)\n                .build(), CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE\")\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"FargateCPCluster\"), &clusterProps{\n\tvpc: vpc,\n\tenableFargateCapacityProviders: jsii.Boolean(true),\n})\n\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"web\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n})\n\necs.NewFargateService(this, jsii.String(\"FargateService\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: jsii.String(\"FARGATE_SPOT\"),\n\t\t\tweight: jsii.Number(2),\n\t\t},\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: jsii.String(\"FARGATE\"),\n\t\t\tweight: jsii.Number(1),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 961
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 26,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "acf61016480435b49fd0cc2eb6bc58ff0f42a97339030135ff23217890dbeb88"
    },
    "c7a59d9323fd5dbdfad56c236e919b827a5ab7bd6493a6338e638448199f93a7": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.Ec2Service(self, \"EC2Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(),\n    MinCapacity = 0,\n    MaxCapacity = 100\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryReservationMiB = 256\n});\n\nnew Ec2Service(this, \"EC2Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName,\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .minCapacity(0)\n        .maxCapacity(100)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryReservationMiB(256)\n        .build());\n\nEc2Service.Builder.create(this, \"EC2Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux2(),\n\tminCapacity: jsii.Number(0),\n\tmaxCapacity: jsii.Number(100),\n})\n\ncapacityProvider := ecs.NewAsgCapacityProvider(this, jsii.String(\"AsgCapacityProvider\"), &asgCapacityProviderProps{\n\tautoScalingGroup: autoScalingGroup,\n})\ncluster.addAsgCapacityProvider(capacityProvider)\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"web\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryReservationMiB: jsii.Number(256),\n})\n\necs.NewEc2Service(this, jsii.String(\"EC2Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: capacityProvider.capacityProviderName,\n\t\t\tweight: jsii.Number(1),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1005
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 46,
        "104": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 13,
        "196": 4,
        "197": 6,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "281": 9,
        "282": 5,
        "290": 1
      },
      "fqnsFingerprint": "0bc7fa1f88b33ced16d01728c58427936e6112734dae274375b9b77804c9ac6a"
    },
    "64839645a33e52f98097f3ab8e7a00b430229e95579fff35f208e056721a29b3": {
      "translations": {
        "python": {
          "source": "inference_accelerators = [{\n    \"device_name\": \"device1\",\n    \"device_type\": \"eia2.medium\"\n}]\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"Ec2TaskDef\",\n    inference_accelerators=inference_accelerators\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IDictionary<string, string>[] inferenceAccelerators = new [] { new Dictionary<string, string> {\n    { \"deviceName\", \"device1\" },\n    { \"deviceType\", \"eia2.medium\" }\n} };\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"Ec2TaskDef\", new Ec2TaskDefinitionProps {\n    InferenceAccelerators = inferenceAccelerators\n});",
          "version": "1"
        },
        "java": {
          "source": "Map<String, String>[] inferenceAccelerators = List.of(Map.of(\n        \"deviceName\", \"device1\",\n        \"deviceType\", \"eia2.medium\"));\n\nEc2TaskDefinition taskDefinition = Ec2TaskDefinition.Builder.create(this, \"Ec2TaskDef\")\n        .inferenceAccelerators(inferenceAccelerators)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "inferenceAccelerators := []map[string]*string{\n\tmap[string]*string{\n\t\t\"deviceName\": jsii.String(\"device1\"),\n\t\t\"deviceType\": jsii.String(\"eia2.medium\"),\n\t},\n}\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"Ec2TaskDef\"), &ec2TaskDefinitionProps{\n\tinferenceAccelerators: inferenceAccelerators,\n})",
          "version": "1"
        },
        "$": {
          "source": "const inferenceAccelerators = [{\n  deviceName: 'device1',\n  deviceType: 'eia2.medium',\n}];\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'Ec2TaskDef', {\n  inferenceAccelerators,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1052
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst inferenceAccelerators = [{\n  deviceName: 'device1',\n  deviceType: 'eia2.medium',\n}];\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'Ec2TaskDef', {\n  inferenceAccelerators,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "1f4824dd4fcec7423e5d6bdb98144486f4f13aa6c8da26052b69f97607c0369c"
    },
    "3d14998d0ff3f0aa30d11309831d533d7a37f54d31e15d050ee770ab3de7b932": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n\ninference_accelerator_resources = [\"device1\"]\n\ntask_definition.add_container(\"cont\",\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    memory_limit_mi_b=1024,\n    inference_accelerator_resources=inference_accelerator_resources\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\n\nstring[] inferenceAcceleratorResources = new [] { \"device1\" };\n\ntaskDefinition.AddContainer(\"cont\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"test\"),\n    MemoryLimitMiB = 1024,\n    InferenceAcceleratorResources = inferenceAcceleratorResources\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\n\nString[] inferenceAcceleratorResources = List.of(\"device1\");\n\ntaskDefinition.addContainer(\"cont\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .memoryLimitMiB(1024)\n        .inferenceAcceleratorResources(inferenceAcceleratorResources)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\n\ninferenceAcceleratorResources := []*string{\n\t\"device1\",\n}\n\ntaskDefinition.addContainer(jsii.String(\"cont\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"test\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n\tinferenceAcceleratorResources: inferenceAcceleratorResources,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\nconst inferenceAcceleratorResources = ['device1'];\n\ntaskDefinition.addContainer('cont', {\n  image: ecs.ContainerImage.fromRegistry('test'),\n  memoryLimitMiB: 1024,\n  inferenceAcceleratorResources,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1067
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst inferenceAcceleratorResources = ['device1'];\n\ntaskDefinition.addContainer('cont', {\n  image: ecs.ContainerImage.fromRegistry('test'),\n  memoryLimitMiB: 1024,\n  inferenceAcceleratorResources,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "326ab44a5d5da2a23f2418a673cdbc26c0cbf403db51fb8f05fb4776f8a67d05"
    },
    "758a408961946ae4767db2fab5bfddcf1d4266428297b7185212f34eeece4a09": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\n\nservice = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    enable_execute_command=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    EnableExecuteCommand = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .enableExecuteCommand(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\n\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tenableExecuteCommand: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  enableExecuteCommand: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1087
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  enableExecuteCommand: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ab8386efee5722e983df59aa48a82acd4036109da35ad2c9bf93fe459460a405"
    },
    "d883b1f13314bce937fda6a98fe0bb1a687a93ebbbfece6bea794ad372343f49": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nkmsKey := kms.NewKey(this, jsii.String(\"KmsKey\"))\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlogGroup := logs.NewLogGroup(this, jsii.String(\"LogGroup\"), &logGroupProps{\n\tencryptionKey: kmsKey,\n})\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexecBucket := s3.NewBucket(this, jsii.String(\"EcsExecBucket\"), &bucketProps{\n\tencryptionKey: kmsKey,\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n\texecuteCommandConfiguration: &executeCommandConfiguration{\n\t\tkmsKey: kmsKey,\n\t\tlogConfiguration: &executeCommandLogConfiguration{\n\t\t\tcloudWatchLogGroup: logGroup,\n\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3Bucket: execBucket,\n\t\t\ts3EncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3KeyPrefix: jsii.String(\"exec-command-output\"),\n\t\t},\n\t\tlogging: ecs.executeCommandLogging_OVERRIDE,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1109
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "98cbf1fccdd417748f81c0bf4d1ea43df16dfe3255ff126c4d40cf44588910b3"
    },
    "dcf8af97e16dd41dfb4a40b3d5f3a47f0ce0292fd40fe1dc76c4c972e0076798": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.core as cdk\n\n# key: kms.Key\n\nadd_auto_scaling_group_capacity_options = ecs.AddAutoScalingGroupCapacityOptions(\n    can_containers_access_instance_role=False,\n    machine_image_type=ecs.MachineImageType.AMAZON_LINUX_2,\n    spot_instance_draining=False,\n    task_drain_time=cdk.Duration.minutes(30),\n    topic_encryption_key=key\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK;\n\nKey key;\nAddAutoScalingGroupCapacityOptions addAutoScalingGroupCapacityOptions = new AddAutoScalingGroupCapacityOptions {\n    CanContainersAccessInstanceRole = false,\n    MachineImageType = MachineImageType.AMAZON_LINUX_2,\n    SpotInstanceDraining = false,\n    TaskDrainTime = Duration.Minutes(30),\n    TopicEncryptionKey = key\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.core.*;\n\nKey key;\n\nAddAutoScalingGroupCapacityOptions addAutoScalingGroupCapacityOptions = AddAutoScalingGroupCapacityOptions.builder()\n        .canContainersAccessInstanceRole(false)\n        .machineImageType(MachineImageType.AMAZON_LINUX_2)\n        .spotInstanceDraining(false)\n        .taskDrainTime(Duration.minutes(30))\n        .topicEncryptionKey(key)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport kms \"github.com/aws-samples/dummy/awscdkawskms\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar key key\n\naddAutoScalingGroupCapacityOptions := &addAutoScalingGroupCapacityOptions{\n\tcanContainersAccessInstanceRole: jsii.Boolean(false),\n\tmachineImageType: ecs.machineImageType_AMAZON_LINUX_2,\n\tspotInstanceDraining: jsii.Boolean(false),\n\ttaskDrainTime: cdk.duration.minutes(jsii.Number(30)),\n\ttopicEncryptionKey: key,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const key: kms.Key;\nconst addAutoScalingGroupCapacityOptions: ecs.AddAutoScalingGroupCapacityOptions = {\n  canContainersAccessInstanceRole: false,\n  machineImageType: ecs.MachineImageType.AMAZON_LINUX_2,\n  spotInstanceDraining: false,\n  taskDrainTime: cdk.Duration.minutes(30),\n  topicEncryptionKey: key,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AddAutoScalingGroupCapacityOptions",
        "@aws-cdk/aws-ecs.MachineImageType",
        "@aws-cdk/aws-ecs.MachineImageType#AMAZON_LINUX_2",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst addAutoScalingGroupCapacityOptions: ecs.AddAutoScalingGroupCapacityOptions = {\n  canContainersAccessInstanceRole: false,\n  machineImageType: ecs.MachineImageType.AMAZON_LINUX_2,\n  spotInstanceDraining: false,\n  taskDrainTime: cdk.Duration.minutes(30),\n  topicEncryptionKey: key,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "91": 2,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f9d1d6ac68bf7612a02f48c89469d431a7e70c715a038a4814fd2451b5d86104"
    },
    "d7fe1ecb57c0e66c6b67ed5d20e0482c9e18c73f4c1448ae6ef09dc3c901b5b9": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\n# Create an ECS cluster\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Add capacity to it\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"DefaultContainer\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=512\n)\n\n# Instantiate an Amazon ECS Service\necs_service = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\n// Create an ECS cluster\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Add capacity to it\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"DefaultContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 512\n});\n\n// Instantiate an Amazon ECS Service\nEc2Service ecsService = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\n// Create an ECS cluster\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Add capacity to it\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"DefaultContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(512)\n        .build());\n\n// Instantiate an Amazon ECS Service\nEc2Service ecsService = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\n// Create an ECS cluster\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\n// Add capacity to it\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroupCapacity\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.xlarge\")),\n\tdesiredCapacity: jsii.Number(3),\n})\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"DefaultContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(512),\n})\n\n// Instantiate an Amazon ECS Service\necsService := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AddCapacityOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 28,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 3,
        "197": 4,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "3e7a584768aedabc6e65dd57722ebd947f0014ebe561bae3cbd75a7777c18cba"
    },
    "2059f7d055279edf57ea3c0993e8f12137eb5328460d358b980cecb2561d4c79": {
      "translations": {
        "python": {
          "source": "machine_image = ecs.EcsOptimizedImage.amazon_linux2(ecs.AmiHardwareType.STANDARD,\n    cached_in_context=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "EcsOptimizedImage machineImage = EcsOptimizedImage.AmazonLinux2(AmiHardwareType.STANDARD, new EcsOptimizedImageOptions {\n    CachedInContext = true\n});",
          "version": "1"
        },
        "java": {
          "source": "EcsOptimizedImage machineImage = EcsOptimizedImage.amazonLinux2(AmiHardwareType.STANDARD, EcsOptimizedImageOptions.builder()\n        .cachedInContext(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "machineImage := ecs.ecsOptimizedImage.amazonLinux2(ecs.amiHardwareType_STANDARD, &ecsOptimizedImageOptions{\n\tcachedInContext: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const machineImage = ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.STANDARD, {\n   cachedInContext: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ecs.AddCapacityOptions",
          "memberName": "machineImage"
        },
        "field": {
          "field": "markdown",
          "line": 8
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AmiHardwareType",
        "@aws-cdk/aws-ecs.AmiHardwareType#STANDARD",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst machineImage = ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.STANDARD, {\n   cachedInContext: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 8,
        "106": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "46ee35fb59100071428be266f3c9b6a380b05e2ce82dff3e955e5b1ae018768c"
    },
    "3ed75590299b15c1e8a404c0360f7cfacdcaa33d2fc55680aeb49d60fdefe900": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(ecs.AmiHardwareType.ARM)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(AmiHardwareType.ARM)\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2(AmiHardwareType.ARM))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\ncluster.addCapacity(jsii.String(\"graviton-cluster\"), &addCapacityOptions{\n\tminCapacity: jsii.Number(2),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"c6g.large\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux2(ecs.amiHardwareType_ARM),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AmiHardwareType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.AmiHardwareType",
        "@aws-cdk/aws-ecs.AmiHardwareType#ARM",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 16,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "efc558df2efd70a9b9f2aa7b6cc650da1cb4b55a08aa86968be9baf0bed7fd5e"
    },
    "42cd092252030996ae38d8c4c275ed326532419951127edd7bfe2e0d848bb779": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\napp_mesh_proxy_configuration = ecs.AppMeshProxyConfiguration(\n    container_name=\"containerName\",\n    properties=ecs.AppMeshProxyConfigurationProps(\n        app_ports=[123],\n        proxy_egress_port=123,\n        proxy_ingress_port=123,\n\n        # the properties below are optional\n        egress_ignored_iPs=[\"egressIgnoredIPs\"],\n        egress_ignored_ports=[123],\n        ignored_gID=123,\n        ignored_uID=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAppMeshProxyConfiguration appMeshProxyConfiguration = new AppMeshProxyConfiguration(new AppMeshProxyConfigurationConfigProps {\n    ContainerName = \"containerName\",\n    Properties = new AppMeshProxyConfigurationProps {\n        AppPorts = new [] { 123 },\n        ProxyEgressPort = 123,\n        ProxyIngressPort = 123,\n\n        // the properties below are optional\n        EgressIgnoredIPs = new [] { \"egressIgnoredIPs\" },\n        EgressIgnoredPorts = new [] { 123 },\n        IgnoredGID = 123,\n        IgnoredUID = 123\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAppMeshProxyConfiguration appMeshProxyConfiguration = AppMeshProxyConfiguration.Builder.create()\n        .containerName(\"containerName\")\n        .properties(AppMeshProxyConfigurationProps.builder()\n                .appPorts(List.of(123))\n                .proxyEgressPort(123)\n                .proxyIngressPort(123)\n\n                // the properties below are optional\n                .egressIgnoredIPs(List.of(\"egressIgnoredIPs\"))\n                .egressIgnoredPorts(List.of(123))\n                .ignoredGID(123)\n                .ignoredUID(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nappMeshProxyConfiguration := ecs.NewAppMeshProxyConfiguration(&appMeshProxyConfigurationConfigProps{\n\tcontainerName: jsii.String(\"containerName\"),\n\tproperties: &appMeshProxyConfigurationProps{\n\t\tappPorts: []*f64{\n\t\t\tjsii.Number(123),\n\t\t},\n\t\tproxyEgressPort: jsii.Number(123),\n\t\tproxyIngressPort: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tegressIgnoredIPs: []*string{\n\t\t\tjsii.String(\"egressIgnoredIPs\"),\n\t\t},\n\t\tegressIgnoredPorts: []*f64{\n\t\t\tjsii.Number(123),\n\t\t},\n\t\tignoredGID: jsii.Number(123),\n\t\tignoredUID: jsii.Number(123),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst appMeshProxyConfiguration = new ecs.AppMeshProxyConfiguration({\n  containerName: 'containerName',\n  properties: {\n    appPorts: [123],\n    proxyEgressPort: 123,\n    proxyIngressPort: 123,\n\n    // the properties below are optional\n    egressIgnoredIPs: ['egressIgnoredIPs'],\n    egressIgnoredPorts: [123],\n    ignoredGID: 123,\n    ignoredUID: 123,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AppMeshProxyConfiguration",
        "@aws-cdk/aws-ecs.AppMeshProxyConfigurationConfigProps",
        "@aws-cdk/aws-ecs.AppMeshProxyConfigurationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst appMeshProxyConfiguration = new ecs.AppMeshProxyConfiguration({\n  containerName: 'containerName',\n  properties: {\n    appPorts: [123],\n    proxyEgressPort: 123,\n    proxyIngressPort: 123,\n\n    // the properties below are optional\n    egressIgnoredIPs: ['egressIgnoredIPs'],\n    egressIgnoredPorts: [123],\n    ignoredGID: 123,\n    ignoredUID: 123,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 3,
        "75": 13,
        "192": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "3c2d484c2c75744c0bdef5792f6b77f83cffbe816d35a74c0231a43ae721ae27"
    },
    "0da6a507e5491df2797baea8a3f6553e338c33a5e7e112cd00d8c3e7bc623650": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\napp_mesh_proxy_configuration_config_props = ecs.AppMeshProxyConfigurationConfigProps(\n    container_name=\"containerName\",\n    properties=ecs.AppMeshProxyConfigurationProps(\n        app_ports=[123],\n        proxy_egress_port=123,\n        proxy_ingress_port=123,\n\n        # the properties below are optional\n        egress_ignored_iPs=[\"egressIgnoredIPs\"],\n        egress_ignored_ports=[123],\n        ignored_gID=123,\n        ignored_uID=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAppMeshProxyConfigurationConfigProps appMeshProxyConfigurationConfigProps = new AppMeshProxyConfigurationConfigProps {\n    ContainerName = \"containerName\",\n    Properties = new AppMeshProxyConfigurationProps {\n        AppPorts = new [] { 123 },\n        ProxyEgressPort = 123,\n        ProxyIngressPort = 123,\n\n        // the properties below are optional\n        EgressIgnoredIPs = new [] { \"egressIgnoredIPs\" },\n        EgressIgnoredPorts = new [] { 123 },\n        IgnoredGID = 123,\n        IgnoredUID = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAppMeshProxyConfigurationConfigProps appMeshProxyConfigurationConfigProps = AppMeshProxyConfigurationConfigProps.builder()\n        .containerName(\"containerName\")\n        .properties(AppMeshProxyConfigurationProps.builder()\n                .appPorts(List.of(123))\n                .proxyEgressPort(123)\n                .proxyIngressPort(123)\n\n                // the properties below are optional\n                .egressIgnoredIPs(List.of(\"egressIgnoredIPs\"))\n                .egressIgnoredPorts(List.of(123))\n                .ignoredGID(123)\n                .ignoredUID(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nappMeshProxyConfigurationConfigProps := &appMeshProxyConfigurationConfigProps{\n\tcontainerName: jsii.String(\"containerName\"),\n\tproperties: &appMeshProxyConfigurationProps{\n\t\tappPorts: []*f64{\n\t\t\tjsii.Number(123),\n\t\t},\n\t\tproxyEgressPort: jsii.Number(123),\n\t\tproxyIngressPort: jsii.Number(123),\n\n\t\t// the properties below are optional\n\t\tegressIgnoredIPs: []*string{\n\t\t\tjsii.String(\"egressIgnoredIPs\"),\n\t\t},\n\t\tegressIgnoredPorts: []*f64{\n\t\t\tjsii.Number(123),\n\t\t},\n\t\tignoredGID: jsii.Number(123),\n\t\tignoredUID: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst appMeshProxyConfigurationConfigProps: ecs.AppMeshProxyConfigurationConfigProps = {\n  containerName: 'containerName',\n  properties: {\n    appPorts: [123],\n    proxyEgressPort: 123,\n    proxyIngressPort: 123,\n\n    // the properties below are optional\n    egressIgnoredIPs: ['egressIgnoredIPs'],\n    egressIgnoredPorts: [123],\n    ignoredGID: 123,\n    ignoredUID: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfigurationConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AppMeshProxyConfigurationConfigProps",
        "@aws-cdk/aws-ecs.AppMeshProxyConfigurationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst appMeshProxyConfigurationConfigProps: ecs.AppMeshProxyConfigurationConfigProps = {\n  containerName: 'containerName',\n  properties: {\n    appPorts: [123],\n    proxyEgressPort: 123,\n    proxyIngressPort: 123,\n\n    // the properties below are optional\n    egressIgnoredIPs: ['egressIgnoredIPs'],\n    egressIgnoredPorts: [123],\n    ignoredGID: 123,\n    ignoredUID: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 3,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "5d4c50129b8a0ce25dc0032795751b9e4e417078fde2c3274c09b9562f4d5ac1"
    },
    "a0643f72e7bd39ba4512cbd98813f02a7744534165a7e9dde564789d26520e73": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\napp_mesh_proxy_configuration_props = ecs.AppMeshProxyConfigurationProps(\n    app_ports=[123],\n    proxy_egress_port=123,\n    proxy_ingress_port=123,\n\n    # the properties below are optional\n    egress_ignored_iPs=[\"egressIgnoredIPs\"],\n    egress_ignored_ports=[123],\n    ignored_gID=123,\n    ignored_uID=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAppMeshProxyConfigurationProps appMeshProxyConfigurationProps = new AppMeshProxyConfigurationProps {\n    AppPorts = new [] { 123 },\n    ProxyEgressPort = 123,\n    ProxyIngressPort = 123,\n\n    // the properties below are optional\n    EgressIgnoredIPs = new [] { \"egressIgnoredIPs\" },\n    EgressIgnoredPorts = new [] { 123 },\n    IgnoredGID = 123,\n    IgnoredUID = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAppMeshProxyConfigurationProps appMeshProxyConfigurationProps = AppMeshProxyConfigurationProps.builder()\n        .appPorts(List.of(123))\n        .proxyEgressPort(123)\n        .proxyIngressPort(123)\n\n        // the properties below are optional\n        .egressIgnoredIPs(List.of(\"egressIgnoredIPs\"))\n        .egressIgnoredPorts(List.of(123))\n        .ignoredGID(123)\n        .ignoredUID(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nappMeshProxyConfigurationProps := &appMeshProxyConfigurationProps{\n\tappPorts: []*f64{\n\t\tjsii.Number(123),\n\t},\n\tproxyEgressPort: jsii.Number(123),\n\tproxyIngressPort: jsii.Number(123),\n\n\t// the properties below are optional\n\tegressIgnoredIPs: []*string{\n\t\tjsii.String(\"egressIgnoredIPs\"),\n\t},\n\tegressIgnoredPorts: []*f64{\n\t\tjsii.Number(123),\n\t},\n\tignoredGID: jsii.Number(123),\n\tignoredUID: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst appMeshProxyConfigurationProps: ecs.AppMeshProxyConfigurationProps = {\n  appPorts: [123],\n  proxyEgressPort: 123,\n  proxyIngressPort: 123,\n\n  // the properties below are optional\n  egressIgnoredIPs: ['egressIgnoredIPs'],\n  egressIgnoredPorts: [123],\n  ignoredGID: 123,\n  ignoredUID: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AppMeshProxyConfigurationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AppMeshProxyConfigurationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst appMeshProxyConfigurationProps: ecs.AppMeshProxyConfigurationProps = {\n  appPorts: [123],\n  proxyEgressPort: 123,\n  proxyIngressPort: 123,\n\n  // the properties below are optional\n  egressIgnoredIPs: ['egressIgnoredIPs'],\n  egressIgnoredPorts: [123],\n  ignoredGID: 123,\n  ignoredUID: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 2,
        "75": 11,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "1127835545fa1d7b9467ba25c26253a8537b641c6a13088bb3f2b877ceb54fc0"
    },
    "a7dfa29e432c9b7a6581638612d57b86de1101373499f0392aadb66afa478c43": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.Ec2Service(self, \"EC2Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(),\n    MinCapacity = 0,\n    MaxCapacity = 100\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryReservationMiB = 256\n});\n\nnew Ec2Service(this, \"EC2Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName,\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .minCapacity(0)\n        .maxCapacity(100)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryReservationMiB(256)\n        .build());\n\nEc2Service.Builder.create(this, \"EC2Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux2(),\n\tminCapacity: jsii.Number(0),\n\tmaxCapacity: jsii.Number(100),\n})\n\ncapacityProvider := ecs.NewAsgCapacityProvider(this, jsii.String(\"AsgCapacityProvider\"), &asgCapacityProviderProps{\n\tautoScalingGroup: autoScalingGroup,\n})\ncluster.addAsgCapacityProvider(capacityProvider)\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"web\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryReservationMiB: jsii.Number(256),\n})\n\necs.NewEc2Service(this, jsii.String(\"EC2Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: capacityProvider.capacityProviderName,\n\t\t\tweight: jsii.Number(1),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AsgCapacityProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 46,
        "104": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 13,
        "196": 4,
        "197": 6,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "281": 9,
        "282": 5,
        "290": 1
      },
      "fqnsFingerprint": "0bc7fa1f88b33ced16d01728c58427936e6112734dae274375b9b77804c9ac6a"
    },
    "f670b139abc65c03ef49541ebf0c2952251cfa013498bdbc97068ead0f59f901": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.Ec2Service(self, \"EC2Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(),\n    MinCapacity = 0,\n    MaxCapacity = 100\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryReservationMiB = 256\n});\n\nnew Ec2Service(this, \"EC2Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName,\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .minCapacity(0)\n        .maxCapacity(100)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryReservationMiB(256)\n        .build());\n\nEc2Service.Builder.create(this, \"EC2Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux2(),\n\tminCapacity: jsii.Number(0),\n\tmaxCapacity: jsii.Number(100),\n})\n\ncapacityProvider := ecs.NewAsgCapacityProvider(this, jsii.String(\"AsgCapacityProvider\"), &asgCapacityProviderProps{\n\tautoScalingGroup: autoScalingGroup,\n})\ncluster.addAsgCapacityProvider(capacityProvider)\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"web\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryReservationMiB: jsii.Number(256),\n})\n\necs.NewEc2Service(this, jsii.String(\"EC2Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: capacityProvider.capacityProviderName,\n\t\t\tweight: jsii.Number(1),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AsgCapacityProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 46,
        "104": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 13,
        "196": 4,
        "197": 6,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "281": 9,
        "282": 5,
        "290": 1
      },
      "fqnsFingerprint": "0bc7fa1f88b33ced16d01728c58427936e6112734dae274375b9b77804c9ac6a"
    },
    "b428e8daceaa64e0c853a2703644da9a61da01266fb48d2eaf26b0d249a5b7ed": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\n\n# docker_image: cdk.DockerImage\n# grantable: iam.IGrantable\n# local_bundling: cdk.ILocalBundling\n\nasset_environment_file = ecs.AssetEnvironmentFile(\"path\",\n    asset_hash=\"assetHash\",\n    asset_hash_type=cdk.AssetHashType.SOURCE,\n    bundling=cdk.BundlingOptions(\n        image=docker_image,\n\n        # the properties below are optional\n        command=[\"command\"],\n        entrypoint=[\"entrypoint\"],\n        environment={\n            \"environment_key\": \"environment\"\n        },\n        local=local_bundling,\n        output_type=cdk.BundlingOutput.ARCHIVED,\n        security_opt=\"securityOpt\",\n        user=\"user\",\n        volumes=[cdk.DockerVolume(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n\n            # the properties below are optional\n            consistency=cdk.DockerVolumeConsistency.CONSISTENT\n        )],\n        working_directory=\"workingDirectory\"\n    ),\n    exclude=[\"exclude\"],\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    readers=[grantable],\n    source_hash=\"sourceHash\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\n\nDockerImage dockerImage;\nIGrantable grantable;\nILocalBundling localBundling;\nAssetEnvironmentFile assetEnvironmentFile = new AssetEnvironmentFile(\"path\", new AssetOptions {\n    AssetHash = \"assetHash\",\n    AssetHashType = AssetHashType.SOURCE,\n    Bundling = new BundlingOptions {\n        Image = dockerImage,\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Entrypoint = new [] { \"entrypoint\" },\n        Environment = new Dictionary<string, string> {\n            { \"environmentKey\", \"environment\" }\n        },\n        Local = localBundling,\n        OutputType = BundlingOutput.ARCHIVED,\n        SecurityOpt = \"securityOpt\",\n        User = \"user\",\n        Volumes = new [] { new DockerVolume {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n\n            // the properties below are optional\n            Consistency = DockerVolumeConsistency.CONSISTENT\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    },\n    Exclude = new [] { \"exclude\" },\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Readers = new [] { grantable },\n    SourceHash = \"sourceHash\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\n\nDockerImage dockerImage;\nIGrantable grantable;\nILocalBundling localBundling;\n\nAssetEnvironmentFile assetEnvironmentFile = AssetEnvironmentFile.Builder.create(\"path\")\n        .assetHash(\"assetHash\")\n        .assetHashType(AssetHashType.SOURCE)\n        .bundling(BundlingOptions.builder()\n                .image(dockerImage)\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .entrypoint(List.of(\"entrypoint\"))\n                .environment(Map.of(\n                        \"environmentKey\", \"environment\"))\n                .local(localBundling)\n                .outputType(BundlingOutput.ARCHIVED)\n                .securityOpt(\"securityOpt\")\n                .user(\"user\")\n                .volumes(List.of(DockerVolume.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n\n                        // the properties below are optional\n                        .consistency(DockerVolumeConsistency.CONSISTENT)\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build())\n        .exclude(List.of(\"exclude\"))\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .readers(List.of(grantable))\n        .sourceHash(\"sourceHash\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assets \"github.com/aws-samples/dummy/awscdkassets\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar dockerImage dockerImage\nvar grantable iGrantable\nvar localBundling iLocalBundling\n\nassetEnvironmentFile := ecs.NewAssetEnvironmentFile(jsii.String(\"path\"), &assetOptions{\n\tassetHash: jsii.String(\"assetHash\"),\n\tassetHashType: cdk.assetHashType_SOURCE,\n\tbundling: &bundlingOptions{\n\t\timage: dockerImage,\n\n\t\t// the properties below are optional\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tentrypoint: []*string{\n\t\t\tjsii.String(\"entrypoint\"),\n\t\t},\n\t\tenvironment: map[string]*string{\n\t\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t\t},\n\t\tlocal: localBundling,\n\t\toutputType: cdk.bundlingOutput_ARCHIVED,\n\t\tsecurityOpt: jsii.String(\"securityOpt\"),\n\t\tuser: jsii.String(\"user\"),\n\t\tvolumes: []dockerVolume{\n\t\t\t&dockerVolume{\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tconsistency: cdk.dockerVolumeConsistency_CONSISTENT,\n\t\t\t},\n\t\t},\n\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t},\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\tfollow: assets.followMode_NEVER,\n\tfollowSymlinks: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n\treaders: []*iGrantable{\n\t\tgrantable,\n\t},\n\tsourceHash: jsii.String(\"sourceHash\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const localBundling: cdk.ILocalBundling;\nconst assetEnvironmentFile = new ecs.AssetEnvironmentFile('path', /* all optional props */ {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  sourceHash: 'sourceHash',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AssetEnvironmentFile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assets.FollowMode",
        "@aws-cdk/assets.FollowMode#NEVER",
        "@aws-cdk/aws-ecs.AssetEnvironmentFile",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.AssetHashType",
        "@aws-cdk/core.AssetHashType#SOURCE",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.BundlingOutput",
        "@aws-cdk/core.BundlingOutput#ARCHIVED",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerVolumeConsistency",
        "@aws-cdk/core.DockerVolumeConsistency#CONSISTENT",
        "@aws-cdk/core.ILocalBundling",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const dockerImage: cdk.DockerImage;\ndeclare const grantable: iam.IGrantable;\ndeclare const localBundling: cdk.ILocalBundling;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetEnvironmentFile = new ecs.AssetEnvironmentFile('path', /* all optional props */ {\n  assetHash: 'assetHash',\n  assetHashType: cdk.AssetHashType.SOURCE,\n  bundling: {\n    image: dockerImage,\n\n    // the properties below are optional\n    command: ['command'],\n    entrypoint: ['entrypoint'],\n    environment: {\n      environmentKey: 'environment',\n    },\n    local: localBundling,\n    outputType: cdk.BundlingOutput.ARCHIVED,\n    securityOpt: 'securityOpt',\n    user: 'user',\n    volumes: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n\n      // the properties below are optional\n      consistency: cdk.DockerVolumeConsistency.CONSISTENT,\n    }],\n    workingDirectory: 'workingDirectory',\n  },\n  exclude: ['exclude'],\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  readers: [grantable],\n  sourceHash: 'sourceHash',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 16,
        "75": 60,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 5,
        "193": 4,
        "194": 13,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 23,
        "290": 1
      },
      "fqnsFingerprint": "108a40545c53163eb5a131fbc2f100f39b9b8d4a799143ab61974d61838c3bff"
    },
    "e7439394de35cce6b16f6d6726dbd62ebe919331dc2c6d8090bdd27c21888f9c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import App, Stack\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.cx_api as cxapi\nimport path as path\n\napp = App()\n\nstack = Stack(app, \"aws-ecs-patterns-queue\")\nstack.node.set_context(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, True)\n\nvpc = ec2.Vpc(stack, \"VPC\",\n    max_azs=2\n)\n\necs_patterns.QueueProcessingFargateService(stack, \"QueueProcessingService\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.AssetImage(path.join(__dirname, \"..\", \"sqs-reader\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.CXAPI;\nusing Path;\n\nApp app = new App();\n\nStack stack = new Stack(app, \"aws-ecs-patterns-queue\");\nstack.Node.SetContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nVpc vpc = new Vpc(stack, \"VPC\", new VpcProps {\n    MaxAzs = 2\n});\n\nnew QueueProcessingFargateService(stack, \"QueueProcessingService\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = new AssetImage(Join(__dirname, \"..\", \"sqs-reader\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.cxapi.*;\nimport path.*;\n\nApp app = new App();\n\nStack stack = new Stack(app, \"aws-ecs-patterns-queue\");\nstack.node.setContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nVpc vpc = Vpc.Builder.create(stack, \"VPC\")\n        .maxAzs(2)\n        .build();\n\nQueueProcessingFargateService.Builder.create(stack, \"QueueProcessingService\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(new AssetImage(join(__dirname, \"..\", \"sqs-reader\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkcore\"\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport ecsPatterns \"github.com/aws-samples/dummy/awscdkawsecspatterns\"\nimport cxapi \"github.com/aws-samples/dummy/awscdkcxapi\"\nimport path \"github.com/aws-samples/dummy/path\"\n\napp := awscdkcore.NewApp()\n\nstack := awscdkcore.NewStack(app, jsii.String(\"aws-ecs-patterns-queue\"))\nstack.node.setContext(cxapi.eCS_REMOVE_DEFAULT_DESIRED_COUNT, jsii.Boolean(true))\n\nvpc := ec2.NewVpc(stack, jsii.String(\"VPC\"), &vpcProps{\n\tmaxAzs: jsii.Number(2),\n})\n\necsPatterns.NewQueueProcessingFargateService(stack, jsii.String(\"QueueProcessingService\"), &queueProcessingFargateServiceProps{\n\tvpc: vpc,\n\tmemoryLimitMiB: jsii.Number(512),\n\timage: ecs.NewAssetImage(path.join(__dirname, jsii.String(\"..\"), jsii.String(\"sqs-reader\"))),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AssetImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.AssetImage",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#setContext",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "import { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 33,
        "106": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 5,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 6,
        "255": 6,
        "256": 5,
        "257": 1,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9697e9cf1a6bfd7dad90346a5afba0f7385edd93dc86173aaedade76bbc500fe"
    },
    "7c5490a57c08882e9b8f14829b06299b44681763c1e676f534f52b0769a05822": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assets as assets\nimport aws_cdk.aws_ecr_assets as ecr_assets\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\n# network_mode: ecr_assets.NetworkMode\n# platform: ecr_assets.Platform\n\nasset_image_props = ecs.AssetImageProps(\n    build_args={\n        \"build_args_key\": \"buildArgs\"\n    },\n    exclude=[\"exclude\"],\n    extra_hash=\"extraHash\",\n    file=\"file\",\n    follow=assets.FollowMode.NEVER,\n    follow_symlinks=cdk.SymlinkFollowMode.NEVER,\n    ignore_mode=cdk.IgnoreMode.GLOB,\n    invalidation=ecr_assets.DockerImageAssetInvalidationOptions(\n        build_args=False,\n        extra_hash=False,\n        file=False,\n        network_mode=False,\n        platform=False,\n        repository_name=False,\n        target=False\n    ),\n    network_mode=network_mode,\n    platform=platform,\n    repository_name=\"repositoryName\",\n    target=\"target\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assets;\nusing Amazon.CDK.AWS.Ecr.Assets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\n\nNetworkMode networkMode;\nPlatform platform;\nAssetImageProps assetImageProps = new AssetImageProps {\n    BuildArgs = new Dictionary<string, string> {\n        { \"buildArgsKey\", \"buildArgs\" }\n    },\n    Exclude = new [] { \"exclude\" },\n    ExtraHash = \"extraHash\",\n    File = \"file\",\n    Follow = FollowMode.NEVER,\n    FollowSymlinks = SymlinkFollowMode.NEVER,\n    IgnoreMode = IgnoreMode.GLOB,\n    Invalidation = new DockerImageAssetInvalidationOptions {\n        BuildArgs = false,\n        ExtraHash = false,\n        File = false,\n        NetworkMode = false,\n        Platform = false,\n        RepositoryName = false,\n        Target = false\n    },\n    NetworkMode = networkMode,\n    Platform = platform,\n    RepositoryName = \"repositoryName\",\n    Target = \"target\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assets.*;\nimport software.amazon.awscdk.services.ecr.assets.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nNetworkMode networkMode;\nPlatform platform;\n\nAssetImageProps assetImageProps = AssetImageProps.builder()\n        .buildArgs(Map.of(\n                \"buildArgsKey\", \"buildArgs\"))\n        .exclude(List.of(\"exclude\"))\n        .extraHash(\"extraHash\")\n        .file(\"file\")\n        .follow(FollowMode.NEVER)\n        .followSymlinks(SymlinkFollowMode.NEVER)\n        .ignoreMode(IgnoreMode.GLOB)\n        .invalidation(DockerImageAssetInvalidationOptions.builder()\n                .buildArgs(false)\n                .extraHash(false)\n                .file(false)\n                .networkMode(false)\n                .platform(false)\n                .repositoryName(false)\n                .target(false)\n                .build())\n        .networkMode(networkMode)\n        .platform(platform)\n        .repositoryName(\"repositoryName\")\n        .target(\"target\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assets \"github.com/aws-samples/dummy/awscdkassets\"\nimport ecr_assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar networkMode networkMode\nvar platform platform\n\nassetImageProps := &assetImageProps{\n\tbuildArgs: map[string]*string{\n\t\t\"buildArgsKey\": jsii.String(\"buildArgs\"),\n\t},\n\texclude: []*string{\n\t\tjsii.String(\"exclude\"),\n\t},\n\textraHash: jsii.String(\"extraHash\"),\n\tfile: jsii.String(\"file\"),\n\tfollow: assets.followMode_NEVER,\n\tfollowSymlinks: cdk.symlinkFollowMode_NEVER,\n\tignoreMode: cdk.ignoreMode_GLOB,\n\tinvalidation: &dockerImageAssetInvalidationOptions{\n\t\tbuildArgs: jsii.Boolean(false),\n\t\textraHash: jsii.Boolean(false),\n\t\tfile: jsii.Boolean(false),\n\t\tnetworkMode: jsii.Boolean(false),\n\t\tplatform: jsii.Boolean(false),\n\t\trepositoryName: jsii.Boolean(false),\n\t\ttarget: jsii.Boolean(false),\n\t},\n\tnetworkMode: networkMode,\n\tplatform: platform,\n\trepositoryName: jsii.String(\"repositoryName\"),\n\ttarget: jsii.String(\"target\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\ndeclare const platform: ecr_assets.Platform;\nconst assetImageProps: ecs.AssetImageProps = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    platform: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  platform: platform,\n  repositoryName: 'repositoryName',\n  target: 'target',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AssetImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assets.FollowMode",
        "@aws-cdk/assets.FollowMode#NEVER",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetInvalidationOptions",
        "@aws-cdk/aws-ecr-assets.NetworkMode",
        "@aws-cdk/aws-ecr-assets.Platform",
        "@aws-cdk/aws-ecs.AssetImageProps",
        "@aws-cdk/core.IgnoreMode",
        "@aws-cdk/core.IgnoreMode#GLOB",
        "@aws-cdk/core.SymlinkFollowMode",
        "@aws-cdk/core.SymlinkFollowMode#NEVER"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assets from '@aws-cdk/assets';\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const networkMode: ecr_assets.NetworkMode;\ndeclare const platform: ecr_assets.Platform;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetImageProps: ecs.AssetImageProps = {\n  buildArgs: {\n    buildArgsKey: 'buildArgs',\n  },\n  exclude: ['exclude'],\n  extraHash: 'extraHash',\n  file: 'file',\n  follow: assets.FollowMode.NEVER,\n  followSymlinks: cdk.SymlinkFollowMode.NEVER,\n  ignoreMode: cdk.IgnoreMode.GLOB,\n  invalidation: {\n    buildArgs: false,\n    extraHash: false,\n    file: false,\n    networkMode: false,\n    platform: false,\n    repositoryName: false,\n    target: false,\n  },\n  networkMode: networkMode,\n  platform: platform,\n  repositoryName: 'repositoryName',\n  target: 'target',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 44,
        "91": 7,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 6,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 20,
        "290": 1
      },
      "fqnsFingerprint": "69ee882771fd87da730a7d10b85e12ff327d373bf4754b038ec274777063baf0"
    },
    "975197bb83c6ff3f17853604e44703b2baa9b3ef4a3ca4a70aa977d2e9ab6934": {
      "translations": {
        "python": {
          "source": "# cloud_map_service: cloudmap.Service\n# ecs_service: ecs.FargateService\n\n\necs_service.associate_cloud_map_service(\n    service=cloud_map_service\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.AssociateCloudMapService(new AssociateCloudMapServiceOptions {\n    Service = cloudMapService\n});",
          "version": "1"
        },
        "java": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.associateCloudMapService(AssociateCloudMapServiceOptions.builder()\n        .service(cloudMapService)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cloudMapService service\nvar ecsService fargateService\n\n\necsService.associateCloudMapService(&associateCloudMapServiceOptions{\n\tservice: cloudMapService,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions",
        "@aws-cdk/aws-ecs.BaseService#associateCloudMapService",
        "@aws-cdk/aws-servicediscovery.IService"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "82fc44076b73f7f63a4ad3300998ee0a5e703d3f3218dca775ed059e7506fb76"
    },
    "cdafd97cd59d0c06e097b88a56ec6f3f09eef6a4136a48cde1fd653a1b9649bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nauthorization_config = ecs.AuthorizationConfig(\n    access_point_id=\"accessPointId\",\n    iam=\"iam\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAuthorizationConfig authorizationConfig = new AuthorizationConfig {\n    AccessPointId = \"accessPointId\",\n    Iam = \"iam\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAuthorizationConfig authorizationConfig = AuthorizationConfig.builder()\n        .accessPointId(\"accessPointId\")\n        .iam(\"iam\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nauthorizationConfig := &authorizationConfig{\n\taccessPointId: jsii.String(\"accessPointId\"),\n\tiam: jsii.String(\"iam\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst authorizationConfig: ecs.AuthorizationConfig = {\n  accessPointId: 'accessPointId',\n  iam: 'iam',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AuthorizationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AuthorizationConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst authorizationConfig: ecs.AuthorizationConfig = {\n  accessPointId: 'accessPointId',\n  iam: 'iam',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d85b02e9c3bad0eed6e1a48fbf7f0f08693034fc825b7bd4966ed57c68432f85"
    },
    "64e34658ac071b0a559a22cf6b5d093afc4efef47f3b62b753bb9381a18052f5": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.AwsLogDriver(stream_prefix=\"EventDemo\", mode=ecs.AwsLogDriverMode.NON_BLOCKING)\n)\n\n# An Rule that describes the event trigger (in this case a scheduled run)\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 min)\")\n)\n\n# Pass an environment variable to the container 'TheContainer' in the task\nrule.add_target(targets.EcsTask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.ContainerOverride(\n        container_name=\"TheContainer\",\n        environment=[targets.TaskEnvironmentVariable(\n            name=\"I_WAS_TRIGGERED\",\n            value=\"From CloudWatch Events\"\n        )]\n    )]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromAsset(Resolve(__dirname, \"..\", \"eventhandler-image\")),\n    MemoryLimitMiB = 256,\n    Logging = new AwsLogDriver(new AwsLogDriverProps { StreamPrefix = \"EventDemo\", Mode = AwsLogDriverMode.NON_BLOCKING })\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 min)\")\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.AddTarget(new EcsTask(new EcsTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    TaskCount = 1,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerName = \"TheContainer\",\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"I_WAS_TRIGGERED\",\n            Value = \"From CloudWatch Events\"\n        } }\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromAsset(resolve(__dirname, \"..\", \"eventhandler-image\")))\n        .memoryLimitMiB(256)\n        .logging(AwsLogDriver.Builder.create().streamPrefix(\"EventDemo\").mode(AwsLogDriverMode.NON_BLOCKING).build())\n        .build());\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 min)\"))\n        .build();\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(EcsTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .taskCount(1)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerName(\"TheContainer\")\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"I_WAS_TRIGGERED\")\n                        .value(\"From CloudWatch Events\")\n                        .build()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromAsset(path.resolve(__dirname, jsii.String(\"..\"), jsii.String(\"eventhandler-image\"))),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.NewAwsLogDriver(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"EventDemo\"),\n\t\tmode: ecs.awsLogDriverMode_NON_BLOCKING,\n\t}),\n})\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.expression(jsii.String(\"rate(1 min)\")),\n})\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(targets.NewEcsTask(&ecsTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\ttaskCount: jsii.Number(1),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerName: jsii.String(\"TheContainer\"),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"I_WAS_TRIGGERED\"),\n\t\t\t\t\tvalue: jsii.String(\"From CloudWatch Events\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AwsLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriver",
        "@aws-cdk/aws-ecs.AwsLogDriverMode",
        "@aws-cdk/aws-ecs.AwsLogDriverMode#NON_BLOCKING",
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromAsset",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 43,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 13,
        "196": 5,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a88964f16e0abf60649c7f9646c4841d2900114f5a89ffb753571d27466d46df"
    },
    "5ccb660d129fa97188cd4d5fc28f29fb7954b263e17a981286992298db1f2141": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.AwsLogDriver(stream_prefix=\"EventDemo\", mode=ecs.AwsLogDriverMode.NON_BLOCKING)\n)\n\n# An Rule that describes the event trigger (in this case a scheduled run)\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 min)\")\n)\n\n# Pass an environment variable to the container 'TheContainer' in the task\nrule.add_target(targets.EcsTask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.ContainerOverride(\n        container_name=\"TheContainer\",\n        environment=[targets.TaskEnvironmentVariable(\n            name=\"I_WAS_TRIGGERED\",\n            value=\"From CloudWatch Events\"\n        )]\n    )]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromAsset(Resolve(__dirname, \"..\", \"eventhandler-image\")),\n    MemoryLimitMiB = 256,\n    Logging = new AwsLogDriver(new AwsLogDriverProps { StreamPrefix = \"EventDemo\", Mode = AwsLogDriverMode.NON_BLOCKING })\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 min)\")\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.AddTarget(new EcsTask(new EcsTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    TaskCount = 1,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerName = \"TheContainer\",\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"I_WAS_TRIGGERED\",\n            Value = \"From CloudWatch Events\"\n        } }\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromAsset(resolve(__dirname, \"..\", \"eventhandler-image\")))\n        .memoryLimitMiB(256)\n        .logging(AwsLogDriver.Builder.create().streamPrefix(\"EventDemo\").mode(AwsLogDriverMode.NON_BLOCKING).build())\n        .build());\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 min)\"))\n        .build();\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(EcsTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .taskCount(1)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerName(\"TheContainer\")\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"I_WAS_TRIGGERED\")\n                        .value(\"From CloudWatch Events\")\n                        .build()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromAsset(path.resolve(__dirname, jsii.String(\"..\"), jsii.String(\"eventhandler-image\"))),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.NewAwsLogDriver(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"EventDemo\"),\n\t\tmode: ecs.awsLogDriverMode_NON_BLOCKING,\n\t}),\n})\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.expression(jsii.String(\"rate(1 min)\")),\n})\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(targets.NewEcsTask(&ecsTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\ttaskCount: jsii.Number(1),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerName: jsii.String(\"TheContainer\"),\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"I_WAS_TRIGGERED\"),\n\t\t\t\t\tvalue: jsii.String(\"From CloudWatch Events\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AwsLogDriverMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriver",
        "@aws-cdk/aws-ecs.AwsLogDriverMode",
        "@aws-cdk/aws-ecs.AwsLogDriverMode#NON_BLOCKING",
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromAsset",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 43,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 13,
        "196": 5,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a88964f16e0abf60649c7f9646c4841d2900114f5a89ffb753571d27466d46df"
    },
    "ec3d1d5e381eef3229364ab7c22acea4b49efce7e50cf5831962e59884810ae0": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the Windows container to start\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    runtime_platform=ecs.RuntimePlatform(\n        operating_system_family=ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        cpu_architecture=ecs.CpuArchitecture.X86_64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"windowsservercore\",\n    logging=ecs.LogDriver.aws_logs(stream_prefix=\"win-iis-on-fargate\"),\n    port_mappings=[ecs.PortMapping(container_port=80)],\n    image=ecs.ContainerImage.from_registry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    RuntimePlatform = new RuntimePlatform {\n        OperatingSystemFamily = OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        CpuArchitecture = CpuArchitecture.X86_64\n    },\n    Cpu = 1024,\n    MemoryLimitMiB = 2048\n});\n\ntaskDefinition.AddContainer(\"windowsservercore\", new ContainerDefinitionOptions {\n    Logging = LogDriver.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"win-iis-on-fargate\" }),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } },\n    Image = ContainerImage.FromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .runtimePlatform(RuntimePlatform.builder()\n                .operatingSystemFamily(OperatingSystemFamily.WINDOWS_SERVER_2019_CORE)\n                .cpuArchitecture(CpuArchitecture.X86_64)\n                .build())\n        .cpu(1024)\n        .memoryLimitMiB(2048)\n        .build();\n\ntaskDefinition.addContainer(\"windowsservercore\", ContainerDefinitionOptions.builder()\n        .logging(LogDriver.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"win-iis-on-fargate\").build()))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .image(ContainerImage.fromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the Windows container to start\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\truntimePlatform: &runtimePlatform{\n\t\toperatingSystemFamily: ecs.operatingSystemFamily_WINDOWS_SERVER_2019_CORE(),\n\t\tcpuArchitecture: ecs.cpuArchitecture_X86_64(),\n\t},\n\tcpu: jsii.Number(1024),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\ntaskDefinition.addContainer(jsii.String(\"windowsservercore\"), &containerDefinitionOptions{\n\tlogging: ecs.logDriver.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"win-iis-on-fargate\"),\n\t}),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(80),\n\t\t},\n\t},\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AwsLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuArchitecture",
        "@aws-cdk/aws-ecs.CpuArchitecture#X86_64",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDriver#awsLogs",
        "@aws-cdk/aws-ecs.OperatingSystemFamily",
        "@aws-cdk/aws-ecs.OperatingSystemFamily#WINDOWS_SERVER_2019_CORE",
        "@aws-cdk/aws-ecs.RuntimePlatform",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 27,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 10,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "5f16697e57d87b5c90a6ef559b358d66b14ec5a4aebf32a647df7a3923ba813f"
    },
    "6ff52d2a47faf92526ecf7d3b8205a7d2b366953db6e2d8665e7cad9df99b243": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nbase_log_driver_props = ecs.BaseLogDriverProps(\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nBaseLogDriverProps baseLogDriverProps = new BaseLogDriverProps {\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    Tag = \"tag\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nBaseLogDriverProps baseLogDriverProps = BaseLogDriverProps.builder()\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nbaseLogDriverProps := &baseLogDriverProps{\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\ttag: jsii.String(\"tag\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst baseLogDriverProps: ecs.BaseLogDriverProps = {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BaseLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseLogDriverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseLogDriverProps: ecs.BaseLogDriverProps = {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "cb1ae9f14f20efc01cb214ef5547ae89521139d20a72c771649bb768a9795516"
    },
    "d5a882954e0fbd65e92659bc685629b884dc3744fccc701c22e5c4bdf5d0a0d2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecs as ecs\n\n\nservice = ecs.BaseService.from_service_arn_with_cluster(self, \"EcsService\", \"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\")\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nbuild_output = codepipeline.Artifact()\n# add source and build stages to the pipeline as usual...\ndeploy_stage = pipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.EcsDeployAction(\n            action_name=\"DeployAction\",\n            service=service,\n            input=build_output\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECS;\n\n\nIBaseService service = BaseService.FromServiceArnWithCluster(this, \"EcsService\", \"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\");\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\n// add source and build stages to the pipeline as usual...\nIStage deployStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new EcsDeployAction(new EcsDeployActionProps {\n            ActionName = \"DeployAction\",\n            Service = service,\n            Input = buildOutput\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecs.*;\n\n\nIBaseService service = BaseService.fromServiceArnWithCluster(this, \"EcsService\", \"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\");\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact buildOutput = new Artifact();\n// add source and build stages to the pipeline as usual...\nIStage deployStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            EcsDeployAction.Builder.create()\n                    .actionName(\"DeployAction\")\n                    .service(service)\n                    .input(buildOutput)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\n\nservice := ecs.baseService.fromServiceArnWithCluster(this, jsii.String(\"EcsService\"), jsii.String(\"arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName\"))\npipeline := codepipeline.NewPipeline(this, jsii.String(\"MyPipeline\"))\nbuildOutput := codepipeline.NewArtifact()\n// add source and build stages to the pipeline as usual...\ndeployStage := pipeline.addStage(&stageOptions{\n\tstageName: jsii.String(\"Deploy\"),\n\tactions: []iAction{\n\t\tcodepipeline_actions.NewEcsDeployAction(&ecsDeployActionProps{\n\t\t\tactionName: jsii.String(\"DeployAction\"),\n\t\t\tservice: service,\n\t\t\tinput: buildOutput,\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecs from '@aws-cdk/aws-ecs';\n\nconst service = ecs.BaseService.fromServiceArnWithCluster(this, 'EcsService',\n  'arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName'\n);\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\n// add source and build stages to the pipeline as usual...\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service: service,\n      input: buildOutput,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BaseService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.EcsDeployAction",
        "@aws-cdk/aws-codepipeline-actions.EcsDeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-ecs.BaseService",
        "@aws-cdk/aws-ecs.BaseService#fromServiceArnWithCluster",
        "@aws-cdk/aws-ecs.IBaseService",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = ecs.BaseService.fromServiceArnWithCluster(this, 'EcsService',\n  'arn:aws:ecs:us-east-1:123456789012:service/myClusterName/myServiceName'\n);\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst buildOutput = new codepipeline.Artifact();\n// add source and build stages to the pipeline as usual...\nconst deployStage = pipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.EcsDeployAction({\n      actionName: 'DeployAction',\n      service: service,\n      input: buildOutput,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 23,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "9a6fab6a4b0e8250941d8fa80cd5c58c26a293f6044fd5c18ce39eb600413170"
    },
    "0fa11bf0f0753dc888cc2139c0c7312581a0e1861ade19f6a2805945c7b92122": {
      "translations": {
        "python": {
          "source": "# listener: elbv2.ApplicationListener\n# service: ecs.BaseService\n\nlistener.add_targets(\"ECS\",\n    port=80,\n    targets=[service.load_balancer_target(\n        container_name=\"MyContainer\",\n        container_port=1234\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nlistener.AddTargets(\"ECS\", new AddApplicationTargetsProps {\n    Port = 80,\n    Targets = new [] { service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n        ContainerName = \"MyContainer\",\n        ContainerPort = 1234\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nlistener.addTargets(\"ECS\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .targets(List.of(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n                .containerName(\"MyContainer\")\n                .containerPort(1234)\n                .build())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var listener applicationListener\nvar service baseService\n\nlistener.addTargets(jsii.String(\"ECS\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n\ttargets: []iApplicationLoadBalancerTarget{\n\t\tservice.loadBalancerTarget(&loadBalancerTargetOptions{\n\t\t\tcontainerName: jsii.String(\"MyContainer\"),\n\t\t\tcontainerPort: jsii.Number(1234),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\nlistener.addTargets('ECS', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 1234,\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ecs.BaseService",
          "memberName": "loadBalancerTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nlistener.addTargets('ECS', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 1234,\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "633779a1ec99009562148c96d5fc9c0cbb3c9543eb34a030fb20c761a3b654f7"
    },
    "c9d6a37f16760ea5624209a122282729d34e21b365e19cf06dda576b99de8c3e": {
      "translations": {
        "python": {
          "source": "# listener: elbv2.ApplicationListener\n# service: ecs.BaseService\n\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var listener applicationListener\nvar service baseService\n\nservice.registerLoadBalancerTargets(&ecsTarget{\n\tcontainerName: jsii.String(\"web\"),\n\tcontainerPort: jsii.Number(80),\n\tnewTargetGroupId: jsii.String(\"ECS\"),\n\tlistener: ecs.listenerConfig.applicationListener(listener, &addApplicationTargetsProps{\n\t\tprotocol: elbv2.applicationProtocol_HTTPS,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ecs.BaseService",
          "memberName": "registerLoadBalancerTargets"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 20,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "8f9ecd7862fbd4259402c85e5a496f48c54a3b2da3514bbdf7bbda415b348918"
    },
    "8bde92172dc42e1e354b824d1c1b620469ffabd8a4d1f47b223c8c7953d47768": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_servicediscovery as servicediscovery\nimport aws_cdk.core as cdk\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# namespace: servicediscovery.INamespace\n\nbase_service_options = ecs.BaseServiceOptions(\n    cluster=cluster,\n\n    # the properties below are optional\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"capacityProvider\",\n\n        # the properties below are optional\n        base=123,\n        weight=123\n    )],\n    circuit_breaker=ecs.DeploymentCircuitBreaker(\n        rollback=False\n    ),\n    cloud_map_options=ecs.CloudMapOptions(\n        cloud_map_namespace=namespace,\n        container=container_definition,\n        container_port=123,\n        dns_record_type=servicediscovery.DnsRecordType.A,\n        dns_ttl=cdk.Duration.minutes(30),\n        failure_threshold=123,\n        name=\"name\"\n    ),\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.ECS\n    ),\n    desired_count=123,\n    enable_eCSManaged_tags=False,\n    enable_execute_command=False,\n    health_check_grace_period=cdk.Duration.minutes(30),\n    max_healthy_percent=123,\n    min_healthy_percent=123,\n    propagate_tags=ecs.PropagatedTagSource.SERVICE,\n    propagate_task_tags_from=ecs.PropagatedTagSource.SERVICE,\n    service_name=\"serviceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nINamespace namespace;\nBaseServiceOptions baseServiceOptions = new BaseServiceOptions {\n    Cluster = cluster,\n\n    // the properties below are optional\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"capacityProvider\",\n\n        // the properties below are optional\n        Base = 123,\n        Weight = 123\n    } },\n    CircuitBreaker = new DeploymentCircuitBreaker {\n        Rollback = false\n    },\n    CloudMapOptions = new CloudMapOptions {\n        CloudMapNamespace = namespace,\n        Container = containerDefinition,\n        ContainerPort = 123,\n        DnsRecordType = DnsRecordType.A,\n        DnsTtl = Duration.Minutes(30),\n        FailureThreshold = 123,\n        Name = \"name\"\n    },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.ECS\n    },\n    DesiredCount = 123,\n    EnableECSManagedTags = false,\n    EnableExecuteCommand = false,\n    HealthCheckGracePeriod = Duration.Minutes(30),\n    MaxHealthyPercent = 123,\n    MinHealthyPercent = 123,\n    PropagateTags = PropagatedTagSource.SERVICE,\n    PropagateTaskTagsFrom = PropagatedTagSource.SERVICE,\n    ServiceName = \"serviceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.core.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nINamespace namespace;\n\nBaseServiceOptions baseServiceOptions = BaseServiceOptions.builder()\n        .cluster(cluster)\n\n        // the properties below are optional\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"capacityProvider\")\n\n                // the properties below are optional\n                .base(123)\n                .weight(123)\n                .build()))\n        .circuitBreaker(DeploymentCircuitBreaker.builder()\n                .rollback(false)\n                .build())\n        .cloudMapOptions(CloudMapOptions.builder()\n                .cloudMapNamespace(namespace)\n                .container(containerDefinition)\n                .containerPort(123)\n                .dnsRecordType(DnsRecordType.A)\n                .dnsTtl(Duration.minutes(30))\n                .failureThreshold(123)\n                .name(\"name\")\n                .build())\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.ECS)\n                .build())\n        .desiredCount(123)\n        .enableECSManagedTags(false)\n        .enableExecuteCommand(false)\n        .healthCheckGracePeriod(Duration.minutes(30))\n        .maxHealthyPercent(123)\n        .minHealthyPercent(123)\n        .propagateTags(PropagatedTagSource.SERVICE)\n        .propagateTaskTagsFrom(PropagatedTagSource.SERVICE)\n        .serviceName(\"serviceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar namespace iNamespace\n\nbaseServiceOptions := &baseServiceOptions{\n\tcluster: cluster,\n\n\t// the properties below are optional\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbase: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tcircuitBreaker: &deploymentCircuitBreaker{\n\t\trollback: jsii.Boolean(false),\n\t},\n\tcloudMapOptions: &cloudMapOptions{\n\t\tcloudMapNamespace: namespace,\n\t\tcontainer: containerDefinition,\n\t\tcontainerPort: jsii.Number(123),\n\t\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\t\tdnsTtl: cdk.duration.minutes(jsii.Number(30)),\n\t\tfailureThreshold: jsii.Number(123),\n\t\tname: jsii.String(\"name\"),\n\t},\n\tdeploymentController: &deploymentController{\n\t\ttype: ecs.deploymentControllerType_ECS,\n\t},\n\tdesiredCount: jsii.Number(123),\n\tenableECSManagedTags: jsii.Boolean(false),\n\tenableExecuteCommand: jsii.Boolean(false),\n\thealthCheckGracePeriod: cdk.*duration.minutes(jsii.Number(30)),\n\tmaxHealthyPercent: jsii.Number(123),\n\tminHealthyPercent: jsii.Number(123),\n\tpropagateTags: ecs.propagatedTagSource_SERVICE,\n\tpropagateTaskTagsFrom: ecs.*propagatedTagSource_SERVICE,\n\tserviceName: jsii.String(\"serviceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const namespace: servicediscovery.INamespace;\nconst baseServiceOptions: ecs.BaseServiceOptions = {\n  cluster: cluster,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  propagateTaskTagsFrom: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BaseServiceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseServiceOptions",
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#ECS",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PropagatedTagSource",
        "@aws-cdk/aws-ecs.PropagatedTagSource#SERVICE",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const namespace: servicediscovery.INamespace;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseServiceOptions: ecs.BaseServiceOptions = {\n  cluster: cluster,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  propagateTaskTagsFrom: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 9,
        "10": 6,
        "75": 62,
        "91": 3,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 5,
        "194": 12,
        "196": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 26,
        "290": 1
      },
      "fqnsFingerprint": "21d7e26053e309d955476977ef35c14b852fc059d84210c9dce320d877ee7707"
    },
    "f78201f0aa5fdc1763f112372661a26b1240e3890ee3d2b4aac186005eebccd5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_servicediscovery as servicediscovery\nimport aws_cdk.core as cdk\n\n# cluster: ecs.Cluster\n# container_definition: ecs.ContainerDefinition\n# namespace: servicediscovery.INamespace\n\nbase_service_props = ecs.BaseServiceProps(\n    cluster=cluster,\n    launch_type=ecs.LaunchType.EC2,\n\n    # the properties below are optional\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"capacityProvider\",\n\n        # the properties below are optional\n        base=123,\n        weight=123\n    )],\n    circuit_breaker=ecs.DeploymentCircuitBreaker(\n        rollback=False\n    ),\n    cloud_map_options=ecs.CloudMapOptions(\n        cloud_map_namespace=namespace,\n        container=container_definition,\n        container_port=123,\n        dns_record_type=servicediscovery.DnsRecordType.A,\n        dns_ttl=cdk.Duration.minutes(30),\n        failure_threshold=123,\n        name=\"name\"\n    ),\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.ECS\n    ),\n    desired_count=123,\n    enable_eCSManaged_tags=False,\n    enable_execute_command=False,\n    health_check_grace_period=cdk.Duration.minutes(30),\n    max_healthy_percent=123,\n    min_healthy_percent=123,\n    propagate_tags=ecs.PropagatedTagSource.SERVICE,\n    propagate_task_tags_from=ecs.PropagatedTagSource.SERVICE,\n    service_name=\"serviceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nINamespace namespace;\nBaseServiceProps baseServiceProps = new BaseServiceProps {\n    Cluster = cluster,\n    LaunchType = LaunchType.EC2,\n\n    // the properties below are optional\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"capacityProvider\",\n\n        // the properties below are optional\n        Base = 123,\n        Weight = 123\n    } },\n    CircuitBreaker = new DeploymentCircuitBreaker {\n        Rollback = false\n    },\n    CloudMapOptions = new CloudMapOptions {\n        CloudMapNamespace = namespace,\n        Container = containerDefinition,\n        ContainerPort = 123,\n        DnsRecordType = DnsRecordType.A,\n        DnsTtl = Duration.Minutes(30),\n        FailureThreshold = 123,\n        Name = \"name\"\n    },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.ECS\n    },\n    DesiredCount = 123,\n    EnableECSManagedTags = false,\n    EnableExecuteCommand = false,\n    HealthCheckGracePeriod = Duration.Minutes(30),\n    MaxHealthyPercent = 123,\n    MinHealthyPercent = 123,\n    PropagateTags = PropagatedTagSource.SERVICE,\n    PropagateTaskTagsFrom = PropagatedTagSource.SERVICE,\n    ServiceName = \"serviceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.core.*;\n\nCluster cluster;\nContainerDefinition containerDefinition;\nINamespace namespace;\n\nBaseServiceProps baseServiceProps = BaseServiceProps.builder()\n        .cluster(cluster)\n        .launchType(LaunchType.EC2)\n\n        // the properties below are optional\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"capacityProvider\")\n\n                // the properties below are optional\n                .base(123)\n                .weight(123)\n                .build()))\n        .circuitBreaker(DeploymentCircuitBreaker.builder()\n                .rollback(false)\n                .build())\n        .cloudMapOptions(CloudMapOptions.builder()\n                .cloudMapNamespace(namespace)\n                .container(containerDefinition)\n                .containerPort(123)\n                .dnsRecordType(DnsRecordType.A)\n                .dnsTtl(Duration.minutes(30))\n                .failureThreshold(123)\n                .name(\"name\")\n                .build())\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.ECS)\n                .build())\n        .desiredCount(123)\n        .enableECSManagedTags(false)\n        .enableExecuteCommand(false)\n        .healthCheckGracePeriod(Duration.minutes(30))\n        .maxHealthyPercent(123)\n        .minHealthyPercent(123)\n        .propagateTags(PropagatedTagSource.SERVICE)\n        .propagateTaskTagsFrom(PropagatedTagSource.SERVICE)\n        .serviceName(\"serviceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar cluster cluster\nvar containerDefinition containerDefinition\nvar namespace iNamespace\n\nbaseServiceProps := &baseServiceProps{\n\tcluster: cluster,\n\tlaunchType: ecs.launchType_EC2,\n\n\t// the properties below are optional\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbase: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tcircuitBreaker: &deploymentCircuitBreaker{\n\t\trollback: jsii.Boolean(false),\n\t},\n\tcloudMapOptions: &cloudMapOptions{\n\t\tcloudMapNamespace: namespace,\n\t\tcontainer: containerDefinition,\n\t\tcontainerPort: jsii.Number(123),\n\t\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\t\tdnsTtl: cdk.duration.minutes(jsii.Number(30)),\n\t\tfailureThreshold: jsii.Number(123),\n\t\tname: jsii.String(\"name\"),\n\t},\n\tdeploymentController: &deploymentController{\n\t\ttype: ecs.deploymentControllerType_ECS,\n\t},\n\tdesiredCount: jsii.Number(123),\n\tenableECSManagedTags: jsii.Boolean(false),\n\tenableExecuteCommand: jsii.Boolean(false),\n\thealthCheckGracePeriod: cdk.*duration.minutes(jsii.Number(30)),\n\tmaxHealthyPercent: jsii.Number(123),\n\tminHealthyPercent: jsii.Number(123),\n\tpropagateTags: ecs.propagatedTagSource_SERVICE,\n\tpropagateTaskTagsFrom: ecs.*propagatedTagSource_SERVICE,\n\tserviceName: jsii.String(\"serviceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const namespace: servicediscovery.INamespace;\nconst baseServiceProps: ecs.BaseServiceProps = {\n  cluster: cluster,\n  launchType: ecs.LaunchType.EC2,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  propagateTaskTagsFrom: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BaseServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseServiceProps",
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#ECS",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LaunchType",
        "@aws-cdk/aws-ecs.LaunchType#EC2",
        "@aws-cdk/aws-ecs.PropagatedTagSource",
        "@aws-cdk/aws-ecs.PropagatedTagSource#SERVICE",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const namespace: servicediscovery.INamespace;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseServiceProps: ecs.BaseServiceProps = {\n  cluster: cluster,\n  launchType: ecs.LaunchType.EC2,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  propagateTaskTagsFrom: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 9,
        "10": 6,
        "75": 66,
        "91": 3,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 5,
        "194": 14,
        "196": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 27,
        "290": 1
      },
      "fqnsFingerprint": "ec43c3fcb469bb901e3d80f6f54bf87fe3f5520face698a7714cdabd2d6a269d"
    },
    "f26ec2637847fde68928fc82c4bd3712e3f65355224b9207071351ad6f1df1c9": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n\ncluster.add_capacity(\"bottlerocket-asg\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c5.large\"),\n    machine_image=ecs.BottleRocketImage()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"bottlerocket-asg\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c5.large\"),\n    MachineImage = new BottleRocketImage()\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"bottlerocket-asg\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c5.large\"))\n        .machineImage(new BottleRocketImage())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\ncluster.addCapacity(jsii.String(\"bottlerocket-asg\"), &addCapacityOptions{\n\tminCapacity: jsii.Number(2),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"c5.large\")),\n\tmachineImage: ecs.NewBottleRocketImage(),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BottleRocketImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.BottleRocketImage",
        "@aws-cdk/aws-ecs.Cluster#addCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7ddc81982a655cc7f31bf710e88d5c590df9d43746d0697f34e629e300b1848e"
    },
    "f9228c7d120eb71a536301613d3fe128ac78568fb1f681cfbfa4c9902fb92c99": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\n\nbottle_rocket_image_props = ecs.BottleRocketImageProps(\n    architecture=ec2.InstanceArchitecture.ARM_64,\n    cached_in_context=False,\n    variant=ecs.BottlerocketEcsVariant.AWS_ECS_1\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\n\nBottleRocketImageProps bottleRocketImageProps = new BottleRocketImageProps {\n    Architecture = InstanceArchitecture.ARM_64,\n    CachedInContext = false,\n    Variant = BottlerocketEcsVariant.AWS_ECS_1\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\n\nBottleRocketImageProps bottleRocketImageProps = BottleRocketImageProps.builder()\n        .architecture(InstanceArchitecture.ARM_64)\n        .cachedInContext(false)\n        .variant(BottlerocketEcsVariant.AWS_ECS_1)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nbottleRocketImageProps := &bottleRocketImageProps{\n\tarchitecture: ec2.instanceArchitecture_ARM_64,\n\tcachedInContext: jsii.Boolean(false),\n\tvariant: ecs.bottlerocketEcsVariant_AWS_ECS_1,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst bottleRocketImageProps: ecs.BottleRocketImageProps = {\n  architecture: ec2.InstanceArchitecture.ARM_64,\n  cachedInContext: false,\n  variant: ecs.BottlerocketEcsVariant.AWS_ECS_1,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BottleRocketImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceArchitecture",
        "@aws-cdk/aws-ec2.InstanceArchitecture#ARM_64",
        "@aws-cdk/aws-ecs.BottleRocketImageProps",
        "@aws-cdk/aws-ecs.BottlerocketEcsVariant",
        "@aws-cdk/aws-ecs.BottlerocketEcsVariant#AWS_ECS_1"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst bottleRocketImageProps: ecs.BottleRocketImageProps = {\n  architecture: ec2.InstanceArchitecture.ARM_64,\n  cachedInContext: false,\n  variant: ecs.BottlerocketEcsVariant.AWS_ECS_1,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "57930f49301953ef7a5c0220c16a94f0c1df063af54293dbdb172e6b0511d6da"
    },
    "9d1f2f9e39707fbfa3c874ec045c5c22903e689d270e18e3645468ada3fb8696": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nbuilt_in_attributes = ecs.BuiltInAttributes()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nBuiltInAttributes builtInAttributes = new BuiltInAttributes();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nBuiltInAttributes builtInAttributes = new BuiltInAttributes();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nbuiltInAttributes := ecs.NewBuiltInAttributes()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst builtInAttributes = new ecs.BuiltInAttributes();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BuiltInAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BuiltInAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst builtInAttributes = new ecs.BuiltInAttributes();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "88d9c6ae3fbb57c3676e8264f02e962c4ebcb92f69258b2d0630e6e0435df6da"
    },
    "ef3713a614bd4425268da9bd5de9dfadbb26994f2fec53fcff62de6bb2288442": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncapacity_provider_strategy = ecs.CapacityProviderStrategy(\n    capacity_provider=\"capacityProvider\",\n\n    # the properties below are optional\n    base=123,\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCapacityProviderStrategy capacityProviderStrategy = new CapacityProviderStrategy {\n    CapacityProvider = \"capacityProvider\",\n\n    // the properties below are optional\n    Base = 123,\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCapacityProviderStrategy capacityProviderStrategy = CapacityProviderStrategy.builder()\n        .capacityProvider(\"capacityProvider\")\n\n        // the properties below are optional\n        .base(123)\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncapacityProviderStrategy := &capacityProviderStrategy{\n\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t// the properties below are optional\n\tbase: jsii.Number(123),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategy: ecs.CapacityProviderStrategy = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CapacityProviderStrategy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CapacityProviderStrategy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityProviderStrategy: ecs.CapacityProviderStrategy = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0345fbf2c8cb1082cfaae802a7ad0511314d6eb03d47360246da79b25df36cb0"
    },
    "f9d48b11a4d56b6aef849c93ef02d5136df9a752982be176c98a616048cc29c9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_capacity_provider = ecs.CfnCapacityProvider(self, \"MyCfnCapacityProvider\",\n    auto_scaling_group_provider=ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty(\n        auto_scaling_group_arn=\"autoScalingGroupArn\",\n\n        # the properties below are optional\n        managed_scaling=ecs.CfnCapacityProvider.ManagedScalingProperty(\n            instance_warmup_period=123,\n            maximum_scaling_step_size=123,\n            minimum_scaling_step_size=123,\n            status=\"status\",\n            target_capacity=123\n        ),\n        managed_termination_protection=\"managedTerminationProtection\"\n    ),\n\n    # the properties below are optional\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnCapacityProvider cfnCapacityProvider = new CfnCapacityProvider(this, \"MyCfnCapacityProvider\", new CfnCapacityProviderProps {\n    AutoScalingGroupProvider = new AutoScalingGroupProviderProperty {\n        AutoScalingGroupArn = \"autoScalingGroupArn\",\n\n        // the properties below are optional\n        ManagedScaling = new ManagedScalingProperty {\n            InstanceWarmupPeriod = 123,\n            MaximumScalingStepSize = 123,\n            MinimumScalingStepSize = 123,\n            Status = \"status\",\n            TargetCapacity = 123\n        },\n        ManagedTerminationProtection = \"managedTerminationProtection\"\n    },\n\n    // the properties below are optional\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnCapacityProvider cfnCapacityProvider = CfnCapacityProvider.Builder.create(this, \"MyCfnCapacityProvider\")\n        .autoScalingGroupProvider(AutoScalingGroupProviderProperty.builder()\n                .autoScalingGroupArn(\"autoScalingGroupArn\")\n\n                // the properties below are optional\n                .managedScaling(ManagedScalingProperty.builder()\n                        .instanceWarmupPeriod(123)\n                        .maximumScalingStepSize(123)\n                        .minimumScalingStepSize(123)\n                        .status(\"status\")\n                        .targetCapacity(123)\n                        .build())\n                .managedTerminationProtection(\"managedTerminationProtection\")\n                .build())\n\n        // the properties below are optional\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnCapacityProvider := ecs.NewCfnCapacityProvider(this, jsii.String(\"MyCfnCapacityProvider\"), &cfnCapacityProviderProps{\n\tautoScalingGroupProvider: &autoScalingGroupProviderProperty{\n\t\tautoScalingGroupArn: jsii.String(\"autoScalingGroupArn\"),\n\n\t\t// the properties below are optional\n\t\tmanagedScaling: &managedScalingProperty{\n\t\t\tinstanceWarmupPeriod: jsii.Number(123),\n\t\t\tmaximumScalingStepSize: jsii.Number(123),\n\t\t\tminimumScalingStepSize: jsii.Number(123),\n\t\t\tstatus: jsii.String(\"status\"),\n\t\t\ttargetCapacity: jsii.Number(123),\n\t\t},\n\t\tmanagedTerminationProtection: jsii.String(\"managedTerminationProtection\"),\n\t},\n\n\t// the properties below are optional\n\tname: jsii.String(\"name\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnCapacityProvider = new ecs.CfnCapacityProvider(this, 'MyCfnCapacityProvider', {\n  autoScalingGroupProvider: {\n    autoScalingGroupArn: 'autoScalingGroupArn',\n\n    // the properties below are optional\n    managedScaling: {\n      instanceWarmupPeriod: 123,\n      maximumScalingStepSize: 123,\n      minimumScalingStepSize: 123,\n      status: 'status',\n      targetCapacity: 123,\n    },\n    managedTerminationProtection: 'managedTerminationProtection',\n  },\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCapacityProvider",
        "@aws-cdk/aws-ecs.CfnCapacityProviderProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCapacityProvider = new ecs.CfnCapacityProvider(this, 'MyCfnCapacityProvider', {\n  autoScalingGroupProvider: {\n    autoScalingGroupArn: 'autoScalingGroupArn',\n\n    // the properties below are optional\n    managedScaling: {\n      instanceWarmupPeriod: 123,\n      maximumScalingStepSize: 123,\n      minimumScalingStepSize: 123,\n      status: 'status',\n      targetCapacity: 123,\n    },\n    managedTerminationProtection: 'managedTerminationProtection',\n  },\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 17,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "31a96b6f34b30b98ecf581cc63c5856d1145bf27631858e4c2d88d45d210cdef"
    },
    "2980f4668219766e0fa825a82fe0d2b8568369283d4e08d4d96e1f0259b67493": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nauto_scaling_group_provider_property = ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty(\n    auto_scaling_group_arn=\"autoScalingGroupArn\",\n\n    # the properties below are optional\n    managed_scaling=ecs.CfnCapacityProvider.ManagedScalingProperty(\n        instance_warmup_period=123,\n        maximum_scaling_step_size=123,\n        minimum_scaling_step_size=123,\n        status=\"status\",\n        target_capacity=123\n    ),\n    managed_termination_protection=\"managedTerminationProtection\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAutoScalingGroupProviderProperty autoScalingGroupProviderProperty = new AutoScalingGroupProviderProperty {\n    AutoScalingGroupArn = \"autoScalingGroupArn\",\n\n    // the properties below are optional\n    ManagedScaling = new ManagedScalingProperty {\n        InstanceWarmupPeriod = 123,\n        MaximumScalingStepSize = 123,\n        MinimumScalingStepSize = 123,\n        Status = \"status\",\n        TargetCapacity = 123\n    },\n    ManagedTerminationProtection = \"managedTerminationProtection\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAutoScalingGroupProviderProperty autoScalingGroupProviderProperty = AutoScalingGroupProviderProperty.builder()\n        .autoScalingGroupArn(\"autoScalingGroupArn\")\n\n        // the properties below are optional\n        .managedScaling(ManagedScalingProperty.builder()\n                .instanceWarmupPeriod(123)\n                .maximumScalingStepSize(123)\n                .minimumScalingStepSize(123)\n                .status(\"status\")\n                .targetCapacity(123)\n                .build())\n        .managedTerminationProtection(\"managedTerminationProtection\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nautoScalingGroupProviderProperty := &autoScalingGroupProviderProperty{\n\tautoScalingGroupArn: jsii.String(\"autoScalingGroupArn\"),\n\n\t// the properties below are optional\n\tmanagedScaling: &managedScalingProperty{\n\t\tinstanceWarmupPeriod: jsii.Number(123),\n\t\tmaximumScalingStepSize: jsii.Number(123),\n\t\tminimumScalingStepSize: jsii.Number(123),\n\t\tstatus: jsii.String(\"status\"),\n\t\ttargetCapacity: jsii.Number(123),\n\t},\n\tmanagedTerminationProtection: jsii.String(\"managedTerminationProtection\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst autoScalingGroupProviderProperty: ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty = {\n  autoScalingGroupArn: 'autoScalingGroupArn',\n\n  // the properties below are optional\n  managedScaling: {\n    instanceWarmupPeriod: 123,\n    maximumScalingStepSize: 123,\n    minimumScalingStepSize: 123,\n    status: 'status',\n    targetCapacity: 123,\n  },\n  managedTerminationProtection: 'managedTerminationProtection',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst autoScalingGroupProviderProperty: ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty = {\n  autoScalingGroupArn: 'autoScalingGroupArn',\n\n  // the properties below are optional\n  managedScaling: {\n    instanceWarmupPeriod: 123,\n    maximumScalingStepSize: 123,\n    minimumScalingStepSize: 123,\n    status: 'status',\n    targetCapacity: 123,\n  },\n  managedTerminationProtection: 'managedTerminationProtection',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 4,
        "75": 13,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "cb9ab075529722de75ca4c40bbe273b465d3e0a7f0c78c1652d2167cb1eb9eb3"
    },
    "e39f18b851e6025ed109aaed5fd4e3799852a322a56e23e6b4c9dbaf5755b87b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nmanaged_scaling_property = ecs.CfnCapacityProvider.ManagedScalingProperty(\n    instance_warmup_period=123,\n    maximum_scaling_step_size=123,\n    minimum_scaling_step_size=123,\n    status=\"status\",\n    target_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nManagedScalingProperty managedScalingProperty = new ManagedScalingProperty {\n    InstanceWarmupPeriod = 123,\n    MaximumScalingStepSize = 123,\n    MinimumScalingStepSize = 123,\n    Status = \"status\",\n    TargetCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nManagedScalingProperty managedScalingProperty = ManagedScalingProperty.builder()\n        .instanceWarmupPeriod(123)\n        .maximumScalingStepSize(123)\n        .minimumScalingStepSize(123)\n        .status(\"status\")\n        .targetCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nmanagedScalingProperty := &managedScalingProperty{\n\tinstanceWarmupPeriod: jsii.Number(123),\n\tmaximumScalingStepSize: jsii.Number(123),\n\tminimumScalingStepSize: jsii.Number(123),\n\tstatus: jsii.String(\"status\"),\n\ttargetCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst managedScalingProperty: ecs.CfnCapacityProvider.ManagedScalingProperty = {\n  instanceWarmupPeriod: 123,\n  maximumScalingStepSize: 123,\n  minimumScalingStepSize: 123,\n  status: 'status',\n  targetCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCapacityProvider.ManagedScalingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCapacityProvider.ManagedScalingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst managedScalingProperty: ecs.CfnCapacityProvider.ManagedScalingProperty = {\n  instanceWarmupPeriod: 123,\n  maximumScalingStepSize: 123,\n  minimumScalingStepSize: 123,\n  status: 'status',\n  targetCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 2,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d799035507b15e19c7e2b0344d744ad85d9416022434678c48a83d8a27dba66a"
    },
    "2ba9d06db32878a23513dac80bba8e8b0341d1f9743986b00225c2b7595aed99": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_capacity_provider_props = ecs.CfnCapacityProviderProps(\n    auto_scaling_group_provider=ecs.CfnCapacityProvider.AutoScalingGroupProviderProperty(\n        auto_scaling_group_arn=\"autoScalingGroupArn\",\n\n        # the properties below are optional\n        managed_scaling=ecs.CfnCapacityProvider.ManagedScalingProperty(\n            instance_warmup_period=123,\n            maximum_scaling_step_size=123,\n            minimum_scaling_step_size=123,\n            status=\"status\",\n            target_capacity=123\n        ),\n        managed_termination_protection=\"managedTerminationProtection\"\n    ),\n\n    # the properties below are optional\n    name=\"name\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnCapacityProviderProps cfnCapacityProviderProps = new CfnCapacityProviderProps {\n    AutoScalingGroupProvider = new AutoScalingGroupProviderProperty {\n        AutoScalingGroupArn = \"autoScalingGroupArn\",\n\n        // the properties below are optional\n        ManagedScaling = new ManagedScalingProperty {\n            InstanceWarmupPeriod = 123,\n            MaximumScalingStepSize = 123,\n            MinimumScalingStepSize = 123,\n            Status = \"status\",\n            TargetCapacity = 123\n        },\n        ManagedTerminationProtection = \"managedTerminationProtection\"\n    },\n\n    // the properties below are optional\n    Name = \"name\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnCapacityProviderProps cfnCapacityProviderProps = CfnCapacityProviderProps.builder()\n        .autoScalingGroupProvider(AutoScalingGroupProviderProperty.builder()\n                .autoScalingGroupArn(\"autoScalingGroupArn\")\n\n                // the properties below are optional\n                .managedScaling(ManagedScalingProperty.builder()\n                        .instanceWarmupPeriod(123)\n                        .maximumScalingStepSize(123)\n                        .minimumScalingStepSize(123)\n                        .status(\"status\")\n                        .targetCapacity(123)\n                        .build())\n                .managedTerminationProtection(\"managedTerminationProtection\")\n                .build())\n\n        // the properties below are optional\n        .name(\"name\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnCapacityProviderProps := &cfnCapacityProviderProps{\n\tautoScalingGroupProvider: &autoScalingGroupProviderProperty{\n\t\tautoScalingGroupArn: jsii.String(\"autoScalingGroupArn\"),\n\n\t\t// the properties below are optional\n\t\tmanagedScaling: &managedScalingProperty{\n\t\t\tinstanceWarmupPeriod: jsii.Number(123),\n\t\t\tmaximumScalingStepSize: jsii.Number(123),\n\t\t\tminimumScalingStepSize: jsii.Number(123),\n\t\t\tstatus: jsii.String(\"status\"),\n\t\t\ttargetCapacity: jsii.Number(123),\n\t\t},\n\t\tmanagedTerminationProtection: jsii.String(\"managedTerminationProtection\"),\n\t},\n\n\t// the properties below are optional\n\tname: jsii.String(\"name\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnCapacityProviderProps: ecs.CfnCapacityProviderProps = {\n  autoScalingGroupProvider: {\n    autoScalingGroupArn: 'autoScalingGroupArn',\n\n    // the properties below are optional\n    managedScaling: {\n      instanceWarmupPeriod: 123,\n      maximumScalingStepSize: 123,\n      minimumScalingStepSize: 123,\n      status: 'status',\n      targetCapacity: 123,\n    },\n    managedTerminationProtection: 'managedTerminationProtection',\n  },\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCapacityProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCapacityProviderProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCapacityProviderProps: ecs.CfnCapacityProviderProps = {\n  autoScalingGroupProvider: {\n    autoScalingGroupArn: 'autoScalingGroupArn',\n\n    // the properties below are optional\n    managedScaling: {\n      instanceWarmupPeriod: 123,\n      maximumScalingStepSize: 123,\n      minimumScalingStepSize: 123,\n      status: 'status',\n      targetCapacity: 123,\n    },\n    managedTerminationProtection: 'managedTerminationProtection',\n  },\n\n  // the properties below are optional\n  name: 'name',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 7,
        "75": 17,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "71dc16f61cdcb0367b13fff23226325c3102c3e9bdcf6570394f40eda8a5878d"
    },
    "b58ffe2161369d38214735e2b29cbc7b46aa0ebafe3c8c3cb4b1d7349747e615": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_cluster = ecs.CfnCluster(self, \"MyCfnCluster\",\n    capacity_providers=[\"capacityProviders\"],\n    cluster_name=\"clusterName\",\n    cluster_settings=[ecs.CfnCluster.ClusterSettingsProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    configuration=ecs.CfnCluster.ClusterConfigurationProperty(\n        execute_command_configuration=ecs.CfnCluster.ExecuteCommandConfigurationProperty(\n            kms_key_id=\"kmsKeyId\",\n            log_configuration=ecs.CfnCluster.ExecuteCommandLogConfigurationProperty(\n                cloud_watch_encryption_enabled=False,\n                cloud_watch_log_group_name=\"cloudWatchLogGroupName\",\n                s3_bucket_name=\"s3BucketName\",\n                s3_encryption_enabled=False,\n                s3_key_prefix=\"s3KeyPrefix\"\n            ),\n            logging=\"logging\"\n        )\n    ),\n    default_capacity_provider_strategy=[ecs.CfnCluster.CapacityProviderStrategyItemProperty(\n        base=123,\n        capacity_provider=\"capacityProvider\",\n        weight=123\n    )],\n    service_connect_defaults=ecs.CfnCluster.ServiceConnectDefaultsProperty(\n        namespace=\"namespace\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnCluster cfnCluster = new CfnCluster(this, \"MyCfnCluster\", new CfnClusterProps {\n    CapacityProviders = new [] { \"capacityProviders\" },\n    ClusterName = \"clusterName\",\n    ClusterSettings = new [] { new ClusterSettingsProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    Configuration = new ClusterConfigurationProperty {\n        ExecuteCommandConfiguration = new ExecuteCommandConfigurationProperty {\n            KmsKeyId = \"kmsKeyId\",\n            LogConfiguration = new ExecuteCommandLogConfigurationProperty {\n                CloudWatchEncryptionEnabled = false,\n                CloudWatchLogGroupName = \"cloudWatchLogGroupName\",\n                S3BucketName = \"s3BucketName\",\n                S3EncryptionEnabled = false,\n                S3KeyPrefix = \"s3KeyPrefix\"\n            },\n            Logging = \"logging\"\n        }\n    },\n    DefaultCapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n        Base = 123,\n        CapacityProvider = \"capacityProvider\",\n        Weight = 123\n    } },\n    ServiceConnectDefaults = new ServiceConnectDefaultsProperty {\n        Namespace = \"namespace\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnCluster cfnCluster = CfnCluster.Builder.create(this, \"MyCfnCluster\")\n        .capacityProviders(List.of(\"capacityProviders\"))\n        .clusterName(\"clusterName\")\n        .clusterSettings(List.of(ClusterSettingsProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .configuration(ClusterConfigurationProperty.builder()\n                .executeCommandConfiguration(ExecuteCommandConfigurationProperty.builder()\n                        .kmsKeyId(\"kmsKeyId\")\n                        .logConfiguration(ExecuteCommandLogConfigurationProperty.builder()\n                                .cloudWatchEncryptionEnabled(false)\n                                .cloudWatchLogGroupName(\"cloudWatchLogGroupName\")\n                                .s3BucketName(\"s3BucketName\")\n                                .s3EncryptionEnabled(false)\n                                .s3KeyPrefix(\"s3KeyPrefix\")\n                                .build())\n                        .logging(\"logging\")\n                        .build())\n                .build())\n        .defaultCapacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                .base(123)\n                .capacityProvider(\"capacityProvider\")\n                .weight(123)\n                .build()))\n        .serviceConnectDefaults(ServiceConnectDefaultsProperty.builder()\n                .namespace(\"namespace\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnCluster := ecs.NewCfnCluster(this, jsii.String(\"MyCfnCluster\"), &cfnClusterProps{\n\tcapacityProviders: []*string{\n\t\tjsii.String(\"capacityProviders\"),\n\t},\n\tclusterName: jsii.String(\"clusterName\"),\n\tclusterSettings: []interface{}{\n\t\t&clusterSettingsProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tconfiguration: &clusterConfigurationProperty{\n\t\texecuteCommandConfiguration: &executeCommandConfigurationProperty{\n\t\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\t\tlogConfiguration: &executeCommandLogConfigurationProperty{\n\t\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(false),\n\t\t\t\tcloudWatchLogGroupName: jsii.String(\"cloudWatchLogGroupName\"),\n\t\t\t\ts3BucketName: jsii.String(\"s3BucketName\"),\n\t\t\t\ts3EncryptionEnabled: jsii.Boolean(false),\n\t\t\t\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n\t\t\t},\n\t\t\tlogging: jsii.String(\"logging\"),\n\t\t},\n\t},\n\tdefaultCapacityProviderStrategy: []interface{}{\n\t\t&capacityProviderStrategyItemProperty{\n\t\t\tbase: jsii.Number(123),\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tserviceConnectDefaults: &serviceConnectDefaultsProperty{\n\t\tnamespace: jsii.String(\"namespace\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnCluster = new ecs.CfnCluster(this, 'MyCfnCluster', /* all optional props */ {\n  capacityProviders: ['capacityProviders'],\n  clusterName: 'clusterName',\n  clusterSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  configuration: {\n    executeCommandConfiguration: {\n      kmsKeyId: 'kmsKeyId',\n      logConfiguration: {\n        cloudWatchEncryptionEnabled: false,\n        cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n        s3BucketName: 's3BucketName',\n        s3EncryptionEnabled: false,\n        s3KeyPrefix: 's3KeyPrefix',\n      },\n      logging: 'logging',\n    },\n  },\n  defaultCapacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  serviceConnectDefaults: {\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCluster",
        "@aws-cdk/aws-ecs.CfnClusterProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnCluster = new ecs.CfnCluster(this, 'MyCfnCluster', /* all optional props */ {\n  capacityProviders: ['capacityProviders'],\n  clusterName: 'clusterName',\n  clusterSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  configuration: {\n    executeCommandConfiguration: {\n      kmsKeyId: 'kmsKeyId',\n      logConfiguration: {\n        cloudWatchEncryptionEnabled: false,\n        cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n        s3BucketName: 's3BucketName',\n        s3EncryptionEnabled: false,\n        s3KeyPrefix: 's3KeyPrefix',\n      },\n      logging: 'logging',\n    },\n  },\n  defaultCapacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  serviceConnectDefaults: {\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 15,
        "75": 28,
        "91": 2,
        "104": 1,
        "192": 4,
        "193": 8,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "981e6ca351353c142e51714ec133668d93bfacfa17ff707dc497355b9a47c667"
    },
    "05077a61fc9126493f5a3299dba755a44beff3646619e5bbac25d293afabdf9c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncapacity_provider_strategy_item_property = ecs.CfnCluster.CapacityProviderStrategyItemProperty(\n    base=123,\n    capacity_provider=\"capacityProvider\",\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCapacityProviderStrategyItemProperty capacityProviderStrategyItemProperty = new CapacityProviderStrategyItemProperty {\n    Base = 123,\n    CapacityProvider = \"capacityProvider\",\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCapacityProviderStrategyItemProperty capacityProviderStrategyItemProperty = CapacityProviderStrategyItemProperty.builder()\n        .base(123)\n        .capacityProvider(\"capacityProvider\")\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncapacityProviderStrategyItemProperty := &capacityProviderStrategyItemProperty{\n\tbase: jsii.Number(123),\n\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategyItemProperty: ecs.CfnCluster.CapacityProviderStrategyItemProperty = {\n  base: 123,\n  capacityProvider: 'capacityProvider',\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCluster.CapacityProviderStrategyItemProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCluster.CapacityProviderStrategyItemProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityProviderStrategyItemProperty: ecs.CfnCluster.CapacityProviderStrategyItemProperty = {\n  base: 123,\n  capacityProvider: 'capacityProvider',\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "02d4ef446b9d3cd995fcf621adb9df3778cab237d4f054a68976c6490396b956"
    },
    "5ca69da183b29dba3fd08df973c211fb71b3dc9c170d472e7d966fae9ad5ea52": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncluster_configuration_property = ecs.CfnCluster.ClusterConfigurationProperty(\n    execute_command_configuration=ecs.CfnCluster.ExecuteCommandConfigurationProperty(\n        kms_key_id=\"kmsKeyId\",\n        log_configuration=ecs.CfnCluster.ExecuteCommandLogConfigurationProperty(\n            cloud_watch_encryption_enabled=False,\n            cloud_watch_log_group_name=\"cloudWatchLogGroupName\",\n            s3_bucket_name=\"s3BucketName\",\n            s3_encryption_enabled=False,\n            s3_key_prefix=\"s3KeyPrefix\"\n        ),\n        logging=\"logging\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nClusterConfigurationProperty clusterConfigurationProperty = new ClusterConfigurationProperty {\n    ExecuteCommandConfiguration = new ExecuteCommandConfigurationProperty {\n        KmsKeyId = \"kmsKeyId\",\n        LogConfiguration = new ExecuteCommandLogConfigurationProperty {\n            CloudWatchEncryptionEnabled = false,\n            CloudWatchLogGroupName = \"cloudWatchLogGroupName\",\n            S3BucketName = \"s3BucketName\",\n            S3EncryptionEnabled = false,\n            S3KeyPrefix = \"s3KeyPrefix\"\n        },\n        Logging = \"logging\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nClusterConfigurationProperty clusterConfigurationProperty = ClusterConfigurationProperty.builder()\n        .executeCommandConfiguration(ExecuteCommandConfigurationProperty.builder()\n                .kmsKeyId(\"kmsKeyId\")\n                .logConfiguration(ExecuteCommandLogConfigurationProperty.builder()\n                        .cloudWatchEncryptionEnabled(false)\n                        .cloudWatchLogGroupName(\"cloudWatchLogGroupName\")\n                        .s3BucketName(\"s3BucketName\")\n                        .s3EncryptionEnabled(false)\n                        .s3KeyPrefix(\"s3KeyPrefix\")\n                        .build())\n                .logging(\"logging\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nclusterConfigurationProperty := &clusterConfigurationProperty{\n\texecuteCommandConfiguration: &executeCommandConfigurationProperty{\n\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\tlogConfiguration: &executeCommandLogConfigurationProperty{\n\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(false),\n\t\t\tcloudWatchLogGroupName: jsii.String(\"cloudWatchLogGroupName\"),\n\t\t\ts3BucketName: jsii.String(\"s3BucketName\"),\n\t\t\ts3EncryptionEnabled: jsii.Boolean(false),\n\t\t\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n\t\t},\n\t\tlogging: jsii.String(\"logging\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst clusterConfigurationProperty: ecs.CfnCluster.ClusterConfigurationProperty = {\n  executeCommandConfiguration: {\n    kmsKeyId: 'kmsKeyId',\n    logConfiguration: {\n      cloudWatchEncryptionEnabled: false,\n      cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n      s3BucketName: 's3BucketName',\n      s3EncryptionEnabled: false,\n      s3KeyPrefix: 's3KeyPrefix',\n    },\n    logging: 'logging',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCluster.ClusterConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterConfigurationProperty: ecs.CfnCluster.ClusterConfigurationProperty = {\n  executeCommandConfiguration: {\n    kmsKeyId: 'kmsKeyId',\n    logConfiguration: {\n      cloudWatchEncryptionEnabled: false,\n      cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n      s3BucketName: 's3BucketName',\n      s3EncryptionEnabled: false,\n      s3KeyPrefix: 's3KeyPrefix',\n    },\n    logging: 'logging',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "43474998c8b0fecc5cf3c0ca8ea53797f2bf965670e369b0b855cb42d5946c1b"
    },
    "b302d7b686fdafaed598b4ec020bb6509715a7cd68cedd90667dda78db177f8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncluster_settings_property = ecs.CfnCluster.ClusterSettingsProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nClusterSettingsProperty clusterSettingsProperty = new ClusterSettingsProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nClusterSettingsProperty clusterSettingsProperty = ClusterSettingsProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nclusterSettingsProperty := &clusterSettingsProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst clusterSettingsProperty: ecs.CfnCluster.ClusterSettingsProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCluster.ClusterSettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCluster.ClusterSettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterSettingsProperty: ecs.CfnCluster.ClusterSettingsProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d9a969388b55dc1ca027a97b5f0a8e82baf19325bd795f91e9d4de7f193b8ad9"
    },
    "2966fa2d43b1e44fc4e0780dff9218ebc1611ad4a3571f9730e251d06038e8e5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nexecute_command_configuration_property = ecs.CfnCluster.ExecuteCommandConfigurationProperty(\n    kms_key_id=\"kmsKeyId\",\n    log_configuration=ecs.CfnCluster.ExecuteCommandLogConfigurationProperty(\n        cloud_watch_encryption_enabled=False,\n        cloud_watch_log_group_name=\"cloudWatchLogGroupName\",\n        s3_bucket_name=\"s3BucketName\",\n        s3_encryption_enabled=False,\n        s3_key_prefix=\"s3KeyPrefix\"\n    ),\n    logging=\"logging\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nExecuteCommandConfigurationProperty executeCommandConfigurationProperty = new ExecuteCommandConfigurationProperty {\n    KmsKeyId = \"kmsKeyId\",\n    LogConfiguration = new ExecuteCommandLogConfigurationProperty {\n        CloudWatchEncryptionEnabled = false,\n        CloudWatchLogGroupName = \"cloudWatchLogGroupName\",\n        S3BucketName = \"s3BucketName\",\n        S3EncryptionEnabled = false,\n        S3KeyPrefix = \"s3KeyPrefix\"\n    },\n    Logging = \"logging\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nExecuteCommandConfigurationProperty executeCommandConfigurationProperty = ExecuteCommandConfigurationProperty.builder()\n        .kmsKeyId(\"kmsKeyId\")\n        .logConfiguration(ExecuteCommandLogConfigurationProperty.builder()\n                .cloudWatchEncryptionEnabled(false)\n                .cloudWatchLogGroupName(\"cloudWatchLogGroupName\")\n                .s3BucketName(\"s3BucketName\")\n                .s3EncryptionEnabled(false)\n                .s3KeyPrefix(\"s3KeyPrefix\")\n                .build())\n        .logging(\"logging\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nexecuteCommandConfigurationProperty := &executeCommandConfigurationProperty{\n\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\tlogConfiguration: &executeCommandLogConfigurationProperty{\n\t\tcloudWatchEncryptionEnabled: jsii.Boolean(false),\n\t\tcloudWatchLogGroupName: jsii.String(\"cloudWatchLogGroupName\"),\n\t\ts3BucketName: jsii.String(\"s3BucketName\"),\n\t\ts3EncryptionEnabled: jsii.Boolean(false),\n\t\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n\t},\n\tlogging: jsii.String(\"logging\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst executeCommandConfigurationProperty: ecs.CfnCluster.ExecuteCommandConfigurationProperty = {\n  kmsKeyId: 'kmsKeyId',\n  logConfiguration: {\n    cloudWatchEncryptionEnabled: false,\n    cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n    s3BucketName: 's3BucketName',\n    s3EncryptionEnabled: false,\n    s3KeyPrefix: 's3KeyPrefix',\n  },\n  logging: 'logging',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst executeCommandConfigurationProperty: ecs.CfnCluster.ExecuteCommandConfigurationProperty = {\n  kmsKeyId: 'kmsKeyId',\n  logConfiguration: {\n    cloudWatchEncryptionEnabled: false,\n    cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n    s3BucketName: 's3BucketName',\n    s3EncryptionEnabled: false,\n    s3KeyPrefix: 's3KeyPrefix',\n  },\n  logging: 'logging',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "84a09185c2b53102c4b4a14dc6a404ec1fc33b72670d857182d16d6b0309669f"
    },
    "d5bc8c40131f14f668f17c659fd56d2196c36e115c7f23ded0f21b4db22da91e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nexecute_command_log_configuration_property = ecs.CfnCluster.ExecuteCommandLogConfigurationProperty(\n    cloud_watch_encryption_enabled=False,\n    cloud_watch_log_group_name=\"cloudWatchLogGroupName\",\n    s3_bucket_name=\"s3BucketName\",\n    s3_encryption_enabled=False,\n    s3_key_prefix=\"s3KeyPrefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nExecuteCommandLogConfigurationProperty executeCommandLogConfigurationProperty = new ExecuteCommandLogConfigurationProperty {\n    CloudWatchEncryptionEnabled = false,\n    CloudWatchLogGroupName = \"cloudWatchLogGroupName\",\n    S3BucketName = \"s3BucketName\",\n    S3EncryptionEnabled = false,\n    S3KeyPrefix = \"s3KeyPrefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nExecuteCommandLogConfigurationProperty executeCommandLogConfigurationProperty = ExecuteCommandLogConfigurationProperty.builder()\n        .cloudWatchEncryptionEnabled(false)\n        .cloudWatchLogGroupName(\"cloudWatchLogGroupName\")\n        .s3BucketName(\"s3BucketName\")\n        .s3EncryptionEnabled(false)\n        .s3KeyPrefix(\"s3KeyPrefix\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nexecuteCommandLogConfigurationProperty := &executeCommandLogConfigurationProperty{\n\tcloudWatchEncryptionEnabled: jsii.Boolean(false),\n\tcloudWatchLogGroupName: jsii.String(\"cloudWatchLogGroupName\"),\n\ts3BucketName: jsii.String(\"s3BucketName\"),\n\ts3EncryptionEnabled: jsii.Boolean(false),\n\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst executeCommandLogConfigurationProperty: ecs.CfnCluster.ExecuteCommandLogConfigurationProperty = {\n  cloudWatchEncryptionEnabled: false,\n  cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n  s3BucketName: 's3BucketName',\n  s3EncryptionEnabled: false,\n  s3KeyPrefix: 's3KeyPrefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandLogConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCluster.ExecuteCommandLogConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst executeCommandLogConfigurationProperty: ecs.CfnCluster.ExecuteCommandLogConfigurationProperty = {\n  cloudWatchEncryptionEnabled: false,\n  cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n  s3BucketName: 's3BucketName',\n  s3EncryptionEnabled: false,\n  s3KeyPrefix: 's3KeyPrefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ff41584a8de7bfce20ef20a3e97774568fbc9b90ee7f686938ae45ab4426cda1"
    },
    "b006e0f8a9cf982f489ade6c32729ff4cbfac9a81876b9c488fa397d884b7c2e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nservice_connect_defaults_property = ecs.CfnCluster.ServiceConnectDefaultsProperty(\n    namespace=\"namespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nServiceConnectDefaultsProperty serviceConnectDefaultsProperty = new ServiceConnectDefaultsProperty {\n    Namespace = \"namespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nServiceConnectDefaultsProperty serviceConnectDefaultsProperty = ServiceConnectDefaultsProperty.builder()\n        .namespace(\"namespace\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nserviceConnectDefaultsProperty := &serviceConnectDefaultsProperty{\n\tnamespace: jsii.String(\"namespace\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectDefaultsProperty: ecs.CfnCluster.ServiceConnectDefaultsProperty = {\n  namespace: 'namespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnCluster.ServiceConnectDefaultsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnCluster.ServiceConnectDefaultsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceConnectDefaultsProperty: ecs.CfnCluster.ServiceConnectDefaultsProperty = {\n  namespace: 'namespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "092d65923d30e91fe312344db812cb6c6c35cdd1a75a12dfc140985cff1d6700"
    },
    "426137e803a3f7172e85c538ecb67d504da451fafd981a691dae2dbce309c280": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_cluster_capacity_provider_associations = ecs.CfnClusterCapacityProviderAssociations(self, \"MyCfnClusterCapacityProviderAssociations\",\n    capacity_providers=[\"capacityProviders\"],\n    cluster=\"cluster\",\n    default_capacity_provider_strategy=[ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty(\n        capacity_provider=\"capacityProvider\",\n\n        # the properties below are optional\n        base=123,\n        weight=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnClusterCapacityProviderAssociations cfnClusterCapacityProviderAssociations = new CfnClusterCapacityProviderAssociations(this, \"MyCfnClusterCapacityProviderAssociations\", new CfnClusterCapacityProviderAssociationsProps {\n    CapacityProviders = new [] { \"capacityProviders\" },\n    Cluster = \"cluster\",\n    DefaultCapacityProviderStrategy = new [] { new CapacityProviderStrategyProperty {\n        CapacityProvider = \"capacityProvider\",\n\n        // the properties below are optional\n        Base = 123,\n        Weight = 123\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnClusterCapacityProviderAssociations cfnClusterCapacityProviderAssociations = CfnClusterCapacityProviderAssociations.Builder.create(this, \"MyCfnClusterCapacityProviderAssociations\")\n        .capacityProviders(List.of(\"capacityProviders\"))\n        .cluster(\"cluster\")\n        .defaultCapacityProviderStrategy(List.of(CapacityProviderStrategyProperty.builder()\n                .capacityProvider(\"capacityProvider\")\n\n                // the properties below are optional\n                .base(123)\n                .weight(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnClusterCapacityProviderAssociations := ecs.NewCfnClusterCapacityProviderAssociations(this, jsii.String(\"MyCfnClusterCapacityProviderAssociations\"), &cfnClusterCapacityProviderAssociationsProps{\n\tcapacityProviders: []*string{\n\t\tjsii.String(\"capacityProviders\"),\n\t},\n\tcluster: jsii.String(\"cluster\"),\n\tdefaultCapacityProviderStrategy: []interface{}{\n\t\t&capacityProviderStrategyProperty{\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbase: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnClusterCapacityProviderAssociations = new ecs.CfnClusterCapacityProviderAssociations(this, 'MyCfnClusterCapacityProviderAssociations', {\n  capacityProviders: ['capacityProviders'],\n  cluster: 'cluster',\n  defaultCapacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations",
        "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociationsProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterCapacityProviderAssociations = new ecs.CfnClusterCapacityProviderAssociations(this, 'MyCfnClusterCapacityProviderAssociations', {\n  capacityProviders: ['capacityProviders'],\n  cluster: 'cluster',\n  defaultCapacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 10,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "847355d7acce1a4c835dd34b57e083678a2f8bc545a9ef53d61e8fead43dbfa0"
    },
    "f042da0e92c1b23bc89966fc5d74b10ab442a96fa624ae86c7a98eb3f075283d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncapacity_provider_strategy_property = ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty(\n    capacity_provider=\"capacityProvider\",\n\n    # the properties below are optional\n    base=123,\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCapacityProviderStrategyProperty capacityProviderStrategyProperty = new CapacityProviderStrategyProperty {\n    CapacityProvider = \"capacityProvider\",\n\n    // the properties below are optional\n    Base = 123,\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCapacityProviderStrategyProperty capacityProviderStrategyProperty = CapacityProviderStrategyProperty.builder()\n        .capacityProvider(\"capacityProvider\")\n\n        // the properties below are optional\n        .base(123)\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncapacityProviderStrategyProperty := &capacityProviderStrategyProperty{\n\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t// the properties below are optional\n\tbase: jsii.Number(123),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategyProperty: ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityProviderStrategyProperty: ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty = {\n  capacityProvider: 'capacityProvider',\n\n  // the properties below are optional\n  base: 123,\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e2dd491c3afbcf8b2b79b7a0c50e7a5876372f56e60f40f688dd992aaf52c863"
    },
    "01734873a7c23a5919854b27ba78ed3f7963e157fbe46c8588e858ce90360873": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_cluster_capacity_provider_associations_props = ecs.CfnClusterCapacityProviderAssociationsProps(\n    capacity_providers=[\"capacityProviders\"],\n    cluster=\"cluster\",\n    default_capacity_provider_strategy=[ecs.CfnClusterCapacityProviderAssociations.CapacityProviderStrategyProperty(\n        capacity_provider=\"capacityProvider\",\n\n        # the properties below are optional\n        base=123,\n        weight=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnClusterCapacityProviderAssociationsProps cfnClusterCapacityProviderAssociationsProps = new CfnClusterCapacityProviderAssociationsProps {\n    CapacityProviders = new [] { \"capacityProviders\" },\n    Cluster = \"cluster\",\n    DefaultCapacityProviderStrategy = new [] { new CapacityProviderStrategyProperty {\n        CapacityProvider = \"capacityProvider\",\n\n        // the properties below are optional\n        Base = 123,\n        Weight = 123\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnClusterCapacityProviderAssociationsProps cfnClusterCapacityProviderAssociationsProps = CfnClusterCapacityProviderAssociationsProps.builder()\n        .capacityProviders(List.of(\"capacityProviders\"))\n        .cluster(\"cluster\")\n        .defaultCapacityProviderStrategy(List.of(CapacityProviderStrategyProperty.builder()\n                .capacityProvider(\"capacityProvider\")\n\n                // the properties below are optional\n                .base(123)\n                .weight(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnClusterCapacityProviderAssociationsProps := &cfnClusterCapacityProviderAssociationsProps{\n\tcapacityProviders: []*string{\n\t\tjsii.String(\"capacityProviders\"),\n\t},\n\tcluster: jsii.String(\"cluster\"),\n\tdefaultCapacityProviderStrategy: []interface{}{\n\t\t&capacityProviderStrategyProperty{\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\n\t\t\t// the properties below are optional\n\t\t\tbase: jsii.Number(123),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnClusterCapacityProviderAssociationsProps: ecs.CfnClusterCapacityProviderAssociationsProps = {\n  capacityProviders: ['capacityProviders'],\n  cluster: 'cluster',\n  defaultCapacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociationsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnClusterCapacityProviderAssociationsProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterCapacityProviderAssociationsProps: ecs.CfnClusterCapacityProviderAssociationsProps = {\n  capacityProviders: ['capacityProviders'],\n  cluster: 'cluster',\n  defaultCapacityProviderStrategy: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "4fee094ae022880945f78b6ab75f3ff0b7ac2d5f01fb78f70d9defc492d16cd3"
    },
    "b5a3e7ad45c429fa28b96f6d4fd9b18bb33be58ca80de51e0e27213126ef65e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_cluster_props = ecs.CfnClusterProps(\n    capacity_providers=[\"capacityProviders\"],\n    cluster_name=\"clusterName\",\n    cluster_settings=[ecs.CfnCluster.ClusterSettingsProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    configuration=ecs.CfnCluster.ClusterConfigurationProperty(\n        execute_command_configuration=ecs.CfnCluster.ExecuteCommandConfigurationProperty(\n            kms_key_id=\"kmsKeyId\",\n            log_configuration=ecs.CfnCluster.ExecuteCommandLogConfigurationProperty(\n                cloud_watch_encryption_enabled=False,\n                cloud_watch_log_group_name=\"cloudWatchLogGroupName\",\n                s3_bucket_name=\"s3BucketName\",\n                s3_encryption_enabled=False,\n                s3_key_prefix=\"s3KeyPrefix\"\n            ),\n            logging=\"logging\"\n        )\n    ),\n    default_capacity_provider_strategy=[ecs.CfnCluster.CapacityProviderStrategyItemProperty(\n        base=123,\n        capacity_provider=\"capacityProvider\",\n        weight=123\n    )],\n    service_connect_defaults=ecs.CfnCluster.ServiceConnectDefaultsProperty(\n        namespace=\"namespace\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnClusterProps cfnClusterProps = new CfnClusterProps {\n    CapacityProviders = new [] { \"capacityProviders\" },\n    ClusterName = \"clusterName\",\n    ClusterSettings = new [] { new ClusterSettingsProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    Configuration = new ClusterConfigurationProperty {\n        ExecuteCommandConfiguration = new ExecuteCommandConfigurationProperty {\n            KmsKeyId = \"kmsKeyId\",\n            LogConfiguration = new ExecuteCommandLogConfigurationProperty {\n                CloudWatchEncryptionEnabled = false,\n                CloudWatchLogGroupName = \"cloudWatchLogGroupName\",\n                S3BucketName = \"s3BucketName\",\n                S3EncryptionEnabled = false,\n                S3KeyPrefix = \"s3KeyPrefix\"\n            },\n            Logging = \"logging\"\n        }\n    },\n    DefaultCapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n        Base = 123,\n        CapacityProvider = \"capacityProvider\",\n        Weight = 123\n    } },\n    ServiceConnectDefaults = new ServiceConnectDefaultsProperty {\n        Namespace = \"namespace\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnClusterProps cfnClusterProps = CfnClusterProps.builder()\n        .capacityProviders(List.of(\"capacityProviders\"))\n        .clusterName(\"clusterName\")\n        .clusterSettings(List.of(ClusterSettingsProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .configuration(ClusterConfigurationProperty.builder()\n                .executeCommandConfiguration(ExecuteCommandConfigurationProperty.builder()\n                        .kmsKeyId(\"kmsKeyId\")\n                        .logConfiguration(ExecuteCommandLogConfigurationProperty.builder()\n                                .cloudWatchEncryptionEnabled(false)\n                                .cloudWatchLogGroupName(\"cloudWatchLogGroupName\")\n                                .s3BucketName(\"s3BucketName\")\n                                .s3EncryptionEnabled(false)\n                                .s3KeyPrefix(\"s3KeyPrefix\")\n                                .build())\n                        .logging(\"logging\")\n                        .build())\n                .build())\n        .defaultCapacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                .base(123)\n                .capacityProvider(\"capacityProvider\")\n                .weight(123)\n                .build()))\n        .serviceConnectDefaults(ServiceConnectDefaultsProperty.builder()\n                .namespace(\"namespace\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnClusterProps := &cfnClusterProps{\n\tcapacityProviders: []*string{\n\t\tjsii.String(\"capacityProviders\"),\n\t},\n\tclusterName: jsii.String(\"clusterName\"),\n\tclusterSettings: []interface{}{\n\t\t&clusterSettingsProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tconfiguration: &clusterConfigurationProperty{\n\t\texecuteCommandConfiguration: &executeCommandConfigurationProperty{\n\t\t\tkmsKeyId: jsii.String(\"kmsKeyId\"),\n\t\t\tlogConfiguration: &executeCommandLogConfigurationProperty{\n\t\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(false),\n\t\t\t\tcloudWatchLogGroupName: jsii.String(\"cloudWatchLogGroupName\"),\n\t\t\t\ts3BucketName: jsii.String(\"s3BucketName\"),\n\t\t\t\ts3EncryptionEnabled: jsii.Boolean(false),\n\t\t\t\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n\t\t\t},\n\t\t\tlogging: jsii.String(\"logging\"),\n\t\t},\n\t},\n\tdefaultCapacityProviderStrategy: []interface{}{\n\t\t&capacityProviderStrategyItemProperty{\n\t\t\tbase: jsii.Number(123),\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tserviceConnectDefaults: &serviceConnectDefaultsProperty{\n\t\tnamespace: jsii.String(\"namespace\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnClusterProps: ecs.CfnClusterProps = {\n  capacityProviders: ['capacityProviders'],\n  clusterName: 'clusterName',\n  clusterSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  configuration: {\n    executeCommandConfiguration: {\n      kmsKeyId: 'kmsKeyId',\n      logConfiguration: {\n        cloudWatchEncryptionEnabled: false,\n        cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n        s3BucketName: 's3BucketName',\n        s3EncryptionEnabled: false,\n        s3KeyPrefix: 's3KeyPrefix',\n      },\n      logging: 'logging',\n    },\n  },\n  defaultCapacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  serviceConnectDefaults: {\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnClusterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnClusterProps: ecs.CfnClusterProps = {\n  capacityProviders: ['capacityProviders'],\n  clusterName: 'clusterName',\n  clusterSettings: [{\n    name: 'name',\n    value: 'value',\n  }],\n  configuration: {\n    executeCommandConfiguration: {\n      kmsKeyId: 'kmsKeyId',\n      logConfiguration: {\n        cloudWatchEncryptionEnabled: false,\n        cloudWatchLogGroupName: 'cloudWatchLogGroupName',\n        s3BucketName: 's3BucketName',\n        s3EncryptionEnabled: false,\n        s3KeyPrefix: 's3KeyPrefix',\n      },\n      logging: 'logging',\n    },\n  },\n  defaultCapacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  serviceConnectDefaults: {\n    namespace: 'namespace',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 14,
        "75": 28,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 8,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "700bc6e865f2c52eb06d9d7ddfd6b0afec078254ce60569a4aa6c5108d4d7435"
    },
    "543a9f6857da26c1cd77bf31298e99c64cf362b83eac9b780f6d2a75f02422ee": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_primary_task_set = ecs.CfnPrimaryTaskSet(self, \"MyCfnPrimaryTaskSet\",\n    cluster=\"cluster\",\n    service=\"service\",\n    task_set_id=\"taskSetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnPrimaryTaskSet cfnPrimaryTaskSet = new CfnPrimaryTaskSet(this, \"MyCfnPrimaryTaskSet\", new CfnPrimaryTaskSetProps {\n    Cluster = \"cluster\",\n    Service = \"service\",\n    TaskSetId = \"taskSetId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnPrimaryTaskSet cfnPrimaryTaskSet = CfnPrimaryTaskSet.Builder.create(this, \"MyCfnPrimaryTaskSet\")\n        .cluster(\"cluster\")\n        .service(\"service\")\n        .taskSetId(\"taskSetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnPrimaryTaskSet := ecs.NewCfnPrimaryTaskSet(this, jsii.String(\"MyCfnPrimaryTaskSet\"), &cfnPrimaryTaskSetProps{\n\tcluster: jsii.String(\"cluster\"),\n\tservice: jsii.String(\"service\"),\n\ttaskSetId: jsii.String(\"taskSetId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnPrimaryTaskSet = new ecs.CfnPrimaryTaskSet(this, 'MyCfnPrimaryTaskSet', {\n  cluster: 'cluster',\n  service: 'service',\n  taskSetId: 'taskSetId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnPrimaryTaskSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnPrimaryTaskSet",
        "@aws-cdk/aws-ecs.CfnPrimaryTaskSetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPrimaryTaskSet = new ecs.CfnPrimaryTaskSet(this, 'MyCfnPrimaryTaskSet', {\n  cluster: 'cluster',\n  service: 'service',\n  taskSetId: 'taskSetId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "166a122ad5dab7518c377e8779dae70f3301f7ac2cff319ad7378f6fb3465523"
    },
    "e3c770045e7c9f6696f1796495064fee766439caaaf04a6693769f2651562d41": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_primary_task_set_props = ecs.CfnPrimaryTaskSetProps(\n    cluster=\"cluster\",\n    service=\"service\",\n    task_set_id=\"taskSetId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnPrimaryTaskSetProps cfnPrimaryTaskSetProps = new CfnPrimaryTaskSetProps {\n    Cluster = \"cluster\",\n    Service = \"service\",\n    TaskSetId = \"taskSetId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnPrimaryTaskSetProps cfnPrimaryTaskSetProps = CfnPrimaryTaskSetProps.builder()\n        .cluster(\"cluster\")\n        .service(\"service\")\n        .taskSetId(\"taskSetId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnPrimaryTaskSetProps := &cfnPrimaryTaskSetProps{\n\tcluster: jsii.String(\"cluster\"),\n\tservice: jsii.String(\"service\"),\n\ttaskSetId: jsii.String(\"taskSetId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnPrimaryTaskSetProps: ecs.CfnPrimaryTaskSetProps = {\n  cluster: 'cluster',\n  service: 'service',\n  taskSetId: 'taskSetId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnPrimaryTaskSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnPrimaryTaskSetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPrimaryTaskSetProps: ecs.CfnPrimaryTaskSetProps = {\n  cluster: 'cluster',\n  service: 'service',\n  taskSetId: 'taskSetId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9427b3cb68ff3b04a917c5e525261fd65af45c54077d424c260f20db257512d9"
    },
    "03e9d2cf5b00bde8faf080c56851a6f0a3233f5f54628efb62889e7c4f0546da": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_service = ecs.CfnService(self, \"MyCfnService\",\n    capacity_provider_strategy=[ecs.CfnService.CapacityProviderStrategyItemProperty(\n        base=123,\n        capacity_provider=\"capacityProvider\",\n        weight=123\n    )],\n    cluster=\"cluster\",\n    deployment_configuration=ecs.CfnService.DeploymentConfigurationProperty(\n        alarms=ecs.CfnService.DeploymentAlarmsProperty(\n            alarm_names=[\"alarmNames\"],\n            enable=False,\n            rollback=False\n        ),\n        deployment_circuit_breaker=ecs.CfnService.DeploymentCircuitBreakerProperty(\n            enable=False,\n            rollback=False\n        ),\n        maximum_percent=123,\n        minimum_healthy_percent=123\n    ),\n    deployment_controller=ecs.CfnService.DeploymentControllerProperty(\n        type=\"type\"\n    ),\n    desired_count=123,\n    enable_ecs_managed_tags=False,\n    enable_execute_command=False,\n    health_check_grace_period_seconds=123,\n    launch_type=\"launchType\",\n    load_balancers=[ecs.CfnService.LoadBalancerProperty(\n        container_port=123,\n\n        # the properties below are optional\n        container_name=\"containerName\",\n        load_balancer_name=\"loadBalancerName\",\n        target_group_arn=\"targetGroupArn\"\n    )],\n    network_configuration=ecs.CfnService.NetworkConfigurationProperty(\n        awsvpc_configuration=ecs.CfnService.AwsVpcConfigurationProperty(\n            subnets=[\"subnets\"],\n\n            # the properties below are optional\n            assign_public_ip=\"assignPublicIp\",\n            security_groups=[\"securityGroups\"]\n        )\n    ),\n    placement_constraints=[ecs.CfnService.PlacementConstraintProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        expression=\"expression\"\n    )],\n    placement_strategies=[ecs.CfnService.PlacementStrategyProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        field=\"field\"\n    )],\n    platform_version=\"platformVersion\",\n    propagate_tags=\"propagateTags\",\n    role=\"role\",\n    scheduling_strategy=\"schedulingStrategy\",\n    service_connect_configuration=ecs.CfnService.ServiceConnectConfigurationProperty(\n        enabled=False,\n\n        # the properties below are optional\n        log_configuration=ecs.CfnService.LogConfigurationProperty(\n            log_driver=\"logDriver\",\n            options={\n                \"options_key\": \"options\"\n            },\n            secret_options=[ecs.CfnService.SecretProperty(\n                name=\"name\",\n                value_from=\"valueFrom\"\n            )]\n        ),\n        namespace=\"namespace\",\n        services=[ecs.CfnService.ServiceConnectServiceProperty(\n            port_name=\"portName\",\n\n            # the properties below are optional\n            client_aliases=[ecs.CfnService.ServiceConnectClientAliasProperty(\n                port=123,\n\n                # the properties below are optional\n                dns_name=\"dnsName\"\n            )],\n            discovery_name=\"discoveryName\",\n            ingress_port_override=123\n        )]\n    ),\n    service_name=\"serviceName\",\n    service_registries=[ecs.CfnService.ServiceRegistryProperty(\n        container_name=\"containerName\",\n        container_port=123,\n        port=123,\n        registry_arn=\"registryArn\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    task_definition=\"taskDefinition\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnService cfnService = new CfnService(this, \"MyCfnService\", new CfnServiceProps {\n    CapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n        Base = 123,\n        CapacityProvider = \"capacityProvider\",\n        Weight = 123\n    } },\n    Cluster = \"cluster\",\n    DeploymentConfiguration = new DeploymentConfigurationProperty {\n        Alarms = new DeploymentAlarmsProperty {\n            AlarmNames = new [] { \"alarmNames\" },\n            Enable = false,\n            Rollback = false\n        },\n        DeploymentCircuitBreaker = new DeploymentCircuitBreakerProperty {\n            Enable = false,\n            Rollback = false\n        },\n        MaximumPercent = 123,\n        MinimumHealthyPercent = 123\n    },\n    DeploymentController = new DeploymentControllerProperty {\n        Type = \"type\"\n    },\n    DesiredCount = 123,\n    EnableEcsManagedTags = false,\n    EnableExecuteCommand = false,\n    HealthCheckGracePeriodSeconds = 123,\n    LaunchType = \"launchType\",\n    LoadBalancers = new [] { new LoadBalancerProperty {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        ContainerName = \"containerName\",\n        LoadBalancerName = \"loadBalancerName\",\n        TargetGroupArn = \"targetGroupArn\"\n    } },\n    NetworkConfiguration = new NetworkConfigurationProperty {\n        AwsvpcConfiguration = new AwsVpcConfigurationProperty {\n            Subnets = new [] { \"subnets\" },\n\n            // the properties below are optional\n            AssignPublicIp = \"assignPublicIp\",\n            SecurityGroups = new [] { \"securityGroups\" }\n        }\n    },\n    PlacementConstraints = new [] { new PlacementConstraintProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Expression = \"expression\"\n    } },\n    PlacementStrategies = new [] { new PlacementStrategyProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Field = \"field\"\n    } },\n    PlatformVersion = \"platformVersion\",\n    PropagateTags = \"propagateTags\",\n    Role = \"role\",\n    SchedulingStrategy = \"schedulingStrategy\",\n    ServiceConnectConfiguration = new ServiceConnectConfigurationProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        LogConfiguration = new LogConfigurationProperty {\n            LogDriver = \"logDriver\",\n            Options = new Dictionary<string, string> {\n                { \"optionsKey\", \"options\" }\n            },\n            SecretOptions = new [] { new SecretProperty {\n                Name = \"name\",\n                ValueFrom = \"valueFrom\"\n            } }\n        },\n        Namespace = \"namespace\",\n        Services = new [] { new ServiceConnectServiceProperty {\n            PortName = \"portName\",\n\n            // the properties below are optional\n            ClientAliases = new [] { new ServiceConnectClientAliasProperty {\n                Port = 123,\n\n                // the properties below are optional\n                DnsName = \"dnsName\"\n            } },\n            DiscoveryName = \"discoveryName\",\n            IngressPortOverride = 123\n        } }\n    },\n    ServiceName = \"serviceName\",\n    ServiceRegistries = new [] { new ServiceRegistryProperty {\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        Port = 123,\n        RegistryArn = \"registryArn\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TaskDefinition = \"taskDefinition\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnService cfnService = CfnService.Builder.create(this, \"MyCfnService\")\n        .capacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                .base(123)\n                .capacityProvider(\"capacityProvider\")\n                .weight(123)\n                .build()))\n        .cluster(\"cluster\")\n        .deploymentConfiguration(DeploymentConfigurationProperty.builder()\n                .alarms(DeploymentAlarmsProperty.builder()\n                        .alarmNames(List.of(\"alarmNames\"))\n                        .enable(false)\n                        .rollback(false)\n                        .build())\n                .deploymentCircuitBreaker(DeploymentCircuitBreakerProperty.builder()\n                        .enable(false)\n                        .rollback(false)\n                        .build())\n                .maximumPercent(123)\n                .minimumHealthyPercent(123)\n                .build())\n        .deploymentController(DeploymentControllerProperty.builder()\n                .type(\"type\")\n                .build())\n        .desiredCount(123)\n        .enableEcsManagedTags(false)\n        .enableExecuteCommand(false)\n        .healthCheckGracePeriodSeconds(123)\n        .launchType(\"launchType\")\n        .loadBalancers(List.of(LoadBalancerProperty.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .containerName(\"containerName\")\n                .loadBalancerName(\"loadBalancerName\")\n                .targetGroupArn(\"targetGroupArn\")\n                .build()))\n        .networkConfiguration(NetworkConfigurationProperty.builder()\n                .awsvpcConfiguration(AwsVpcConfigurationProperty.builder()\n                        .subnets(List.of(\"subnets\"))\n\n                        // the properties below are optional\n                        .assignPublicIp(\"assignPublicIp\")\n                        .securityGroups(List.of(\"securityGroups\"))\n                        .build())\n                .build())\n        .placementConstraints(List.of(PlacementConstraintProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .expression(\"expression\")\n                .build()))\n        .placementStrategies(List.of(PlacementStrategyProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .field(\"field\")\n                .build()))\n        .platformVersion(\"platformVersion\")\n        .propagateTags(\"propagateTags\")\n        .role(\"role\")\n        .schedulingStrategy(\"schedulingStrategy\")\n        .serviceConnectConfiguration(ServiceConnectConfigurationProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .logConfiguration(LogConfigurationProperty.builder()\n                        .logDriver(\"logDriver\")\n                        .options(Map.of(\n                                \"optionsKey\", \"options\"))\n                        .secretOptions(List.of(SecretProperty.builder()\n                                .name(\"name\")\n                                .valueFrom(\"valueFrom\")\n                                .build()))\n                        .build())\n                .namespace(\"namespace\")\n                .services(List.of(ServiceConnectServiceProperty.builder()\n                        .portName(\"portName\")\n\n                        // the properties below are optional\n                        .clientAliases(List.of(ServiceConnectClientAliasProperty.builder()\n                                .port(123)\n\n                                // the properties below are optional\n                                .dnsName(\"dnsName\")\n                                .build()))\n                        .discoveryName(\"discoveryName\")\n                        .ingressPortOverride(123)\n                        .build()))\n                .build())\n        .serviceName(\"serviceName\")\n        .serviceRegistries(List.of(ServiceRegistryProperty.builder()\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .port(123)\n                .registryArn(\"registryArn\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .taskDefinition(\"taskDefinition\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnService := ecs.NewCfnService(this, jsii.String(\"MyCfnService\"), &cfnServiceProps{\n\tcapacityProviderStrategy: []interface{}{\n\t\t&capacityProviderStrategyItemProperty{\n\t\t\tbase: jsii.Number(123),\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tcluster: jsii.String(\"cluster\"),\n\tdeploymentConfiguration: &deploymentConfigurationProperty{\n\t\talarms: &deploymentAlarmsProperty{\n\t\t\talarmNames: []*string{\n\t\t\t\tjsii.String(\"alarmNames\"),\n\t\t\t},\n\t\t\tenable: jsii.Boolean(false),\n\t\t\trollback: jsii.Boolean(false),\n\t\t},\n\t\tdeploymentCircuitBreaker: &deploymentCircuitBreakerProperty{\n\t\t\tenable: jsii.Boolean(false),\n\t\t\trollback: jsii.Boolean(false),\n\t\t},\n\t\tmaximumPercent: jsii.Number(123),\n\t\tminimumHealthyPercent: jsii.Number(123),\n\t},\n\tdeploymentController: &deploymentControllerProperty{\n\t\ttype: jsii.String(\"type\"),\n\t},\n\tdesiredCount: jsii.Number(123),\n\tenableEcsManagedTags: jsii.Boolean(false),\n\tenableExecuteCommand: jsii.Boolean(false),\n\thealthCheckGracePeriodSeconds: jsii.Number(123),\n\tlaunchType: jsii.String(\"launchType\"),\n\tloadBalancers: []interface{}{\n\t\t&loadBalancerProperty{\n\t\t\tcontainerPort: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\t\t\ttargetGroupArn: jsii.String(\"targetGroupArn\"),\n\t\t},\n\t},\n\tnetworkConfiguration: &networkConfigurationProperty{\n\t\tawsvpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\tsubnets: []*string{\n\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\tsecurityGroups: []*string{\n\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t},\n\t\t},\n\t},\n\tplacementConstraints: []interface{}{\n\t\t&placementConstraintProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t},\n\t},\n\tplacementStrategies: []interface{}{\n\t\t&placementStrategyProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\tfield: jsii.String(\"field\"),\n\t\t},\n\t},\n\tplatformVersion: jsii.String(\"platformVersion\"),\n\tpropagateTags: jsii.String(\"propagateTags\"),\n\trole: jsii.String(\"role\"),\n\tschedulingStrategy: jsii.String(\"schedulingStrategy\"),\n\tserviceConnectConfiguration: &serviceConnectConfigurationProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tlogConfiguration: &logConfigurationProperty{\n\t\t\tlogDriver: jsii.String(\"logDriver\"),\n\t\t\toptions: map[string]*string{\n\t\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t\t},\n\t\t\tsecretOptions: []interface{}{\n\t\t\t\t&secretProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tnamespace: jsii.String(\"namespace\"),\n\t\tservices: []interface{}{\n\t\t\t&serviceConnectServiceProperty{\n\t\t\t\tportName: jsii.String(\"portName\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tclientAliases: []interface{}{\n\t\t\t\t\t&serviceConnectClientAliasProperty{\n\t\t\t\t\t\tport: jsii.Number(123),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tdnsName: jsii.String(\"dnsName\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdiscoveryName: jsii.String(\"discoveryName\"),\n\t\t\t\tingressPortOverride: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tserviceName: jsii.String(\"serviceName\"),\n\tserviceRegistries: []interface{}{\n\t\t&serviceRegistryProperty{\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tcontainerPort: jsii.Number(123),\n\t\t\tport: jsii.Number(123),\n\t\t\tregistryArn: jsii.String(\"registryArn\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttaskDefinition: jsii.String(\"taskDefinition\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnService = new ecs.CfnService(this, 'MyCfnService', /* all optional props */ {\n  capacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  cluster: 'cluster',\n  deploymentConfiguration: {\n    alarms: {\n      alarmNames: ['alarmNames'],\n      enable: false,\n      rollback: false,\n    },\n    deploymentCircuitBreaker: {\n      enable: false,\n      rollback: false,\n    },\n    maximumPercent: 123,\n    minimumHealthyPercent: 123,\n  },\n  deploymentController: {\n    type: 'type',\n  },\n  desiredCount: 123,\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriodSeconds: 123,\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsvpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  placementStrategies: [{\n    type: 'type',\n\n    // the properties below are optional\n    field: 'field',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  role: 'role',\n  schedulingStrategy: 'schedulingStrategy',\n  serviceConnectConfiguration: {\n    enabled: false,\n\n    // the properties below are optional\n    logConfiguration: {\n      logDriver: 'logDriver',\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    namespace: 'namespace',\n    services: [{\n      portName: 'portName',\n\n      // the properties below are optional\n      clientAliases: [{\n        port: 123,\n\n        // the properties below are optional\n        dnsName: 'dnsName',\n      }],\n      discoveryName: 'discoveryName',\n      ingressPortOverride: 123,\n    }],\n  },\n  serviceName: 'serviceName',\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskDefinition: 'taskDefinition',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService",
        "@aws-cdk/aws-ecs.CfnServiceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnService = new ecs.CfnService(this, 'MyCfnService', /* all optional props */ {\n  capacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  cluster: 'cluster',\n  deploymentConfiguration: {\n    alarms: {\n      alarmNames: ['alarmNames'],\n      enable: false,\n      rollback: false,\n    },\n    deploymentCircuitBreaker: {\n      enable: false,\n      rollback: false,\n    },\n    maximumPercent: 123,\n    minimumHealthyPercent: 123,\n  },\n  deploymentController: {\n    type: 'type',\n  },\n  desiredCount: 123,\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriodSeconds: 123,\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsvpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  placementStrategies: [{\n    type: 'type',\n\n    // the properties below are optional\n    field: 'field',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  role: 'role',\n  schedulingStrategy: 'schedulingStrategy',\n  serviceConnectConfiguration: {\n    enabled: false,\n\n    // the properties below are optional\n    logConfiguration: {\n      logDriver: 'logDriver',\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    namespace: 'namespace',\n    services: [{\n      portName: 'portName',\n\n      // the properties below are optional\n      clientAliases: [{\n        port: 123,\n\n        // the properties below are optional\n        dnsName: 'dnsName',\n      }],\n      discoveryName: 'discoveryName',\n      ingressPortOverride: 123,\n    }],\n  },\n  serviceName: 'serviceName',\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskDefinition: 'taskDefinition',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 11,
        "10": 35,
        "75": 73,
        "91": 7,
        "104": 1,
        "192": 12,
        "193": 19,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 69,
        "290": 1
      },
      "fqnsFingerprint": "f4a9963ee736ae0ab920b2f6da6409305af3ca93010b1c13ef75d5622bf66c71"
    },
    "31ad37e54d2e4c264ffdf13ffaa8e70eeb699af0bf515272712c700e8ecb2d5d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\naws_vpc_configuration_property = ecs.CfnService.AwsVpcConfigurationProperty(\n    subnets=[\"subnets\"],\n\n    # the properties below are optional\n    assign_public_ip=\"assignPublicIp\",\n    security_groups=[\"securityGroups\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAwsVpcConfigurationProperty awsVpcConfigurationProperty = new AwsVpcConfigurationProperty {\n    Subnets = new [] { \"subnets\" },\n\n    // the properties below are optional\n    AssignPublicIp = \"assignPublicIp\",\n    SecurityGroups = new [] { \"securityGroups\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAwsVpcConfigurationProperty awsVpcConfigurationProperty = AwsVpcConfigurationProperty.builder()\n        .subnets(List.of(\"subnets\"))\n\n        // the properties below are optional\n        .assignPublicIp(\"assignPublicIp\")\n        .securityGroups(List.of(\"securityGroups\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nawsVpcConfigurationProperty := &awsVpcConfigurationProperty{\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\n\t// the properties below are optional\n\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst awsVpcConfigurationProperty: ecs.CfnService.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.AwsVpcConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.AwsVpcConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsVpcConfigurationProperty: ecs.CfnService.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cc604e5ab17a0a13a4fef2806a25e8757ab5a21e362670782fddb5be04d58af9"
    },
    "1caba174a5dd6250b2a8e6aa7849c9ae160700fab84147339af39f51f3b721b0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncapacity_provider_strategy_item_property = ecs.CfnService.CapacityProviderStrategyItemProperty(\n    base=123,\n    capacity_provider=\"capacityProvider\",\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCapacityProviderStrategyItemProperty capacityProviderStrategyItemProperty = new CapacityProviderStrategyItemProperty {\n    Base = 123,\n    CapacityProvider = \"capacityProvider\",\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCapacityProviderStrategyItemProperty capacityProviderStrategyItemProperty = CapacityProviderStrategyItemProperty.builder()\n        .base(123)\n        .capacityProvider(\"capacityProvider\")\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncapacityProviderStrategyItemProperty := &capacityProviderStrategyItemProperty{\n\tbase: jsii.Number(123),\n\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst capacityProviderStrategyItemProperty: ecs.CfnService.CapacityProviderStrategyItemProperty = {\n  base: 123,\n  capacityProvider: 'capacityProvider',\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.CapacityProviderStrategyItemProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.CapacityProviderStrategyItemProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst capacityProviderStrategyItemProperty: ecs.CfnService.CapacityProviderStrategyItemProperty = {\n  base: 123,\n  capacityProvider: 'capacityProvider',\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ee4b78c398e74123ac59aa98c92715686c07e354cbc1befb341055991a03678e"
    },
    "48575879b74b652311d8f2b976c9386d9bcf72ca3d17b81f2b8bf40653931bb4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndeployment_alarms_property = ecs.CfnService.DeploymentAlarmsProperty(\n    alarm_names=[\"alarmNames\"],\n    enable=False,\n    rollback=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDeploymentAlarmsProperty deploymentAlarmsProperty = new DeploymentAlarmsProperty {\n    AlarmNames = new [] { \"alarmNames\" },\n    Enable = false,\n    Rollback = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDeploymentAlarmsProperty deploymentAlarmsProperty = DeploymentAlarmsProperty.builder()\n        .alarmNames(List.of(\"alarmNames\"))\n        .enable(false)\n        .rollback(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndeploymentAlarmsProperty := &deploymentAlarmsProperty{\n\talarmNames: []*string{\n\t\tjsii.String(\"alarmNames\"),\n\t},\n\tenable: jsii.Boolean(false),\n\trollback: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentAlarmsProperty: ecs.CfnService.DeploymentAlarmsProperty = {\n  alarmNames: ['alarmNames'],\n  enable: false,\n  rollback: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentAlarmsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.DeploymentAlarmsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentAlarmsProperty: ecs.CfnService.DeploymentAlarmsProperty = {\n  alarmNames: ['alarmNames'],\n  enable: false,\n  rollback: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "91": 2,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e7b68cd1e06a0edff5ca3bd799e0c55f3f668b4c8efc740ab86dd293bf2a6478"
    },
    "6daaf9b63192ea7cc01387adf8a9877ae1a32f5a94a7c609fac44107708ce6d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndeployment_circuit_breaker_property = ecs.CfnService.DeploymentCircuitBreakerProperty(\n    enable=False,\n    rollback=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDeploymentCircuitBreakerProperty deploymentCircuitBreakerProperty = new DeploymentCircuitBreakerProperty {\n    Enable = false,\n    Rollback = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDeploymentCircuitBreakerProperty deploymentCircuitBreakerProperty = DeploymentCircuitBreakerProperty.builder()\n        .enable(false)\n        .rollback(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndeploymentCircuitBreakerProperty := &deploymentCircuitBreakerProperty{\n\tenable: jsii.Boolean(false),\n\trollback: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentCircuitBreakerProperty: ecs.CfnService.DeploymentCircuitBreakerProperty = {\n  enable: false,\n  rollback: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentCircuitBreakerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.DeploymentCircuitBreakerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentCircuitBreakerProperty: ecs.CfnService.DeploymentCircuitBreakerProperty = {\n  enable: false,\n  rollback: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "91": 2,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "76cba429177b3aab59c8d505e39bf7204f6f94be30d82b0bdd6863bc9401e39d"
    },
    "828a29f5fde8a64bb1d95cdaf993a0d8b9a007b9af584a565b6fb619cd53283e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndeployment_configuration_property = ecs.CfnService.DeploymentConfigurationProperty(\n    alarms=ecs.CfnService.DeploymentAlarmsProperty(\n        alarm_names=[\"alarmNames\"],\n        enable=False,\n        rollback=False\n    ),\n    deployment_circuit_breaker=ecs.CfnService.DeploymentCircuitBreakerProperty(\n        enable=False,\n        rollback=False\n    ),\n    maximum_percent=123,\n    minimum_healthy_percent=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDeploymentConfigurationProperty deploymentConfigurationProperty = new DeploymentConfigurationProperty {\n    Alarms = new DeploymentAlarmsProperty {\n        AlarmNames = new [] { \"alarmNames\" },\n        Enable = false,\n        Rollback = false\n    },\n    DeploymentCircuitBreaker = new DeploymentCircuitBreakerProperty {\n        Enable = false,\n        Rollback = false\n    },\n    MaximumPercent = 123,\n    MinimumHealthyPercent = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDeploymentConfigurationProperty deploymentConfigurationProperty = DeploymentConfigurationProperty.builder()\n        .alarms(DeploymentAlarmsProperty.builder()\n                .alarmNames(List.of(\"alarmNames\"))\n                .enable(false)\n                .rollback(false)\n                .build())\n        .deploymentCircuitBreaker(DeploymentCircuitBreakerProperty.builder()\n                .enable(false)\n                .rollback(false)\n                .build())\n        .maximumPercent(123)\n        .minimumHealthyPercent(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndeploymentConfigurationProperty := &deploymentConfigurationProperty{\n\talarms: &deploymentAlarmsProperty{\n\t\talarmNames: []*string{\n\t\t\tjsii.String(\"alarmNames\"),\n\t\t},\n\t\tenable: jsii.Boolean(false),\n\t\trollback: jsii.Boolean(false),\n\t},\n\tdeploymentCircuitBreaker: &deploymentCircuitBreakerProperty{\n\t\tenable: jsii.Boolean(false),\n\t\trollback: jsii.Boolean(false),\n\t},\n\tmaximumPercent: jsii.Number(123),\n\tminimumHealthyPercent: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentConfigurationProperty: ecs.CfnService.DeploymentConfigurationProperty = {\n  alarms: {\n    alarmNames: ['alarmNames'],\n    enable: false,\n    rollback: false,\n  },\n  deploymentCircuitBreaker: {\n    enable: false,\n    rollback: false,\n  },\n  maximumPercent: 123,\n  minimumHealthyPercent: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.DeploymentConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentConfigurationProperty: ecs.CfnService.DeploymentConfigurationProperty = {\n  alarms: {\n    alarmNames: ['alarmNames'],\n    enable: false,\n    rollback: false,\n  },\n  deploymentCircuitBreaker: {\n    enable: false,\n    rollback: false,\n  },\n  maximumPercent: 123,\n  minimumHealthyPercent: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 14,
        "91": 4,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "95a9aae20e1138e59f654e8d620e6bb5fd4e4ee279c25bc6272d8a02581abb90"
    },
    "5b32d4dbc38e26fcbe3a3d1eb17cc57992a330fd4d456659672da24374ae1e72": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndeployment_controller_property = ecs.CfnService.DeploymentControllerProperty(\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDeploymentControllerProperty deploymentControllerProperty = new DeploymentControllerProperty {\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDeploymentControllerProperty deploymentControllerProperty = DeploymentControllerProperty.builder()\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndeploymentControllerProperty := &deploymentControllerProperty{\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deploymentControllerProperty: ecs.CfnService.DeploymentControllerProperty = {\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.DeploymentControllerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.DeploymentControllerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentControllerProperty: ecs.CfnService.DeploymentControllerProperty = {\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0afe8d77f3e9df6e6abf0509125b8c907fa9902bf58aa2c06bc80bdaa251a083"
    },
    "05769022cd288b784e132d61cff36924da84f249a8ff1ce8ebdb7eb00f3b3f76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nload_balancer_property = ecs.CfnService.LoadBalancerProperty(\n    container_port=123,\n\n    # the properties below are optional\n    container_name=\"containerName\",\n    load_balancer_name=\"loadBalancerName\",\n    target_group_arn=\"targetGroupArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLoadBalancerProperty loadBalancerProperty = new LoadBalancerProperty {\n    ContainerPort = 123,\n\n    // the properties below are optional\n    ContainerName = \"containerName\",\n    LoadBalancerName = \"loadBalancerName\",\n    TargetGroupArn = \"targetGroupArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLoadBalancerProperty loadBalancerProperty = LoadBalancerProperty.builder()\n        .containerPort(123)\n\n        // the properties below are optional\n        .containerName(\"containerName\")\n        .loadBalancerName(\"loadBalancerName\")\n        .targetGroupArn(\"targetGroupArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nloadBalancerProperty := &loadBalancerProperty{\n\tcontainerPort: jsii.Number(123),\n\n\t// the properties below are optional\n\tcontainerName: jsii.String(\"containerName\"),\n\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\ttargetGroupArn: jsii.String(\"targetGroupArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst loadBalancerProperty: ecs.CfnService.LoadBalancerProperty = {\n  containerPort: 123,\n\n  // the properties below are optional\n  containerName: 'containerName',\n  loadBalancerName: 'loadBalancerName',\n  targetGroupArn: 'targetGroupArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.LoadBalancerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.LoadBalancerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancerProperty: ecs.CfnService.LoadBalancerProperty = {\n  containerPort: 123,\n\n  // the properties below are optional\n  containerName: 'containerName',\n  loadBalancerName: 'loadBalancerName',\n  targetGroupArn: 'targetGroupArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e7bd5bab6dd615884975c4ba8f32fc61dd109494f8038bab20ea4ebdb59ad161"
    },
    "0d9233b72d3c0c2a20351dfb8b8b24326db97546626d6d018c6e966a434282ad": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nlog_configuration_property = ecs.CfnService.LogConfigurationProperty(\n    log_driver=\"logDriver\",\n    options={\n        \"options_key\": \"options\"\n    },\n    secret_options=[ecs.CfnService.SecretProperty(\n        name=\"name\",\n        value_from=\"valueFrom\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLogConfigurationProperty logConfigurationProperty = new LogConfigurationProperty {\n    LogDriver = \"logDriver\",\n    Options = new Dictionary<string, string> {\n        { \"optionsKey\", \"options\" }\n    },\n    SecretOptions = new [] { new SecretProperty {\n        Name = \"name\",\n        ValueFrom = \"valueFrom\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLogConfigurationProperty logConfigurationProperty = LogConfigurationProperty.builder()\n        .logDriver(\"logDriver\")\n        .options(Map.of(\n                \"optionsKey\", \"options\"))\n        .secretOptions(List.of(SecretProperty.builder()\n                .name(\"name\")\n                .valueFrom(\"valueFrom\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nlogConfigurationProperty := &logConfigurationProperty{\n\tlogDriver: jsii.String(\"logDriver\"),\n\toptions: map[string]*string{\n\t\t\"optionsKey\": jsii.String(\"options\"),\n\t},\n\tsecretOptions: []interface{}{\n\t\t&secretProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst logConfigurationProperty: ecs.CfnService.LogConfigurationProperty = {\n  logDriver: 'logDriver',\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.LogConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.LogConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logConfigurationProperty: ecs.CfnService.LogConfigurationProperty = {\n  logDriver: 'logDriver',\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "ab6f0b022025b912796c55aa493428f21f2fac8c778515815e953c9f9b545b2b"
    },
    "a052831eb31bb7cdddd5d09161c0973ec3f890529a375cd7d03ed21952f321ff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nnetwork_configuration_property = ecs.CfnService.NetworkConfigurationProperty(\n    awsvpc_configuration=ecs.CfnService.AwsVpcConfigurationProperty(\n        subnets=[\"subnets\"],\n\n        # the properties below are optional\n        assign_public_ip=\"assignPublicIp\",\n        security_groups=[\"securityGroups\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nNetworkConfigurationProperty networkConfigurationProperty = new NetworkConfigurationProperty {\n    AwsvpcConfiguration = new AwsVpcConfigurationProperty {\n        Subnets = new [] { \"subnets\" },\n\n        // the properties below are optional\n        AssignPublicIp = \"assignPublicIp\",\n        SecurityGroups = new [] { \"securityGroups\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nNetworkConfigurationProperty networkConfigurationProperty = NetworkConfigurationProperty.builder()\n        .awsvpcConfiguration(AwsVpcConfigurationProperty.builder()\n                .subnets(List.of(\"subnets\"))\n\n                // the properties below are optional\n                .assignPublicIp(\"assignPublicIp\")\n                .securityGroups(List.of(\"securityGroups\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nnetworkConfigurationProperty := &networkConfigurationProperty{\n\tawsvpcConfiguration: &awsVpcConfigurationProperty{\n\t\tsubnets: []*string{\n\t\t\tjsii.String(\"subnets\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\tsecurityGroups: []*string{\n\t\t\tjsii.String(\"securityGroups\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst networkConfigurationProperty: ecs.CfnService.NetworkConfigurationProperty = {\n  awsvpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.NetworkConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.NetworkConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkConfigurationProperty: ecs.CfnService.NetworkConfigurationProperty = {\n  awsvpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "60652aa37cb7e8047a9d93f01fd69d9b471ae8a53b32393fd3abb0e907f10ae7"
    },
    "b4f10b49970d1ce9c905831c17ea1e4bfc723704ee6f9f9f895c7aac778df924": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nplacement_constraint_property = ecs.CfnService.PlacementConstraintProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    expression=\"expression\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nPlacementConstraintProperty placementConstraintProperty = new PlacementConstraintProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    Expression = \"expression\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nPlacementConstraintProperty placementConstraintProperty = PlacementConstraintProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .expression(\"expression\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nplacementConstraintProperty := &placementConstraintProperty{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\texpression: jsii.String(\"expression\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst placementConstraintProperty: ecs.CfnService.PlacementConstraintProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  expression: 'expression',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementConstraintProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.PlacementConstraintProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst placementConstraintProperty: ecs.CfnService.PlacementConstraintProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  expression: 'expression',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "928a984690590fccd425b8952e75edfea53d6fc85cff717eb22a08e67d1cf81f"
    },
    "9dcfa06f883573919dc7ae6c8da37c9b6736893a3028538ed77fab17b1bd0e4e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nplacement_strategy_property = ecs.CfnService.PlacementStrategyProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    field=\"field\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nPlacementStrategyProperty placementStrategyProperty = new PlacementStrategyProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    Field = \"field\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nPlacementStrategyProperty placementStrategyProperty = PlacementStrategyProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .field(\"field\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nplacementStrategyProperty := &placementStrategyProperty{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tfield: jsii.String(\"field\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst placementStrategyProperty: ecs.CfnService.PlacementStrategyProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  field: 'field',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.PlacementStrategyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.PlacementStrategyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst placementStrategyProperty: ecs.CfnService.PlacementStrategyProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  field: 'field',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "af37a9bc713bcd49650e2972ae53133335cede51b1f996c1d96171fd0e5020c4"
    },
    "e272ae5f7bbe4e40f84e8aee74ff975f045c0e936a26aa3d8bfc809acaee3f75": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nsecret_property = ecs.CfnService.SecretProperty(\n    name=\"name\",\n    value_from=\"valueFrom\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nSecretProperty secretProperty = new SecretProperty {\n    Name = \"name\",\n    ValueFrom = \"valueFrom\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nSecretProperty secretProperty = SecretProperty.builder()\n        .name(\"name\")\n        .valueFrom(\"valueFrom\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nsecretProperty := &secretProperty{\n\tname: jsii.String(\"name\"),\n\tvalueFrom: jsii.String(\"valueFrom\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst secretProperty: ecs.CfnService.SecretProperty = {\n  name: 'name',\n  valueFrom: 'valueFrom',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.SecretProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.SecretProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst secretProperty: ecs.CfnService.SecretProperty = {\n  name: 'name',\n  valueFrom: 'valueFrom',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3bfe11bc82fabdd6cc1a713fc48e450235a05772c44e945a2b480666f9a8be44"
    },
    "272f2d213646f03046c079a163d2d167b2beb3b5462ced5e380fe7801857a77e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nservice_connect_client_alias_property = ecs.CfnService.ServiceConnectClientAliasProperty(\n    port=123,\n\n    # the properties below are optional\n    dns_name=\"dnsName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nServiceConnectClientAliasProperty serviceConnectClientAliasProperty = new ServiceConnectClientAliasProperty {\n    Port = 123,\n\n    // the properties below are optional\n    DnsName = \"dnsName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nServiceConnectClientAliasProperty serviceConnectClientAliasProperty = ServiceConnectClientAliasProperty.builder()\n        .port(123)\n\n        // the properties below are optional\n        .dnsName(\"dnsName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nserviceConnectClientAliasProperty := &serviceConnectClientAliasProperty{\n\tport: jsii.Number(123),\n\n\t// the properties below are optional\n\tdnsName: jsii.String(\"dnsName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectClientAliasProperty: ecs.CfnService.ServiceConnectClientAliasProperty = {\n  port: 123,\n\n  // the properties below are optional\n  dnsName: 'dnsName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectClientAliasProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.ServiceConnectClientAliasProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceConnectClientAliasProperty: ecs.CfnService.ServiceConnectClientAliasProperty = {\n  port: 123,\n\n  // the properties below are optional\n  dnsName: 'dnsName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "157606806161374591f976acd17d1dc0c4155cabda8aac760fde5e37ff16b554"
    },
    "cd78b319f7edd14abc19d741e1128f55b5ac4f8eef05ed77bfae42aaddb6826b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nservice_connect_configuration_property = ecs.CfnService.ServiceConnectConfigurationProperty(\n    enabled=False,\n\n    # the properties below are optional\n    log_configuration=ecs.CfnService.LogConfigurationProperty(\n        log_driver=\"logDriver\",\n        options={\n            \"options_key\": \"options\"\n        },\n        secret_options=[ecs.CfnService.SecretProperty(\n            name=\"name\",\n            value_from=\"valueFrom\"\n        )]\n    ),\n    namespace=\"namespace\",\n    services=[ecs.CfnService.ServiceConnectServiceProperty(\n        port_name=\"portName\",\n\n        # the properties below are optional\n        client_aliases=[ecs.CfnService.ServiceConnectClientAliasProperty(\n            port=123,\n\n            # the properties below are optional\n            dns_name=\"dnsName\"\n        )],\n        discovery_name=\"discoveryName\",\n        ingress_port_override=123\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nServiceConnectConfigurationProperty serviceConnectConfigurationProperty = new ServiceConnectConfigurationProperty {\n    Enabled = false,\n\n    // the properties below are optional\n    LogConfiguration = new LogConfigurationProperty {\n        LogDriver = \"logDriver\",\n        Options = new Dictionary<string, string> {\n            { \"optionsKey\", \"options\" }\n        },\n        SecretOptions = new [] { new SecretProperty {\n            Name = \"name\",\n            ValueFrom = \"valueFrom\"\n        } }\n    },\n    Namespace = \"namespace\",\n    Services = new [] { new ServiceConnectServiceProperty {\n        PortName = \"portName\",\n\n        // the properties below are optional\n        ClientAliases = new [] { new ServiceConnectClientAliasProperty {\n            Port = 123,\n\n            // the properties below are optional\n            DnsName = \"dnsName\"\n        } },\n        DiscoveryName = \"discoveryName\",\n        IngressPortOverride = 123\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nServiceConnectConfigurationProperty serviceConnectConfigurationProperty = ServiceConnectConfigurationProperty.builder()\n        .enabled(false)\n\n        // the properties below are optional\n        .logConfiguration(LogConfigurationProperty.builder()\n                .logDriver(\"logDriver\")\n                .options(Map.of(\n                        \"optionsKey\", \"options\"))\n                .secretOptions(List.of(SecretProperty.builder()\n                        .name(\"name\")\n                        .valueFrom(\"valueFrom\")\n                        .build()))\n                .build())\n        .namespace(\"namespace\")\n        .services(List.of(ServiceConnectServiceProperty.builder()\n                .portName(\"portName\")\n\n                // the properties below are optional\n                .clientAliases(List.of(ServiceConnectClientAliasProperty.builder()\n                        .port(123)\n\n                        // the properties below are optional\n                        .dnsName(\"dnsName\")\n                        .build()))\n                .discoveryName(\"discoveryName\")\n                .ingressPortOverride(123)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nserviceConnectConfigurationProperty := &serviceConnectConfigurationProperty{\n\tenabled: jsii.Boolean(false),\n\n\t// the properties below are optional\n\tlogConfiguration: &logConfigurationProperty{\n\t\tlogDriver: jsii.String(\"logDriver\"),\n\t\toptions: map[string]*string{\n\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t},\n\t\tsecretOptions: []interface{}{\n\t\t\t&secretProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t},\n\t\t},\n\t},\n\tnamespace: jsii.String(\"namespace\"),\n\tservices: []interface{}{\n\t\t&serviceConnectServiceProperty{\n\t\t\tportName: jsii.String(\"portName\"),\n\n\t\t\t// the properties below are optional\n\t\t\tclientAliases: []interface{}{\n\t\t\t\t&serviceConnectClientAliasProperty{\n\t\t\t\t\tport: jsii.Number(123),\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tdnsName: jsii.String(\"dnsName\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tdiscoveryName: jsii.String(\"discoveryName\"),\n\t\t\tingressPortOverride: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectConfigurationProperty: ecs.CfnService.ServiceConnectConfigurationProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  logConfiguration: {\n    logDriver: 'logDriver',\n    options: {\n      optionsKey: 'options',\n    },\n    secretOptions: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n  },\n  namespace: 'namespace',\n  services: [{\n    portName: 'portName',\n\n    // the properties below are optional\n    clientAliases: [{\n      port: 123,\n\n      // the properties below are optional\n      dnsName: 'dnsName',\n    }],\n    discoveryName: 'discoveryName',\n    ingressPortOverride: 123,\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.ServiceConnectConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceConnectConfigurationProperty: ecs.CfnService.ServiceConnectConfigurationProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  logConfiguration: {\n    logDriver: 'logDriver',\n    options: {\n      optionsKey: 'options',\n    },\n    secretOptions: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n  },\n  namespace: 'namespace',\n  services: [{\n    portName: 'portName',\n\n    // the properties below are optional\n    clientAliases: [{\n      port: 123,\n\n      // the properties below are optional\n      dnsName: 'dnsName',\n    }],\n    discoveryName: 'discoveryName',\n    ingressPortOverride: 123,\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 21,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "fb94441192afdbe9885e1d8018c58331de50c33a30b86e5ede518da6a3f05850"
    },
    "97b330eb85c1c46be2fdd647495f27a66a2f8d23b378511fd04b48301ae0e688": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nservice_connect_service_property = ecs.CfnService.ServiceConnectServiceProperty(\n    port_name=\"portName\",\n\n    # the properties below are optional\n    client_aliases=[ecs.CfnService.ServiceConnectClientAliasProperty(\n        port=123,\n\n        # the properties below are optional\n        dns_name=\"dnsName\"\n    )],\n    discovery_name=\"discoveryName\",\n    ingress_port_override=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nServiceConnectServiceProperty serviceConnectServiceProperty = new ServiceConnectServiceProperty {\n    PortName = \"portName\",\n\n    // the properties below are optional\n    ClientAliases = new [] { new ServiceConnectClientAliasProperty {\n        Port = 123,\n\n        // the properties below are optional\n        DnsName = \"dnsName\"\n    } },\n    DiscoveryName = \"discoveryName\",\n    IngressPortOverride = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nServiceConnectServiceProperty serviceConnectServiceProperty = ServiceConnectServiceProperty.builder()\n        .portName(\"portName\")\n\n        // the properties below are optional\n        .clientAliases(List.of(ServiceConnectClientAliasProperty.builder()\n                .port(123)\n\n                // the properties below are optional\n                .dnsName(\"dnsName\")\n                .build()))\n        .discoveryName(\"discoveryName\")\n        .ingressPortOverride(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nserviceConnectServiceProperty := &serviceConnectServiceProperty{\n\tportName: jsii.String(\"portName\"),\n\n\t// the properties below are optional\n\tclientAliases: []interface{}{\n\t\t&serviceConnectClientAliasProperty{\n\t\t\tport: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\tdnsName: jsii.String(\"dnsName\"),\n\t\t},\n\t},\n\tdiscoveryName: jsii.String(\"discoveryName\"),\n\tingressPortOverride: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceConnectServiceProperty: ecs.CfnService.ServiceConnectServiceProperty = {\n  portName: 'portName',\n\n  // the properties below are optional\n  clientAliases: [{\n    port: 123,\n\n    // the properties below are optional\n    dnsName: 'dnsName',\n  }],\n  discoveryName: 'discoveryName',\n  ingressPortOverride: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceConnectServiceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.ServiceConnectServiceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceConnectServiceProperty: ecs.CfnService.ServiceConnectServiceProperty = {\n  portName: 'portName',\n\n  // the properties below are optional\n  clientAliases: [{\n    port: 123,\n\n    // the properties below are optional\n    dnsName: 'dnsName',\n  }],\n  discoveryName: 'discoveryName',\n  ingressPortOverride: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "a446b2a394a52c599c97d17f4d0f44927b3f6fb39433a68d6a42b8fc8f7bda87"
    },
    "c94869f97a55846fda6ce3482ebcc5e02a03ecceaf9000a93ccfd2b63d876e0e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nservice_registry_property = ecs.CfnService.ServiceRegistryProperty(\n    container_name=\"containerName\",\n    container_port=123,\n    port=123,\n    registry_arn=\"registryArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nServiceRegistryProperty serviceRegistryProperty = new ServiceRegistryProperty {\n    ContainerName = \"containerName\",\n    ContainerPort = 123,\n    Port = 123,\n    RegistryArn = \"registryArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nServiceRegistryProperty serviceRegistryProperty = ServiceRegistryProperty.builder()\n        .containerName(\"containerName\")\n        .containerPort(123)\n        .port(123)\n        .registryArn(\"registryArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nserviceRegistryProperty := &serviceRegistryProperty{\n\tcontainerName: jsii.String(\"containerName\"),\n\tcontainerPort: jsii.Number(123),\n\tport: jsii.Number(123),\n\tregistryArn: jsii.String(\"registryArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceRegistryProperty: ecs.CfnService.ServiceRegistryProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  port: 123,\n  registryArn: 'registryArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnService.ServiceRegistryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnService.ServiceRegistryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceRegistryProperty: ecs.CfnService.ServiceRegistryProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  port: 123,\n  registryArn: 'registryArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "13b50abd234c1e9efe1727008a31a1959def8844089cea4122d88e5d0723913f"
    },
    "e8a0ab7354192fb8984273ce577772ea96710ce84b3a4e4522202d066a913bd1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_service_props = ecs.CfnServiceProps(\n    capacity_provider_strategy=[ecs.CfnService.CapacityProviderStrategyItemProperty(\n        base=123,\n        capacity_provider=\"capacityProvider\",\n        weight=123\n    )],\n    cluster=\"cluster\",\n    deployment_configuration=ecs.CfnService.DeploymentConfigurationProperty(\n        alarms=ecs.CfnService.DeploymentAlarmsProperty(\n            alarm_names=[\"alarmNames\"],\n            enable=False,\n            rollback=False\n        ),\n        deployment_circuit_breaker=ecs.CfnService.DeploymentCircuitBreakerProperty(\n            enable=False,\n            rollback=False\n        ),\n        maximum_percent=123,\n        minimum_healthy_percent=123\n    ),\n    deployment_controller=ecs.CfnService.DeploymentControllerProperty(\n        type=\"type\"\n    ),\n    desired_count=123,\n    enable_ecs_managed_tags=False,\n    enable_execute_command=False,\n    health_check_grace_period_seconds=123,\n    launch_type=\"launchType\",\n    load_balancers=[ecs.CfnService.LoadBalancerProperty(\n        container_port=123,\n\n        # the properties below are optional\n        container_name=\"containerName\",\n        load_balancer_name=\"loadBalancerName\",\n        target_group_arn=\"targetGroupArn\"\n    )],\n    network_configuration=ecs.CfnService.NetworkConfigurationProperty(\n        awsvpc_configuration=ecs.CfnService.AwsVpcConfigurationProperty(\n            subnets=[\"subnets\"],\n\n            # the properties below are optional\n            assign_public_ip=\"assignPublicIp\",\n            security_groups=[\"securityGroups\"]\n        )\n    ),\n    placement_constraints=[ecs.CfnService.PlacementConstraintProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        expression=\"expression\"\n    )],\n    placement_strategies=[ecs.CfnService.PlacementStrategyProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        field=\"field\"\n    )],\n    platform_version=\"platformVersion\",\n    propagate_tags=\"propagateTags\",\n    role=\"role\",\n    scheduling_strategy=\"schedulingStrategy\",\n    service_connect_configuration=ecs.CfnService.ServiceConnectConfigurationProperty(\n        enabled=False,\n\n        # the properties below are optional\n        log_configuration=ecs.CfnService.LogConfigurationProperty(\n            log_driver=\"logDriver\",\n            options={\n                \"options_key\": \"options\"\n            },\n            secret_options=[ecs.CfnService.SecretProperty(\n                name=\"name\",\n                value_from=\"valueFrom\"\n            )]\n        ),\n        namespace=\"namespace\",\n        services=[ecs.CfnService.ServiceConnectServiceProperty(\n            port_name=\"portName\",\n\n            # the properties below are optional\n            client_aliases=[ecs.CfnService.ServiceConnectClientAliasProperty(\n                port=123,\n\n                # the properties below are optional\n                dns_name=\"dnsName\"\n            )],\n            discovery_name=\"discoveryName\",\n            ingress_port_override=123\n        )]\n    ),\n    service_name=\"serviceName\",\n    service_registries=[ecs.CfnService.ServiceRegistryProperty(\n        container_name=\"containerName\",\n        container_port=123,\n        port=123,\n        registry_arn=\"registryArn\"\n    )],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    task_definition=\"taskDefinition\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnServiceProps cfnServiceProps = new CfnServiceProps {\n    CapacityProviderStrategy = new [] { new CapacityProviderStrategyItemProperty {\n        Base = 123,\n        CapacityProvider = \"capacityProvider\",\n        Weight = 123\n    } },\n    Cluster = \"cluster\",\n    DeploymentConfiguration = new DeploymentConfigurationProperty {\n        Alarms = new DeploymentAlarmsProperty {\n            AlarmNames = new [] { \"alarmNames\" },\n            Enable = false,\n            Rollback = false\n        },\n        DeploymentCircuitBreaker = new DeploymentCircuitBreakerProperty {\n            Enable = false,\n            Rollback = false\n        },\n        MaximumPercent = 123,\n        MinimumHealthyPercent = 123\n    },\n    DeploymentController = new DeploymentControllerProperty {\n        Type = \"type\"\n    },\n    DesiredCount = 123,\n    EnableEcsManagedTags = false,\n    EnableExecuteCommand = false,\n    HealthCheckGracePeriodSeconds = 123,\n    LaunchType = \"launchType\",\n    LoadBalancers = new [] { new LoadBalancerProperty {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        ContainerName = \"containerName\",\n        LoadBalancerName = \"loadBalancerName\",\n        TargetGroupArn = \"targetGroupArn\"\n    } },\n    NetworkConfiguration = new NetworkConfigurationProperty {\n        AwsvpcConfiguration = new AwsVpcConfigurationProperty {\n            Subnets = new [] { \"subnets\" },\n\n            // the properties below are optional\n            AssignPublicIp = \"assignPublicIp\",\n            SecurityGroups = new [] { \"securityGroups\" }\n        }\n    },\n    PlacementConstraints = new [] { new PlacementConstraintProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Expression = \"expression\"\n    } },\n    PlacementStrategies = new [] { new PlacementStrategyProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Field = \"field\"\n    } },\n    PlatformVersion = \"platformVersion\",\n    PropagateTags = \"propagateTags\",\n    Role = \"role\",\n    SchedulingStrategy = \"schedulingStrategy\",\n    ServiceConnectConfiguration = new ServiceConnectConfigurationProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        LogConfiguration = new LogConfigurationProperty {\n            LogDriver = \"logDriver\",\n            Options = new Dictionary<string, string> {\n                { \"optionsKey\", \"options\" }\n            },\n            SecretOptions = new [] { new SecretProperty {\n                Name = \"name\",\n                ValueFrom = \"valueFrom\"\n            } }\n        },\n        Namespace = \"namespace\",\n        Services = new [] { new ServiceConnectServiceProperty {\n            PortName = \"portName\",\n\n            // the properties below are optional\n            ClientAliases = new [] { new ServiceConnectClientAliasProperty {\n                Port = 123,\n\n                // the properties below are optional\n                DnsName = \"dnsName\"\n            } },\n            DiscoveryName = \"discoveryName\",\n            IngressPortOverride = 123\n        } }\n    },\n    ServiceName = \"serviceName\",\n    ServiceRegistries = new [] { new ServiceRegistryProperty {\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        Port = 123,\n        RegistryArn = \"registryArn\"\n    } },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TaskDefinition = \"taskDefinition\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnServiceProps cfnServiceProps = CfnServiceProps.builder()\n        .capacityProviderStrategy(List.of(CapacityProviderStrategyItemProperty.builder()\n                .base(123)\n                .capacityProvider(\"capacityProvider\")\n                .weight(123)\n                .build()))\n        .cluster(\"cluster\")\n        .deploymentConfiguration(DeploymentConfigurationProperty.builder()\n                .alarms(DeploymentAlarmsProperty.builder()\n                        .alarmNames(List.of(\"alarmNames\"))\n                        .enable(false)\n                        .rollback(false)\n                        .build())\n                .deploymentCircuitBreaker(DeploymentCircuitBreakerProperty.builder()\n                        .enable(false)\n                        .rollback(false)\n                        .build())\n                .maximumPercent(123)\n                .minimumHealthyPercent(123)\n                .build())\n        .deploymentController(DeploymentControllerProperty.builder()\n                .type(\"type\")\n                .build())\n        .desiredCount(123)\n        .enableEcsManagedTags(false)\n        .enableExecuteCommand(false)\n        .healthCheckGracePeriodSeconds(123)\n        .launchType(\"launchType\")\n        .loadBalancers(List.of(LoadBalancerProperty.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .containerName(\"containerName\")\n                .loadBalancerName(\"loadBalancerName\")\n                .targetGroupArn(\"targetGroupArn\")\n                .build()))\n        .networkConfiguration(NetworkConfigurationProperty.builder()\n                .awsvpcConfiguration(AwsVpcConfigurationProperty.builder()\n                        .subnets(List.of(\"subnets\"))\n\n                        // the properties below are optional\n                        .assignPublicIp(\"assignPublicIp\")\n                        .securityGroups(List.of(\"securityGroups\"))\n                        .build())\n                .build())\n        .placementConstraints(List.of(PlacementConstraintProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .expression(\"expression\")\n                .build()))\n        .placementStrategies(List.of(PlacementStrategyProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .field(\"field\")\n                .build()))\n        .platformVersion(\"platformVersion\")\n        .propagateTags(\"propagateTags\")\n        .role(\"role\")\n        .schedulingStrategy(\"schedulingStrategy\")\n        .serviceConnectConfiguration(ServiceConnectConfigurationProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .logConfiguration(LogConfigurationProperty.builder()\n                        .logDriver(\"logDriver\")\n                        .options(Map.of(\n                                \"optionsKey\", \"options\"))\n                        .secretOptions(List.of(SecretProperty.builder()\n                                .name(\"name\")\n                                .valueFrom(\"valueFrom\")\n                                .build()))\n                        .build())\n                .namespace(\"namespace\")\n                .services(List.of(ServiceConnectServiceProperty.builder()\n                        .portName(\"portName\")\n\n                        // the properties below are optional\n                        .clientAliases(List.of(ServiceConnectClientAliasProperty.builder()\n                                .port(123)\n\n                                // the properties below are optional\n                                .dnsName(\"dnsName\")\n                                .build()))\n                        .discoveryName(\"discoveryName\")\n                        .ingressPortOverride(123)\n                        .build()))\n                .build())\n        .serviceName(\"serviceName\")\n        .serviceRegistries(List.of(ServiceRegistryProperty.builder()\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .port(123)\n                .registryArn(\"registryArn\")\n                .build()))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .taskDefinition(\"taskDefinition\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnServiceProps := &cfnServiceProps{\n\tcapacityProviderStrategy: []interface{}{\n\t\t&capacityProviderStrategyItemProperty{\n\t\t\tbase: jsii.Number(123),\n\t\t\tcapacityProvider: jsii.String(\"capacityProvider\"),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\tcluster: jsii.String(\"cluster\"),\n\tdeploymentConfiguration: &deploymentConfigurationProperty{\n\t\talarms: &deploymentAlarmsProperty{\n\t\t\talarmNames: []*string{\n\t\t\t\tjsii.String(\"alarmNames\"),\n\t\t\t},\n\t\t\tenable: jsii.Boolean(false),\n\t\t\trollback: jsii.Boolean(false),\n\t\t},\n\t\tdeploymentCircuitBreaker: &deploymentCircuitBreakerProperty{\n\t\t\tenable: jsii.Boolean(false),\n\t\t\trollback: jsii.Boolean(false),\n\t\t},\n\t\tmaximumPercent: jsii.Number(123),\n\t\tminimumHealthyPercent: jsii.Number(123),\n\t},\n\tdeploymentController: &deploymentControllerProperty{\n\t\ttype: jsii.String(\"type\"),\n\t},\n\tdesiredCount: jsii.Number(123),\n\tenableEcsManagedTags: jsii.Boolean(false),\n\tenableExecuteCommand: jsii.Boolean(false),\n\thealthCheckGracePeriodSeconds: jsii.Number(123),\n\tlaunchType: jsii.String(\"launchType\"),\n\tloadBalancers: []interface{}{\n\t\t&loadBalancerProperty{\n\t\t\tcontainerPort: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\t\t\ttargetGroupArn: jsii.String(\"targetGroupArn\"),\n\t\t},\n\t},\n\tnetworkConfiguration: &networkConfigurationProperty{\n\t\tawsvpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\tsubnets: []*string{\n\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\tsecurityGroups: []*string{\n\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t},\n\t\t},\n\t},\n\tplacementConstraints: []interface{}{\n\t\t&placementConstraintProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t},\n\t},\n\tplacementStrategies: []interface{}{\n\t\t&placementStrategyProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\tfield: jsii.String(\"field\"),\n\t\t},\n\t},\n\tplatformVersion: jsii.String(\"platformVersion\"),\n\tpropagateTags: jsii.String(\"propagateTags\"),\n\trole: jsii.String(\"role\"),\n\tschedulingStrategy: jsii.String(\"schedulingStrategy\"),\n\tserviceConnectConfiguration: &serviceConnectConfigurationProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\tlogConfiguration: &logConfigurationProperty{\n\t\t\tlogDriver: jsii.String(\"logDriver\"),\n\t\t\toptions: map[string]*string{\n\t\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t\t},\n\t\t\tsecretOptions: []interface{}{\n\t\t\t\t&secretProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tnamespace: jsii.String(\"namespace\"),\n\t\tservices: []interface{}{\n\t\t\t&serviceConnectServiceProperty{\n\t\t\t\tportName: jsii.String(\"portName\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tclientAliases: []interface{}{\n\t\t\t\t\t&serviceConnectClientAliasProperty{\n\t\t\t\t\t\tport: jsii.Number(123),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tdnsName: jsii.String(\"dnsName\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdiscoveryName: jsii.String(\"discoveryName\"),\n\t\t\t\tingressPortOverride: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\tserviceName: jsii.String(\"serviceName\"),\n\tserviceRegistries: []interface{}{\n\t\t&serviceRegistryProperty{\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tcontainerPort: jsii.Number(123),\n\t\t\tport: jsii.Number(123),\n\t\t\tregistryArn: jsii.String(\"registryArn\"),\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttaskDefinition: jsii.String(\"taskDefinition\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnServiceProps: ecs.CfnServiceProps = {\n  capacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  cluster: 'cluster',\n  deploymentConfiguration: {\n    alarms: {\n      alarmNames: ['alarmNames'],\n      enable: false,\n      rollback: false,\n    },\n    deploymentCircuitBreaker: {\n      enable: false,\n      rollback: false,\n    },\n    maximumPercent: 123,\n    minimumHealthyPercent: 123,\n  },\n  deploymentController: {\n    type: 'type',\n  },\n  desiredCount: 123,\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriodSeconds: 123,\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsvpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  placementStrategies: [{\n    type: 'type',\n\n    // the properties below are optional\n    field: 'field',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  role: 'role',\n  schedulingStrategy: 'schedulingStrategy',\n  serviceConnectConfiguration: {\n    enabled: false,\n\n    // the properties below are optional\n    logConfiguration: {\n      logDriver: 'logDriver',\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    namespace: 'namespace',\n    services: [{\n      portName: 'portName',\n\n      // the properties below are optional\n      clientAliases: [{\n        port: 123,\n\n        // the properties below are optional\n        dnsName: 'dnsName',\n      }],\n      discoveryName: 'discoveryName',\n      ingressPortOverride: 123,\n    }],\n  },\n  serviceName: 'serviceName',\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskDefinition: 'taskDefinition',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnServiceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnServiceProps: ecs.CfnServiceProps = {\n  capacityProviderStrategy: [{\n    base: 123,\n    capacityProvider: 'capacityProvider',\n    weight: 123,\n  }],\n  cluster: 'cluster',\n  deploymentConfiguration: {\n    alarms: {\n      alarmNames: ['alarmNames'],\n      enable: false,\n      rollback: false,\n    },\n    deploymentCircuitBreaker: {\n      enable: false,\n      rollback: false,\n    },\n    maximumPercent: 123,\n    minimumHealthyPercent: 123,\n  },\n  deploymentController: {\n    type: 'type',\n  },\n  desiredCount: 123,\n  enableEcsManagedTags: false,\n  enableExecuteCommand: false,\n  healthCheckGracePeriodSeconds: 123,\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsvpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  placementStrategies: [{\n    type: 'type',\n\n    // the properties below are optional\n    field: 'field',\n  }],\n  platformVersion: 'platformVersion',\n  propagateTags: 'propagateTags',\n  role: 'role',\n  schedulingStrategy: 'schedulingStrategy',\n  serviceConnectConfiguration: {\n    enabled: false,\n\n    // the properties below are optional\n    logConfiguration: {\n      logDriver: 'logDriver',\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    namespace: 'namespace',\n    services: [{\n      portName: 'portName',\n\n      // the properties below are optional\n      clientAliases: [{\n        port: 123,\n\n        // the properties below are optional\n        dnsName: 'dnsName',\n      }],\n      discoveryName: 'discoveryName',\n      ingressPortOverride: 123,\n    }],\n  },\n  serviceName: 'serviceName',\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskDefinition: 'taskDefinition',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 11,
        "10": 34,
        "75": 73,
        "91": 7,
        "153": 1,
        "169": 1,
        "192": 12,
        "193": 19,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 69,
        "290": 1
      },
      "fqnsFingerprint": "e69b0215fce35e5ffdbc4ce382ec79237778ee6519ce94dc1c2268f4a3d102c4"
    },
    "89637a033141679d681ee7744d7caa5ba62bc79a98382fef17062fc410bd7982": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_task_definition = ecs.CfnTaskDefinition(self, \"MyCfnTaskDefinition\",\n    container_definitions=[ecs.CfnTaskDefinition.ContainerDefinitionProperty(\n        image=\"image\",\n        name=\"name\",\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        depends_on=[ecs.CfnTaskDefinition.ContainerDependencyProperty(\n            condition=\"condition\",\n            container_name=\"containerName\"\n        )],\n        disable_networking=False,\n        dns_search_domains=[\"dnsSearchDomains\"],\n        dns_servers=[\"dnsServers\"],\n        docker_labels={\n            \"docker_labels_key\": \"dockerLabels\"\n        },\n        docker_security_options=[\"dockerSecurityOptions\"],\n        entry_point=[\"entryPoint\"],\n        environment=[ecs.CfnTaskDefinition.KeyValuePairProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        environment_files=[ecs.CfnTaskDefinition.EnvironmentFileProperty(\n            type=\"type\",\n            value=\"value\"\n        )],\n        essential=False,\n        extra_hosts=[ecs.CfnTaskDefinition.HostEntryProperty(\n            hostname=\"hostname\",\n            ip_address=\"ipAddress\"\n        )],\n        firelens_configuration=ecs.CfnTaskDefinition.FirelensConfigurationProperty(\n            options={\n                \"options_key\": \"options\"\n            },\n            type=\"type\"\n        ),\n        health_check=ecs.CfnTaskDefinition.HealthCheckProperty(\n            command=[\"command\"],\n            interval=123,\n            retries=123,\n            start_period=123,\n            timeout=123\n        ),\n        hostname=\"hostname\",\n        interactive=False,\n        links=[\"links\"],\n        linux_parameters=ecs.CfnTaskDefinition.LinuxParametersProperty(\n            capabilities=ecs.CfnTaskDefinition.KernelCapabilitiesProperty(\n                add=[\"add\"],\n                drop=[\"drop\"]\n            ),\n            devices=[ecs.CfnTaskDefinition.DeviceProperty(\n                container_path=\"containerPath\",\n                host_path=\"hostPath\",\n                permissions=[\"permissions\"]\n            )],\n            init_process_enabled=False,\n            max_swap=123,\n            shared_memory_size=123,\n            swappiness=123,\n            tmpfs=[ecs.CfnTaskDefinition.TmpfsProperty(\n                size=123,\n\n                # the properties below are optional\n                container_path=\"containerPath\",\n                mount_options=[\"mountOptions\"]\n            )]\n        ),\n        log_configuration=ecs.CfnTaskDefinition.LogConfigurationProperty(\n            log_driver=\"logDriver\",\n\n            # the properties below are optional\n            options={\n                \"options_key\": \"options\"\n            },\n            secret_options=[ecs.CfnTaskDefinition.SecretProperty(\n                name=\"name\",\n                value_from=\"valueFrom\"\n            )]\n        ),\n        memory=123,\n        memory_reservation=123,\n        mount_points=[ecs.CfnTaskDefinition.MountPointProperty(\n            container_path=\"containerPath\",\n            read_only=False,\n            source_volume=\"sourceVolume\"\n        )],\n        port_mappings=[ecs.CfnTaskDefinition.PortMappingProperty(\n            app_protocol=\"appProtocol\",\n            container_port=123,\n            container_port_range=\"containerPortRange\",\n            host_port=123,\n            name=\"name\",\n            protocol=\"protocol\"\n        )],\n        privileged=False,\n        pseudo_terminal=False,\n        readonly_root_filesystem=False,\n        repository_credentials=ecs.CfnTaskDefinition.RepositoryCredentialsProperty(\n            credentials_parameter=\"credentialsParameter\"\n        ),\n        resource_requirements=[ecs.CfnTaskDefinition.ResourceRequirementProperty(\n            type=\"type\",\n            value=\"value\"\n        )],\n        secrets=[ecs.CfnTaskDefinition.SecretProperty(\n            name=\"name\",\n            value_from=\"valueFrom\"\n        )],\n        start_timeout=123,\n        stop_timeout=123,\n        system_controls=[ecs.CfnTaskDefinition.SystemControlProperty(\n            namespace=\"namespace\",\n            value=\"value\"\n        )],\n        ulimits=[ecs.CfnTaskDefinition.UlimitProperty(\n            hard_limit=123,\n            name=\"name\",\n            soft_limit=123\n        )],\n        user=\"user\",\n        volumes_from=[ecs.CfnTaskDefinition.VolumeFromProperty(\n            read_only=False,\n            source_container=\"sourceContainer\"\n        )],\n        working_directory=\"workingDirectory\"\n    )],\n    cpu=\"cpu\",\n    ephemeral_storage=ecs.CfnTaskDefinition.EphemeralStorageProperty(\n        size_in_gi_b=123\n    ),\n    execution_role_arn=\"executionRoleArn\",\n    family=\"family\",\n    inference_accelerators=[ecs.CfnTaskDefinition.InferenceAcceleratorProperty(\n        device_name=\"deviceName\",\n        device_type=\"deviceType\"\n    )],\n    ipc_mode=\"ipcMode\",\n    memory=\"memory\",\n    network_mode=\"networkMode\",\n    pid_mode=\"pidMode\",\n    placement_constraints=[ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        expression=\"expression\"\n    )],\n    proxy_configuration=ecs.CfnTaskDefinition.ProxyConfigurationProperty(\n        container_name=\"containerName\",\n\n        # the properties below are optional\n        proxy_configuration_properties=[ecs.CfnTaskDefinition.KeyValuePairProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        type=\"type\"\n    ),\n    requires_compatibilities=[\"requiresCompatibilities\"],\n    runtime_platform=ecs.CfnTaskDefinition.RuntimePlatformProperty(\n        cpu_architecture=\"cpuArchitecture\",\n        operating_system_family=\"operatingSystemFamily\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    task_role_arn=\"taskRoleArn\",\n    volumes=[ecs.CfnTaskDefinition.VolumeProperty(\n        docker_volume_configuration=ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty(\n            autoprovision=False,\n            driver=\"driver\",\n            driver_opts={\n                \"driver_opts_key\": \"driverOpts\"\n            },\n            labels={\n                \"labels_key\": \"labels\"\n            },\n            scope=\"scope\"\n        ),\n        efs_volume_configuration=ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty(\n            filesystem_id=\"filesystemId\",\n\n            # the properties below are optional\n            authorization_config=ecs.CfnTaskDefinition.AuthorizationConfigProperty(\n                access_point_id=\"accessPointId\",\n                iam=\"iam\"\n            ),\n            root_directory=\"rootDirectory\",\n            transit_encryption=\"transitEncryption\",\n            transit_encryption_port=123\n        ),\n        host=ecs.CfnTaskDefinition.HostVolumePropertiesProperty(\n            source_path=\"sourcePath\"\n        ),\n        name=\"name\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnTaskDefinition cfnTaskDefinition = new CfnTaskDefinition(this, \"MyCfnTaskDefinition\", new CfnTaskDefinitionProps {\n    ContainerDefinitions = new [] { new ContainerDefinitionProperty {\n        Image = \"image\",\n        Name = \"name\",\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        DependsOn = new [] { new ContainerDependencyProperty {\n            Condition = \"condition\",\n            ContainerName = \"containerName\"\n        } },\n        DisableNetworking = false,\n        DnsSearchDomains = new [] { \"dnsSearchDomains\" },\n        DnsServers = new [] { \"dnsServers\" },\n        DockerLabels = new Dictionary<string, string> {\n            { \"dockerLabelsKey\", \"dockerLabels\" }\n        },\n        DockerSecurityOptions = new [] { \"dockerSecurityOptions\" },\n        EntryPoint = new [] { \"entryPoint\" },\n        Environment = new [] { new KeyValuePairProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        EnvironmentFiles = new [] { new EnvironmentFileProperty {\n            Type = \"type\",\n            Value = \"value\"\n        } },\n        Essential = false,\n        ExtraHosts = new [] { new HostEntryProperty {\n            Hostname = \"hostname\",\n            IpAddress = \"ipAddress\"\n        } },\n        FirelensConfiguration = new FirelensConfigurationProperty {\n            Options = new Dictionary<string, string> {\n                { \"optionsKey\", \"options\" }\n            },\n            Type = \"type\"\n        },\n        HealthCheck = new HealthCheckProperty {\n            Command = new [] { \"command\" },\n            Interval = 123,\n            Retries = 123,\n            StartPeriod = 123,\n            Timeout = 123\n        },\n        Hostname = \"hostname\",\n        Interactive = false,\n        Links = new [] { \"links\" },\n        LinuxParameters = new LinuxParametersProperty {\n            Capabilities = new KernelCapabilitiesProperty {\n                Add = new [] { \"add\" },\n                Drop = new [] { \"drop\" }\n            },\n            Devices = new [] { new DeviceProperty {\n                ContainerPath = \"containerPath\",\n                HostPath = \"hostPath\",\n                Permissions = new [] { \"permissions\" }\n            } },\n            InitProcessEnabled = false,\n            MaxSwap = 123,\n            SharedMemorySize = 123,\n            Swappiness = 123,\n            Tmpfs = new [] { new TmpfsProperty {\n                Size = 123,\n\n                // the properties below are optional\n                ContainerPath = \"containerPath\",\n                MountOptions = new [] { \"mountOptions\" }\n            } }\n        },\n        LogConfiguration = new LogConfigurationProperty {\n            LogDriver = \"logDriver\",\n\n            // the properties below are optional\n            Options = new Dictionary<string, string> {\n                { \"optionsKey\", \"options\" }\n            },\n            SecretOptions = new [] { new SecretProperty {\n                Name = \"name\",\n                ValueFrom = \"valueFrom\"\n            } }\n        },\n        Memory = 123,\n        MemoryReservation = 123,\n        MountPoints = new [] { new MountPointProperty {\n            ContainerPath = \"containerPath\",\n            ReadOnly = false,\n            SourceVolume = \"sourceVolume\"\n        } },\n        PortMappings = new [] { new PortMappingProperty {\n            AppProtocol = \"appProtocol\",\n            ContainerPort = 123,\n            ContainerPortRange = \"containerPortRange\",\n            HostPort = 123,\n            Name = \"name\",\n            Protocol = \"protocol\"\n        } },\n        Privileged = false,\n        PseudoTerminal = false,\n        ReadonlyRootFilesystem = false,\n        RepositoryCredentials = new RepositoryCredentialsProperty {\n            CredentialsParameter = \"credentialsParameter\"\n        },\n        ResourceRequirements = new [] { new ResourceRequirementProperty {\n            Type = \"type\",\n            Value = \"value\"\n        } },\n        Secrets = new [] { new SecretProperty {\n            Name = \"name\",\n            ValueFrom = \"valueFrom\"\n        } },\n        StartTimeout = 123,\n        StopTimeout = 123,\n        SystemControls = new [] { new SystemControlProperty {\n            Namespace = \"namespace\",\n            Value = \"value\"\n        } },\n        Ulimits = new [] { new UlimitProperty {\n            HardLimit = 123,\n            Name = \"name\",\n            SoftLimit = 123\n        } },\n        User = \"user\",\n        VolumesFrom = new [] { new VolumeFromProperty {\n            ReadOnly = false,\n            SourceContainer = \"sourceContainer\"\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    } },\n    Cpu = \"cpu\",\n    EphemeralStorage = new EphemeralStorageProperty {\n        SizeInGiB = 123\n    },\n    ExecutionRoleArn = \"executionRoleArn\",\n    Family = \"family\",\n    InferenceAccelerators = new [] { new InferenceAcceleratorProperty {\n        DeviceName = \"deviceName\",\n        DeviceType = \"deviceType\"\n    } },\n    IpcMode = \"ipcMode\",\n    Memory = \"memory\",\n    NetworkMode = \"networkMode\",\n    PidMode = \"pidMode\",\n    PlacementConstraints = new [] { new TaskDefinitionPlacementConstraintProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Expression = \"expression\"\n    } },\n    ProxyConfiguration = new ProxyConfigurationProperty {\n        ContainerName = \"containerName\",\n\n        // the properties below are optional\n        ProxyConfigurationProperties = new [] { new KeyValuePairProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        Type = \"type\"\n    },\n    RequiresCompatibilities = new [] { \"requiresCompatibilities\" },\n    RuntimePlatform = new RuntimePlatformProperty {\n        CpuArchitecture = \"cpuArchitecture\",\n        OperatingSystemFamily = \"operatingSystemFamily\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TaskRoleArn = \"taskRoleArn\",\n    Volumes = new [] { new VolumeProperty {\n        DockerVolumeConfiguration = new DockerVolumeConfigurationProperty {\n            Autoprovision = false,\n            Driver = \"driver\",\n            DriverOpts = new Dictionary<string, string> {\n                { \"driverOptsKey\", \"driverOpts\" }\n            },\n            Labels = new Dictionary<string, string> {\n                { \"labelsKey\", \"labels\" }\n            },\n            Scope = \"scope\"\n        },\n        EfsVolumeConfiguration = new EFSVolumeConfigurationProperty {\n            FilesystemId = \"filesystemId\",\n\n            // the properties below are optional\n            AuthorizationConfig = new AuthorizationConfigProperty {\n                AccessPointId = \"accessPointId\",\n                Iam = \"iam\"\n            },\n            RootDirectory = \"rootDirectory\",\n            TransitEncryption = \"transitEncryption\",\n            TransitEncryptionPort = 123\n        },\n        Host = new HostVolumePropertiesProperty {\n            SourcePath = \"sourcePath\"\n        },\n        Name = \"name\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnTaskDefinition cfnTaskDefinition = CfnTaskDefinition.Builder.create(this, \"MyCfnTaskDefinition\")\n        .containerDefinitions(List.of(ContainerDefinitionProperty.builder()\n                .image(\"image\")\n                .name(\"name\")\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .dependsOn(List.of(ContainerDependencyProperty.builder()\n                        .condition(\"condition\")\n                        .containerName(\"containerName\")\n                        .build()))\n                .disableNetworking(false)\n                .dnsSearchDomains(List.of(\"dnsSearchDomains\"))\n                .dnsServers(List.of(\"dnsServers\"))\n                .dockerLabels(Map.of(\n                        \"dockerLabelsKey\", \"dockerLabels\"))\n                .dockerSecurityOptions(List.of(\"dockerSecurityOptions\"))\n                .entryPoint(List.of(\"entryPoint\"))\n                .environment(List.of(KeyValuePairProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .environmentFiles(List.of(EnvironmentFileProperty.builder()\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build()))\n                .essential(false)\n                .extraHosts(List.of(HostEntryProperty.builder()\n                        .hostname(\"hostname\")\n                        .ipAddress(\"ipAddress\")\n                        .build()))\n                .firelensConfiguration(FirelensConfigurationProperty.builder()\n                        .options(Map.of(\n                                \"optionsKey\", \"options\"))\n                        .type(\"type\")\n                        .build())\n                .healthCheck(HealthCheckProperty.builder()\n                        .command(List.of(\"command\"))\n                        .interval(123)\n                        .retries(123)\n                        .startPeriod(123)\n                        .timeout(123)\n                        .build())\n                .hostname(\"hostname\")\n                .interactive(false)\n                .links(List.of(\"links\"))\n                .linuxParameters(LinuxParametersProperty.builder()\n                        .capabilities(KernelCapabilitiesProperty.builder()\n                                .add(List.of(\"add\"))\n                                .drop(List.of(\"drop\"))\n                                .build())\n                        .devices(List.of(DeviceProperty.builder()\n                                .containerPath(\"containerPath\")\n                                .hostPath(\"hostPath\")\n                                .permissions(List.of(\"permissions\"))\n                                .build()))\n                        .initProcessEnabled(false)\n                        .maxSwap(123)\n                        .sharedMemorySize(123)\n                        .swappiness(123)\n                        .tmpfs(List.of(TmpfsProperty.builder()\n                                .size(123)\n\n                                // the properties below are optional\n                                .containerPath(\"containerPath\")\n                                .mountOptions(List.of(\"mountOptions\"))\n                                .build()))\n                        .build())\n                .logConfiguration(LogConfigurationProperty.builder()\n                        .logDriver(\"logDriver\")\n\n                        // the properties below are optional\n                        .options(Map.of(\n                                \"optionsKey\", \"options\"))\n                        .secretOptions(List.of(SecretProperty.builder()\n                                .name(\"name\")\n                                .valueFrom(\"valueFrom\")\n                                .build()))\n                        .build())\n                .memory(123)\n                .memoryReservation(123)\n                .mountPoints(List.of(MountPointProperty.builder()\n                        .containerPath(\"containerPath\")\n                        .readOnly(false)\n                        .sourceVolume(\"sourceVolume\")\n                        .build()))\n                .portMappings(List.of(PortMappingProperty.builder()\n                        .appProtocol(\"appProtocol\")\n                        .containerPort(123)\n                        .containerPortRange(\"containerPortRange\")\n                        .hostPort(123)\n                        .name(\"name\")\n                        .protocol(\"protocol\")\n                        .build()))\n                .privileged(false)\n                .pseudoTerminal(false)\n                .readonlyRootFilesystem(false)\n                .repositoryCredentials(RepositoryCredentialsProperty.builder()\n                        .credentialsParameter(\"credentialsParameter\")\n                        .build())\n                .resourceRequirements(List.of(ResourceRequirementProperty.builder()\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build()))\n                .secrets(List.of(SecretProperty.builder()\n                        .name(\"name\")\n                        .valueFrom(\"valueFrom\")\n                        .build()))\n                .startTimeout(123)\n                .stopTimeout(123)\n                .systemControls(List.of(SystemControlProperty.builder()\n                        .namespace(\"namespace\")\n                        .value(\"value\")\n                        .build()))\n                .ulimits(List.of(UlimitProperty.builder()\n                        .hardLimit(123)\n                        .name(\"name\")\n                        .softLimit(123)\n                        .build()))\n                .user(\"user\")\n                .volumesFrom(List.of(VolumeFromProperty.builder()\n                        .readOnly(false)\n                        .sourceContainer(\"sourceContainer\")\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build()))\n        .cpu(\"cpu\")\n        .ephemeralStorage(EphemeralStorageProperty.builder()\n                .sizeInGiB(123)\n                .build())\n        .executionRoleArn(\"executionRoleArn\")\n        .family(\"family\")\n        .inferenceAccelerators(List.of(InferenceAcceleratorProperty.builder()\n                .deviceName(\"deviceName\")\n                .deviceType(\"deviceType\")\n                .build()))\n        .ipcMode(\"ipcMode\")\n        .memory(\"memory\")\n        .networkMode(\"networkMode\")\n        .pidMode(\"pidMode\")\n        .placementConstraints(List.of(TaskDefinitionPlacementConstraintProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .expression(\"expression\")\n                .build()))\n        .proxyConfiguration(ProxyConfigurationProperty.builder()\n                .containerName(\"containerName\")\n\n                // the properties below are optional\n                .proxyConfigurationProperties(List.of(KeyValuePairProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .type(\"type\")\n                .build())\n        .requiresCompatibilities(List.of(\"requiresCompatibilities\"))\n        .runtimePlatform(RuntimePlatformProperty.builder()\n                .cpuArchitecture(\"cpuArchitecture\")\n                .operatingSystemFamily(\"operatingSystemFamily\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .taskRoleArn(\"taskRoleArn\")\n        .volumes(List.of(VolumeProperty.builder()\n                .dockerVolumeConfiguration(DockerVolumeConfigurationProperty.builder()\n                        .autoprovision(false)\n                        .driver(\"driver\")\n                        .driverOpts(Map.of(\n                                \"driverOptsKey\", \"driverOpts\"))\n                        .labels(Map.of(\n                                \"labelsKey\", \"labels\"))\n                        .scope(\"scope\")\n                        .build())\n                .efsVolumeConfiguration(EFSVolumeConfigurationProperty.builder()\n                        .filesystemId(\"filesystemId\")\n\n                        // the properties below are optional\n                        .authorizationConfig(AuthorizationConfigProperty.builder()\n                                .accessPointId(\"accessPointId\")\n                                .iam(\"iam\")\n                                .build())\n                        .rootDirectory(\"rootDirectory\")\n                        .transitEncryption(\"transitEncryption\")\n                        .transitEncryptionPort(123)\n                        .build())\n                .host(HostVolumePropertiesProperty.builder()\n                        .sourcePath(\"sourcePath\")\n                        .build())\n                .name(\"name\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnTaskDefinition := ecs.NewCfnTaskDefinition(this, jsii.String(\"MyCfnTaskDefinition\"), &cfnTaskDefinitionProps{\n\tcontainerDefinitions: []interface{}{\n\t\t&containerDefinitionProperty{\n\t\t\timage: jsii.String(\"image\"),\n\t\t\tname: jsii.String(\"name\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tdependsOn: []interface{}{\n\t\t\t\t&containerDependencyProperty{\n\t\t\t\t\tcondition: jsii.String(\"condition\"),\n\t\t\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tdisableNetworking: jsii.Boolean(false),\n\t\t\tdnsSearchDomains: []*string{\n\t\t\t\tjsii.String(\"dnsSearchDomains\"),\n\t\t\t},\n\t\t\tdnsServers: []*string{\n\t\t\t\tjsii.String(\"dnsServers\"),\n\t\t\t},\n\t\t\tdockerLabels: map[string]*string{\n\t\t\t\t\"dockerLabelsKey\": jsii.String(\"dockerLabels\"),\n\t\t\t},\n\t\t\tdockerSecurityOptions: []*string{\n\t\t\t\tjsii.String(\"dockerSecurityOptions\"),\n\t\t\t},\n\t\t\tentryPoint: []*string{\n\t\t\t\tjsii.String(\"entryPoint\"),\n\t\t\t},\n\t\t\tenvironment: []interface{}{\n\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tenvironmentFiles: []interface{}{\n\t\t\t\t&environmentFileProperty{\n\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tessential: jsii.Boolean(false),\n\t\t\textraHosts: []interface{}{\n\t\t\t\t&hostEntryProperty{\n\t\t\t\t\thostname: jsii.String(\"hostname\"),\n\t\t\t\t\tipAddress: jsii.String(\"ipAddress\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tfirelensConfiguration: &firelensConfigurationProperty{\n\t\t\t\toptions: map[string]*string{\n\t\t\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t\t\t},\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t\thealthCheck: &healthCheckProperty{\n\t\t\t\tcommand: []*string{\n\t\t\t\t\tjsii.String(\"command\"),\n\t\t\t\t},\n\t\t\t\tinterval: jsii.Number(123),\n\t\t\t\tretries: jsii.Number(123),\n\t\t\t\tstartPeriod: jsii.Number(123),\n\t\t\t\ttimeout: jsii.Number(123),\n\t\t\t},\n\t\t\thostname: jsii.String(\"hostname\"),\n\t\t\tinteractive: jsii.Boolean(false),\n\t\t\tlinks: []*string{\n\t\t\t\tjsii.String(\"links\"),\n\t\t\t},\n\t\t\tlinuxParameters: &linuxParametersProperty{\n\t\t\t\tcapabilities: &kernelCapabilitiesProperty{\n\t\t\t\t\tadd: []*string{\n\t\t\t\t\t\tjsii.String(\"add\"),\n\t\t\t\t\t},\n\t\t\t\t\tdrop: []*string{\n\t\t\t\t\t\tjsii.String(\"drop\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdevices: []interface{}{\n\t\t\t\t\t&deviceProperty{\n\t\t\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\t\t\t\t\t\tpermissions: []*string{\n\t\t\t\t\t\t\tjsii.String(\"permissions\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tinitProcessEnabled: jsii.Boolean(false),\n\t\t\t\tmaxSwap: jsii.Number(123),\n\t\t\t\tsharedMemorySize: jsii.Number(123),\n\t\t\t\tswappiness: jsii.Number(123),\n\t\t\t\ttmpfs: []interface{}{\n\t\t\t\t\t&tmpfsProperty{\n\t\t\t\t\t\tsize: jsii.Number(123),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\t\t\tmountOptions: []*string{\n\t\t\t\t\t\t\tjsii.String(\"mountOptions\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tlogConfiguration: &logConfigurationProperty{\n\t\t\t\tlogDriver: jsii.String(\"logDriver\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\toptions: map[string]*string{\n\t\t\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t\t\t},\n\t\t\t\tsecretOptions: []interface{}{\n\t\t\t\t\t&secretProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemory: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t\tmountPoints: []interface{}{\n\t\t\t\t&mountPointProperty{\n\t\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\t\treadOnly: jsii.Boolean(false),\n\t\t\t\t\tsourceVolume: jsii.String(\"sourceVolume\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tportMappings: []interface{}{\n\t\t\t\t&portMappingProperty{\n\t\t\t\t\tappProtocol: jsii.String(\"appProtocol\"),\n\t\t\t\t\tcontainerPort: jsii.Number(123),\n\t\t\t\t\tcontainerPortRange: jsii.String(\"containerPortRange\"),\n\t\t\t\t\thostPort: jsii.Number(123),\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tprotocol: jsii.String(\"protocol\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tprivileged: jsii.Boolean(false),\n\t\t\tpseudoTerminal: jsii.Boolean(false),\n\t\t\treadonlyRootFilesystem: jsii.Boolean(false),\n\t\t\trepositoryCredentials: &repositoryCredentialsProperty{\n\t\t\t\tcredentialsParameter: jsii.String(\"credentialsParameter\"),\n\t\t\t},\n\t\t\tresourceRequirements: []interface{}{\n\t\t\t\t&resourceRequirementProperty{\n\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsecrets: []interface{}{\n\t\t\t\t&secretProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstartTimeout: jsii.Number(123),\n\t\t\tstopTimeout: jsii.Number(123),\n\t\t\tsystemControls: []interface{}{\n\t\t\t\t&systemControlProperty{\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tulimits: []interface{}{\n\t\t\t\t&ulimitProperty{\n\t\t\t\t\thardLimit: jsii.Number(123),\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tsoftLimit: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t\tuser: jsii.String(\"user\"),\n\t\t\tvolumesFrom: []interface{}{\n\t\t\t\t&volumeFromProperty{\n\t\t\t\t\treadOnly: jsii.Boolean(false),\n\t\t\t\t\tsourceContainer: jsii.String(\"sourceContainer\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t\t},\n\t},\n\tcpu: jsii.String(\"cpu\"),\n\tephemeralStorage: &ephemeralStorageProperty{\n\t\tsizeInGiB: jsii.Number(123),\n\t},\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tfamily: jsii.String(\"family\"),\n\tinferenceAccelerators: []interface{}{\n\t\t&inferenceAcceleratorProperty{\n\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\t\t\tdeviceType: jsii.String(\"deviceType\"),\n\t\t},\n\t},\n\tipcMode: jsii.String(\"ipcMode\"),\n\tmemory: jsii.String(\"memory\"),\n\tnetworkMode: jsii.String(\"networkMode\"),\n\tpidMode: jsii.String(\"pidMode\"),\n\tplacementConstraints: []interface{}{\n\t\t&taskDefinitionPlacementConstraintProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t},\n\t},\n\tproxyConfiguration: &proxyConfigurationProperty{\n\t\tcontainerName: jsii.String(\"containerName\"),\n\n\t\t// the properties below are optional\n\t\tproxyConfigurationProperties: []interface{}{\n\t\t\t&keyValuePairProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\ttype: jsii.String(\"type\"),\n\t},\n\trequiresCompatibilities: []*string{\n\t\tjsii.String(\"requiresCompatibilities\"),\n\t},\n\truntimePlatform: &runtimePlatformProperty{\n\t\tcpuArchitecture: jsii.String(\"cpuArchitecture\"),\n\t\toperatingSystemFamily: jsii.String(\"operatingSystemFamily\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttaskRoleArn: jsii.String(\"taskRoleArn\"),\n\tvolumes: []interface{}{\n\t\t&volumeProperty{\n\t\t\tdockerVolumeConfiguration: &dockerVolumeConfigurationProperty{\n\t\t\t\tautoprovision: jsii.Boolean(false),\n\t\t\t\tdriver: jsii.String(\"driver\"),\n\t\t\t\tdriverOpts: map[string]*string{\n\t\t\t\t\t\"driverOptsKey\": jsii.String(\"driverOpts\"),\n\t\t\t\t},\n\t\t\t\tlabels: map[string]*string{\n\t\t\t\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t\t\t\t},\n\t\t\t\tscope: jsii.String(\"scope\"),\n\t\t\t},\n\t\t\tefsVolumeConfiguration: &eFSVolumeConfigurationProperty{\n\t\t\t\tfilesystemId: jsii.String(\"filesystemId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tauthorizationConfig: &authorizationConfigProperty{\n\t\t\t\t\taccessPointId: jsii.String(\"accessPointId\"),\n\t\t\t\t\tiam: jsii.String(\"iam\"),\n\t\t\t\t},\n\t\t\t\trootDirectory: jsii.String(\"rootDirectory\"),\n\t\t\t\ttransitEncryption: jsii.String(\"transitEncryption\"),\n\t\t\t\ttransitEncryptionPort: jsii.Number(123),\n\t\t\t},\n\t\t\thost: &hostVolumePropertiesProperty{\n\t\t\t\tsourcePath: jsii.String(\"sourcePath\"),\n\t\t\t},\n\t\t\tname: jsii.String(\"name\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskDefinition = new ecs.CfnTaskDefinition(this, 'MyCfnTaskDefinition', /* all optional props */ {\n  containerDefinitions: [{\n    image: 'image',\n    name: 'name',\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    dependsOn: [{\n      condition: 'condition',\n      containerName: 'containerName',\n    }],\n    disableNetworking: false,\n    dnsSearchDomains: ['dnsSearchDomains'],\n    dnsServers: ['dnsServers'],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    dockerSecurityOptions: ['dockerSecurityOptions'],\n    entryPoint: ['entryPoint'],\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    environmentFiles: [{\n      type: 'type',\n      value: 'value',\n    }],\n    essential: false,\n    extraHosts: [{\n      hostname: 'hostname',\n      ipAddress: 'ipAddress',\n    }],\n    firelensConfiguration: {\n      options: {\n        optionsKey: 'options',\n      },\n      type: 'type',\n    },\n    healthCheck: {\n      command: ['command'],\n      interval: 123,\n      retries: 123,\n      startPeriod: 123,\n      timeout: 123,\n    },\n    hostname: 'hostname',\n    interactive: false,\n    links: ['links'],\n    linuxParameters: {\n      capabilities: {\n        add: ['add'],\n        drop: ['drop'],\n      },\n      devices: [{\n        containerPath: 'containerPath',\n        hostPath: 'hostPath',\n        permissions: ['permissions'],\n      }],\n      initProcessEnabled: false,\n      maxSwap: 123,\n      sharedMemorySize: 123,\n      swappiness: 123,\n      tmpfs: [{\n        size: 123,\n\n        // the properties below are optional\n        containerPath: 'containerPath',\n        mountOptions: ['mountOptions'],\n      }],\n    },\n    logConfiguration: {\n      logDriver: 'logDriver',\n\n      // the properties below are optional\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    memory: 123,\n    memoryReservation: 123,\n    mountPoints: [{\n      containerPath: 'containerPath',\n      readOnly: false,\n      sourceVolume: 'sourceVolume',\n    }],\n    portMappings: [{\n      appProtocol: 'appProtocol',\n      containerPort: 123,\n      containerPortRange: 'containerPortRange',\n      hostPort: 123,\n      name: 'name',\n      protocol: 'protocol',\n    }],\n    privileged: false,\n    pseudoTerminal: false,\n    readonlyRootFilesystem: false,\n    repositoryCredentials: {\n      credentialsParameter: 'credentialsParameter',\n    },\n    resourceRequirements: [{\n      type: 'type',\n      value: 'value',\n    }],\n    secrets: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n    startTimeout: 123,\n    stopTimeout: 123,\n    systemControls: [{\n      namespace: 'namespace',\n      value: 'value',\n    }],\n    ulimits: [{\n      hardLimit: 123,\n      name: 'name',\n      softLimit: 123,\n    }],\n    user: 'user',\n    volumesFrom: [{\n      readOnly: false,\n      sourceContainer: 'sourceContainer',\n    }],\n    workingDirectory: 'workingDirectory',\n  }],\n  cpu: 'cpu',\n  ephemeralStorage: {\n    sizeInGiB: 123,\n  },\n  executionRoleArn: 'executionRoleArn',\n  family: 'family',\n  inferenceAccelerators: [{\n    deviceName: 'deviceName',\n    deviceType: 'deviceType',\n  }],\n  ipcMode: 'ipcMode',\n  memory: 'memory',\n  networkMode: 'networkMode',\n  pidMode: 'pidMode',\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  proxyConfiguration: {\n    containerName: 'containerName',\n\n    // the properties below are optional\n    proxyConfigurationProperties: [{\n      name: 'name',\n      value: 'value',\n    }],\n    type: 'type',\n  },\n  requiresCompatibilities: ['requiresCompatibilities'],\n  runtimePlatform: {\n    cpuArchitecture: 'cpuArchitecture',\n    operatingSystemFamily: 'operatingSystemFamily',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskRoleArn: 'taskRoleArn',\n  volumes: [{\n    dockerVolumeConfiguration: {\n      autoprovision: false,\n      driver: 'driver',\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n      scope: 'scope',\n    },\n    efsVolumeConfiguration: {\n      filesystemId: 'filesystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n    name: 'name',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition",
        "@aws-cdk/aws-ecs.CfnTaskDefinitionProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTaskDefinition = new ecs.CfnTaskDefinition(this, 'MyCfnTaskDefinition', /* all optional props */ {\n  containerDefinitions: [{\n    image: 'image',\n    name: 'name',\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    dependsOn: [{\n      condition: 'condition',\n      containerName: 'containerName',\n    }],\n    disableNetworking: false,\n    dnsSearchDomains: ['dnsSearchDomains'],\n    dnsServers: ['dnsServers'],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    dockerSecurityOptions: ['dockerSecurityOptions'],\n    entryPoint: ['entryPoint'],\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    environmentFiles: [{\n      type: 'type',\n      value: 'value',\n    }],\n    essential: false,\n    extraHosts: [{\n      hostname: 'hostname',\n      ipAddress: 'ipAddress',\n    }],\n    firelensConfiguration: {\n      options: {\n        optionsKey: 'options',\n      },\n      type: 'type',\n    },\n    healthCheck: {\n      command: ['command'],\n      interval: 123,\n      retries: 123,\n      startPeriod: 123,\n      timeout: 123,\n    },\n    hostname: 'hostname',\n    interactive: false,\n    links: ['links'],\n    linuxParameters: {\n      capabilities: {\n        add: ['add'],\n        drop: ['drop'],\n      },\n      devices: [{\n        containerPath: 'containerPath',\n        hostPath: 'hostPath',\n        permissions: ['permissions'],\n      }],\n      initProcessEnabled: false,\n      maxSwap: 123,\n      sharedMemorySize: 123,\n      swappiness: 123,\n      tmpfs: [{\n        size: 123,\n\n        // the properties below are optional\n        containerPath: 'containerPath',\n        mountOptions: ['mountOptions'],\n      }],\n    },\n    logConfiguration: {\n      logDriver: 'logDriver',\n\n      // the properties below are optional\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    memory: 123,\n    memoryReservation: 123,\n    mountPoints: [{\n      containerPath: 'containerPath',\n      readOnly: false,\n      sourceVolume: 'sourceVolume',\n    }],\n    portMappings: [{\n      appProtocol: 'appProtocol',\n      containerPort: 123,\n      containerPortRange: 'containerPortRange',\n      hostPort: 123,\n      name: 'name',\n      protocol: 'protocol',\n    }],\n    privileged: false,\n    pseudoTerminal: false,\n    readonlyRootFilesystem: false,\n    repositoryCredentials: {\n      credentialsParameter: 'credentialsParameter',\n    },\n    resourceRequirements: [{\n      type: 'type',\n      value: 'value',\n    }],\n    secrets: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n    startTimeout: 123,\n    stopTimeout: 123,\n    systemControls: [{\n      namespace: 'namespace',\n      value: 'value',\n    }],\n    ulimits: [{\n      hardLimit: 123,\n      name: 'name',\n      softLimit: 123,\n    }],\n    user: 'user',\n    volumesFrom: [{\n      readOnly: false,\n      sourceContainer: 'sourceContainer',\n    }],\n    workingDirectory: 'workingDirectory',\n  }],\n  cpu: 'cpu',\n  ephemeralStorage: {\n    sizeInGiB: 123,\n  },\n  executionRoleArn: 'executionRoleArn',\n  family: 'family',\n  inferenceAccelerators: [{\n    deviceName: 'deviceName',\n    deviceType: 'deviceType',\n  }],\n  ipcMode: 'ipcMode',\n  memory: 'memory',\n  networkMode: 'networkMode',\n  pidMode: 'pidMode',\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  proxyConfiguration: {\n    containerName: 'containerName',\n\n    // the properties below are optional\n    proxyConfigurationProperties: [{\n      name: 'name',\n      value: 'value',\n    }],\n    type: 'type',\n  },\n  requiresCompatibilities: ['requiresCompatibilities'],\n  runtimePlatform: {\n    cpuArchitecture: 'cpuArchitecture',\n    operatingSystemFamily: 'operatingSystemFamily',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskRoleArn: 'taskRoleArn',\n  volumes: [{\n    dockerVolumeConfiguration: {\n      autoprovision: false,\n      driver: 'driver',\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n      scope: 'scope',\n    },\n    efsVolumeConfiguration: {\n      filesystemId: 'filesystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n    name: 'name',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 19,
        "10": 83,
        "75": 152,
        "91": 10,
        "104": 1,
        "192": 32,
        "193": 39,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 148,
        "290": 1
      },
      "fqnsFingerprint": "88d8479ad321ac3f956d34a9e4b1389882810b369718741b11ea756a4720f156"
    },
    "6d50ed91782911db313ee4d423e8a1ec2d5ea18fd83012363a9b80edaf846510": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nauthorization_config_property = ecs.CfnTaskDefinition.AuthorizationConfigProperty(\n    access_point_id=\"accessPointId\",\n    iam=\"iam\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAuthorizationConfigProperty authorizationConfigProperty = new AuthorizationConfigProperty {\n    AccessPointId = \"accessPointId\",\n    Iam = \"iam\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAuthorizationConfigProperty authorizationConfigProperty = AuthorizationConfigProperty.builder()\n        .accessPointId(\"accessPointId\")\n        .iam(\"iam\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nauthorizationConfigProperty := &authorizationConfigProperty{\n\taccessPointId: jsii.String(\"accessPointId\"),\n\tiam: jsii.String(\"iam\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst authorizationConfigProperty: ecs.CfnTaskDefinition.AuthorizationConfigProperty = {\n  accessPointId: 'accessPointId',\n  iam: 'iam',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.AuthorizationConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.AuthorizationConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst authorizationConfigProperty: ecs.CfnTaskDefinition.AuthorizationConfigProperty = {\n  accessPointId: 'accessPointId',\n  iam: 'iam',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7b609ca3026aa6d756ccbfab254bf369f80739cb3ece3c0bd9e23da25cecca81"
    },
    "ee13847087002e0736a2f0d526b2a7c771a45181341e99c74151c9b288f4ddbc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncontainer_definition_property = ecs.CfnTaskDefinition.ContainerDefinitionProperty(\n    image=\"image\",\n    name=\"name\",\n\n    # the properties below are optional\n    command=[\"command\"],\n    cpu=123,\n    depends_on=[ecs.CfnTaskDefinition.ContainerDependencyProperty(\n        condition=\"condition\",\n        container_name=\"containerName\"\n    )],\n    disable_networking=False,\n    dns_search_domains=[\"dnsSearchDomains\"],\n    dns_servers=[\"dnsServers\"],\n    docker_labels={\n        \"docker_labels_key\": \"dockerLabels\"\n    },\n    docker_security_options=[\"dockerSecurityOptions\"],\n    entry_point=[\"entryPoint\"],\n    environment=[ecs.CfnTaskDefinition.KeyValuePairProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    environment_files=[ecs.CfnTaskDefinition.EnvironmentFileProperty(\n        type=\"type\",\n        value=\"value\"\n    )],\n    essential=False,\n    extra_hosts=[ecs.CfnTaskDefinition.HostEntryProperty(\n        hostname=\"hostname\",\n        ip_address=\"ipAddress\"\n    )],\n    firelens_configuration=ecs.CfnTaskDefinition.FirelensConfigurationProperty(\n        options={\n            \"options_key\": \"options\"\n        },\n        type=\"type\"\n    ),\n    health_check=ecs.CfnTaskDefinition.HealthCheckProperty(\n        command=[\"command\"],\n        interval=123,\n        retries=123,\n        start_period=123,\n        timeout=123\n    ),\n    hostname=\"hostname\",\n    interactive=False,\n    links=[\"links\"],\n    linux_parameters=ecs.CfnTaskDefinition.LinuxParametersProperty(\n        capabilities=ecs.CfnTaskDefinition.KernelCapabilitiesProperty(\n            add=[\"add\"],\n            drop=[\"drop\"]\n        ),\n        devices=[ecs.CfnTaskDefinition.DeviceProperty(\n            container_path=\"containerPath\",\n            host_path=\"hostPath\",\n            permissions=[\"permissions\"]\n        )],\n        init_process_enabled=False,\n        max_swap=123,\n        shared_memory_size=123,\n        swappiness=123,\n        tmpfs=[ecs.CfnTaskDefinition.TmpfsProperty(\n            size=123,\n\n            # the properties below are optional\n            container_path=\"containerPath\",\n            mount_options=[\"mountOptions\"]\n        )]\n    ),\n    log_configuration=ecs.CfnTaskDefinition.LogConfigurationProperty(\n        log_driver=\"logDriver\",\n\n        # the properties below are optional\n        options={\n            \"options_key\": \"options\"\n        },\n        secret_options=[ecs.CfnTaskDefinition.SecretProperty(\n            name=\"name\",\n            value_from=\"valueFrom\"\n        )]\n    ),\n    memory=123,\n    memory_reservation=123,\n    mount_points=[ecs.CfnTaskDefinition.MountPointProperty(\n        container_path=\"containerPath\",\n        read_only=False,\n        source_volume=\"sourceVolume\"\n    )],\n    port_mappings=[ecs.CfnTaskDefinition.PortMappingProperty(\n        app_protocol=\"appProtocol\",\n        container_port=123,\n        container_port_range=\"containerPortRange\",\n        host_port=123,\n        name=\"name\",\n        protocol=\"protocol\"\n    )],\n    privileged=False,\n    pseudo_terminal=False,\n    readonly_root_filesystem=False,\n    repository_credentials=ecs.CfnTaskDefinition.RepositoryCredentialsProperty(\n        credentials_parameter=\"credentialsParameter\"\n    ),\n    resource_requirements=[ecs.CfnTaskDefinition.ResourceRequirementProperty(\n        type=\"type\",\n        value=\"value\"\n    )],\n    secrets=[ecs.CfnTaskDefinition.SecretProperty(\n        name=\"name\",\n        value_from=\"valueFrom\"\n    )],\n    start_timeout=123,\n    stop_timeout=123,\n    system_controls=[ecs.CfnTaskDefinition.SystemControlProperty(\n        namespace=\"namespace\",\n        value=\"value\"\n    )],\n    ulimits=[ecs.CfnTaskDefinition.UlimitProperty(\n        hard_limit=123,\n        name=\"name\",\n        soft_limit=123\n    )],\n    user=\"user\",\n    volumes_from=[ecs.CfnTaskDefinition.VolumeFromProperty(\n        read_only=False,\n        source_container=\"sourceContainer\"\n    )],\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nContainerDefinitionProperty containerDefinitionProperty = new ContainerDefinitionProperty {\n    Image = \"image\",\n    Name = \"name\",\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    Cpu = 123,\n    DependsOn = new [] { new ContainerDependencyProperty {\n        Condition = \"condition\",\n        ContainerName = \"containerName\"\n    } },\n    DisableNetworking = false,\n    DnsSearchDomains = new [] { \"dnsSearchDomains\" },\n    DnsServers = new [] { \"dnsServers\" },\n    DockerLabels = new Dictionary<string, string> {\n        { \"dockerLabelsKey\", \"dockerLabels\" }\n    },\n    DockerSecurityOptions = new [] { \"dockerSecurityOptions\" },\n    EntryPoint = new [] { \"entryPoint\" },\n    Environment = new [] { new KeyValuePairProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    EnvironmentFiles = new [] { new EnvironmentFileProperty {\n        Type = \"type\",\n        Value = \"value\"\n    } },\n    Essential = false,\n    ExtraHosts = new [] { new HostEntryProperty {\n        Hostname = \"hostname\",\n        IpAddress = \"ipAddress\"\n    } },\n    FirelensConfiguration = new FirelensConfigurationProperty {\n        Options = new Dictionary<string, string> {\n            { \"optionsKey\", \"options\" }\n        },\n        Type = \"type\"\n    },\n    HealthCheck = new HealthCheckProperty {\n        Command = new [] { \"command\" },\n        Interval = 123,\n        Retries = 123,\n        StartPeriod = 123,\n        Timeout = 123\n    },\n    Hostname = \"hostname\",\n    Interactive = false,\n    Links = new [] { \"links\" },\n    LinuxParameters = new LinuxParametersProperty {\n        Capabilities = new KernelCapabilitiesProperty {\n            Add = new [] { \"add\" },\n            Drop = new [] { \"drop\" }\n        },\n        Devices = new [] { new DeviceProperty {\n            ContainerPath = \"containerPath\",\n            HostPath = \"hostPath\",\n            Permissions = new [] { \"permissions\" }\n        } },\n        InitProcessEnabled = false,\n        MaxSwap = 123,\n        SharedMemorySize = 123,\n        Swappiness = 123,\n        Tmpfs = new [] { new TmpfsProperty {\n            Size = 123,\n\n            // the properties below are optional\n            ContainerPath = \"containerPath\",\n            MountOptions = new [] { \"mountOptions\" }\n        } }\n    },\n    LogConfiguration = new LogConfigurationProperty {\n        LogDriver = \"logDriver\",\n\n        // the properties below are optional\n        Options = new Dictionary<string, string> {\n            { \"optionsKey\", \"options\" }\n        },\n        SecretOptions = new [] { new SecretProperty {\n            Name = \"name\",\n            ValueFrom = \"valueFrom\"\n        } }\n    },\n    Memory = 123,\n    MemoryReservation = 123,\n    MountPoints = new [] { new MountPointProperty {\n        ContainerPath = \"containerPath\",\n        ReadOnly = false,\n        SourceVolume = \"sourceVolume\"\n    } },\n    PortMappings = new [] { new PortMappingProperty {\n        AppProtocol = \"appProtocol\",\n        ContainerPort = 123,\n        ContainerPortRange = \"containerPortRange\",\n        HostPort = 123,\n        Name = \"name\",\n        Protocol = \"protocol\"\n    } },\n    Privileged = false,\n    PseudoTerminal = false,\n    ReadonlyRootFilesystem = false,\n    RepositoryCredentials = new RepositoryCredentialsProperty {\n        CredentialsParameter = \"credentialsParameter\"\n    },\n    ResourceRequirements = new [] { new ResourceRequirementProperty {\n        Type = \"type\",\n        Value = \"value\"\n    } },\n    Secrets = new [] { new SecretProperty {\n        Name = \"name\",\n        ValueFrom = \"valueFrom\"\n    } },\n    StartTimeout = 123,\n    StopTimeout = 123,\n    SystemControls = new [] { new SystemControlProperty {\n        Namespace = \"namespace\",\n        Value = \"value\"\n    } },\n    Ulimits = new [] { new UlimitProperty {\n        HardLimit = 123,\n        Name = \"name\",\n        SoftLimit = 123\n    } },\n    User = \"user\",\n    VolumesFrom = new [] { new VolumeFromProperty {\n        ReadOnly = false,\n        SourceContainer = \"sourceContainer\"\n    } },\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nContainerDefinitionProperty containerDefinitionProperty = ContainerDefinitionProperty.builder()\n        .image(\"image\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .cpu(123)\n        .dependsOn(List.of(ContainerDependencyProperty.builder()\n                .condition(\"condition\")\n                .containerName(\"containerName\")\n                .build()))\n        .disableNetworking(false)\n        .dnsSearchDomains(List.of(\"dnsSearchDomains\"))\n        .dnsServers(List.of(\"dnsServers\"))\n        .dockerLabels(Map.of(\n                \"dockerLabelsKey\", \"dockerLabels\"))\n        .dockerSecurityOptions(List.of(\"dockerSecurityOptions\"))\n        .entryPoint(List.of(\"entryPoint\"))\n        .environment(List.of(KeyValuePairProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .environmentFiles(List.of(EnvironmentFileProperty.builder()\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .essential(false)\n        .extraHosts(List.of(HostEntryProperty.builder()\n                .hostname(\"hostname\")\n                .ipAddress(\"ipAddress\")\n                .build()))\n        .firelensConfiguration(FirelensConfigurationProperty.builder()\n                .options(Map.of(\n                        \"optionsKey\", \"options\"))\n                .type(\"type\")\n                .build())\n        .healthCheck(HealthCheckProperty.builder()\n                .command(List.of(\"command\"))\n                .interval(123)\n                .retries(123)\n                .startPeriod(123)\n                .timeout(123)\n                .build())\n        .hostname(\"hostname\")\n        .interactive(false)\n        .links(List.of(\"links\"))\n        .linuxParameters(LinuxParametersProperty.builder()\n                .capabilities(KernelCapabilitiesProperty.builder()\n                        .add(List.of(\"add\"))\n                        .drop(List.of(\"drop\"))\n                        .build())\n                .devices(List.of(DeviceProperty.builder()\n                        .containerPath(\"containerPath\")\n                        .hostPath(\"hostPath\")\n                        .permissions(List.of(\"permissions\"))\n                        .build()))\n                .initProcessEnabled(false)\n                .maxSwap(123)\n                .sharedMemorySize(123)\n                .swappiness(123)\n                .tmpfs(List.of(TmpfsProperty.builder()\n                        .size(123)\n\n                        // the properties below are optional\n                        .containerPath(\"containerPath\")\n                        .mountOptions(List.of(\"mountOptions\"))\n                        .build()))\n                .build())\n        .logConfiguration(LogConfigurationProperty.builder()\n                .logDriver(\"logDriver\")\n\n                // the properties below are optional\n                .options(Map.of(\n                        \"optionsKey\", \"options\"))\n                .secretOptions(List.of(SecretProperty.builder()\n                        .name(\"name\")\n                        .valueFrom(\"valueFrom\")\n                        .build()))\n                .build())\n        .memory(123)\n        .memoryReservation(123)\n        .mountPoints(List.of(MountPointProperty.builder()\n                .containerPath(\"containerPath\")\n                .readOnly(false)\n                .sourceVolume(\"sourceVolume\")\n                .build()))\n        .portMappings(List.of(PortMappingProperty.builder()\n                .appProtocol(\"appProtocol\")\n                .containerPort(123)\n                .containerPortRange(\"containerPortRange\")\n                .hostPort(123)\n                .name(\"name\")\n                .protocol(\"protocol\")\n                .build()))\n        .privileged(false)\n        .pseudoTerminal(false)\n        .readonlyRootFilesystem(false)\n        .repositoryCredentials(RepositoryCredentialsProperty.builder()\n                .credentialsParameter(\"credentialsParameter\")\n                .build())\n        .resourceRequirements(List.of(ResourceRequirementProperty.builder()\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .secrets(List.of(SecretProperty.builder()\n                .name(\"name\")\n                .valueFrom(\"valueFrom\")\n                .build()))\n        .startTimeout(123)\n        .stopTimeout(123)\n        .systemControls(List.of(SystemControlProperty.builder()\n                .namespace(\"namespace\")\n                .value(\"value\")\n                .build()))\n        .ulimits(List.of(UlimitProperty.builder()\n                .hardLimit(123)\n                .name(\"name\")\n                .softLimit(123)\n                .build()))\n        .user(\"user\")\n        .volumesFrom(List.of(VolumeFromProperty.builder()\n                .readOnly(false)\n                .sourceContainer(\"sourceContainer\")\n                .build()))\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncontainerDefinitionProperty := &containerDefinitionProperty{\n\timage: jsii.String(\"image\"),\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tcpu: jsii.Number(123),\n\tdependsOn: []interface{}{\n\t\t&containerDependencyProperty{\n\t\t\tcondition: jsii.String(\"condition\"),\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t},\n\t},\n\tdisableNetworking: jsii.Boolean(false),\n\tdnsSearchDomains: []*string{\n\t\tjsii.String(\"dnsSearchDomains\"),\n\t},\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tdockerLabels: map[string]*string{\n\t\t\"dockerLabelsKey\": jsii.String(\"dockerLabels\"),\n\t},\n\tdockerSecurityOptions: []*string{\n\t\tjsii.String(\"dockerSecurityOptions\"),\n\t},\n\tentryPoint: []*string{\n\t\tjsii.String(\"entryPoint\"),\n\t},\n\tenvironment: []interface{}{\n\t\t&keyValuePairProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tenvironmentFiles: []interface{}{\n\t\t&environmentFileProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tessential: jsii.Boolean(false),\n\textraHosts: []interface{}{\n\t\t&hostEntryProperty{\n\t\t\thostname: jsii.String(\"hostname\"),\n\t\t\tipAddress: jsii.String(\"ipAddress\"),\n\t\t},\n\t},\n\tfirelensConfiguration: &firelensConfigurationProperty{\n\t\toptions: map[string]*string{\n\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t},\n\t\ttype: jsii.String(\"type\"),\n\t},\n\thealthCheck: &healthCheckProperty{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\t\tinterval: jsii.Number(123),\n\t\tretries: jsii.Number(123),\n\t\tstartPeriod: jsii.Number(123),\n\t\ttimeout: jsii.Number(123),\n\t},\n\thostname: jsii.String(\"hostname\"),\n\tinteractive: jsii.Boolean(false),\n\tlinks: []*string{\n\t\tjsii.String(\"links\"),\n\t},\n\tlinuxParameters: &linuxParametersProperty{\n\t\tcapabilities: &kernelCapabilitiesProperty{\n\t\t\tadd: []*string{\n\t\t\t\tjsii.String(\"add\"),\n\t\t\t},\n\t\t\tdrop: []*string{\n\t\t\t\tjsii.String(\"drop\"),\n\t\t\t},\n\t\t},\n\t\tdevices: []interface{}{\n\t\t\t&deviceProperty{\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\t\t\t\tpermissions: []*string{\n\t\t\t\t\tjsii.String(\"permissions\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tinitProcessEnabled: jsii.Boolean(false),\n\t\tmaxSwap: jsii.Number(123),\n\t\tsharedMemorySize: jsii.Number(123),\n\t\tswappiness: jsii.Number(123),\n\t\ttmpfs: []interface{}{\n\t\t\t&tmpfsProperty{\n\t\t\t\tsize: jsii.Number(123),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\tmountOptions: []*string{\n\t\t\t\t\tjsii.String(\"mountOptions\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tlogConfiguration: &logConfigurationProperty{\n\t\tlogDriver: jsii.String(\"logDriver\"),\n\n\t\t// the properties below are optional\n\t\toptions: map[string]*string{\n\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t},\n\t\tsecretOptions: []interface{}{\n\t\t\t&secretProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t},\n\t\t},\n\t},\n\tmemory: jsii.Number(123),\n\tmemoryReservation: jsii.Number(123),\n\tmountPoints: []interface{}{\n\t\t&mountPointProperty{\n\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\treadOnly: jsii.Boolean(false),\n\t\t\tsourceVolume: jsii.String(\"sourceVolume\"),\n\t\t},\n\t},\n\tportMappings: []interface{}{\n\t\t&portMappingProperty{\n\t\t\tappProtocol: jsii.String(\"appProtocol\"),\n\t\t\tcontainerPort: jsii.Number(123),\n\t\t\tcontainerPortRange: jsii.String(\"containerPortRange\"),\n\t\t\thostPort: jsii.Number(123),\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tprotocol: jsii.String(\"protocol\"),\n\t\t},\n\t},\n\tprivileged: jsii.Boolean(false),\n\tpseudoTerminal: jsii.Boolean(false),\n\treadonlyRootFilesystem: jsii.Boolean(false),\n\trepositoryCredentials: &repositoryCredentialsProperty{\n\t\tcredentialsParameter: jsii.String(\"credentialsParameter\"),\n\t},\n\tresourceRequirements: []interface{}{\n\t\t&resourceRequirementProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tsecrets: []interface{}{\n\t\t&secretProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t},\n\t},\n\tstartTimeout: jsii.Number(123),\n\tstopTimeout: jsii.Number(123),\n\tsystemControls: []interface{}{\n\t\t&systemControlProperty{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tulimits: []interface{}{\n\t\t&ulimitProperty{\n\t\t\thardLimit: jsii.Number(123),\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tsoftLimit: jsii.Number(123),\n\t\t},\n\t},\n\tuser: jsii.String(\"user\"),\n\tvolumesFrom: []interface{}{\n\t\t&volumeFromProperty{\n\t\t\treadOnly: jsii.Boolean(false),\n\t\t\tsourceContainer: jsii.String(\"sourceContainer\"),\n\t\t},\n\t},\n\tworkingDirectory: jsii.String(\"workingDirectory\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst containerDefinitionProperty: ecs.CfnTaskDefinition.ContainerDefinitionProperty = {\n  image: 'image',\n  name: 'name',\n\n  // the properties below are optional\n  command: ['command'],\n  cpu: 123,\n  dependsOn: [{\n    condition: 'condition',\n    containerName: 'containerName',\n  }],\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: [{\n    name: 'name',\n    value: 'value',\n  }],\n  environmentFiles: [{\n    type: 'type',\n    value: 'value',\n  }],\n  essential: false,\n  extraHosts: [{\n    hostname: 'hostname',\n    ipAddress: 'ipAddress',\n  }],\n  firelensConfiguration: {\n    options: {\n      optionsKey: 'options',\n    },\n    type: 'type',\n  },\n  healthCheck: {\n    command: ['command'],\n    interval: 123,\n    retries: 123,\n    startPeriod: 123,\n    timeout: 123,\n  },\n  hostname: 'hostname',\n  interactive: false,\n  links: ['links'],\n  linuxParameters: {\n    capabilities: {\n      add: ['add'],\n      drop: ['drop'],\n    },\n    devices: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n      permissions: ['permissions'],\n    }],\n    initProcessEnabled: false,\n    maxSwap: 123,\n    sharedMemorySize: 123,\n    swappiness: 123,\n    tmpfs: [{\n      size: 123,\n\n      // the properties below are optional\n      containerPath: 'containerPath',\n      mountOptions: ['mountOptions'],\n    }],\n  },\n  logConfiguration: {\n    logDriver: 'logDriver',\n\n    // the properties below are optional\n    options: {\n      optionsKey: 'options',\n    },\n    secretOptions: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n  },\n  memory: 123,\n  memoryReservation: 123,\n  mountPoints: [{\n    containerPath: 'containerPath',\n    readOnly: false,\n    sourceVolume: 'sourceVolume',\n  }],\n  portMappings: [{\n    appProtocol: 'appProtocol',\n    containerPort: 123,\n    containerPortRange: 'containerPortRange',\n    hostPort: 123,\n    name: 'name',\n    protocol: 'protocol',\n  }],\n  privileged: false,\n  pseudoTerminal: false,\n  readonlyRootFilesystem: false,\n  repositoryCredentials: {\n    credentialsParameter: 'credentialsParameter',\n  },\n  resourceRequirements: [{\n    type: 'type',\n    value: 'value',\n  }],\n  secrets: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n  startTimeout: 123,\n  stopTimeout: 123,\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  ulimits: [{\n    hardLimit: 123,\n    name: 'name',\n    softLimit: 123,\n  }],\n  user: 'user',\n  volumesFrom: [{\n    readOnly: false,\n    sourceContainer: 'sourceContainer',\n  }],\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDefinitionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerDefinitionProperty: ecs.CfnTaskDefinition.ContainerDefinitionProperty = {\n  image: 'image',\n  name: 'name',\n\n  // the properties below are optional\n  command: ['command'],\n  cpu: 123,\n  dependsOn: [{\n    condition: 'condition',\n    containerName: 'containerName',\n  }],\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: [{\n    name: 'name',\n    value: 'value',\n  }],\n  environmentFiles: [{\n    type: 'type',\n    value: 'value',\n  }],\n  essential: false,\n  extraHosts: [{\n    hostname: 'hostname',\n    ipAddress: 'ipAddress',\n  }],\n  firelensConfiguration: {\n    options: {\n      optionsKey: 'options',\n    },\n    type: 'type',\n  },\n  healthCheck: {\n    command: ['command'],\n    interval: 123,\n    retries: 123,\n    startPeriod: 123,\n    timeout: 123,\n  },\n  hostname: 'hostname',\n  interactive: false,\n  links: ['links'],\n  linuxParameters: {\n    capabilities: {\n      add: ['add'],\n      drop: ['drop'],\n    },\n    devices: [{\n      containerPath: 'containerPath',\n      hostPath: 'hostPath',\n      permissions: ['permissions'],\n    }],\n    initProcessEnabled: false,\n    maxSwap: 123,\n    sharedMemorySize: 123,\n    swappiness: 123,\n    tmpfs: [{\n      size: 123,\n\n      // the properties below are optional\n      containerPath: 'containerPath',\n      mountOptions: ['mountOptions'],\n    }],\n  },\n  logConfiguration: {\n    logDriver: 'logDriver',\n\n    // the properties below are optional\n    options: {\n      optionsKey: 'options',\n    },\n    secretOptions: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n  },\n  memory: 123,\n  memoryReservation: 123,\n  mountPoints: [{\n    containerPath: 'containerPath',\n    readOnly: false,\n    sourceVolume: 'sourceVolume',\n  }],\n  portMappings: [{\n    appProtocol: 'appProtocol',\n    containerPort: 123,\n    containerPortRange: 'containerPortRange',\n    hostPort: 123,\n    name: 'name',\n    protocol: 'protocol',\n  }],\n  privileged: false,\n  pseudoTerminal: false,\n  readonlyRootFilesystem: false,\n  repositoryCredentials: {\n    credentialsParameter: 'credentialsParameter',\n  },\n  resourceRequirements: [{\n    type: 'type',\n    value: 'value',\n  }],\n  secrets: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n  startTimeout: 123,\n  stopTimeout: 123,\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  ulimits: [{\n    hardLimit: 123,\n    name: 'name',\n    softLimit: 123,\n  }],\n  user: 'user',\n  volumesFrom: [{\n    readOnly: false,\n    sourceContainer: 'sourceContainer',\n  }],\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 17,
        "10": 50,
        "75": 103,
        "91": 9,
        "153": 2,
        "169": 1,
        "192": 25,
        "193": 24,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 98,
        "290": 1
      },
      "fqnsFingerprint": "e92e7fc628db8e1ca769de374a8c84151d66c460b689c6d46ac77504dd40e965"
    },
    "725aba7a546a4b755f877b9281a927e6997518e2bacfd1aad9d83609db7ffd52": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncontainer_dependency_property = ecs.CfnTaskDefinition.ContainerDependencyProperty(\n    condition=\"condition\",\n    container_name=\"containerName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nContainerDependencyProperty containerDependencyProperty = new ContainerDependencyProperty {\n    Condition = \"condition\",\n    ContainerName = \"containerName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nContainerDependencyProperty containerDependencyProperty = ContainerDependencyProperty.builder()\n        .condition(\"condition\")\n        .containerName(\"containerName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncontainerDependencyProperty := &containerDependencyProperty{\n\tcondition: jsii.String(\"condition\"),\n\tcontainerName: jsii.String(\"containerName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst containerDependencyProperty: ecs.CfnTaskDefinition.ContainerDependencyProperty = {\n  condition: 'condition',\n  containerName: 'containerName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDependencyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.ContainerDependencyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerDependencyProperty: ecs.CfnTaskDefinition.ContainerDependencyProperty = {\n  condition: 'condition',\n  containerName: 'containerName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7d2b078c2283c0ebd9736168260ddbad71b36116eb308aeb173e1ebe566cdf46"
    },
    "a3cec9859ca8d2581561a45f5d31565e0ba09905720f37a86baceee1b8d9eceb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndevice_property = ecs.CfnTaskDefinition.DeviceProperty(\n    container_path=\"containerPath\",\n    host_path=\"hostPath\",\n    permissions=[\"permissions\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDeviceProperty deviceProperty = new DeviceProperty {\n    ContainerPath = \"containerPath\",\n    HostPath = \"hostPath\",\n    Permissions = new [] { \"permissions\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDeviceProperty deviceProperty = DeviceProperty.builder()\n        .containerPath(\"containerPath\")\n        .hostPath(\"hostPath\")\n        .permissions(List.of(\"permissions\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndeviceProperty := &deviceProperty{\n\tcontainerPath: jsii.String(\"containerPath\"),\n\thostPath: jsii.String(\"hostPath\"),\n\tpermissions: []*string{\n\t\tjsii.String(\"permissions\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst deviceProperty: ecs.CfnTaskDefinition.DeviceProperty = {\n  containerPath: 'containerPath',\n  hostPath: 'hostPath',\n  permissions: ['permissions'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.DeviceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.DeviceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deviceProperty: ecs.CfnTaskDefinition.DeviceProperty = {\n  containerPath: 'containerPath',\n  hostPath: 'hostPath',\n  permissions: ['permissions'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bdaef3c06a3c4c809aeea30342aef52d518c7008ff61ff861ebfd0fc08068829"
    },
    "edbe6731de2e03045e2567a7ba2399b31b1ff9a3786567e51e9c440f358226c2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndocker_volume_configuration_property = ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty(\n    autoprovision=False,\n    driver=\"driver\",\n    driver_opts={\n        \"driver_opts_key\": \"driverOpts\"\n    },\n    labels={\n        \"labels_key\": \"labels\"\n    },\n    scope=\"scope\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDockerVolumeConfigurationProperty dockerVolumeConfigurationProperty = new DockerVolumeConfigurationProperty {\n    Autoprovision = false,\n    Driver = \"driver\",\n    DriverOpts = new Dictionary<string, string> {\n        { \"driverOptsKey\", \"driverOpts\" }\n    },\n    Labels = new Dictionary<string, string> {\n        { \"labelsKey\", \"labels\" }\n    },\n    Scope = \"scope\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDockerVolumeConfigurationProperty dockerVolumeConfigurationProperty = DockerVolumeConfigurationProperty.builder()\n        .autoprovision(false)\n        .driver(\"driver\")\n        .driverOpts(Map.of(\n                \"driverOptsKey\", \"driverOpts\"))\n        .labels(Map.of(\n                \"labelsKey\", \"labels\"))\n        .scope(\"scope\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndockerVolumeConfigurationProperty := &dockerVolumeConfigurationProperty{\n\tautoprovision: jsii.Boolean(false),\n\tdriver: jsii.String(\"driver\"),\n\tdriverOpts: map[string]*string{\n\t\t\"driverOptsKey\": jsii.String(\"driverOpts\"),\n\t},\n\tlabels: map[string]*string{\n\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t},\n\tscope: jsii.String(\"scope\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst dockerVolumeConfigurationProperty: ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty = {\n  autoprovision: false,\n  driver: 'driver',\n  driverOpts: {\n    driverOptsKey: 'driverOpts',\n  },\n  labels: {\n    labelsKey: 'labels',\n  },\n  scope: 'scope',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerVolumeConfigurationProperty: ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty = {\n  autoprovision: false,\n  driver: 'driver',\n  driverOpts: {\n    driverOptsKey: 'driverOpts',\n  },\n  labels: {\n    labelsKey: 'labels',\n  },\n  scope: 'scope',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "6488c8c0fe4dbc6d0957745692a1c6b9e0561d444c20a5b1ae0d7056af01b058"
    },
    "e85ed055887edc36226287a9a1b89035370c450a46921485bd4d4d64879a5d61": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ne_fSVolume_configuration_property = ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty(\n    filesystem_id=\"filesystemId\",\n\n    # the properties below are optional\n    authorization_config=ecs.CfnTaskDefinition.AuthorizationConfigProperty(\n        access_point_id=\"accessPointId\",\n        iam=\"iam\"\n    ),\n    root_directory=\"rootDirectory\",\n    transit_encryption=\"transitEncryption\",\n    transit_encryption_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nEFSVolumeConfigurationProperty eFSVolumeConfigurationProperty = new EFSVolumeConfigurationProperty {\n    FilesystemId = \"filesystemId\",\n\n    // the properties below are optional\n    AuthorizationConfig = new AuthorizationConfigProperty {\n        AccessPointId = \"accessPointId\",\n        Iam = \"iam\"\n    },\n    RootDirectory = \"rootDirectory\",\n    TransitEncryption = \"transitEncryption\",\n    TransitEncryptionPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nEFSVolumeConfigurationProperty eFSVolumeConfigurationProperty = EFSVolumeConfigurationProperty.builder()\n        .filesystemId(\"filesystemId\")\n\n        // the properties below are optional\n        .authorizationConfig(AuthorizationConfigProperty.builder()\n                .accessPointId(\"accessPointId\")\n                .iam(\"iam\")\n                .build())\n        .rootDirectory(\"rootDirectory\")\n        .transitEncryption(\"transitEncryption\")\n        .transitEncryptionPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\neFSVolumeConfigurationProperty := &eFSVolumeConfigurationProperty{\n\tfilesystemId: jsii.String(\"filesystemId\"),\n\n\t// the properties below are optional\n\tauthorizationConfig: &authorizationConfigProperty{\n\t\taccessPointId: jsii.String(\"accessPointId\"),\n\t\tiam: jsii.String(\"iam\"),\n\t},\n\trootDirectory: jsii.String(\"rootDirectory\"),\n\ttransitEncryption: jsii.String(\"transitEncryption\"),\n\ttransitEncryptionPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst eFSVolumeConfigurationProperty: ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty = {\n  filesystemId: 'filesystemId',\n\n  // the properties below are optional\n  authorizationConfig: {\n    accessPointId: 'accessPointId',\n    iam: 'iam',\n  },\n  rootDirectory: 'rootDirectory',\n  transitEncryption: 'transitEncryption',\n  transitEncryptionPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eFSVolumeConfigurationProperty: ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty = {\n  filesystemId: 'filesystemId',\n\n  // the properties below are optional\n  authorizationConfig: {\n    accessPointId: 'accessPointId',\n    iam: 'iam',\n  },\n  rootDirectory: 'rootDirectory',\n  transitEncryption: 'transitEncryption',\n  transitEncryptionPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 12,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "3e376626953b3b69f298ec6f94b3858cac31a3f538c9a15faedac813044654e5"
    },
    "476bc45526fa8d1819114939c5f9e811aa0ae00a00379ad8878e1a691fc03c7d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nenvironment_file_property = ecs.CfnTaskDefinition.EnvironmentFileProperty(\n    type=\"type\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nEnvironmentFileProperty environmentFileProperty = new EnvironmentFileProperty {\n    Type = \"type\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nEnvironmentFileProperty environmentFileProperty = EnvironmentFileProperty.builder()\n        .type(\"type\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nenvironmentFileProperty := &environmentFileProperty{\n\ttype: jsii.String(\"type\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst environmentFileProperty: ecs.CfnTaskDefinition.EnvironmentFileProperty = {\n  type: 'type',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EnvironmentFileProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.EnvironmentFileProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst environmentFileProperty: ecs.CfnTaskDefinition.EnvironmentFileProperty = {\n  type: 'type',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6f40420d90f405431f65a2ace982feb80b3e7395cb718dc10f7b8066dcdb400e"
    },
    "64d7887a519786dc7fb27ff42cdf72f034f7d7490f4c2a12ee66a645b52bb195": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nephemeral_storage_property = ecs.CfnTaskDefinition.EphemeralStorageProperty(\n    size_in_gi_b=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nEphemeralStorageProperty ephemeralStorageProperty = new EphemeralStorageProperty {\n    SizeInGiB = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nEphemeralStorageProperty ephemeralStorageProperty = EphemeralStorageProperty.builder()\n        .sizeInGiB(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nephemeralStorageProperty := &ephemeralStorageProperty{\n\tsizeInGiB: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst ephemeralStorageProperty: ecs.CfnTaskDefinition.EphemeralStorageProperty = {\n  sizeInGiB: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.EphemeralStorageProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.EphemeralStorageProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ephemeralStorageProperty: ecs.CfnTaskDefinition.EphemeralStorageProperty = {\n  sizeInGiB: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9000cba34d746cd5035765e8255dd3b5246d8d75a506540d0e7536c3f286afba"
    },
    "f6353b29981a80871d974116067e9676cfd49b4340858a3309ee5ff62cabe0d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nfirelens_configuration_property = ecs.CfnTaskDefinition.FirelensConfigurationProperty(\n    options={\n        \"options_key\": \"options\"\n    },\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nFirelensConfigurationProperty firelensConfigurationProperty = new FirelensConfigurationProperty {\n    Options = new Dictionary<string, string> {\n        { \"optionsKey\", \"options\" }\n    },\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nFirelensConfigurationProperty firelensConfigurationProperty = FirelensConfigurationProperty.builder()\n        .options(Map.of(\n                \"optionsKey\", \"options\"))\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nfirelensConfigurationProperty := &firelensConfigurationProperty{\n\toptions: map[string]*string{\n\t\t\"optionsKey\": jsii.String(\"options\"),\n\t},\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst firelensConfigurationProperty: ecs.CfnTaskDefinition.FirelensConfigurationProperty = {\n  options: {\n    optionsKey: 'options',\n  },\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.FirelensConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.FirelensConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst firelensConfigurationProperty: ecs.CfnTaskDefinition.FirelensConfigurationProperty = {\n  options: {\n    optionsKey: 'options',\n  },\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cf9329123d9a4c4e71359ede6248fa17d6f86bdc2ce39bf1d9f590a31fd273d9"
    },
    "52ecdc12d693a30d9e7585ebf94c5d6a59917272c9bd7eab25e41aae99978e09": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nhealth_check_property = ecs.CfnTaskDefinition.HealthCheckProperty(\n    command=[\"command\"],\n    interval=123,\n    retries=123,\n    start_period=123,\n    timeout=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nHealthCheckProperty healthCheckProperty = new HealthCheckProperty {\n    Command = new [] { \"command\" },\n    Interval = 123,\n    Retries = 123,\n    StartPeriod = 123,\n    Timeout = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nHealthCheckProperty healthCheckProperty = HealthCheckProperty.builder()\n        .command(List.of(\"command\"))\n        .interval(123)\n        .retries(123)\n        .startPeriod(123)\n        .timeout(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nhealthCheckProperty := &healthCheckProperty{\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tinterval: jsii.Number(123),\n\tretries: jsii.Number(123),\n\tstartPeriod: jsii.Number(123),\n\ttimeout: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst healthCheckProperty: ecs.CfnTaskDefinition.HealthCheckProperty = {\n  command: ['command'],\n  interval: 123,\n  retries: 123,\n  startPeriod: 123,\n  timeout: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HealthCheckProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.HealthCheckProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckProperty: ecs.CfnTaskDefinition.HealthCheckProperty = {\n  command: ['command'],\n  interval: 123,\n  retries: 123,\n  startPeriod: 123,\n  timeout: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 2,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "f66ef3b458dbaaf279346f271803b3e4bf286ed7ac5741dee0229c6675c3ac6d"
    },
    "18e76fbfacc248f48c7c53ad3191ed10b05de6c46744081073c3ded9d42deb8f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nhost_entry_property = ecs.CfnTaskDefinition.HostEntryProperty(\n    hostname=\"hostname\",\n    ip_address=\"ipAddress\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nHostEntryProperty hostEntryProperty = new HostEntryProperty {\n    Hostname = \"hostname\",\n    IpAddress = \"ipAddress\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nHostEntryProperty hostEntryProperty = HostEntryProperty.builder()\n        .hostname(\"hostname\")\n        .ipAddress(\"ipAddress\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nhostEntryProperty := &hostEntryProperty{\n\thostname: jsii.String(\"hostname\"),\n\tipAddress: jsii.String(\"ipAddress\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst hostEntryProperty: ecs.CfnTaskDefinition.HostEntryProperty = {\n  hostname: 'hostname',\n  ipAddress: 'ipAddress',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HostEntryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.HostEntryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hostEntryProperty: ecs.CfnTaskDefinition.HostEntryProperty = {\n  hostname: 'hostname',\n  ipAddress: 'ipAddress',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9a4349573bececdea55b3b06e53572a43b17f691603a01f74a99dcf8dfea37c8"
    },
    "e91b091b1aabf86fc4ed7f0e877ea24f12000e8dac976a5b9780fb61e70171f2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nhost_volume_properties_property = ecs.CfnTaskDefinition.HostVolumePropertiesProperty(\n    source_path=\"sourcePath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nHostVolumePropertiesProperty hostVolumePropertiesProperty = new HostVolumePropertiesProperty {\n    SourcePath = \"sourcePath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nHostVolumePropertiesProperty hostVolumePropertiesProperty = HostVolumePropertiesProperty.builder()\n        .sourcePath(\"sourcePath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nhostVolumePropertiesProperty := &hostVolumePropertiesProperty{\n\tsourcePath: jsii.String(\"sourcePath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst hostVolumePropertiesProperty: ecs.CfnTaskDefinition.HostVolumePropertiesProperty = {\n  sourcePath: 'sourcePath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.HostVolumePropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.HostVolumePropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst hostVolumePropertiesProperty: ecs.CfnTaskDefinition.HostVolumePropertiesProperty = {\n  sourcePath: 'sourcePath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c4c1d99e6de1a0d2aefb7b3fa97bed6fe027af2021b4038e4aba7718636b1155"
    },
    "0710a1e2de375a221c11485176209d8f3496366e2253a8dc605b1ab6c975dbb0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ninference_accelerator_property = ecs.CfnTaskDefinition.InferenceAcceleratorProperty(\n    device_name=\"deviceName\",\n    device_type=\"deviceType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nInferenceAcceleratorProperty inferenceAcceleratorProperty = new InferenceAcceleratorProperty {\n    DeviceName = \"deviceName\",\n    DeviceType = \"deviceType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nInferenceAcceleratorProperty inferenceAcceleratorProperty = InferenceAcceleratorProperty.builder()\n        .deviceName(\"deviceName\")\n        .deviceType(\"deviceType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ninferenceAcceleratorProperty := &inferenceAcceleratorProperty{\n\tdeviceName: jsii.String(\"deviceName\"),\n\tdeviceType: jsii.String(\"deviceType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst inferenceAcceleratorProperty: ecs.CfnTaskDefinition.InferenceAcceleratorProperty = {\n  deviceName: 'deviceName',\n  deviceType: 'deviceType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.InferenceAcceleratorProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.InferenceAcceleratorProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst inferenceAcceleratorProperty: ecs.CfnTaskDefinition.InferenceAcceleratorProperty = {\n  deviceName: 'deviceName',\n  deviceType: 'deviceType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1fd8febc13b0dbea2740e53de6a29cec042c8d97692ff4d996fc643ebc22c186"
    },
    "41d5b5ffd7543d259d321c3423562922b7dc4d912035714e2d9b1d23d918f402": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nkernel_capabilities_property = ecs.CfnTaskDefinition.KernelCapabilitiesProperty(\n    add=[\"add\"],\n    drop=[\"drop\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nKernelCapabilitiesProperty kernelCapabilitiesProperty = new KernelCapabilitiesProperty {\n    Add = new [] { \"add\" },\n    Drop = new [] { \"drop\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nKernelCapabilitiesProperty kernelCapabilitiesProperty = KernelCapabilitiesProperty.builder()\n        .add(List.of(\"add\"))\n        .drop(List.of(\"drop\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nkernelCapabilitiesProperty := &kernelCapabilitiesProperty{\n\tadd: []*string{\n\t\tjsii.String(\"add\"),\n\t},\n\tdrop: []*string{\n\t\tjsii.String(\"drop\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst kernelCapabilitiesProperty: ecs.CfnTaskDefinition.KernelCapabilitiesProperty = {\n  add: ['add'],\n  drop: ['drop'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.KernelCapabilitiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.KernelCapabilitiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kernelCapabilitiesProperty: ecs.CfnTaskDefinition.KernelCapabilitiesProperty = {\n  add: ['add'],\n  drop: ['drop'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "360a0771f0a9247cd6c3caf465c65ff9be0214d294edc25f18db81bb89d49bb1"
    },
    "0c60b8c33af34fc86e959b344578a18e57dc3ff3bfc8989ec634dd03bb03971d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nkey_value_pair_property = ecs.CfnTaskDefinition.KeyValuePairProperty(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nKeyValuePairProperty keyValuePairProperty = new KeyValuePairProperty {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nKeyValuePairProperty keyValuePairProperty = KeyValuePairProperty.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nkeyValuePairProperty := &keyValuePairProperty{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst keyValuePairProperty: ecs.CfnTaskDefinition.KeyValuePairProperty = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.KeyValuePairProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.KeyValuePairProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst keyValuePairProperty: ecs.CfnTaskDefinition.KeyValuePairProperty = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "89278a2f9108e1f897e1b7efb0acb09aa19718bf80e80b6fb94bcf2e581c384a"
    },
    "f33e6f7c1df90493a14caf8d6fddf3b5214e6d744346014f8b66a37bb2521f29": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nlinux_parameters_property = ecs.CfnTaskDefinition.LinuxParametersProperty(\n    capabilities=ecs.CfnTaskDefinition.KernelCapabilitiesProperty(\n        add=[\"add\"],\n        drop=[\"drop\"]\n    ),\n    devices=[ecs.CfnTaskDefinition.DeviceProperty(\n        container_path=\"containerPath\",\n        host_path=\"hostPath\",\n        permissions=[\"permissions\"]\n    )],\n    init_process_enabled=False,\n    max_swap=123,\n    shared_memory_size=123,\n    swappiness=123,\n    tmpfs=[ecs.CfnTaskDefinition.TmpfsProperty(\n        size=123,\n\n        # the properties below are optional\n        container_path=\"containerPath\",\n        mount_options=[\"mountOptions\"]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLinuxParametersProperty linuxParametersProperty = new LinuxParametersProperty {\n    Capabilities = new KernelCapabilitiesProperty {\n        Add = new [] { \"add\" },\n        Drop = new [] { \"drop\" }\n    },\n    Devices = new [] { new DeviceProperty {\n        ContainerPath = \"containerPath\",\n        HostPath = \"hostPath\",\n        Permissions = new [] { \"permissions\" }\n    } },\n    InitProcessEnabled = false,\n    MaxSwap = 123,\n    SharedMemorySize = 123,\n    Swappiness = 123,\n    Tmpfs = new [] { new TmpfsProperty {\n        Size = 123,\n\n        // the properties below are optional\n        ContainerPath = \"containerPath\",\n        MountOptions = new [] { \"mountOptions\" }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLinuxParametersProperty linuxParametersProperty = LinuxParametersProperty.builder()\n        .capabilities(KernelCapabilitiesProperty.builder()\n                .add(List.of(\"add\"))\n                .drop(List.of(\"drop\"))\n                .build())\n        .devices(List.of(DeviceProperty.builder()\n                .containerPath(\"containerPath\")\n                .hostPath(\"hostPath\")\n                .permissions(List.of(\"permissions\"))\n                .build()))\n        .initProcessEnabled(false)\n        .maxSwap(123)\n        .sharedMemorySize(123)\n        .swappiness(123)\n        .tmpfs(List.of(TmpfsProperty.builder()\n                .size(123)\n\n                // the properties below are optional\n                .containerPath(\"containerPath\")\n                .mountOptions(List.of(\"mountOptions\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nlinuxParametersProperty := &linuxParametersProperty{\n\tcapabilities: &kernelCapabilitiesProperty{\n\t\tadd: []*string{\n\t\t\tjsii.String(\"add\"),\n\t\t},\n\t\tdrop: []*string{\n\t\t\tjsii.String(\"drop\"),\n\t\t},\n\t},\n\tdevices: []interface{}{\n\t\t&deviceProperty{\n\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\thostPath: jsii.String(\"hostPath\"),\n\t\t\tpermissions: []*string{\n\t\t\t\tjsii.String(\"permissions\"),\n\t\t\t},\n\t\t},\n\t},\n\tinitProcessEnabled: jsii.Boolean(false),\n\tmaxSwap: jsii.Number(123),\n\tsharedMemorySize: jsii.Number(123),\n\tswappiness: jsii.Number(123),\n\ttmpfs: []interface{}{\n\t\t&tmpfsProperty{\n\t\t\tsize: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\tmountOptions: []*string{\n\t\t\t\tjsii.String(\"mountOptions\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst linuxParametersProperty: ecs.CfnTaskDefinition.LinuxParametersProperty = {\n  capabilities: {\n    add: ['add'],\n    drop: ['drop'],\n  },\n  devices: [{\n    containerPath: 'containerPath',\n    hostPath: 'hostPath',\n    permissions: ['permissions'],\n  }],\n  initProcessEnabled: false,\n  maxSwap: 123,\n  sharedMemorySize: 123,\n  swappiness: 123,\n  tmpfs: [{\n    size: 123,\n\n    // the properties below are optional\n    containerPath: 'containerPath',\n    mountOptions: ['mountOptions'],\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.LinuxParametersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.LinuxParametersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst linuxParametersProperty: ecs.CfnTaskDefinition.LinuxParametersProperty = {\n  capabilities: {\n    add: ['add'],\n    drop: ['drop'],\n  },\n  devices: [{\n    containerPath: 'containerPath',\n    hostPath: 'hostPath',\n    permissions: ['permissions'],\n  }],\n  initProcessEnabled: false,\n  maxSwap: 123,\n  sharedMemorySize: 123,\n  swappiness: 123,\n  tmpfs: [{\n    size: 123,\n\n    // the properties below are optional\n    containerPath: 'containerPath',\n    mountOptions: ['mountOptions'],\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 20,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 6,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "af190decd2476b996887e47ed6581f6bcfdbecdc436e9207a8321e91e5965e5d"
    },
    "04b6d69ddae9d4ff0982cc3cb91b437aa6bb96ad231beddc18055725c984dd02": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nlog_configuration_property = ecs.CfnTaskDefinition.LogConfigurationProperty(\n    log_driver=\"logDriver\",\n\n    # the properties below are optional\n    options={\n        \"options_key\": \"options\"\n    },\n    secret_options=[ecs.CfnTaskDefinition.SecretProperty(\n        name=\"name\",\n        value_from=\"valueFrom\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLogConfigurationProperty logConfigurationProperty = new LogConfigurationProperty {\n    LogDriver = \"logDriver\",\n\n    // the properties below are optional\n    Options = new Dictionary<string, string> {\n        { \"optionsKey\", \"options\" }\n    },\n    SecretOptions = new [] { new SecretProperty {\n        Name = \"name\",\n        ValueFrom = \"valueFrom\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLogConfigurationProperty logConfigurationProperty = LogConfigurationProperty.builder()\n        .logDriver(\"logDriver\")\n\n        // the properties below are optional\n        .options(Map.of(\n                \"optionsKey\", \"options\"))\n        .secretOptions(List.of(SecretProperty.builder()\n                .name(\"name\")\n                .valueFrom(\"valueFrom\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nlogConfigurationProperty := &logConfigurationProperty{\n\tlogDriver: jsii.String(\"logDriver\"),\n\n\t// the properties below are optional\n\toptions: map[string]*string{\n\t\t\"optionsKey\": jsii.String(\"options\"),\n\t},\n\tsecretOptions: []interface{}{\n\t\t&secretProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst logConfigurationProperty: ecs.CfnTaskDefinition.LogConfigurationProperty = {\n  logDriver: 'logDriver',\n\n  // the properties below are optional\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.LogConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.LogConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logConfigurationProperty: ecs.CfnTaskDefinition.LogConfigurationProperty = {\n  logDriver: 'logDriver',\n\n  // the properties below are optional\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "52d5b64d954c8215e0ed242717775b1478c0293d6b0e1615a539120cb8021194"
    },
    "4b386c950f9a57f54efc1235c9ef502dc4948da009fa1913e7e13e273fbd5dad": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nmount_point_property = ecs.CfnTaskDefinition.MountPointProperty(\n    container_path=\"containerPath\",\n    read_only=False,\n    source_volume=\"sourceVolume\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nMountPointProperty mountPointProperty = new MountPointProperty {\n    ContainerPath = \"containerPath\",\n    ReadOnly = false,\n    SourceVolume = \"sourceVolume\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nMountPointProperty mountPointProperty = MountPointProperty.builder()\n        .containerPath(\"containerPath\")\n        .readOnly(false)\n        .sourceVolume(\"sourceVolume\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nmountPointProperty := &mountPointProperty{\n\tcontainerPath: jsii.String(\"containerPath\"),\n\treadOnly: jsii.Boolean(false),\n\tsourceVolume: jsii.String(\"sourceVolume\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst mountPointProperty: ecs.CfnTaskDefinition.MountPointProperty = {\n  containerPath: 'containerPath',\n  readOnly: false,\n  sourceVolume: 'sourceVolume',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.MountPointProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.MountPointProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mountPointProperty: ecs.CfnTaskDefinition.MountPointProperty = {\n  containerPath: 'containerPath',\n  readOnly: false,\n  sourceVolume: 'sourceVolume',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "35735f8c562d8fa70de3d263a48490ce10dcb5051f38d8aee97d3070e251e14c"
    },
    "d0eabe1340868f58db24ac6d993ea542a61f69f7d4f35b5c11ed57fcb8308a4b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nport_mapping_property = ecs.CfnTaskDefinition.PortMappingProperty(\n    app_protocol=\"appProtocol\",\n    container_port=123,\n    container_port_range=\"containerPortRange\",\n    host_port=123,\n    name=\"name\",\n    protocol=\"protocol\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nPortMappingProperty portMappingProperty = new PortMappingProperty {\n    AppProtocol = \"appProtocol\",\n    ContainerPort = 123,\n    ContainerPortRange = \"containerPortRange\",\n    HostPort = 123,\n    Name = \"name\",\n    Protocol = \"protocol\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nPortMappingProperty portMappingProperty = PortMappingProperty.builder()\n        .appProtocol(\"appProtocol\")\n        .containerPort(123)\n        .containerPortRange(\"containerPortRange\")\n        .hostPort(123)\n        .name(\"name\")\n        .protocol(\"protocol\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nportMappingProperty := &portMappingProperty{\n\tappProtocol: jsii.String(\"appProtocol\"),\n\tcontainerPort: jsii.Number(123),\n\tcontainerPortRange: jsii.String(\"containerPortRange\"),\n\thostPort: jsii.Number(123),\n\tname: jsii.String(\"name\"),\n\tprotocol: jsii.String(\"protocol\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst portMappingProperty: ecs.CfnTaskDefinition.PortMappingProperty = {\n  appProtocol: 'appProtocol',\n  containerPort: 123,\n  containerPortRange: 'containerPortRange',\n  hostPort: 123,\n  name: 'name',\n  protocol: 'protocol',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.PortMappingProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.PortMappingProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portMappingProperty: ecs.CfnTaskDefinition.PortMappingProperty = {\n  appProtocol: 'appProtocol',\n  containerPort: 123,\n  containerPortRange: 'containerPortRange',\n  hostPort: 123,\n  name: 'name',\n  protocol: 'protocol',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 11,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c716303e9107d367d21a075f55cfc35e7dd88f5218d79fbb15db53b45c0f6ff9"
    },
    "e0e3eead94db27d370dab70bcbb1079555ed3e88a1873aa4e2a1b6dbdf1b561d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nproxy_configuration_property = ecs.CfnTaskDefinition.ProxyConfigurationProperty(\n    container_name=\"containerName\",\n\n    # the properties below are optional\n    proxy_configuration_properties=[ecs.CfnTaskDefinition.KeyValuePairProperty(\n        name=\"name\",\n        value=\"value\"\n    )],\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nProxyConfigurationProperty proxyConfigurationProperty = new ProxyConfigurationProperty {\n    ContainerName = \"containerName\",\n\n    // the properties below are optional\n    ProxyConfigurationProperties = new [] { new KeyValuePairProperty {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nProxyConfigurationProperty proxyConfigurationProperty = ProxyConfigurationProperty.builder()\n        .containerName(\"containerName\")\n\n        // the properties below are optional\n        .proxyConfigurationProperties(List.of(KeyValuePairProperty.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nproxyConfigurationProperty := &proxyConfigurationProperty{\n\tcontainerName: jsii.String(\"containerName\"),\n\n\t// the properties below are optional\n\tproxyConfigurationProperties: []interface{}{\n\t\t&keyValuePairProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst proxyConfigurationProperty: ecs.CfnTaskDefinition.ProxyConfigurationProperty = {\n  containerName: 'containerName',\n\n  // the properties below are optional\n  proxyConfigurationProperties: [{\n    name: 'name',\n    value: 'value',\n  }],\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.ProxyConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst proxyConfigurationProperty: ecs.CfnTaskDefinition.ProxyConfigurationProperty = {\n  containerName: 'containerName',\n\n  // the properties below are optional\n  proxyConfigurationProperties: [{\n    name: 'name',\n    value: 'value',\n  }],\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "4c69665368f9a0d5fb7b041159394c10a96fc5d1dfb473e17ee3cadf2b1f170d"
    },
    "67f2284abb8a338a4fdbac6000206eb06f7dfe473180913130864a0810234c84": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nrepository_credentials_property = ecs.CfnTaskDefinition.RepositoryCredentialsProperty(\n    credentials_parameter=\"credentialsParameter\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nRepositoryCredentialsProperty repositoryCredentialsProperty = new RepositoryCredentialsProperty {\n    CredentialsParameter = \"credentialsParameter\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nRepositoryCredentialsProperty repositoryCredentialsProperty = RepositoryCredentialsProperty.builder()\n        .credentialsParameter(\"credentialsParameter\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nrepositoryCredentialsProperty := &repositoryCredentialsProperty{\n\tcredentialsParameter: jsii.String(\"credentialsParameter\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst repositoryCredentialsProperty: ecs.CfnTaskDefinition.RepositoryCredentialsProperty = {\n  credentialsParameter: 'credentialsParameter',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RepositoryCredentialsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.RepositoryCredentialsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst repositoryCredentialsProperty: ecs.CfnTaskDefinition.RepositoryCredentialsProperty = {\n  credentialsParameter: 'credentialsParameter',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9c2b2a7ebe7a850c6ce9448186ebee7ec0cf45e77368f2f7963677fe7bf1e022"
    },
    "bb1a18567342a8799737ec1ccd5ecbca84f01ab579a88f2141d4128a8675a3b5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nresource_requirement_property = ecs.CfnTaskDefinition.ResourceRequirementProperty(\n    type=\"type\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nResourceRequirementProperty resourceRequirementProperty = new ResourceRequirementProperty {\n    Type = \"type\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nResourceRequirementProperty resourceRequirementProperty = ResourceRequirementProperty.builder()\n        .type(\"type\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nresourceRequirementProperty := &resourceRequirementProperty{\n\ttype: jsii.String(\"type\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst resourceRequirementProperty: ecs.CfnTaskDefinition.ResourceRequirementProperty = {\n  type: 'type',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.ResourceRequirementProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.ResourceRequirementProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst resourceRequirementProperty: ecs.CfnTaskDefinition.ResourceRequirementProperty = {\n  type: 'type',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4787176dd7b1d5dde7717fdc566b2e92e6cf6f4d71720ce53eaca013d9d06e6c"
    },
    "d8f39c11e23c55baf531bd8702bd7d92fe18ca402df58ee3fdfb3d78170f877f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nruntime_platform_property = ecs.CfnTaskDefinition.RuntimePlatformProperty(\n    cpu_architecture=\"cpuArchitecture\",\n    operating_system_family=\"operatingSystemFamily\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nRuntimePlatformProperty runtimePlatformProperty = new RuntimePlatformProperty {\n    CpuArchitecture = \"cpuArchitecture\",\n    OperatingSystemFamily = \"operatingSystemFamily\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nRuntimePlatformProperty runtimePlatformProperty = RuntimePlatformProperty.builder()\n        .cpuArchitecture(\"cpuArchitecture\")\n        .operatingSystemFamily(\"operatingSystemFamily\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nruntimePlatformProperty := &runtimePlatformProperty{\n\tcpuArchitecture: jsii.String(\"cpuArchitecture\"),\n\toperatingSystemFamily: jsii.String(\"operatingSystemFamily\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst runtimePlatformProperty: ecs.CfnTaskDefinition.RuntimePlatformProperty = {\n  cpuArchitecture: 'cpuArchitecture',\n  operatingSystemFamily: 'operatingSystemFamily',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.RuntimePlatformProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.RuntimePlatformProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst runtimePlatformProperty: ecs.CfnTaskDefinition.RuntimePlatformProperty = {\n  cpuArchitecture: 'cpuArchitecture',\n  operatingSystemFamily: 'operatingSystemFamily',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0dd4a08937d9a317b57af7ac464641276e64838bf6b5ae28a7aecef946bb56f3"
    },
    "ba075ff0cc80ef372a4ce35feab33af0a53ef29dd7c3d69f8ea0c4bbfc19ae20": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nsecret_property = ecs.CfnTaskDefinition.SecretProperty(\n    name=\"name\",\n    value_from=\"valueFrom\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nSecretProperty secretProperty = new SecretProperty {\n    Name = \"name\",\n    ValueFrom = \"valueFrom\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nSecretProperty secretProperty = SecretProperty.builder()\n        .name(\"name\")\n        .valueFrom(\"valueFrom\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nsecretProperty := &secretProperty{\n\tname: jsii.String(\"name\"),\n\tvalueFrom: jsii.String(\"valueFrom\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst secretProperty: ecs.CfnTaskDefinition.SecretProperty = {\n  name: 'name',\n  valueFrom: 'valueFrom',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SecretProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.SecretProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst secretProperty: ecs.CfnTaskDefinition.SecretProperty = {\n  name: 'name',\n  valueFrom: 'valueFrom',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "48d72cd242c9f8a6a9349195145b25eb6942b6a274c922127225001a39ce0699"
    },
    "cd7ef25664a9808ba4d4eb3ce30456a5d5b631158c686910d48cfc051ca6bf7e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nsystem_control_property = ecs.CfnTaskDefinition.SystemControlProperty(\n    namespace=\"namespace\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nSystemControlProperty systemControlProperty = new SystemControlProperty {\n    Namespace = \"namespace\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nSystemControlProperty systemControlProperty = SystemControlProperty.builder()\n        .namespace(\"namespace\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nsystemControlProperty := &systemControlProperty{\n\tnamespace: jsii.String(\"namespace\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst systemControlProperty: ecs.CfnTaskDefinition.SystemControlProperty = {\n  namespace: 'namespace',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.SystemControlProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.SystemControlProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst systemControlProperty: ecs.CfnTaskDefinition.SystemControlProperty = {\n  namespace: 'namespace',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e03d66feffeb8f71a47604484673eb4261b431e3c251804cdba77884725c6ece"
    },
    "d2c7e69d27a8ef8a55b6c9c87641c02b4e4cf8101f74618f64a6d747443f3e61": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ntask_definition_placement_constraint_property = ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    expression=\"expression\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nTaskDefinitionPlacementConstraintProperty taskDefinitionPlacementConstraintProperty = new TaskDefinitionPlacementConstraintProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    Expression = \"expression\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nTaskDefinitionPlacementConstraintProperty taskDefinitionPlacementConstraintProperty = TaskDefinitionPlacementConstraintProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .expression(\"expression\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ntaskDefinitionPlacementConstraintProperty := &taskDefinitionPlacementConstraintProperty{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\texpression: jsii.String(\"expression\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst taskDefinitionPlacementConstraintProperty: ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  expression: 'expression',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taskDefinitionPlacementConstraintProperty: ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  expression: 'expression',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "78cf813a80a24a4217dce1090424ad2e803d49f4fa4813c268987af27e3f7111"
    },
    "a3e21f483cda3f344c8de9e56ec90aded849cbe39ac3588d0b86a431411756e0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ntmpfs_property = ecs.CfnTaskDefinition.TmpfsProperty(\n    size=123,\n\n    # the properties below are optional\n    container_path=\"containerPath\",\n    mount_options=[\"mountOptions\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nTmpfsProperty tmpfsProperty = new TmpfsProperty {\n    Size = 123,\n\n    // the properties below are optional\n    ContainerPath = \"containerPath\",\n    MountOptions = new [] { \"mountOptions\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nTmpfsProperty tmpfsProperty = TmpfsProperty.builder()\n        .size(123)\n\n        // the properties below are optional\n        .containerPath(\"containerPath\")\n        .mountOptions(List.of(\"mountOptions\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ntmpfsProperty := &tmpfsProperty{\n\tsize: jsii.Number(123),\n\n\t// the properties below are optional\n\tcontainerPath: jsii.String(\"containerPath\"),\n\tmountOptions: []*string{\n\t\tjsii.String(\"mountOptions\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst tmpfsProperty: ecs.CfnTaskDefinition.TmpfsProperty = {\n  size: 123,\n\n  // the properties below are optional\n  containerPath: 'containerPath',\n  mountOptions: ['mountOptions'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.TmpfsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.TmpfsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tmpfsProperty: ecs.CfnTaskDefinition.TmpfsProperty = {\n  size: 123,\n\n  // the properties below are optional\n  containerPath: 'containerPath',\n  mountOptions: ['mountOptions'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "bf95e62f475db79819134eaa1caa98e2b396427c2c689b4fbbb2214f9c99c050"
    },
    "4ed8d26d8b4460de7162473ea7220b97c6eb319777d84e95cdd5ca2c4eafaf8c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nulimit_property = ecs.CfnTaskDefinition.UlimitProperty(\n    hard_limit=123,\n    name=\"name\",\n    soft_limit=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nUlimitProperty ulimitProperty = new UlimitProperty {\n    HardLimit = 123,\n    Name = \"name\",\n    SoftLimit = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nUlimitProperty ulimitProperty = UlimitProperty.builder()\n        .hardLimit(123)\n        .name(\"name\")\n        .softLimit(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nulimitProperty := &ulimitProperty{\n\thardLimit: jsii.Number(123),\n\tname: jsii.String(\"name\"),\n\tsoftLimit: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst ulimitProperty: ecs.CfnTaskDefinition.UlimitProperty = {\n  hardLimit: 123,\n  name: 'name',\n  softLimit: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.UlimitProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.UlimitProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ulimitProperty: ecs.CfnTaskDefinition.UlimitProperty = {\n  hardLimit: 123,\n  name: 'name',\n  softLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "661c68c4f0dff9c7d00fafe4f7719995a9dcff6ed90c3d4f19f3bb8abe891b2f"
    },
    "c03483ec790431f734b19765118f3f9e43c3f095b190f1dd6ee1bb2a2d9ce5a0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nvolume_from_property = ecs.CfnTaskDefinition.VolumeFromProperty(\n    read_only=False,\n    source_container=\"sourceContainer\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nVolumeFromProperty volumeFromProperty = new VolumeFromProperty {\n    ReadOnly = false,\n    SourceContainer = \"sourceContainer\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nVolumeFromProperty volumeFromProperty = VolumeFromProperty.builder()\n        .readOnly(false)\n        .sourceContainer(\"sourceContainer\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvolumeFromProperty := &volumeFromProperty{\n\treadOnly: jsii.Boolean(false),\n\tsourceContainer: jsii.String(\"sourceContainer\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst volumeFromProperty: ecs.CfnTaskDefinition.VolumeFromProperty = {\n  readOnly: false,\n  sourceContainer: 'sourceContainer',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeFromProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeFromProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst volumeFromProperty: ecs.CfnTaskDefinition.VolumeFromProperty = {\n  readOnly: false,\n  sourceContainer: 'sourceContainer',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "19508737b9b4b7588b6cbba05c692db152fe758be1109a4a732664d0bb3e993b"
    },
    "708762178ef20a55338c2bc648049fcde7491b3dfd1f69ff2808a9a0213b2656": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nvolume_property = ecs.CfnTaskDefinition.VolumeProperty(\n    docker_volume_configuration=ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty(\n        autoprovision=False,\n        driver=\"driver\",\n        driver_opts={\n            \"driver_opts_key\": \"driverOpts\"\n        },\n        labels={\n            \"labels_key\": \"labels\"\n        },\n        scope=\"scope\"\n    ),\n    efs_volume_configuration=ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty(\n        filesystem_id=\"filesystemId\",\n\n        # the properties below are optional\n        authorization_config=ecs.CfnTaskDefinition.AuthorizationConfigProperty(\n            access_point_id=\"accessPointId\",\n            iam=\"iam\"\n        ),\n        root_directory=\"rootDirectory\",\n        transit_encryption=\"transitEncryption\",\n        transit_encryption_port=123\n    ),\n    host=ecs.CfnTaskDefinition.HostVolumePropertiesProperty(\n        source_path=\"sourcePath\"\n    ),\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nVolumeProperty volumeProperty = new VolumeProperty {\n    DockerVolumeConfiguration = new DockerVolumeConfigurationProperty {\n        Autoprovision = false,\n        Driver = \"driver\",\n        DriverOpts = new Dictionary<string, string> {\n            { \"driverOptsKey\", \"driverOpts\" }\n        },\n        Labels = new Dictionary<string, string> {\n            { \"labelsKey\", \"labels\" }\n        },\n        Scope = \"scope\"\n    },\n    EfsVolumeConfiguration = new EFSVolumeConfigurationProperty {\n        FilesystemId = \"filesystemId\",\n\n        // the properties below are optional\n        AuthorizationConfig = new AuthorizationConfigProperty {\n            AccessPointId = \"accessPointId\",\n            Iam = \"iam\"\n        },\n        RootDirectory = \"rootDirectory\",\n        TransitEncryption = \"transitEncryption\",\n        TransitEncryptionPort = 123\n    },\n    Host = new HostVolumePropertiesProperty {\n        SourcePath = \"sourcePath\"\n    },\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nVolumeProperty volumeProperty = VolumeProperty.builder()\n        .dockerVolumeConfiguration(DockerVolumeConfigurationProperty.builder()\n                .autoprovision(false)\n                .driver(\"driver\")\n                .driverOpts(Map.of(\n                        \"driverOptsKey\", \"driverOpts\"))\n                .labels(Map.of(\n                        \"labelsKey\", \"labels\"))\n                .scope(\"scope\")\n                .build())\n        .efsVolumeConfiguration(EFSVolumeConfigurationProperty.builder()\n                .filesystemId(\"filesystemId\")\n\n                // the properties below are optional\n                .authorizationConfig(AuthorizationConfigProperty.builder()\n                        .accessPointId(\"accessPointId\")\n                        .iam(\"iam\")\n                        .build())\n                .rootDirectory(\"rootDirectory\")\n                .transitEncryption(\"transitEncryption\")\n                .transitEncryptionPort(123)\n                .build())\n        .host(HostVolumePropertiesProperty.builder()\n                .sourcePath(\"sourcePath\")\n                .build())\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvolumeProperty := &volumeProperty{\n\tdockerVolumeConfiguration: &dockerVolumeConfigurationProperty{\n\t\tautoprovision: jsii.Boolean(false),\n\t\tdriver: jsii.String(\"driver\"),\n\t\tdriverOpts: map[string]*string{\n\t\t\t\"driverOptsKey\": jsii.String(\"driverOpts\"),\n\t\t},\n\t\tlabels: map[string]*string{\n\t\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t\t},\n\t\tscope: jsii.String(\"scope\"),\n\t},\n\tefsVolumeConfiguration: &eFSVolumeConfigurationProperty{\n\t\tfilesystemId: jsii.String(\"filesystemId\"),\n\n\t\t// the properties below are optional\n\t\tauthorizationConfig: &authorizationConfigProperty{\n\t\t\taccessPointId: jsii.String(\"accessPointId\"),\n\t\t\tiam: jsii.String(\"iam\"),\n\t\t},\n\t\trootDirectory: jsii.String(\"rootDirectory\"),\n\t\ttransitEncryption: jsii.String(\"transitEncryption\"),\n\t\ttransitEncryptionPort: jsii.Number(123),\n\t},\n\thost: &hostVolumePropertiesProperty{\n\t\tsourcePath: jsii.String(\"sourcePath\"),\n\t},\n\tname: jsii.String(\"name\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst volumeProperty: ecs.CfnTaskDefinition.VolumeProperty = {\n  dockerVolumeConfiguration: {\n    autoprovision: false,\n    driver: 'driver',\n    driverOpts: {\n      driverOptsKey: 'driverOpts',\n    },\n    labels: {\n      labelsKey: 'labels',\n    },\n    scope: 'scope',\n  },\n  efsVolumeConfiguration: {\n    filesystemId: 'filesystemId',\n\n    // the properties below are optional\n    authorizationConfig: {\n      accessPointId: 'accessPointId',\n      iam: 'iam',\n    },\n    rootDirectory: 'rootDirectory',\n    transitEncryption: 'transitEncryption',\n    transitEncryptionPort: 123,\n  },\n  host: {\n    sourcePath: 'sourcePath',\n  },\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.VolumeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst volumeProperty: ecs.CfnTaskDefinition.VolumeProperty = {\n  dockerVolumeConfiguration: {\n    autoprovision: false,\n    driver: 'driver',\n    driverOpts: {\n      driverOptsKey: 'driverOpts',\n    },\n    labels: {\n      labelsKey: 'labels',\n    },\n    scope: 'scope',\n  },\n  efsVolumeConfiguration: {\n    filesystemId: 'filesystemId',\n\n    // the properties below are optional\n    authorizationConfig: {\n      accessPointId: 'accessPointId',\n      iam: 'iam',\n    },\n    rootDirectory: 'rootDirectory',\n    transitEncryption: 'transitEncryption',\n    transitEncryptionPort: 123,\n  },\n  host: {\n    sourcePath: 'sourcePath',\n  },\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 12,
        "75": 24,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "54a6c79893fb539a5edc3f93b164745cf64cf212b728d18748c4a3521dc6854c"
    },
    "5e957e129e9eb293ffff7acf64b355d1a42cc5ca2c29e58996924c9633cf612c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_task_definition_props = ecs.CfnTaskDefinitionProps(\n    container_definitions=[ecs.CfnTaskDefinition.ContainerDefinitionProperty(\n        image=\"image\",\n        name=\"name\",\n\n        # the properties below are optional\n        command=[\"command\"],\n        cpu=123,\n        depends_on=[ecs.CfnTaskDefinition.ContainerDependencyProperty(\n            condition=\"condition\",\n            container_name=\"containerName\"\n        )],\n        disable_networking=False,\n        dns_search_domains=[\"dnsSearchDomains\"],\n        dns_servers=[\"dnsServers\"],\n        docker_labels={\n            \"docker_labels_key\": \"dockerLabels\"\n        },\n        docker_security_options=[\"dockerSecurityOptions\"],\n        entry_point=[\"entryPoint\"],\n        environment=[ecs.CfnTaskDefinition.KeyValuePairProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        environment_files=[ecs.CfnTaskDefinition.EnvironmentFileProperty(\n            type=\"type\",\n            value=\"value\"\n        )],\n        essential=False,\n        extra_hosts=[ecs.CfnTaskDefinition.HostEntryProperty(\n            hostname=\"hostname\",\n            ip_address=\"ipAddress\"\n        )],\n        firelens_configuration=ecs.CfnTaskDefinition.FirelensConfigurationProperty(\n            options={\n                \"options_key\": \"options\"\n            },\n            type=\"type\"\n        ),\n        health_check=ecs.CfnTaskDefinition.HealthCheckProperty(\n            command=[\"command\"],\n            interval=123,\n            retries=123,\n            start_period=123,\n            timeout=123\n        ),\n        hostname=\"hostname\",\n        interactive=False,\n        links=[\"links\"],\n        linux_parameters=ecs.CfnTaskDefinition.LinuxParametersProperty(\n            capabilities=ecs.CfnTaskDefinition.KernelCapabilitiesProperty(\n                add=[\"add\"],\n                drop=[\"drop\"]\n            ),\n            devices=[ecs.CfnTaskDefinition.DeviceProperty(\n                container_path=\"containerPath\",\n                host_path=\"hostPath\",\n                permissions=[\"permissions\"]\n            )],\n            init_process_enabled=False,\n            max_swap=123,\n            shared_memory_size=123,\n            swappiness=123,\n            tmpfs=[ecs.CfnTaskDefinition.TmpfsProperty(\n                size=123,\n\n                # the properties below are optional\n                container_path=\"containerPath\",\n                mount_options=[\"mountOptions\"]\n            )]\n        ),\n        log_configuration=ecs.CfnTaskDefinition.LogConfigurationProperty(\n            log_driver=\"logDriver\",\n\n            # the properties below are optional\n            options={\n                \"options_key\": \"options\"\n            },\n            secret_options=[ecs.CfnTaskDefinition.SecretProperty(\n                name=\"name\",\n                value_from=\"valueFrom\"\n            )]\n        ),\n        memory=123,\n        memory_reservation=123,\n        mount_points=[ecs.CfnTaskDefinition.MountPointProperty(\n            container_path=\"containerPath\",\n            read_only=False,\n            source_volume=\"sourceVolume\"\n        )],\n        port_mappings=[ecs.CfnTaskDefinition.PortMappingProperty(\n            app_protocol=\"appProtocol\",\n            container_port=123,\n            container_port_range=\"containerPortRange\",\n            host_port=123,\n            name=\"name\",\n            protocol=\"protocol\"\n        )],\n        privileged=False,\n        pseudo_terminal=False,\n        readonly_root_filesystem=False,\n        repository_credentials=ecs.CfnTaskDefinition.RepositoryCredentialsProperty(\n            credentials_parameter=\"credentialsParameter\"\n        ),\n        resource_requirements=[ecs.CfnTaskDefinition.ResourceRequirementProperty(\n            type=\"type\",\n            value=\"value\"\n        )],\n        secrets=[ecs.CfnTaskDefinition.SecretProperty(\n            name=\"name\",\n            value_from=\"valueFrom\"\n        )],\n        start_timeout=123,\n        stop_timeout=123,\n        system_controls=[ecs.CfnTaskDefinition.SystemControlProperty(\n            namespace=\"namespace\",\n            value=\"value\"\n        )],\n        ulimits=[ecs.CfnTaskDefinition.UlimitProperty(\n            hard_limit=123,\n            name=\"name\",\n            soft_limit=123\n        )],\n        user=\"user\",\n        volumes_from=[ecs.CfnTaskDefinition.VolumeFromProperty(\n            read_only=False,\n            source_container=\"sourceContainer\"\n        )],\n        working_directory=\"workingDirectory\"\n    )],\n    cpu=\"cpu\",\n    ephemeral_storage=ecs.CfnTaskDefinition.EphemeralStorageProperty(\n        size_in_gi_b=123\n    ),\n    execution_role_arn=\"executionRoleArn\",\n    family=\"family\",\n    inference_accelerators=[ecs.CfnTaskDefinition.InferenceAcceleratorProperty(\n        device_name=\"deviceName\",\n        device_type=\"deviceType\"\n    )],\n    ipc_mode=\"ipcMode\",\n    memory=\"memory\",\n    network_mode=\"networkMode\",\n    pid_mode=\"pidMode\",\n    placement_constraints=[ecs.CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        expression=\"expression\"\n    )],\n    proxy_configuration=ecs.CfnTaskDefinition.ProxyConfigurationProperty(\n        container_name=\"containerName\",\n\n        # the properties below are optional\n        proxy_configuration_properties=[ecs.CfnTaskDefinition.KeyValuePairProperty(\n            name=\"name\",\n            value=\"value\"\n        )],\n        type=\"type\"\n    ),\n    requires_compatibilities=[\"requiresCompatibilities\"],\n    runtime_platform=ecs.CfnTaskDefinition.RuntimePlatformProperty(\n        cpu_architecture=\"cpuArchitecture\",\n        operating_system_family=\"operatingSystemFamily\"\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    task_role_arn=\"taskRoleArn\",\n    volumes=[ecs.CfnTaskDefinition.VolumeProperty(\n        docker_volume_configuration=ecs.CfnTaskDefinition.DockerVolumeConfigurationProperty(\n            autoprovision=False,\n            driver=\"driver\",\n            driver_opts={\n                \"driver_opts_key\": \"driverOpts\"\n            },\n            labels={\n                \"labels_key\": \"labels\"\n            },\n            scope=\"scope\"\n        ),\n        efs_volume_configuration=ecs.CfnTaskDefinition.EFSVolumeConfigurationProperty(\n            filesystem_id=\"filesystemId\",\n\n            # the properties below are optional\n            authorization_config=ecs.CfnTaskDefinition.AuthorizationConfigProperty(\n                access_point_id=\"accessPointId\",\n                iam=\"iam\"\n            ),\n            root_directory=\"rootDirectory\",\n            transit_encryption=\"transitEncryption\",\n            transit_encryption_port=123\n        ),\n        host=ecs.CfnTaskDefinition.HostVolumePropertiesProperty(\n            source_path=\"sourcePath\"\n        ),\n        name=\"name\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnTaskDefinitionProps cfnTaskDefinitionProps = new CfnTaskDefinitionProps {\n    ContainerDefinitions = new [] { new ContainerDefinitionProperty {\n        Image = \"image\",\n        Name = \"name\",\n\n        // the properties below are optional\n        Command = new [] { \"command\" },\n        Cpu = 123,\n        DependsOn = new [] { new ContainerDependencyProperty {\n            Condition = \"condition\",\n            ContainerName = \"containerName\"\n        } },\n        DisableNetworking = false,\n        DnsSearchDomains = new [] { \"dnsSearchDomains\" },\n        DnsServers = new [] { \"dnsServers\" },\n        DockerLabels = new Dictionary<string, string> {\n            { \"dockerLabelsKey\", \"dockerLabels\" }\n        },\n        DockerSecurityOptions = new [] { \"dockerSecurityOptions\" },\n        EntryPoint = new [] { \"entryPoint\" },\n        Environment = new [] { new KeyValuePairProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        EnvironmentFiles = new [] { new EnvironmentFileProperty {\n            Type = \"type\",\n            Value = \"value\"\n        } },\n        Essential = false,\n        ExtraHosts = new [] { new HostEntryProperty {\n            Hostname = \"hostname\",\n            IpAddress = \"ipAddress\"\n        } },\n        FirelensConfiguration = new FirelensConfigurationProperty {\n            Options = new Dictionary<string, string> {\n                { \"optionsKey\", \"options\" }\n            },\n            Type = \"type\"\n        },\n        HealthCheck = new HealthCheckProperty {\n            Command = new [] { \"command\" },\n            Interval = 123,\n            Retries = 123,\n            StartPeriod = 123,\n            Timeout = 123\n        },\n        Hostname = \"hostname\",\n        Interactive = false,\n        Links = new [] { \"links\" },\n        LinuxParameters = new LinuxParametersProperty {\n            Capabilities = new KernelCapabilitiesProperty {\n                Add = new [] { \"add\" },\n                Drop = new [] { \"drop\" }\n            },\n            Devices = new [] { new DeviceProperty {\n                ContainerPath = \"containerPath\",\n                HostPath = \"hostPath\",\n                Permissions = new [] { \"permissions\" }\n            } },\n            InitProcessEnabled = false,\n            MaxSwap = 123,\n            SharedMemorySize = 123,\n            Swappiness = 123,\n            Tmpfs = new [] { new TmpfsProperty {\n                Size = 123,\n\n                // the properties below are optional\n                ContainerPath = \"containerPath\",\n                MountOptions = new [] { \"mountOptions\" }\n            } }\n        },\n        LogConfiguration = new LogConfigurationProperty {\n            LogDriver = \"logDriver\",\n\n            // the properties below are optional\n            Options = new Dictionary<string, string> {\n                { \"optionsKey\", \"options\" }\n            },\n            SecretOptions = new [] { new SecretProperty {\n                Name = \"name\",\n                ValueFrom = \"valueFrom\"\n            } }\n        },\n        Memory = 123,\n        MemoryReservation = 123,\n        MountPoints = new [] { new MountPointProperty {\n            ContainerPath = \"containerPath\",\n            ReadOnly = false,\n            SourceVolume = \"sourceVolume\"\n        } },\n        PortMappings = new [] { new PortMappingProperty {\n            AppProtocol = \"appProtocol\",\n            ContainerPort = 123,\n            ContainerPortRange = \"containerPortRange\",\n            HostPort = 123,\n            Name = \"name\",\n            Protocol = \"protocol\"\n        } },\n        Privileged = false,\n        PseudoTerminal = false,\n        ReadonlyRootFilesystem = false,\n        RepositoryCredentials = new RepositoryCredentialsProperty {\n            CredentialsParameter = \"credentialsParameter\"\n        },\n        ResourceRequirements = new [] { new ResourceRequirementProperty {\n            Type = \"type\",\n            Value = \"value\"\n        } },\n        Secrets = new [] { new SecretProperty {\n            Name = \"name\",\n            ValueFrom = \"valueFrom\"\n        } },\n        StartTimeout = 123,\n        StopTimeout = 123,\n        SystemControls = new [] { new SystemControlProperty {\n            Namespace = \"namespace\",\n            Value = \"value\"\n        } },\n        Ulimits = new [] { new UlimitProperty {\n            HardLimit = 123,\n            Name = \"name\",\n            SoftLimit = 123\n        } },\n        User = \"user\",\n        VolumesFrom = new [] { new VolumeFromProperty {\n            ReadOnly = false,\n            SourceContainer = \"sourceContainer\"\n        } },\n        WorkingDirectory = \"workingDirectory\"\n    } },\n    Cpu = \"cpu\",\n    EphemeralStorage = new EphemeralStorageProperty {\n        SizeInGiB = 123\n    },\n    ExecutionRoleArn = \"executionRoleArn\",\n    Family = \"family\",\n    InferenceAccelerators = new [] { new InferenceAcceleratorProperty {\n        DeviceName = \"deviceName\",\n        DeviceType = \"deviceType\"\n    } },\n    IpcMode = \"ipcMode\",\n    Memory = \"memory\",\n    NetworkMode = \"networkMode\",\n    PidMode = \"pidMode\",\n    PlacementConstraints = new [] { new TaskDefinitionPlacementConstraintProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        Expression = \"expression\"\n    } },\n    ProxyConfiguration = new ProxyConfigurationProperty {\n        ContainerName = \"containerName\",\n\n        // the properties below are optional\n        ProxyConfigurationProperties = new [] { new KeyValuePairProperty {\n            Name = \"name\",\n            Value = \"value\"\n        } },\n        Type = \"type\"\n    },\n    RequiresCompatibilities = new [] { \"requiresCompatibilities\" },\n    RuntimePlatform = new RuntimePlatformProperty {\n        CpuArchitecture = \"cpuArchitecture\",\n        OperatingSystemFamily = \"operatingSystemFamily\"\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    TaskRoleArn = \"taskRoleArn\",\n    Volumes = new [] { new VolumeProperty {\n        DockerVolumeConfiguration = new DockerVolumeConfigurationProperty {\n            Autoprovision = false,\n            Driver = \"driver\",\n            DriverOpts = new Dictionary<string, string> {\n                { \"driverOptsKey\", \"driverOpts\" }\n            },\n            Labels = new Dictionary<string, string> {\n                { \"labelsKey\", \"labels\" }\n            },\n            Scope = \"scope\"\n        },\n        EfsVolumeConfiguration = new EFSVolumeConfigurationProperty {\n            FilesystemId = \"filesystemId\",\n\n            // the properties below are optional\n            AuthorizationConfig = new AuthorizationConfigProperty {\n                AccessPointId = \"accessPointId\",\n                Iam = \"iam\"\n            },\n            RootDirectory = \"rootDirectory\",\n            TransitEncryption = \"transitEncryption\",\n            TransitEncryptionPort = 123\n        },\n        Host = new HostVolumePropertiesProperty {\n            SourcePath = \"sourcePath\"\n        },\n        Name = \"name\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnTaskDefinitionProps cfnTaskDefinitionProps = CfnTaskDefinitionProps.builder()\n        .containerDefinitions(List.of(ContainerDefinitionProperty.builder()\n                .image(\"image\")\n                .name(\"name\")\n\n                // the properties below are optional\n                .command(List.of(\"command\"))\n                .cpu(123)\n                .dependsOn(List.of(ContainerDependencyProperty.builder()\n                        .condition(\"condition\")\n                        .containerName(\"containerName\")\n                        .build()))\n                .disableNetworking(false)\n                .dnsSearchDomains(List.of(\"dnsSearchDomains\"))\n                .dnsServers(List.of(\"dnsServers\"))\n                .dockerLabels(Map.of(\n                        \"dockerLabelsKey\", \"dockerLabels\"))\n                .dockerSecurityOptions(List.of(\"dockerSecurityOptions\"))\n                .entryPoint(List.of(\"entryPoint\"))\n                .environment(List.of(KeyValuePairProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .environmentFiles(List.of(EnvironmentFileProperty.builder()\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build()))\n                .essential(false)\n                .extraHosts(List.of(HostEntryProperty.builder()\n                        .hostname(\"hostname\")\n                        .ipAddress(\"ipAddress\")\n                        .build()))\n                .firelensConfiguration(FirelensConfigurationProperty.builder()\n                        .options(Map.of(\n                                \"optionsKey\", \"options\"))\n                        .type(\"type\")\n                        .build())\n                .healthCheck(HealthCheckProperty.builder()\n                        .command(List.of(\"command\"))\n                        .interval(123)\n                        .retries(123)\n                        .startPeriod(123)\n                        .timeout(123)\n                        .build())\n                .hostname(\"hostname\")\n                .interactive(false)\n                .links(List.of(\"links\"))\n                .linuxParameters(LinuxParametersProperty.builder()\n                        .capabilities(KernelCapabilitiesProperty.builder()\n                                .add(List.of(\"add\"))\n                                .drop(List.of(\"drop\"))\n                                .build())\n                        .devices(List.of(DeviceProperty.builder()\n                                .containerPath(\"containerPath\")\n                                .hostPath(\"hostPath\")\n                                .permissions(List.of(\"permissions\"))\n                                .build()))\n                        .initProcessEnabled(false)\n                        .maxSwap(123)\n                        .sharedMemorySize(123)\n                        .swappiness(123)\n                        .tmpfs(List.of(TmpfsProperty.builder()\n                                .size(123)\n\n                                // the properties below are optional\n                                .containerPath(\"containerPath\")\n                                .mountOptions(List.of(\"mountOptions\"))\n                                .build()))\n                        .build())\n                .logConfiguration(LogConfigurationProperty.builder()\n                        .logDriver(\"logDriver\")\n\n                        // the properties below are optional\n                        .options(Map.of(\n                                \"optionsKey\", \"options\"))\n                        .secretOptions(List.of(SecretProperty.builder()\n                                .name(\"name\")\n                                .valueFrom(\"valueFrom\")\n                                .build()))\n                        .build())\n                .memory(123)\n                .memoryReservation(123)\n                .mountPoints(List.of(MountPointProperty.builder()\n                        .containerPath(\"containerPath\")\n                        .readOnly(false)\n                        .sourceVolume(\"sourceVolume\")\n                        .build()))\n                .portMappings(List.of(PortMappingProperty.builder()\n                        .appProtocol(\"appProtocol\")\n                        .containerPort(123)\n                        .containerPortRange(\"containerPortRange\")\n                        .hostPort(123)\n                        .name(\"name\")\n                        .protocol(\"protocol\")\n                        .build()))\n                .privileged(false)\n                .pseudoTerminal(false)\n                .readonlyRootFilesystem(false)\n                .repositoryCredentials(RepositoryCredentialsProperty.builder()\n                        .credentialsParameter(\"credentialsParameter\")\n                        .build())\n                .resourceRequirements(List.of(ResourceRequirementProperty.builder()\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build()))\n                .secrets(List.of(SecretProperty.builder()\n                        .name(\"name\")\n                        .valueFrom(\"valueFrom\")\n                        .build()))\n                .startTimeout(123)\n                .stopTimeout(123)\n                .systemControls(List.of(SystemControlProperty.builder()\n                        .namespace(\"namespace\")\n                        .value(\"value\")\n                        .build()))\n                .ulimits(List.of(UlimitProperty.builder()\n                        .hardLimit(123)\n                        .name(\"name\")\n                        .softLimit(123)\n                        .build()))\n                .user(\"user\")\n                .volumesFrom(List.of(VolumeFromProperty.builder()\n                        .readOnly(false)\n                        .sourceContainer(\"sourceContainer\")\n                        .build()))\n                .workingDirectory(\"workingDirectory\")\n                .build()))\n        .cpu(\"cpu\")\n        .ephemeralStorage(EphemeralStorageProperty.builder()\n                .sizeInGiB(123)\n                .build())\n        .executionRoleArn(\"executionRoleArn\")\n        .family(\"family\")\n        .inferenceAccelerators(List.of(InferenceAcceleratorProperty.builder()\n                .deviceName(\"deviceName\")\n                .deviceType(\"deviceType\")\n                .build()))\n        .ipcMode(\"ipcMode\")\n        .memory(\"memory\")\n        .networkMode(\"networkMode\")\n        .pidMode(\"pidMode\")\n        .placementConstraints(List.of(TaskDefinitionPlacementConstraintProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .expression(\"expression\")\n                .build()))\n        .proxyConfiguration(ProxyConfigurationProperty.builder()\n                .containerName(\"containerName\")\n\n                // the properties below are optional\n                .proxyConfigurationProperties(List.of(KeyValuePairProperty.builder()\n                        .name(\"name\")\n                        .value(\"value\")\n                        .build()))\n                .type(\"type\")\n                .build())\n        .requiresCompatibilities(List.of(\"requiresCompatibilities\"))\n        .runtimePlatform(RuntimePlatformProperty.builder()\n                .cpuArchitecture(\"cpuArchitecture\")\n                .operatingSystemFamily(\"operatingSystemFamily\")\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .taskRoleArn(\"taskRoleArn\")\n        .volumes(List.of(VolumeProperty.builder()\n                .dockerVolumeConfiguration(DockerVolumeConfigurationProperty.builder()\n                        .autoprovision(false)\n                        .driver(\"driver\")\n                        .driverOpts(Map.of(\n                                \"driverOptsKey\", \"driverOpts\"))\n                        .labels(Map.of(\n                                \"labelsKey\", \"labels\"))\n                        .scope(\"scope\")\n                        .build())\n                .efsVolumeConfiguration(EFSVolumeConfigurationProperty.builder()\n                        .filesystemId(\"filesystemId\")\n\n                        // the properties below are optional\n                        .authorizationConfig(AuthorizationConfigProperty.builder()\n                                .accessPointId(\"accessPointId\")\n                                .iam(\"iam\")\n                                .build())\n                        .rootDirectory(\"rootDirectory\")\n                        .transitEncryption(\"transitEncryption\")\n                        .transitEncryptionPort(123)\n                        .build())\n                .host(HostVolumePropertiesProperty.builder()\n                        .sourcePath(\"sourcePath\")\n                        .build())\n                .name(\"name\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnTaskDefinitionProps := &cfnTaskDefinitionProps{\n\tcontainerDefinitions: []interface{}{\n\t\t&containerDefinitionProperty{\n\t\t\timage: jsii.String(\"image\"),\n\t\t\tname: jsii.String(\"name\"),\n\n\t\t\t// the properties below are optional\n\t\t\tcommand: []*string{\n\t\t\t\tjsii.String(\"command\"),\n\t\t\t},\n\t\t\tcpu: jsii.Number(123),\n\t\t\tdependsOn: []interface{}{\n\t\t\t\t&containerDependencyProperty{\n\t\t\t\t\tcondition: jsii.String(\"condition\"),\n\t\t\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tdisableNetworking: jsii.Boolean(false),\n\t\t\tdnsSearchDomains: []*string{\n\t\t\t\tjsii.String(\"dnsSearchDomains\"),\n\t\t\t},\n\t\t\tdnsServers: []*string{\n\t\t\t\tjsii.String(\"dnsServers\"),\n\t\t\t},\n\t\t\tdockerLabels: map[string]*string{\n\t\t\t\t\"dockerLabelsKey\": jsii.String(\"dockerLabels\"),\n\t\t\t},\n\t\t\tdockerSecurityOptions: []*string{\n\t\t\t\tjsii.String(\"dockerSecurityOptions\"),\n\t\t\t},\n\t\t\tentryPoint: []*string{\n\t\t\t\tjsii.String(\"entryPoint\"),\n\t\t\t},\n\t\t\tenvironment: []interface{}{\n\t\t\t\t&keyValuePairProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tenvironmentFiles: []interface{}{\n\t\t\t\t&environmentFileProperty{\n\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tessential: jsii.Boolean(false),\n\t\t\textraHosts: []interface{}{\n\t\t\t\t&hostEntryProperty{\n\t\t\t\t\thostname: jsii.String(\"hostname\"),\n\t\t\t\t\tipAddress: jsii.String(\"ipAddress\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tfirelensConfiguration: &firelensConfigurationProperty{\n\t\t\t\toptions: map[string]*string{\n\t\t\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t\t\t},\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t\thealthCheck: &healthCheckProperty{\n\t\t\t\tcommand: []*string{\n\t\t\t\t\tjsii.String(\"command\"),\n\t\t\t\t},\n\t\t\t\tinterval: jsii.Number(123),\n\t\t\t\tretries: jsii.Number(123),\n\t\t\t\tstartPeriod: jsii.Number(123),\n\t\t\t\ttimeout: jsii.Number(123),\n\t\t\t},\n\t\t\thostname: jsii.String(\"hostname\"),\n\t\t\tinteractive: jsii.Boolean(false),\n\t\t\tlinks: []*string{\n\t\t\t\tjsii.String(\"links\"),\n\t\t\t},\n\t\t\tlinuxParameters: &linuxParametersProperty{\n\t\t\t\tcapabilities: &kernelCapabilitiesProperty{\n\t\t\t\t\tadd: []*string{\n\t\t\t\t\t\tjsii.String(\"add\"),\n\t\t\t\t\t},\n\t\t\t\t\tdrop: []*string{\n\t\t\t\t\t\tjsii.String(\"drop\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdevices: []interface{}{\n\t\t\t\t\t&deviceProperty{\n\t\t\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\t\t\thostPath: jsii.String(\"hostPath\"),\n\t\t\t\t\t\tpermissions: []*string{\n\t\t\t\t\t\t\tjsii.String(\"permissions\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tinitProcessEnabled: jsii.Boolean(false),\n\t\t\t\tmaxSwap: jsii.Number(123),\n\t\t\t\tsharedMemorySize: jsii.Number(123),\n\t\t\t\tswappiness: jsii.Number(123),\n\t\t\t\ttmpfs: []interface{}{\n\t\t\t\t\t&tmpfsProperty{\n\t\t\t\t\t\tsize: jsii.Number(123),\n\n\t\t\t\t\t\t// the properties below are optional\n\t\t\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\t\t\tmountOptions: []*string{\n\t\t\t\t\t\t\tjsii.String(\"mountOptions\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tlogConfiguration: &logConfigurationProperty{\n\t\t\t\tlogDriver: jsii.String(\"logDriver\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\toptions: map[string]*string{\n\t\t\t\t\t\"optionsKey\": jsii.String(\"options\"),\n\t\t\t\t},\n\t\t\t\tsecretOptions: []interface{}{\n\t\t\t\t\t&secretProperty{\n\t\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tmemory: jsii.Number(123),\n\t\t\tmemoryReservation: jsii.Number(123),\n\t\t\tmountPoints: []interface{}{\n\t\t\t\t&mountPointProperty{\n\t\t\t\t\tcontainerPath: jsii.String(\"containerPath\"),\n\t\t\t\t\treadOnly: jsii.Boolean(false),\n\t\t\t\t\tsourceVolume: jsii.String(\"sourceVolume\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tportMappings: []interface{}{\n\t\t\t\t&portMappingProperty{\n\t\t\t\t\tappProtocol: jsii.String(\"appProtocol\"),\n\t\t\t\t\tcontainerPort: jsii.Number(123),\n\t\t\t\t\tcontainerPortRange: jsii.String(\"containerPortRange\"),\n\t\t\t\t\thostPort: jsii.Number(123),\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tprotocol: jsii.String(\"protocol\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tprivileged: jsii.Boolean(false),\n\t\t\tpseudoTerminal: jsii.Boolean(false),\n\t\t\treadonlyRootFilesystem: jsii.Boolean(false),\n\t\t\trepositoryCredentials: &repositoryCredentialsProperty{\n\t\t\t\tcredentialsParameter: jsii.String(\"credentialsParameter\"),\n\t\t\t},\n\t\t\tresourceRequirements: []interface{}{\n\t\t\t\t&resourceRequirementProperty{\n\t\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tsecrets: []interface{}{\n\t\t\t\t&secretProperty{\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstartTimeout: jsii.Number(123),\n\t\t\tstopTimeout: jsii.Number(123),\n\t\t\tsystemControls: []interface{}{\n\t\t\t\t&systemControlProperty{\n\t\t\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tulimits: []interface{}{\n\t\t\t\t&ulimitProperty{\n\t\t\t\t\thardLimit: jsii.Number(123),\n\t\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\t\tsoftLimit: jsii.Number(123),\n\t\t\t\t},\n\t\t\t},\n\t\t\tuser: jsii.String(\"user\"),\n\t\t\tvolumesFrom: []interface{}{\n\t\t\t\t&volumeFromProperty{\n\t\t\t\t\treadOnly: jsii.Boolean(false),\n\t\t\t\t\tsourceContainer: jsii.String(\"sourceContainer\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tworkingDirectory: jsii.String(\"workingDirectory\"),\n\t\t},\n\t},\n\tcpu: jsii.String(\"cpu\"),\n\tephemeralStorage: &ephemeralStorageProperty{\n\t\tsizeInGiB: jsii.Number(123),\n\t},\n\texecutionRoleArn: jsii.String(\"executionRoleArn\"),\n\tfamily: jsii.String(\"family\"),\n\tinferenceAccelerators: []interface{}{\n\t\t&inferenceAcceleratorProperty{\n\t\t\tdeviceName: jsii.String(\"deviceName\"),\n\t\t\tdeviceType: jsii.String(\"deviceType\"),\n\t\t},\n\t},\n\tipcMode: jsii.String(\"ipcMode\"),\n\tmemory: jsii.String(\"memory\"),\n\tnetworkMode: jsii.String(\"networkMode\"),\n\tpidMode: jsii.String(\"pidMode\"),\n\tplacementConstraints: []interface{}{\n\t\t&taskDefinitionPlacementConstraintProperty{\n\t\t\ttype: jsii.String(\"type\"),\n\n\t\t\t// the properties below are optional\n\t\t\texpression: jsii.String(\"expression\"),\n\t\t},\n\t},\n\tproxyConfiguration: &proxyConfigurationProperty{\n\t\tcontainerName: jsii.String(\"containerName\"),\n\n\t\t// the properties below are optional\n\t\tproxyConfigurationProperties: []interface{}{\n\t\t\t&keyValuePairProperty{\n\t\t\t\tname: jsii.String(\"name\"),\n\t\t\t\tvalue: jsii.String(\"value\"),\n\t\t\t},\n\t\t},\n\t\ttype: jsii.String(\"type\"),\n\t},\n\trequiresCompatibilities: []*string{\n\t\tjsii.String(\"requiresCompatibilities\"),\n\t},\n\truntimePlatform: &runtimePlatformProperty{\n\t\tcpuArchitecture: jsii.String(\"cpuArchitecture\"),\n\t\toperatingSystemFamily: jsii.String(\"operatingSystemFamily\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttaskRoleArn: jsii.String(\"taskRoleArn\"),\n\tvolumes: []interface{}{\n\t\t&volumeProperty{\n\t\t\tdockerVolumeConfiguration: &dockerVolumeConfigurationProperty{\n\t\t\t\tautoprovision: jsii.Boolean(false),\n\t\t\t\tdriver: jsii.String(\"driver\"),\n\t\t\t\tdriverOpts: map[string]*string{\n\t\t\t\t\t\"driverOptsKey\": jsii.String(\"driverOpts\"),\n\t\t\t\t},\n\t\t\t\tlabels: map[string]*string{\n\t\t\t\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t\t\t\t},\n\t\t\t\tscope: jsii.String(\"scope\"),\n\t\t\t},\n\t\t\tefsVolumeConfiguration: &eFSVolumeConfigurationProperty{\n\t\t\t\tfilesystemId: jsii.String(\"filesystemId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tauthorizationConfig: &authorizationConfigProperty{\n\t\t\t\t\taccessPointId: jsii.String(\"accessPointId\"),\n\t\t\t\t\tiam: jsii.String(\"iam\"),\n\t\t\t\t},\n\t\t\t\trootDirectory: jsii.String(\"rootDirectory\"),\n\t\t\t\ttransitEncryption: jsii.String(\"transitEncryption\"),\n\t\t\t\ttransitEncryptionPort: jsii.Number(123),\n\t\t\t},\n\t\t\thost: &hostVolumePropertiesProperty{\n\t\t\t\tsourcePath: jsii.String(\"sourcePath\"),\n\t\t\t},\n\t\t\tname: jsii.String(\"name\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskDefinitionProps: ecs.CfnTaskDefinitionProps = {\n  containerDefinitions: [{\n    image: 'image',\n    name: 'name',\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    dependsOn: [{\n      condition: 'condition',\n      containerName: 'containerName',\n    }],\n    disableNetworking: false,\n    dnsSearchDomains: ['dnsSearchDomains'],\n    dnsServers: ['dnsServers'],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    dockerSecurityOptions: ['dockerSecurityOptions'],\n    entryPoint: ['entryPoint'],\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    environmentFiles: [{\n      type: 'type',\n      value: 'value',\n    }],\n    essential: false,\n    extraHosts: [{\n      hostname: 'hostname',\n      ipAddress: 'ipAddress',\n    }],\n    firelensConfiguration: {\n      options: {\n        optionsKey: 'options',\n      },\n      type: 'type',\n    },\n    healthCheck: {\n      command: ['command'],\n      interval: 123,\n      retries: 123,\n      startPeriod: 123,\n      timeout: 123,\n    },\n    hostname: 'hostname',\n    interactive: false,\n    links: ['links'],\n    linuxParameters: {\n      capabilities: {\n        add: ['add'],\n        drop: ['drop'],\n      },\n      devices: [{\n        containerPath: 'containerPath',\n        hostPath: 'hostPath',\n        permissions: ['permissions'],\n      }],\n      initProcessEnabled: false,\n      maxSwap: 123,\n      sharedMemorySize: 123,\n      swappiness: 123,\n      tmpfs: [{\n        size: 123,\n\n        // the properties below are optional\n        containerPath: 'containerPath',\n        mountOptions: ['mountOptions'],\n      }],\n    },\n    logConfiguration: {\n      logDriver: 'logDriver',\n\n      // the properties below are optional\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    memory: 123,\n    memoryReservation: 123,\n    mountPoints: [{\n      containerPath: 'containerPath',\n      readOnly: false,\n      sourceVolume: 'sourceVolume',\n    }],\n    portMappings: [{\n      appProtocol: 'appProtocol',\n      containerPort: 123,\n      containerPortRange: 'containerPortRange',\n      hostPort: 123,\n      name: 'name',\n      protocol: 'protocol',\n    }],\n    privileged: false,\n    pseudoTerminal: false,\n    readonlyRootFilesystem: false,\n    repositoryCredentials: {\n      credentialsParameter: 'credentialsParameter',\n    },\n    resourceRequirements: [{\n      type: 'type',\n      value: 'value',\n    }],\n    secrets: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n    startTimeout: 123,\n    stopTimeout: 123,\n    systemControls: [{\n      namespace: 'namespace',\n      value: 'value',\n    }],\n    ulimits: [{\n      hardLimit: 123,\n      name: 'name',\n      softLimit: 123,\n    }],\n    user: 'user',\n    volumesFrom: [{\n      readOnly: false,\n      sourceContainer: 'sourceContainer',\n    }],\n    workingDirectory: 'workingDirectory',\n  }],\n  cpu: 'cpu',\n  ephemeralStorage: {\n    sizeInGiB: 123,\n  },\n  executionRoleArn: 'executionRoleArn',\n  family: 'family',\n  inferenceAccelerators: [{\n    deviceName: 'deviceName',\n    deviceType: 'deviceType',\n  }],\n  ipcMode: 'ipcMode',\n  memory: 'memory',\n  networkMode: 'networkMode',\n  pidMode: 'pidMode',\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  proxyConfiguration: {\n    containerName: 'containerName',\n\n    // the properties below are optional\n    proxyConfigurationProperties: [{\n      name: 'name',\n      value: 'value',\n    }],\n    type: 'type',\n  },\n  requiresCompatibilities: ['requiresCompatibilities'],\n  runtimePlatform: {\n    cpuArchitecture: 'cpuArchitecture',\n    operatingSystemFamily: 'operatingSystemFamily',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskRoleArn: 'taskRoleArn',\n  volumes: [{\n    dockerVolumeConfiguration: {\n      autoprovision: false,\n      driver: 'driver',\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n      scope: 'scope',\n    },\n    efsVolumeConfiguration: {\n      filesystemId: 'filesystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n    name: 'name',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinitionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTaskDefinitionProps: ecs.CfnTaskDefinitionProps = {\n  containerDefinitions: [{\n    image: 'image',\n    name: 'name',\n\n    // the properties below are optional\n    command: ['command'],\n    cpu: 123,\n    dependsOn: [{\n      condition: 'condition',\n      containerName: 'containerName',\n    }],\n    disableNetworking: false,\n    dnsSearchDomains: ['dnsSearchDomains'],\n    dnsServers: ['dnsServers'],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    dockerSecurityOptions: ['dockerSecurityOptions'],\n    entryPoint: ['entryPoint'],\n    environment: [{\n      name: 'name',\n      value: 'value',\n    }],\n    environmentFiles: [{\n      type: 'type',\n      value: 'value',\n    }],\n    essential: false,\n    extraHosts: [{\n      hostname: 'hostname',\n      ipAddress: 'ipAddress',\n    }],\n    firelensConfiguration: {\n      options: {\n        optionsKey: 'options',\n      },\n      type: 'type',\n    },\n    healthCheck: {\n      command: ['command'],\n      interval: 123,\n      retries: 123,\n      startPeriod: 123,\n      timeout: 123,\n    },\n    hostname: 'hostname',\n    interactive: false,\n    links: ['links'],\n    linuxParameters: {\n      capabilities: {\n        add: ['add'],\n        drop: ['drop'],\n      },\n      devices: [{\n        containerPath: 'containerPath',\n        hostPath: 'hostPath',\n        permissions: ['permissions'],\n      }],\n      initProcessEnabled: false,\n      maxSwap: 123,\n      sharedMemorySize: 123,\n      swappiness: 123,\n      tmpfs: [{\n        size: 123,\n\n        // the properties below are optional\n        containerPath: 'containerPath',\n        mountOptions: ['mountOptions'],\n      }],\n    },\n    logConfiguration: {\n      logDriver: 'logDriver',\n\n      // the properties below are optional\n      options: {\n        optionsKey: 'options',\n      },\n      secretOptions: [{\n        name: 'name',\n        valueFrom: 'valueFrom',\n      }],\n    },\n    memory: 123,\n    memoryReservation: 123,\n    mountPoints: [{\n      containerPath: 'containerPath',\n      readOnly: false,\n      sourceVolume: 'sourceVolume',\n    }],\n    portMappings: [{\n      appProtocol: 'appProtocol',\n      containerPort: 123,\n      containerPortRange: 'containerPortRange',\n      hostPort: 123,\n      name: 'name',\n      protocol: 'protocol',\n    }],\n    privileged: false,\n    pseudoTerminal: false,\n    readonlyRootFilesystem: false,\n    repositoryCredentials: {\n      credentialsParameter: 'credentialsParameter',\n    },\n    resourceRequirements: [{\n      type: 'type',\n      value: 'value',\n    }],\n    secrets: [{\n      name: 'name',\n      valueFrom: 'valueFrom',\n    }],\n    startTimeout: 123,\n    stopTimeout: 123,\n    systemControls: [{\n      namespace: 'namespace',\n      value: 'value',\n    }],\n    ulimits: [{\n      hardLimit: 123,\n      name: 'name',\n      softLimit: 123,\n    }],\n    user: 'user',\n    volumesFrom: [{\n      readOnly: false,\n      sourceContainer: 'sourceContainer',\n    }],\n    workingDirectory: 'workingDirectory',\n  }],\n  cpu: 'cpu',\n  ephemeralStorage: {\n    sizeInGiB: 123,\n  },\n  executionRoleArn: 'executionRoleArn',\n  family: 'family',\n  inferenceAccelerators: [{\n    deviceName: 'deviceName',\n    deviceType: 'deviceType',\n  }],\n  ipcMode: 'ipcMode',\n  memory: 'memory',\n  networkMode: 'networkMode',\n  pidMode: 'pidMode',\n  placementConstraints: [{\n    type: 'type',\n\n    // the properties below are optional\n    expression: 'expression',\n  }],\n  proxyConfiguration: {\n    containerName: 'containerName',\n\n    // the properties below are optional\n    proxyConfigurationProperties: [{\n      name: 'name',\n      value: 'value',\n    }],\n    type: 'type',\n  },\n  requiresCompatibilities: ['requiresCompatibilities'],\n  runtimePlatform: {\n    cpuArchitecture: 'cpuArchitecture',\n    operatingSystemFamily: 'operatingSystemFamily',\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  taskRoleArn: 'taskRoleArn',\n  volumes: [{\n    dockerVolumeConfiguration: {\n      autoprovision: false,\n      driver: 'driver',\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n      scope: 'scope',\n    },\n    efsVolumeConfiguration: {\n      filesystemId: 'filesystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n    name: 'name',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 19,
        "10": 82,
        "75": 152,
        "91": 10,
        "153": 1,
        "169": 1,
        "192": 32,
        "193": 39,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 148,
        "290": 1
      },
      "fqnsFingerprint": "0bb0ff8f250723045b265c8d83a6830d5aac0d0ce95699c7fd2f223e01c2460a"
    },
    "487b21171557743ccd5a9929034c4f644b9d5a726d7e1533f7d5d83ba27aec29": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_task_set = ecs.CfnTaskSet(self, \"MyCfnTaskSet\",\n    cluster=\"cluster\",\n    service=\"service\",\n    task_definition=\"taskDefinition\",\n\n    # the properties below are optional\n    external_id=\"externalId\",\n    launch_type=\"launchType\",\n    load_balancers=[ecs.CfnTaskSet.LoadBalancerProperty(\n        container_name=\"containerName\",\n        container_port=123,\n        load_balancer_name=\"loadBalancerName\",\n        target_group_arn=\"targetGroupArn\"\n    )],\n    network_configuration=ecs.CfnTaskSet.NetworkConfigurationProperty(\n        aws_vpc_configuration=ecs.CfnTaskSet.AwsVpcConfigurationProperty(\n            subnets=[\"subnets\"],\n\n            # the properties below are optional\n            assign_public_ip=\"assignPublicIp\",\n            security_groups=[\"securityGroups\"]\n        )\n    ),\n    platform_version=\"platformVersion\",\n    scale=ecs.CfnTaskSet.ScaleProperty(\n        unit=\"unit\",\n        value=123\n    ),\n    service_registries=[ecs.CfnTaskSet.ServiceRegistryProperty(\n        container_name=\"containerName\",\n        container_port=123,\n        port=123,\n        registry_arn=\"registryArn\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnTaskSet cfnTaskSet = new CfnTaskSet(this, \"MyCfnTaskSet\", new CfnTaskSetProps {\n    Cluster = \"cluster\",\n    Service = \"service\",\n    TaskDefinition = \"taskDefinition\",\n\n    // the properties below are optional\n    ExternalId = \"externalId\",\n    LaunchType = \"launchType\",\n    LoadBalancers = new [] { new LoadBalancerProperty {\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        LoadBalancerName = \"loadBalancerName\",\n        TargetGroupArn = \"targetGroupArn\"\n    } },\n    NetworkConfiguration = new NetworkConfigurationProperty {\n        AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n            Subnets = new [] { \"subnets\" },\n\n            // the properties below are optional\n            AssignPublicIp = \"assignPublicIp\",\n            SecurityGroups = new [] { \"securityGroups\" }\n        }\n    },\n    PlatformVersion = \"platformVersion\",\n    Scale = new ScaleProperty {\n        Unit = \"unit\",\n        Value = 123\n    },\n    ServiceRegistries = new [] { new ServiceRegistryProperty {\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        Port = 123,\n        RegistryArn = \"registryArn\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnTaskSet cfnTaskSet = CfnTaskSet.Builder.create(this, \"MyCfnTaskSet\")\n        .cluster(\"cluster\")\n        .service(\"service\")\n        .taskDefinition(\"taskDefinition\")\n\n        // the properties below are optional\n        .externalId(\"externalId\")\n        .launchType(\"launchType\")\n        .loadBalancers(List.of(LoadBalancerProperty.builder()\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .loadBalancerName(\"loadBalancerName\")\n                .targetGroupArn(\"targetGroupArn\")\n                .build()))\n        .networkConfiguration(NetworkConfigurationProperty.builder()\n                .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                        .subnets(List.of(\"subnets\"))\n\n                        // the properties below are optional\n                        .assignPublicIp(\"assignPublicIp\")\n                        .securityGroups(List.of(\"securityGroups\"))\n                        .build())\n                .build())\n        .platformVersion(\"platformVersion\")\n        .scale(ScaleProperty.builder()\n                .unit(\"unit\")\n                .value(123)\n                .build())\n        .serviceRegistries(List.of(ServiceRegistryProperty.builder()\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .port(123)\n                .registryArn(\"registryArn\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnTaskSet := ecs.NewCfnTaskSet(this, jsii.String(\"MyCfnTaskSet\"), &cfnTaskSetProps{\n\tcluster: jsii.String(\"cluster\"),\n\tservice: jsii.String(\"service\"),\n\ttaskDefinition: jsii.String(\"taskDefinition\"),\n\n\t// the properties below are optional\n\texternalId: jsii.String(\"externalId\"),\n\tlaunchType: jsii.String(\"launchType\"),\n\tloadBalancers: []interface{}{\n\t\t&loadBalancerProperty{\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tcontainerPort: jsii.Number(123),\n\t\t\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\t\t\ttargetGroupArn: jsii.String(\"targetGroupArn\"),\n\t\t},\n\t},\n\tnetworkConfiguration: &networkConfigurationProperty{\n\t\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\tsubnets: []*string{\n\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\tsecurityGroups: []*string{\n\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t},\n\t\t},\n\t},\n\tplatformVersion: jsii.String(\"platformVersion\"),\n\tscale: &scaleProperty{\n\t\tunit: jsii.String(\"unit\"),\n\t\tvalue: jsii.Number(123),\n\t},\n\tserviceRegistries: []interface{}{\n\t\t&serviceRegistryProperty{\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tcontainerPort: jsii.Number(123),\n\t\t\tport: jsii.Number(123),\n\t\t\tregistryArn: jsii.String(\"registryArn\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskSet = new ecs.CfnTaskSet(this, 'MyCfnTaskSet', {\n  cluster: 'cluster',\n  service: 'service',\n  taskDefinition: 'taskDefinition',\n\n  // the properties below are optional\n  externalId: 'externalId',\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  platformVersion: 'platformVersion',\n  scale: {\n    unit: 'unit',\n    value: 123,\n  },\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskSet",
        "@aws-cdk/aws-ecs.CfnTaskSetProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTaskSet = new ecs.CfnTaskSet(this, 'MyCfnTaskSet', {\n  cluster: 'cluster',\n  service: 'service',\n  taskDefinition: 'taskDefinition',\n\n  // the properties below are optional\n  externalId: 'externalId',\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  platformVersion: 'platformVersion',\n  scale: {\n    unit: 'unit',\n    value: 123,\n  },\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 17,
        "75": 28,
        "104": 1,
        "192": 4,
        "193": 6,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "6fec7879c8dbd0534f127dcf0d33cf2cf290744bf922dca69593f8d29f3d22d2"
    },
    "ea43e5765c428e954a952cf9be46f05945d7a76dd92bbfa88e8f66ddbc6fdb91": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\naws_vpc_configuration_property = ecs.CfnTaskSet.AwsVpcConfigurationProperty(\n    subnets=[\"subnets\"],\n\n    # the properties below are optional\n    assign_public_ip=\"assignPublicIp\",\n    security_groups=[\"securityGroups\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nAwsVpcConfigurationProperty awsVpcConfigurationProperty = new AwsVpcConfigurationProperty {\n    Subnets = new [] { \"subnets\" },\n\n    // the properties below are optional\n    AssignPublicIp = \"assignPublicIp\",\n    SecurityGroups = new [] { \"securityGroups\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nAwsVpcConfigurationProperty awsVpcConfigurationProperty = AwsVpcConfigurationProperty.builder()\n        .subnets(List.of(\"subnets\"))\n\n        // the properties below are optional\n        .assignPublicIp(\"assignPublicIp\")\n        .securityGroups(List.of(\"securityGroups\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nawsVpcConfigurationProperty := &awsVpcConfigurationProperty{\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\n\t// the properties below are optional\n\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst awsVpcConfigurationProperty: ecs.CfnTaskSet.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.AwsVpcConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskSet.AwsVpcConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsVpcConfigurationProperty: ecs.CfnTaskSet.AwsVpcConfigurationProperty = {\n  subnets: ['subnets'],\n\n  // the properties below are optional\n  assignPublicIp: 'assignPublicIp',\n  securityGroups: ['securityGroups'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ef544ab2b838270e9eb1283708a3fb1f437b39dc6048d4219e27f96ef7919a3e"
    },
    "d751418524b18f47b4290ce3a9cf9b59145030ef8b0ccf08684adad5035b6ef4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nload_balancer_property = ecs.CfnTaskSet.LoadBalancerProperty(\n    container_name=\"containerName\",\n    container_port=123,\n    load_balancer_name=\"loadBalancerName\",\n    target_group_arn=\"targetGroupArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLoadBalancerProperty loadBalancerProperty = new LoadBalancerProperty {\n    ContainerName = \"containerName\",\n    ContainerPort = 123,\n    LoadBalancerName = \"loadBalancerName\",\n    TargetGroupArn = \"targetGroupArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLoadBalancerProperty loadBalancerProperty = LoadBalancerProperty.builder()\n        .containerName(\"containerName\")\n        .containerPort(123)\n        .loadBalancerName(\"loadBalancerName\")\n        .targetGroupArn(\"targetGroupArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nloadBalancerProperty := &loadBalancerProperty{\n\tcontainerName: jsii.String(\"containerName\"),\n\tcontainerPort: jsii.Number(123),\n\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\ttargetGroupArn: jsii.String(\"targetGroupArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst loadBalancerProperty: ecs.CfnTaskSet.LoadBalancerProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  loadBalancerName: 'loadBalancerName',\n  targetGroupArn: 'targetGroupArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.LoadBalancerProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskSet.LoadBalancerProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancerProperty: ecs.CfnTaskSet.LoadBalancerProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  loadBalancerName: 'loadBalancerName',\n  targetGroupArn: 'targetGroupArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "56d788264606fbd698e1cbdbae7bbd99c017a3ffcecab16e4b0e25a19fe78593"
    },
    "eca52a1d9362b62e35e13b261085de40cb2a0162e8acb19a4593819c4b16858e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nnetwork_configuration_property = ecs.CfnTaskSet.NetworkConfigurationProperty(\n    aws_vpc_configuration=ecs.CfnTaskSet.AwsVpcConfigurationProperty(\n        subnets=[\"subnets\"],\n\n        # the properties below are optional\n        assign_public_ip=\"assignPublicIp\",\n        security_groups=[\"securityGroups\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nNetworkConfigurationProperty networkConfigurationProperty = new NetworkConfigurationProperty {\n    AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n        Subnets = new [] { \"subnets\" },\n\n        // the properties below are optional\n        AssignPublicIp = \"assignPublicIp\",\n        SecurityGroups = new [] { \"securityGroups\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nNetworkConfigurationProperty networkConfigurationProperty = NetworkConfigurationProperty.builder()\n        .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                .subnets(List.of(\"subnets\"))\n\n                // the properties below are optional\n                .assignPublicIp(\"assignPublicIp\")\n                .securityGroups(List.of(\"securityGroups\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nnetworkConfigurationProperty := &networkConfigurationProperty{\n\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\tsubnets: []*string{\n\t\t\tjsii.String(\"subnets\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\tsecurityGroups: []*string{\n\t\t\tjsii.String(\"securityGroups\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst networkConfigurationProperty: ecs.CfnTaskSet.NetworkConfigurationProperty = {\n  awsVpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.NetworkConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskSet.NetworkConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst networkConfigurationProperty: ecs.CfnTaskSet.NetworkConfigurationProperty = {\n  awsVpcConfiguration: {\n    subnets: ['subnets'],\n\n    // the properties below are optional\n    assignPublicIp: 'assignPublicIp',\n    securityGroups: ['securityGroups'],\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "3414aadb04cfa6bf837d2866658944938153a0b85a4ccd63169fa6f2d8919b40"
    },
    "13fb9cd2e084b75fbdb92d72ea12b4290a10e34831511b5e3b10d01b9b3a3db9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nscale_property = ecs.CfnTaskSet.ScaleProperty(\n    unit=\"unit\",\n    value=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nScaleProperty scaleProperty = new ScaleProperty {\n    Unit = \"unit\",\n    Value = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nScaleProperty scaleProperty = ScaleProperty.builder()\n        .unit(\"unit\")\n        .value(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nscaleProperty := &scaleProperty{\n\tunit: jsii.String(\"unit\"),\n\tvalue: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst scaleProperty: ecs.CfnTaskSet.ScaleProperty = {\n  unit: 'unit',\n  value: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ScaleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskSet.ScaleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scaleProperty: ecs.CfnTaskSet.ScaleProperty = {\n  unit: 'unit',\n  value: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7ce0e6aeaa3c9972e3bbd372ae9254a34efe1337c941e769a41e1bd5caf9702b"
    },
    "0d2d89f7bc7e2b0829a13e08cf9905b43e3eaa018a9c48db249f9ecdeb2a0938": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nservice_registry_property = ecs.CfnTaskSet.ServiceRegistryProperty(\n    container_name=\"containerName\",\n    container_port=123,\n    port=123,\n    registry_arn=\"registryArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nServiceRegistryProperty serviceRegistryProperty = new ServiceRegistryProperty {\n    ContainerName = \"containerName\",\n    ContainerPort = 123,\n    Port = 123,\n    RegistryArn = \"registryArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nServiceRegistryProperty serviceRegistryProperty = ServiceRegistryProperty.builder()\n        .containerName(\"containerName\")\n        .containerPort(123)\n        .port(123)\n        .registryArn(\"registryArn\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nserviceRegistryProperty := &serviceRegistryProperty{\n\tcontainerName: jsii.String(\"containerName\"),\n\tcontainerPort: jsii.Number(123),\n\tport: jsii.Number(123),\n\tregistryArn: jsii.String(\"registryArn\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst serviceRegistryProperty: ecs.CfnTaskSet.ServiceRegistryProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  port: 123,\n  registryArn: 'registryArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskSet.ServiceRegistryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskSet.ServiceRegistryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceRegistryProperty: ecs.CfnTaskSet.ServiceRegistryProperty = {\n  containerName: 'containerName',\n  containerPort: 123,\n  port: 123,\n  registryArn: 'registryArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 9,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0e92abee8b9d4bdd1b6c28cfef46ee186e52c0a3a6c0d546f8728f31d5eb2bdc"
    },
    "c1c0d97388c9640c30f339ab4117a0fd7fe6c7b59438347607d34064407998de": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncfn_task_set_props = ecs.CfnTaskSetProps(\n    cluster=\"cluster\",\n    service=\"service\",\n    task_definition=\"taskDefinition\",\n\n    # the properties below are optional\n    external_id=\"externalId\",\n    launch_type=\"launchType\",\n    load_balancers=[ecs.CfnTaskSet.LoadBalancerProperty(\n        container_name=\"containerName\",\n        container_port=123,\n        load_balancer_name=\"loadBalancerName\",\n        target_group_arn=\"targetGroupArn\"\n    )],\n    network_configuration=ecs.CfnTaskSet.NetworkConfigurationProperty(\n        aws_vpc_configuration=ecs.CfnTaskSet.AwsVpcConfigurationProperty(\n            subnets=[\"subnets\"],\n\n            # the properties below are optional\n            assign_public_ip=\"assignPublicIp\",\n            security_groups=[\"securityGroups\"]\n        )\n    ),\n    platform_version=\"platformVersion\",\n    scale=ecs.CfnTaskSet.ScaleProperty(\n        unit=\"unit\",\n        value=123\n    ),\n    service_registries=[ecs.CfnTaskSet.ServiceRegistryProperty(\n        container_name=\"containerName\",\n        container_port=123,\n        port=123,\n        registry_arn=\"registryArn\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCfnTaskSetProps cfnTaskSetProps = new CfnTaskSetProps {\n    Cluster = \"cluster\",\n    Service = \"service\",\n    TaskDefinition = \"taskDefinition\",\n\n    // the properties below are optional\n    ExternalId = \"externalId\",\n    LaunchType = \"launchType\",\n    LoadBalancers = new [] { new LoadBalancerProperty {\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        LoadBalancerName = \"loadBalancerName\",\n        TargetGroupArn = \"targetGroupArn\"\n    } },\n    NetworkConfiguration = new NetworkConfigurationProperty {\n        AwsVpcConfiguration = new AwsVpcConfigurationProperty {\n            Subnets = new [] { \"subnets\" },\n\n            // the properties below are optional\n            AssignPublicIp = \"assignPublicIp\",\n            SecurityGroups = new [] { \"securityGroups\" }\n        }\n    },\n    PlatformVersion = \"platformVersion\",\n    Scale = new ScaleProperty {\n        Unit = \"unit\",\n        Value = 123\n    },\n    ServiceRegistries = new [] { new ServiceRegistryProperty {\n        ContainerName = \"containerName\",\n        ContainerPort = 123,\n        Port = 123,\n        RegistryArn = \"registryArn\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCfnTaskSetProps cfnTaskSetProps = CfnTaskSetProps.builder()\n        .cluster(\"cluster\")\n        .service(\"service\")\n        .taskDefinition(\"taskDefinition\")\n\n        // the properties below are optional\n        .externalId(\"externalId\")\n        .launchType(\"launchType\")\n        .loadBalancers(List.of(LoadBalancerProperty.builder()\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .loadBalancerName(\"loadBalancerName\")\n                .targetGroupArn(\"targetGroupArn\")\n                .build()))\n        .networkConfiguration(NetworkConfigurationProperty.builder()\n                .awsVpcConfiguration(AwsVpcConfigurationProperty.builder()\n                        .subnets(List.of(\"subnets\"))\n\n                        // the properties below are optional\n                        .assignPublicIp(\"assignPublicIp\")\n                        .securityGroups(List.of(\"securityGroups\"))\n                        .build())\n                .build())\n        .platformVersion(\"platformVersion\")\n        .scale(ScaleProperty.builder()\n                .unit(\"unit\")\n                .value(123)\n                .build())\n        .serviceRegistries(List.of(ServiceRegistryProperty.builder()\n                .containerName(\"containerName\")\n                .containerPort(123)\n                .port(123)\n                .registryArn(\"registryArn\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncfnTaskSetProps := &cfnTaskSetProps{\n\tcluster: jsii.String(\"cluster\"),\n\tservice: jsii.String(\"service\"),\n\ttaskDefinition: jsii.String(\"taskDefinition\"),\n\n\t// the properties below are optional\n\texternalId: jsii.String(\"externalId\"),\n\tlaunchType: jsii.String(\"launchType\"),\n\tloadBalancers: []interface{}{\n\t\t&loadBalancerProperty{\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tcontainerPort: jsii.Number(123),\n\t\t\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\t\t\ttargetGroupArn: jsii.String(\"targetGroupArn\"),\n\t\t},\n\t},\n\tnetworkConfiguration: &networkConfigurationProperty{\n\t\tawsVpcConfiguration: &awsVpcConfigurationProperty{\n\t\t\tsubnets: []*string{\n\t\t\t\tjsii.String(\"subnets\"),\n\t\t\t},\n\n\t\t\t// the properties below are optional\n\t\t\tassignPublicIp: jsii.String(\"assignPublicIp\"),\n\t\t\tsecurityGroups: []*string{\n\t\t\t\tjsii.String(\"securityGroups\"),\n\t\t\t},\n\t\t},\n\t},\n\tplatformVersion: jsii.String(\"platformVersion\"),\n\tscale: &scaleProperty{\n\t\tunit: jsii.String(\"unit\"),\n\t\tvalue: jsii.Number(123),\n\t},\n\tserviceRegistries: []interface{}{\n\t\t&serviceRegistryProperty{\n\t\t\tcontainerName: jsii.String(\"containerName\"),\n\t\t\tcontainerPort: jsii.Number(123),\n\t\t\tport: jsii.Number(123),\n\t\t\tregistryArn: jsii.String(\"registryArn\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst cfnTaskSetProps: ecs.CfnTaskSetProps = {\n  cluster: 'cluster',\n  service: 'service',\n  taskDefinition: 'taskDefinition',\n\n  // the properties below are optional\n  externalId: 'externalId',\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  platformVersion: 'platformVersion',\n  scale: {\n    unit: 'unit',\n    value: 123,\n  },\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CfnTaskSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskSetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnTaskSetProps: ecs.CfnTaskSetProps = {\n  cluster: 'cluster',\n  service: 'service',\n  taskDefinition: 'taskDefinition',\n\n  // the properties below are optional\n  externalId: 'externalId',\n  launchType: 'launchType',\n  loadBalancers: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    loadBalancerName: 'loadBalancerName',\n    targetGroupArn: 'targetGroupArn',\n  }],\n  networkConfiguration: {\n    awsVpcConfiguration: {\n      subnets: ['subnets'],\n\n      // the properties below are optional\n      assignPublicIp: 'assignPublicIp',\n      securityGroups: ['securityGroups'],\n    },\n  },\n  platformVersion: 'platformVersion',\n  scale: {\n    unit: 'unit',\n    value: 123,\n  },\n  serviceRegistries: [{\n    containerName: 'containerName',\n    containerPort: 123,\n    port: 123,\n    registryArn: 'registryArn',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 16,
        "75": 28,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "bb9697fcd3644d64916b11fd46f887f524f35e16e9cda45e3bbee44fdd9135ea"
    },
    "1818c3e90c192cfd1bd808eb2ec7bbebcedb05196de9d466d4b5d14ca0a29cd6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# vpc: ec2.Vpc\n\ncloud_map_namespace_options = ecs.CloudMapNamespaceOptions(\n    name=\"name\",\n\n    # the properties below are optional\n    type=servicediscovery.NamespaceType.HTTP,\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nVpc vpc;\n\nCloudMapNamespaceOptions cloudMapNamespaceOptions = new CloudMapNamespaceOptions {\n    Name = \"name\",\n\n    // the properties below are optional\n    Type = NamespaceType.HTTP,\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nVpc vpc;\n\nCloudMapNamespaceOptions cloudMapNamespaceOptions = CloudMapNamespaceOptions.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .type(NamespaceType.HTTP)\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar vpc vpc\n\ncloudMapNamespaceOptions := &cloudMapNamespaceOptions{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\ttype: servicediscovery.namespaceType_HTTP,\n\tvpc: vpc,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const vpc: ec2.Vpc;\nconst cloudMapNamespaceOptions: ecs.CloudMapNamespaceOptions = {\n  name: 'name',\n\n  // the properties below are optional\n  type: servicediscovery.NamespaceType.HTTP,\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CloudMapNamespaceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.CloudMapNamespaceOptions",
        "@aws-cdk/aws-servicediscovery.NamespaceType",
        "@aws-cdk/aws-servicediscovery.NamespaceType#HTTP"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cloudMapNamespaceOptions: ecs.CloudMapNamespaceOptions = {\n  name: 'name',\n\n  // the properties below are optional\n  type: servicediscovery.NamespaceType.HTTP,\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b2db68cc5309d9067df30e67ec6ba9ec335c36b4f28b3f3df2b074af4669f749"
    },
    "52e4cde21120d51675431c484d5d4ac4d99a4202f719b28f7640aba71d57af72": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n# cluster: ecs.Cluster\n\n\nservice = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create A records - useful for AWSVPC network mode.\n        dns_record_type=cloudmap.DnsRecordType.A\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create A records - useful for AWSVPC network mode.\n        DnsRecordType = DnsRecordType.A\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create A records - useful for AWSVPC network mode.\n                .dnsRecordType(DnsRecordType.A)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\nvar cluster cluster\n\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcloudMapOptions: &cloudMapOptions{\n\t\t// Create A records - useful for AWSVPC network mode.\n\t\tdnsRecordType: cloudmap.dnsRecordType_A,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a4a9912d2348c78fbabb6d83a34ff47fb0eb7dd9b026206d1afd7ebd5c4fffb4"
    },
    "a3e3c1934e6c762889b8e3e482a443514b03d82d2d09e7d6320285d7744506ad": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.Ec2Service(self, \"EC2Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(),\n    MinCapacity = 0,\n    MaxCapacity = 100\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryReservationMiB = 256\n});\n\nnew Ec2Service(this, \"EC2Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName,\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .minCapacity(0)\n        .maxCapacity(100)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryReservationMiB(256)\n        .build());\n\nEc2Service.Builder.create(this, \"EC2Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux2(),\n\tminCapacity: jsii.Number(0),\n\tmaxCapacity: jsii.Number(100),\n})\n\ncapacityProvider := ecs.NewAsgCapacityProvider(this, jsii.String(\"AsgCapacityProvider\"), &asgCapacityProviderProps{\n\tautoScalingGroup: autoScalingGroup,\n})\ncluster.addAsgCapacityProvider(capacityProvider)\n\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"web\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryReservationMiB: jsii.Number(256),\n})\n\necs.NewEc2Service(this, jsii.String(\"EC2Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: capacityProvider.capacityProviderName,\n\t\t\tweight: jsii.Number(1),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Cluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 46,
        "104": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 13,
        "196": 4,
        "197": 6,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "281": 9,
        "282": 5,
        "290": 1
      },
      "fqnsFingerprint": "0bc7fa1f88b33ced16d01728c58427936e6112734dae274375b9b77804c9ac6a"
    },
    "70d3e7c6490ed66f2ea7ffbe3139e1d94ee432b6b12119b38f46852f9f98b87d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_autoscaling as autoscaling\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# auto_scaling_group: autoscaling.AutoScalingGroup\n# bucket: s3.Bucket\n# key: kms.Key\n# log_group: logs.LogGroup\n# namespace: servicediscovery.INamespace\n# security_group: ec2.SecurityGroup\n# vpc: ec2.Vpc\n\ncluster_attributes = ecs.ClusterAttributes(\n    cluster_name=\"clusterName\",\n    security_groups=[security_group],\n    vpc=vpc,\n\n    # the properties below are optional\n    autoscaling_group=auto_scaling_group,\n    cluster_arn=\"clusterArn\",\n    default_cloud_map_namespace=namespace,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_encryption_enabled=False,\n            cloud_watch_log_group=log_group,\n            s3_bucket=bucket,\n            s3_encryption_enabled=False,\n            s3_key_prefix=\"s3KeyPrefix\"\n        ),\n        logging=ecs.ExecuteCommandLogging.NONE\n    ),\n    has_ec2_capacity=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.AutoScaling;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.KMS;\nusing Amazon.CDK.AWS.Logs;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nAutoScalingGroup autoScalingGroup;\nBucket bucket;\nKey key;\nLogGroup logGroup;\nINamespace namespace;\nSecurityGroup securityGroup;\nVpc vpc;\n\nClusterAttributes clusterAttributes = new ClusterAttributes {\n    ClusterName = \"clusterName\",\n    SecurityGroups = new [] { securityGroup },\n    Vpc = vpc,\n\n    // the properties below are optional\n    AutoscalingGroup = autoScalingGroup,\n    ClusterArn = \"clusterArn\",\n    DefaultCloudMapNamespace = namespace,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = key,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchEncryptionEnabled = false,\n            CloudWatchLogGroup = logGroup,\n            S3Bucket = bucket,\n            S3EncryptionEnabled = false,\n            S3KeyPrefix = \"s3KeyPrefix\"\n        },\n        Logging = ExecuteCommandLogging.NONE\n    },\n    HasEc2Capacity = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.autoscaling.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.kms.*;\nimport software.amazon.awscdk.services.logs.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nAutoScalingGroup autoScalingGroup;\nBucket bucket;\nKey key;\nLogGroup logGroup;\nINamespace namespace;\nSecurityGroup securityGroup;\nVpc vpc;\n\nClusterAttributes clusterAttributes = ClusterAttributes.builder()\n        .clusterName(\"clusterName\")\n        .securityGroups(List.of(securityGroup))\n        .vpc(vpc)\n\n        // the properties below are optional\n        .autoscalingGroup(autoScalingGroup)\n        .clusterArn(\"clusterArn\")\n        .defaultCloudMapNamespace(namespace)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(key)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchEncryptionEnabled(false)\n                        .cloudWatchLogGroup(logGroup)\n                        .s3Bucket(bucket)\n                        .s3EncryptionEnabled(false)\n                        .s3KeyPrefix(\"s3KeyPrefix\")\n                        .build())\n                .logging(ExecuteCommandLogging.NONE)\n                .build())\n        .hasEc2Capacity(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport autoscaling \"github.com/aws-samples/dummy/awscdkawsautoscaling\"\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport kms \"github.com/aws-samples/dummy/awscdkawskms\"\nimport logs \"github.com/aws-samples/dummy/awscdkawslogs\"\nimport s3 \"github.com/aws-samples/dummy/awscdkawss3\"\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar autoScalingGroup autoScalingGroup\nvar bucket bucket\nvar key key\nvar logGroup logGroup\nvar namespace iNamespace\nvar securityGroup securityGroup\nvar vpc vpc\n\nclusterAttributes := &clusterAttributes{\n\tclusterName: jsii.String(\"clusterName\"),\n\tsecurityGroups: []iSecurityGroup{\n\t\tsecurityGroup,\n\t},\n\tvpc: vpc,\n\n\t// the properties below are optional\n\tautoscalingGroup: autoScalingGroup,\n\tclusterArn: jsii.String(\"clusterArn\"),\n\tdefaultCloudMapNamespace: namespace,\n\texecuteCommandConfiguration: &executeCommandConfiguration{\n\t\tkmsKey: key,\n\t\tlogConfiguration: &executeCommandLogConfiguration{\n\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(false),\n\t\t\tcloudWatchLogGroup: logGroup,\n\t\t\ts3Bucket: bucket,\n\t\t\ts3EncryptionEnabled: jsii.Boolean(false),\n\t\t\ts3KeyPrefix: jsii.String(\"s3KeyPrefix\"),\n\t\t},\n\t\tlogging: ecs.executeCommandLogging_NONE,\n\t},\n\thasEc2Capacity: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\ndeclare const bucket: s3.Bucket;\ndeclare const key: kms.Key;\ndeclare const logGroup: logs.LogGroup;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const vpc: ec2.Vpc;\nconst clusterAttributes: ecs.ClusterAttributes = {\n  clusterName: 'clusterName',\n  securityGroups: [securityGroup],\n  vpc: vpc,\n\n  // the properties below are optional\n  autoscalingGroup: autoScalingGroup,\n  clusterArn: 'clusterArn',\n  defaultCloudMapNamespace: namespace,\n  executeCommandConfiguration: {\n    kmsKey: key,\n    logConfiguration: {\n      cloudWatchEncryptionEnabled: false,\n      cloudWatchLogGroup: logGroup,\n      s3Bucket: bucket,\n      s3EncryptionEnabled: false,\n      s3KeyPrefix: 's3KeyPrefix',\n    },\n    logging: ecs.ExecuteCommandLogging.NONE,\n  },\n  hasEc2Capacity: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ClusterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.ClusterAttributes",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#NONE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-servicediscovery.INamespace"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\ndeclare const bucket: s3.Bucket;\ndeclare const key: kms.Key;\ndeclare const logGroup: logs.LogGroup;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst clusterAttributes: ecs.ClusterAttributes = {\n  clusterName: 'clusterName',\n  securityGroups: [securityGroup],\n  vpc: vpc,\n\n  // the properties below are optional\n  autoscalingGroup: autoScalingGroup,\n  clusterArn: 'clusterArn',\n  defaultCloudMapNamespace: namespace,\n  executeCommandConfiguration: {\n    kmsKey: key,\n    logConfiguration: {\n      cloudWatchEncryptionEnabled: false,\n      cloudWatchLogGroup: logGroup,\n      s3Bucket: bucket,\n      s3EncryptionEnabled: false,\n      s3KeyPrefix: 's3KeyPrefix',\n    },\n    logging: ecs.ExecuteCommandLogging.NONE,\n  },\n  hasEc2Capacity: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 57,
        "91": 3,
        "130": 7,
        "153": 8,
        "169": 8,
        "192": 1,
        "193": 3,
        "194": 2,
        "225": 8,
        "242": 8,
        "243": 8,
        "254": 7,
        "255": 7,
        "256": 7,
        "281": 16,
        "290": 1
      },
      "fqnsFingerprint": "0c62580e686f90136b55def4c1447e42afb15913a3477be8dcfacd184f595d79"
    },
    "f7738eeb757dc1be01b718b7b0387879439fc8a738cf8705bc3f16f98b7b8067": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"FargateCluster\", vpc=vpc)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    compatibility=ecs.Compatibility.FARGATE\n)\n\ncontainer_definition = task_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"RunFargate\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    assign_public_ip=True,\n    container_overrides=[tasks.ContainerOverride(\n        container_definition=container_definition,\n        environment=[tasks.TaskEnvironmentVariable(name=\"SOME_KEY\", value=sfn.JsonPath.string_at(\"$.SomeKey\"))]\n    )],\n    launch_target=tasks.EcsFargateLaunchTarget()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"FargateCluster\", new ClusterProps { Vpc = vpc });\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    Compatibility = Compatibility.FARGATE\n});\n\nContainerDefinition containerDefinition = taskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"RunFargate\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    AssignPublicIp = true,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n        Environment = new [] { new TaskEnvironmentVariable { Name = \"SOME_KEY\", Value = JsonPath.StringAt(\"$.SomeKey\") } }\n    } },\n    LaunchTarget = new EcsFargateLaunchTarget()\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCluster\").vpc(vpc).build();\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .compatibility(Compatibility.FARGATE)\n        .build();\n\nContainerDefinition containerDefinition = taskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"RunFargate\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .assignPublicIp(true)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n                .environment(List.of(TaskEnvironmentVariable.builder().name(\"SOME_KEY\").value(JsonPath.stringAt(\"$.SomeKey\")).build()))\n                .build()))\n        .launchTarget(new EcsFargateLaunchTarget())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"FargateCluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tmemoryMiB: jsii.String(\"512\"),\n\tcpu: jsii.String(\"256\"),\n\tcompatibility: ecs.compatibility_FARGATE,\n})\n\ncontainerDefinition := taskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"RunFargate\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tassignPublicIp: jsii.Boolean(true),\n\tcontainerOverrides: []containerOverride{\n\t\t&containerOverride{\n\t\t\tcontainerDefinition: containerDefinition,\n\t\t\tenvironment: []taskEnvironmentVariable{\n\t\t\t\t&taskEnvironmentVariable{\n\t\t\t\t\tname: jsii.String(\"SOME_KEY\"),\n\t\t\t\t\tvalue: sfn.jsonPath.stringAt(jsii.String(\"$.SomeKey\")),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n\tlaunchTarget: tasks.NewEcsFargateLaunchTarget(),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 47,
        "104": 4,
        "106": 2,
        "192": 2,
        "193": 7,
        "194": 15,
        "196": 4,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 13,
        "282": 4
      },
      "fqnsFingerprint": "738a2d9234dc4af6385776847628ecf2b3332362c08eabc8691fb9003834d7d4"
    },
    "ceddedc4c3ec5f87e2bfb7198dc29c27cd9f4890e1d70beb76ec9fe195223c02": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\ncommon_task_definition_attributes = ecs.CommonTaskDefinitionAttributes(\n    task_definition_arn=\"taskDefinitionArn\",\n\n    # the properties below are optional\n    network_mode=ecs.NetworkMode.NONE,\n    task_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nCommonTaskDefinitionAttributes commonTaskDefinitionAttributes = new CommonTaskDefinitionAttributes {\n    TaskDefinitionArn = \"taskDefinitionArn\",\n\n    // the properties below are optional\n    NetworkMode = NetworkMode.NONE,\n    TaskRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nCommonTaskDefinitionAttributes commonTaskDefinitionAttributes = CommonTaskDefinitionAttributes.builder()\n        .taskDefinitionArn(\"taskDefinitionArn\")\n\n        // the properties below are optional\n        .networkMode(NetworkMode.NONE)\n        .taskRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\ncommonTaskDefinitionAttributes := &commonTaskDefinitionAttributes{\n\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t// the properties below are optional\n\tnetworkMode: ecs.networkMode_NONE,\n\ttaskRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst commonTaskDefinitionAttributes: ecs.CommonTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CommonTaskDefinitionAttributes",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#NONE",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonTaskDefinitionAttributes: ecs.CommonTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8ed90c6efa7ebbe713f77a94c68b2d3e19fa9168a69fe76f3e983c57bf1c58ea"
    },
    "add6922652836abae37b932854c5b4fdcffb9d82a34bcee20dd49af0551b1a3d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# proxy_configuration: ecs.ProxyConfiguration\n# role: iam.Role\n\ncommon_task_definition_props = ecs.CommonTaskDefinitionProps(\n    execution_role=role,\n    family=\"family\",\n    proxy_configuration=proxy_configuration,\n    task_role=role,\n    volumes=[ecs.Volume(\n        name=\"name\",\n\n        # the properties below are optional\n        docker_volume_configuration=ecs.DockerVolumeConfiguration(\n            driver=\"driver\",\n            scope=ecs.Scope.TASK,\n\n            # the properties below are optional\n            autoprovision=False,\n            driver_opts={\n                \"driver_opts_key\": \"driverOpts\"\n            },\n            labels={\n                \"labels_key\": \"labels\"\n            }\n        ),\n        efs_volume_configuration=ecs.EfsVolumeConfiguration(\n            file_system_id=\"fileSystemId\",\n\n            # the properties below are optional\n            authorization_config=ecs.AuthorizationConfig(\n                access_point_id=\"accessPointId\",\n                iam=\"iam\"\n            ),\n            root_directory=\"rootDirectory\",\n            transit_encryption=\"transitEncryption\",\n            transit_encryption_port=123\n        ),\n        host=ecs.Host(\n            source_path=\"sourcePath\"\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nProxyConfiguration proxyConfiguration;\nRole role;\n\nCommonTaskDefinitionProps commonTaskDefinitionProps = new CommonTaskDefinitionProps {\n    ExecutionRole = role,\n    Family = \"family\",\n    ProxyConfiguration = proxyConfiguration,\n    TaskRole = role,\n    Volumes = new [] { new Volume {\n        Name = \"name\",\n\n        // the properties below are optional\n        DockerVolumeConfiguration = new DockerVolumeConfiguration {\n            Driver = \"driver\",\n            Scope = Scope.TASK,\n\n            // the properties below are optional\n            Autoprovision = false,\n            DriverOpts = new Dictionary<string, string> {\n                { \"driverOptsKey\", \"driverOpts\" }\n            },\n            Labels = new Dictionary<string, string> {\n                { \"labelsKey\", \"labels\" }\n            }\n        },\n        EfsVolumeConfiguration = new EfsVolumeConfiguration {\n            FileSystemId = \"fileSystemId\",\n\n            // the properties below are optional\n            AuthorizationConfig = new AuthorizationConfig {\n                AccessPointId = \"accessPointId\",\n                Iam = \"iam\"\n            },\n            RootDirectory = \"rootDirectory\",\n            TransitEncryption = \"transitEncryption\",\n            TransitEncryptionPort = 123\n        },\n        Host = new Host {\n            SourcePath = \"sourcePath\"\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nProxyConfiguration proxyConfiguration;\nRole role;\n\nCommonTaskDefinitionProps commonTaskDefinitionProps = CommonTaskDefinitionProps.builder()\n        .executionRole(role)\n        .family(\"family\")\n        .proxyConfiguration(proxyConfiguration)\n        .taskRole(role)\n        .volumes(List.of(Volume.builder()\n                .name(\"name\")\n\n                // the properties below are optional\n                .dockerVolumeConfiguration(DockerVolumeConfiguration.builder()\n                        .driver(\"driver\")\n                        .scope(Scope.TASK)\n\n                        // the properties below are optional\n                        .autoprovision(false)\n                        .driverOpts(Map.of(\n                                \"driverOptsKey\", \"driverOpts\"))\n                        .labels(Map.of(\n                                \"labelsKey\", \"labels\"))\n                        .build())\n                .efsVolumeConfiguration(EfsVolumeConfiguration.builder()\n                        .fileSystemId(\"fileSystemId\")\n\n                        // the properties below are optional\n                        .authorizationConfig(AuthorizationConfig.builder()\n                                .accessPointId(\"accessPointId\")\n                                .iam(\"iam\")\n                                .build())\n                        .rootDirectory(\"rootDirectory\")\n                        .transitEncryption(\"transitEncryption\")\n                        .transitEncryptionPort(123)\n                        .build())\n                .host(Host.builder()\n                        .sourcePath(\"sourcePath\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar proxyConfiguration proxyConfiguration\nvar role role\n\ncommonTaskDefinitionProps := &commonTaskDefinitionProps{\n\texecutionRole: role,\n\tfamily: jsii.String(\"family\"),\n\tproxyConfiguration: proxyConfiguration,\n\ttaskRole: role,\n\tvolumes: []volume{\n\t\t&volume{\n\t\t\tname: jsii.String(\"name\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdockerVolumeConfiguration: &dockerVolumeConfiguration{\n\t\t\t\tdriver: jsii.String(\"driver\"),\n\t\t\t\tscope: ecs.scope_TASK,\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tautoprovision: jsii.Boolean(false),\n\t\t\t\tdriverOpts: map[string]*string{\n\t\t\t\t\t\"driverOptsKey\": jsii.String(\"driverOpts\"),\n\t\t\t\t},\n\t\t\t\tlabels: map[string]*string{\n\t\t\t\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tefsVolumeConfiguration: &efsVolumeConfiguration{\n\t\t\t\tfileSystemId: jsii.String(\"fileSystemId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tauthorizationConfig: &authorizationConfig{\n\t\t\t\t\taccessPointId: jsii.String(\"accessPointId\"),\n\t\t\t\t\tiam: jsii.String(\"iam\"),\n\t\t\t\t},\n\t\t\t\trootDirectory: jsii.String(\"rootDirectory\"),\n\t\t\t\ttransitEncryption: jsii.String(\"transitEncryption\"),\n\t\t\t\ttransitEncryptionPort: jsii.Number(123),\n\t\t\t},\n\t\t\thost: &host{\n\t\t\t\tsourcePath: jsii.String(\"sourcePath\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const proxyConfiguration: ecs.ProxyConfiguration;\ndeclare const role: iam.Role;\nconst commonTaskDefinitionProps: ecs.CommonTaskDefinitionProps = {\n  executionRole: role,\n  family: 'family',\n  proxyConfiguration: proxyConfiguration,\n  taskRole: role,\n  volumes: [{\n    name: 'name',\n\n    // the properties below are optional\n    dockerVolumeConfiguration: {\n      driver: 'driver',\n      scope: ecs.Scope.TASK,\n\n      // the properties below are optional\n      autoprovision: false,\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n    },\n    efsVolumeConfiguration: {\n      fileSystemId: 'fileSystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CommonTaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AuthorizationConfig",
        "@aws-cdk/aws-ecs.CommonTaskDefinitionProps",
        "@aws-cdk/aws-ecs.DockerVolumeConfiguration",
        "@aws-cdk/aws-ecs.EfsVolumeConfiguration",
        "@aws-cdk/aws-ecs.Host",
        "@aws-cdk/aws-ecs.ProxyConfiguration",
        "@aws-cdk/aws-ecs.Scope",
        "@aws-cdk/aws-ecs.Scope#TASK",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const proxyConfiguration: ecs.ProxyConfiguration;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst commonTaskDefinitionProps: ecs.CommonTaskDefinitionProps = {\n  executionRole: role,\n  family: 'family',\n  proxyConfiguration: proxyConfiguration,\n  taskRole: role,\n  volumes: [{\n    name: 'name',\n\n    // the properties below are optional\n    dockerVolumeConfiguration: {\n      driver: 'driver',\n      scope: ecs.Scope.TASK,\n\n      // the properties below are optional\n      autoprovision: false,\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n    },\n    efsVolumeConfiguration: {\n      fileSystemId: 'fileSystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 41,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 8,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "37e48d5cb048519618bbf710732662f9583f3461b8ba094c2ea576789911b104"
    },
    "a3750479f5769f761144d92cc8ad7c3ee4481f653c3e8706e8722045e21ea790": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Compatibility"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "bffd440e9afd89053876f7f88a323cebd7e0645d709e53c28520de1b2fe7dd18"
    },
    "cebacc29d0b155646cd97375a9821359fa1c3315da925bb9da579b3162e3db48": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n# cluster: ecs.Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\nvar cluster cluster\n\n\n// Add a container to the task definition\nspecificContainer := taskDefinition.addContainer(jsii.String(\"Container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"/aws/aws-example-app\")),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\n// Add a port mapping\nspecificContainer.addPortMappings(&portMapping{\n\tcontainerPort: jsii.Number(7600),\n\tprotocol: ecs.protocol_TCP,\n})\n\necs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcloudMapOptions: &cloudMapOptions{\n\t\t// Create SRV records - useful for bridge networking\n\t\tdnsRecordType: cloudmap.dnsRecordType_SRV,\n\t\t// Targets port TCP port 7600 `specificContainer`\n\t\tcontainer: specificContainer,\n\t\tcontainerPort: jsii.Number(7600),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "78820572e0f7e299c80246e2632db8bbac221621afcd808251be99bd8040857d"
    },
    "d04750ccbe6bfb9f3062dce7fe41055ee757d82f7860993d4aa5062557c8e3cd": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n# cluster: ecs.Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\nvar cluster cluster\n\n\n// Add a container to the task definition\nspecificContainer := taskDefinition.addContainer(jsii.String(\"Container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"/aws/aws-example-app\")),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\n// Add a port mapping\nspecificContainer.addPortMappings(&portMapping{\n\tcontainerPort: jsii.Number(7600),\n\tprotocol: ecs.protocol_TCP,\n})\n\necs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcloudMapOptions: &cloudMapOptions{\n\t\t// Create SRV records - useful for bridge networking\n\t\tdnsRecordType: cloudmap.dnsRecordType_SRV,\n\t\t// Targets port TCP port 7600 `specificContainer`\n\t\tcontainer: specificContainer,\n\t\tcontainerPort: jsii.Number(7600),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerDefinitionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "78820572e0f7e299c80246e2632db8bbac221621afcd808251be99bd8040857d"
    },
    "75a4ca9e00176445eef021ba73866b0be6f2e84888d938530c4044086bc08101": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\n# container_image: ecs.ContainerImage\n# environment_file: ecs.EnvironmentFile\n# linux_parameters: ecs.LinuxParameters\n# log_driver: ecs.LogDriver\n# secret: ecs.Secret\n# task_definition: ecs.TaskDefinition\n\ncontainer_definition_props = ecs.ContainerDefinitionProps(\n    image=container_image,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    command=[\"command\"],\n    container_name=\"containerName\",\n    cpu=123,\n    disable_networking=False,\n    dns_search_domains=[\"dnsSearchDomains\"],\n    dns_servers=[\"dnsServers\"],\n    docker_labels={\n        \"docker_labels_key\": \"dockerLabels\"\n    },\n    docker_security_options=[\"dockerSecurityOptions\"],\n    entry_point=[\"entryPoint\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    environment_files=[environment_file],\n    essential=False,\n    extra_hosts={\n        \"extra_hosts_key\": \"extraHosts\"\n    },\n    gpu_count=123,\n    health_check=ecs.HealthCheck(\n        command=[\"command\"],\n\n        # the properties below are optional\n        interval=cdk.Duration.minutes(30),\n        retries=123,\n        start_period=cdk.Duration.minutes(30),\n        timeout=cdk.Duration.minutes(30)\n    ),\n    hostname=\"hostname\",\n    inference_accelerator_resources=[\"inferenceAcceleratorResources\"],\n    linux_parameters=linux_parameters,\n    logging=log_driver,\n    memory_limit_mi_b=123,\n    memory_reservation_mi_b=123,\n    port_mappings=[ecs.PortMapping(\n        container_port=123,\n\n        # the properties below are optional\n        host_port=123,\n        protocol=ecs.Protocol.TCP\n    )],\n    privileged=False,\n    readonly_root_filesystem=False,\n    secrets={\n        \"secrets_key\": secret\n    },\n    start_timeout=cdk.Duration.minutes(30),\n    stop_timeout=cdk.Duration.minutes(30),\n    system_controls=[ecs.SystemControl(\n        namespace=\"namespace\",\n        value=\"value\"\n    )],\n    user=\"user\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\nTaskDefinition taskDefinition;\nContainerDefinitionProps containerDefinitionProps = new ContainerDefinitionProps {\n    Image = containerImage,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    ContainerName = \"containerName\",\n    Cpu = 123,\n    DisableNetworking = false,\n    DnsSearchDomains = new [] { \"dnsSearchDomains\" },\n    DnsServers = new [] { \"dnsServers\" },\n    DockerLabels = new Dictionary<string, string> {\n        { \"dockerLabelsKey\", \"dockerLabels\" }\n    },\n    DockerSecurityOptions = new [] { \"dockerSecurityOptions\" },\n    EntryPoint = new [] { \"entryPoint\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    EnvironmentFiles = new [] { environmentFile },\n    Essential = false,\n    ExtraHosts = new Dictionary<string, string> {\n        { \"extraHostsKey\", \"extraHosts\" }\n    },\n    GpuCount = 123,\n    HealthCheck = new HealthCheck {\n        Command = new [] { \"command\" },\n\n        // the properties below are optional\n        Interval = Duration.Minutes(30),\n        Retries = 123,\n        StartPeriod = Duration.Minutes(30),\n        Timeout = Duration.Minutes(30)\n    },\n    Hostname = \"hostname\",\n    InferenceAcceleratorResources = new [] { \"inferenceAcceleratorResources\" },\n    LinuxParameters = linuxParameters,\n    Logging = logDriver,\n    MemoryLimitMiB = 123,\n    MemoryReservationMiB = 123,\n    PortMappings = new [] { new PortMapping {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        HostPort = 123,\n        Protocol = Protocol.TCP\n    } },\n    Privileged = false,\n    ReadonlyRootFilesystem = false,\n    Secrets = new Dictionary<string, Secret> {\n        { \"secretsKey\", secret }\n    },\n    StartTimeout = Duration.Minutes(30),\n    StopTimeout = Duration.Minutes(30),\n    SystemControls = new [] { new SystemControl {\n        Namespace = \"namespace\",\n        Value = \"value\"\n    } },\n    User = \"user\",\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\nTaskDefinition taskDefinition;\n\nContainerDefinitionProps containerDefinitionProps = ContainerDefinitionProps.builder()\n        .image(containerImage)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .containerName(\"containerName\")\n        .cpu(123)\n        .disableNetworking(false)\n        .dnsSearchDomains(List.of(\"dnsSearchDomains\"))\n        .dnsServers(List.of(\"dnsServers\"))\n        .dockerLabels(Map.of(\n                \"dockerLabelsKey\", \"dockerLabels\"))\n        .dockerSecurityOptions(List.of(\"dockerSecurityOptions\"))\n        .entryPoint(List.of(\"entryPoint\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .environmentFiles(List.of(environmentFile))\n        .essential(false)\n        .extraHosts(Map.of(\n                \"extraHostsKey\", \"extraHosts\"))\n        .gpuCount(123)\n        .healthCheck(HealthCheck.builder()\n                .command(List.of(\"command\"))\n\n                // the properties below are optional\n                .interval(Duration.minutes(30))\n                .retries(123)\n                .startPeriod(Duration.minutes(30))\n                .timeout(Duration.minutes(30))\n                .build())\n        .hostname(\"hostname\")\n        .inferenceAcceleratorResources(List.of(\"inferenceAcceleratorResources\"))\n        .linuxParameters(linuxParameters)\n        .logging(logDriver)\n        .memoryLimitMiB(123)\n        .memoryReservationMiB(123)\n        .portMappings(List.of(PortMapping.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .hostPort(123)\n                .protocol(Protocol.TCP)\n                .build()))\n        .privileged(false)\n        .readonlyRootFilesystem(false)\n        .secrets(Map.of(\n                \"secretsKey\", secret))\n        .startTimeout(Duration.minutes(30))\n        .stopTimeout(Duration.minutes(30))\n        .systemControls(List.of(SystemControl.builder()\n                .namespace(\"namespace\")\n                .value(\"value\")\n                .build()))\n        .user(\"user\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar containerImage containerImage\nvar environmentFile environmentFile\nvar linuxParameters linuxParameters\nvar logDriver logDriver\nvar secret secret\nvar taskDefinition taskDefinition\n\ncontainerDefinitionProps := &containerDefinitionProps{\n\timage: containerImage,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tcontainerName: jsii.String(\"containerName\"),\n\tcpu: jsii.Number(123),\n\tdisableNetworking: jsii.Boolean(false),\n\tdnsSearchDomains: []*string{\n\t\tjsii.String(\"dnsSearchDomains\"),\n\t},\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tdockerLabels: map[string]*string{\n\t\t\"dockerLabelsKey\": jsii.String(\"dockerLabels\"),\n\t},\n\tdockerSecurityOptions: []*string{\n\t\tjsii.String(\"dockerSecurityOptions\"),\n\t},\n\tentryPoint: []*string{\n\t\tjsii.String(\"entryPoint\"),\n\t},\n\tenvironment: map[string]*string{\n\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t},\n\tenvironmentFiles: []*environmentFile{\n\t\tenvironmentFile,\n\t},\n\tessential: jsii.Boolean(false),\n\textraHosts: map[string]*string{\n\t\t\"extraHostsKey\": jsii.String(\"extraHosts\"),\n\t},\n\tgpuCount: jsii.Number(123),\n\thealthCheck: &healthCheck{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tinterval: cdk.duration.minutes(jsii.Number(30)),\n\t\tretries: jsii.Number(123),\n\t\tstartPeriod: cdk.*duration.minutes(jsii.Number(30)),\n\t\ttimeout: cdk.*duration.minutes(jsii.Number(30)),\n\t},\n\thostname: jsii.String(\"hostname\"),\n\tinferenceAcceleratorResources: []*string{\n\t\tjsii.String(\"inferenceAcceleratorResources\"),\n\t},\n\tlinuxParameters: linuxParameters,\n\tlogging: logDriver,\n\tmemoryLimitMiB: jsii.Number(123),\n\tmemoryReservationMiB: jsii.Number(123),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\thostPort: jsii.Number(123),\n\t\t\tprotocol: ecs.protocol_TCP,\n\t\t},\n\t},\n\tprivileged: jsii.Boolean(false),\n\treadonlyRootFilesystem: jsii.Boolean(false),\n\tsecrets: map[string]*secret{\n\t\t\"secretsKey\": secret,\n\t},\n\tstartTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tstopTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tsystemControls: []systemControl{\n\t\t&systemControl{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuser: jsii.String(\"user\"),\n\tworkingDirectory: jsii.String(\"workingDirectory\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst containerDefinitionProps: ecs.ContainerDefinitionProps = {\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.HealthCheck",
        "@aws-cdk/aws-ecs.LinuxParameters",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerDefinitionProps: ecs.ContainerDefinitionProps = {\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 12,
        "10": 18,
        "75": 93,
        "91": 4,
        "130": 6,
        "153": 7,
        "169": 7,
        "192": 10,
        "193": 8,
        "194": 12,
        "196": 5,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 46,
        "290": 1
      },
      "fqnsFingerprint": "ec7ec37d3037875acd84d6f02b41c669bfe0babde9599b83b80043f9ffd19107"
    },
    "3b93f6b2c41b19c22c905d02d68598b1d536f8408fd3a4fed1725870c8a874da": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\n# container_definition: ecs.ContainerDefinition\n\ncontainer_dependency = ecs.ContainerDependency(\n    container=container_definition,\n\n    # the properties below are optional\n    condition=ecs.ContainerDependencyCondition.START\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nContainerDefinition containerDefinition;\n\nContainerDependency containerDependency = new ContainerDependency {\n    Container = containerDefinition,\n\n    // the properties below are optional\n    Condition = ContainerDependencyCondition.START\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nContainerDefinition containerDefinition;\n\nContainerDependency containerDependency = ContainerDependency.builder()\n        .container(containerDefinition)\n\n        // the properties below are optional\n        .condition(ContainerDependencyCondition.START)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar containerDefinition containerDefinition\n\ncontainerDependency := &containerDependency{\n\tcontainer: containerDefinition,\n\n\t// the properties below are optional\n\tcondition: ecs.containerDependencyCondition_START,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const containerDefinition: ecs.ContainerDefinition;\nconst containerDependency: ecs.ContainerDependency = {\n  container: containerDefinition,\n\n  // the properties below are optional\n  condition: ecs.ContainerDependencyCondition.START,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerDependency"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDependency",
        "@aws-cdk/aws-ecs.ContainerDependencyCondition",
        "@aws-cdk/aws-ecs.ContainerDependencyCondition#START"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const containerDefinition: ecs.ContainerDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerDependency: ecs.ContainerDependency = {\n  container: containerDefinition,\n\n  // the properties below are optional\n  condition: ecs.ContainerDependencyCondition.START,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3230c82387a25b6dc7935b139989e38c7272a0d1c321d0216cb862025b27b54"
    },
    "72f0855afa22e04897cfdfb195c64da0939648cbb3bcd7a73e259d6470301912": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"FargateCPCluster\",\n    vpc=vpc,\n    enable_fargate_capacity_providers=True\n)\n\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)\n\necs.FargateService(self, \"FargateService\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE_SPOT\",\n        weight=2\n    ), ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE\",\n        weight=1\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"FargateCPCluster\", new ClusterProps {\n    Vpc = vpc,\n    EnableFargateCapacityProviders = true\n});\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});\n\nnew FargateService(this, \"FargateService\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE_SPOT\",\n        Weight = 2\n    }, new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE\",\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCPCluster\")\n        .vpc(vpc)\n        .enableFargateCapacityProviders(true)\n        .build();\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());\n\nFargateService.Builder.create(this, \"FargateService\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE_SPOT\")\n                .weight(2)\n                .build(), CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE\")\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"FargateCPCluster\"), &clusterProps{\n\tvpc: vpc,\n\tenableFargateCapacityProviders: jsii.Boolean(true),\n})\n\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"))\n\ntaskDefinition.addContainer(jsii.String(\"web\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n})\n\necs.NewFargateService(this, jsii.String(\"FargateService\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcapacityProviderStrategies: []capacityProviderStrategy{\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: jsii.String(\"FARGATE_SPOT\"),\n\t\t\tweight: jsii.Number(2),\n\t\t},\n\t\t&capacityProviderStrategy{\n\t\t\tcapacityProvider: jsii.String(\"FARGATE\"),\n\t\t\tweight: jsii.Number(1),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 26,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "acf61016480435b49fd0cc2eb6bc58ff0f42a97339030135ff23217890dbeb88"
    },
    "2b00aea382f7ac3cf035029a7a0ec0965ef1a040d30040e7adb589e820206140": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ncontainer_image_config = ecs.ContainerImageConfig(\n    image_name=\"imageName\",\n\n    # the properties below are optional\n    repository_credentials=ecs.CfnTaskDefinition.RepositoryCredentialsProperty(\n        credentials_parameter=\"credentialsParameter\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nContainerImageConfig containerImageConfig = new ContainerImageConfig {\n    ImageName = \"imageName\",\n\n    // the properties below are optional\n    RepositoryCredentials = new RepositoryCredentialsProperty {\n        CredentialsParameter = \"credentialsParameter\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nContainerImageConfig containerImageConfig = ContainerImageConfig.builder()\n        .imageName(\"imageName\")\n\n        // the properties below are optional\n        .repositoryCredentials(RepositoryCredentialsProperty.builder()\n                .credentialsParameter(\"credentialsParameter\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ncontainerImageConfig := &containerImageConfig{\n\timageName: jsii.String(\"imageName\"),\n\n\t// the properties below are optional\n\trepositoryCredentials: &repositoryCredentialsProperty{\n\t\tcredentialsParameter: jsii.String(\"credentialsParameter\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst containerImageConfig: ecs.ContainerImageConfig = {\n  imageName: 'imageName',\n\n  // the properties below are optional\n  repositoryCredentials: {\n    credentialsParameter: 'credentialsParameter',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerImageConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CfnTaskDefinition.RepositoryCredentialsProperty",
        "@aws-cdk/aws-ecs.ContainerImageConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerImageConfig: ecs.ContainerImageConfig = {\n  imageName: 'imageName',\n\n  // the properties below are optional\n  repositoryCredentials: {\n    credentialsParameter: 'credentialsParameter',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a5cd6bb2234df650cbff0a316d9e41cb6669e414591141e073d90f64a3aeff32"
    },
    "97608df19b94ac81752da2454976ba8454019ab0608cc2cb33d4b8f225b15433": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the Windows container to start\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    runtime_platform=ecs.RuntimePlatform(\n        operating_system_family=ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        cpu_architecture=ecs.CpuArchitecture.X86_64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"windowsservercore\",\n    logging=ecs.LogDriver.aws_logs(stream_prefix=\"win-iis-on-fargate\"),\n    port_mappings=[ecs.PortMapping(container_port=80)],\n    image=ecs.ContainerImage.from_registry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    RuntimePlatform = new RuntimePlatform {\n        OperatingSystemFamily = OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        CpuArchitecture = CpuArchitecture.X86_64\n    },\n    Cpu = 1024,\n    MemoryLimitMiB = 2048\n});\n\ntaskDefinition.AddContainer(\"windowsservercore\", new ContainerDefinitionOptions {\n    Logging = LogDriver.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"win-iis-on-fargate\" }),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } },\n    Image = ContainerImage.FromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .runtimePlatform(RuntimePlatform.builder()\n                .operatingSystemFamily(OperatingSystemFamily.WINDOWS_SERVER_2019_CORE)\n                .cpuArchitecture(CpuArchitecture.X86_64)\n                .build())\n        .cpu(1024)\n        .memoryLimitMiB(2048)\n        .build();\n\ntaskDefinition.addContainer(\"windowsservercore\", ContainerDefinitionOptions.builder()\n        .logging(LogDriver.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"win-iis-on-fargate\").build()))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .image(ContainerImage.fromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the Windows container to start\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\truntimePlatform: &runtimePlatform{\n\t\toperatingSystemFamily: ecs.operatingSystemFamily_WINDOWS_SERVER_2019_CORE(),\n\t\tcpuArchitecture: ecs.cpuArchitecture_X86_64(),\n\t},\n\tcpu: jsii.Number(1024),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\ntaskDefinition.addContainer(jsii.String(\"windowsservercore\"), &containerDefinitionOptions{\n\tlogging: ecs.logDriver.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"win-iis-on-fargate\"),\n\t}),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(80),\n\t\t},\n\t},\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CpuArchitecture"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuArchitecture",
        "@aws-cdk/aws-ecs.CpuArchitecture#X86_64",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDriver#awsLogs",
        "@aws-cdk/aws-ecs.OperatingSystemFamily",
        "@aws-cdk/aws-ecs.OperatingSystemFamily#WINDOWS_SERVER_2019_CORE",
        "@aws-cdk/aws-ecs.RuntimePlatform",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 27,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 10,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "5f16697e57d87b5c90a6ef559b358d66b14ec5a4aebf32a647df7a3923ba813f"
    },
    "098b10291fb0eff7bc41bb825922a1670788d3b6faa872bd1db18f506dd571c8": {
      "translations": {
        "python": {
          "source": "# target: elbv2.ApplicationTargetGroup\n# service: ecs.BaseService\n\nscaling = service.auto_scale_task_count(max_capacity=10)\nscaling.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscaling.scale_on_request_count(\"RequestScaling\",\n    requests_per_target=10000,\n    target_group=target\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.AutoScaleTaskCount(new EnableScalingProps { MaxCapacity = 10 });\nscaling.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscaling.ScaleOnRequestCount(\"RequestScaling\", new RequestCountScalingProps {\n    RequestsPerTarget = 10000,\n    TargetGroup = target\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.autoScaleTaskCount(EnableScalingProps.builder().maxCapacity(10).build());\nscaling.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscaling.scaleOnRequestCount(\"RequestScaling\", RequestCountScalingProps.builder()\n        .requestsPerTarget(10000)\n        .targetGroup(target)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var target applicationTargetGroup\nvar service baseService\n\nscaling := service.autoScaleTaskCount(&enableScalingProps{\n\tmaxCapacity: jsii.Number(10),\n})\nscaling.scaleOnCpuUtilization(jsii.String(\"CpuScaling\"), &cpuUtilizationScalingProps{\n\ttargetUtilizationPercent: jsii.Number(50),\n})\n\nscaling.scaleOnRequestCount(jsii.String(\"RequestScaling\"), &requestCountScalingProps{\n\trequestsPerTarget: jsii.Number(10000),\n\ttargetGroup: target,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CpuUtilizationScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.RequestCountScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnRequestCount",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "430e9ac1673ad3ff4031c726865de07b9780c1461a916dc12e37b21e485e1ca4"
    },
    "4c85abdefa398d8cdab8652b6bb51da1d6eb5b4796d82305036c9d0b0f7354d8": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\nservice = ecs.FargateService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    circuit_breaker=ecs.DeploymentCircuitBreaker(rollback=True)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CircuitBreaker = new DeploymentCircuitBreaker { Rollback = true }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = FargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .circuitBreaker(DeploymentCircuitBreaker.builder().rollback(true).build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcircuitBreaker: &deploymentCircuitBreaker{\n\t\trollback: jsii.Boolean(true),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.DeploymentCircuitBreaker"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "01c5be3b7c5d0db46c8a14108bfe05ddb1d292f4a5a1e3f3bf68269d23828f7a"
    },
    "a3708ef7cbd5aa7878e2f2456bbc703be68fb8f5975ab3d64d67774e06a33950": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.CODE_DEPLOY\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.CODE_DEPLOY\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.CODE_DEPLOY)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nloadBalancedFargateService := ecsPatterns.NewApplicationLoadBalancedFargateService(this, jsii.String(\"Service\"), &applicationLoadBalancedFargateServiceProps{\n\tcluster: cluster,\n\tmemoryLimitMiB: jsii.Number(1024),\n\tdesiredCount: jsii.Number(1),\n\tcpu: jsii.Number(512),\n\ttaskImageOptions: &applicationLoadBalancedTaskImageOptions{\n\t\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\t},\n\tdeploymentController: &deploymentController{\n\t\ttype: ecs.deploymentControllerType_CODE_DEPLOY,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.DeploymentController"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#CODE_DEPLOY",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1061ea8999f6371f1f707397001a85aaab4bd7e4f72a899678dfe8d84932dd89"
    },
    "ca6f496411e8248abb1edf8cdfbeac19f86c94cffad21c368fe6b7700a13b32b": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.CODE_DEPLOY\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.CODE_DEPLOY\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.CODE_DEPLOY)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nloadBalancedFargateService := ecsPatterns.NewApplicationLoadBalancedFargateService(this, jsii.String(\"Service\"), &applicationLoadBalancedFargateServiceProps{\n\tcluster: cluster,\n\tmemoryLimitMiB: jsii.Number(1024),\n\tdesiredCount: jsii.Number(1),\n\tcpu: jsii.Number(512),\n\ttaskImageOptions: &applicationLoadBalancedTaskImageOptions{\n\t\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\t},\n\tdeploymentController: &deploymentController{\n\t\ttype: ecs.deploymentControllerType_CODE_DEPLOY,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.DeploymentControllerType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#CODE_DEPLOY",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1061ea8999f6371f1f707397001a85aaab4bd7e4f72a899678dfe8d84932dd89"
    },
    "8919e0663c66cc3a875c0cd82a13619703137a0f329b46ac1cbfa618b57f514e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndevice = ecs.Device(\n    host_path=\"hostPath\",\n\n    # the properties below are optional\n    container_path=\"containerPath\",\n    permissions=[ecs.DevicePermission.READ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDevice device = new Device {\n    HostPath = \"hostPath\",\n\n    // the properties below are optional\n    ContainerPath = \"containerPath\",\n    Permissions = new [] { DevicePermission.READ }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDevice device = Device.builder()\n        .hostPath(\"hostPath\")\n\n        // the properties below are optional\n        .containerPath(\"containerPath\")\n        .permissions(List.of(DevicePermission.READ))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndevice := &device{\n\thostPath: jsii.String(\"hostPath\"),\n\n\t// the properties below are optional\n\tcontainerPath: jsii.String(\"containerPath\"),\n\tpermissions: []devicePermission{\n\t\tecs.*devicePermission_READ,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst device: ecs.Device = {\n  hostPath: 'hostPath',\n\n  // the properties below are optional\n  containerPath: 'containerPath',\n  permissions: [ecs.DevicePermission.READ],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Device"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Device",
        "@aws-cdk/aws-ecs.DevicePermission",
        "@aws-cdk/aws-ecs.DevicePermission#READ"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst device: ecs.Device = {\n  hostPath: 'hostPath',\n\n  // the properties below are optional\n  containerPath: 'containerPath',\n  permissions: [ecs.DevicePermission.READ],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8879109dd4f7aeeb80974d0b5a5ab0f642e8ce22d1dcfb4a96b558c27bb61e58"
    },
    "038c4fa61f148c3b45bbc08a3fdd5d5052c25709f22d8e8a4781d0512c698e14": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ndocker_volume_configuration = ecs.DockerVolumeConfiguration(\n    driver=\"driver\",\n    scope=ecs.Scope.TASK,\n\n    # the properties below are optional\n    autoprovision=False,\n    driver_opts={\n        \"driver_opts_key\": \"driverOpts\"\n    },\n    labels={\n        \"labels_key\": \"labels\"\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nDockerVolumeConfiguration dockerVolumeConfiguration = new DockerVolumeConfiguration {\n    Driver = \"driver\",\n    Scope = Scope.TASK,\n\n    // the properties below are optional\n    Autoprovision = false,\n    DriverOpts = new Dictionary<string, string> {\n        { \"driverOptsKey\", \"driverOpts\" }\n    },\n    Labels = new Dictionary<string, string> {\n        { \"labelsKey\", \"labels\" }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nDockerVolumeConfiguration dockerVolumeConfiguration = DockerVolumeConfiguration.builder()\n        .driver(\"driver\")\n        .scope(Scope.TASK)\n\n        // the properties below are optional\n        .autoprovision(false)\n        .driverOpts(Map.of(\n                \"driverOptsKey\", \"driverOpts\"))\n        .labels(Map.of(\n                \"labelsKey\", \"labels\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ndockerVolumeConfiguration := &dockerVolumeConfiguration{\n\tdriver: jsii.String(\"driver\"),\n\tscope: ecs.scope_TASK,\n\n\t// the properties below are optional\n\tautoprovision: jsii.Boolean(false),\n\tdriverOpts: map[string]*string{\n\t\t\"driverOptsKey\": jsii.String(\"driverOpts\"),\n\t},\n\tlabels: map[string]*string{\n\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst dockerVolumeConfiguration: ecs.DockerVolumeConfiguration = {\n  driver: 'driver',\n  scope: ecs.Scope.TASK,\n\n  // the properties below are optional\n  autoprovision: false,\n  driverOpts: {\n    driverOptsKey: 'driverOpts',\n  },\n  labels: {\n    labelsKey: 'labels',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.DockerVolumeConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.DockerVolumeConfiguration",
        "@aws-cdk/aws-ecs.Scope",
        "@aws-cdk/aws-ecs.Scope#TASK"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dockerVolumeConfiguration: ecs.DockerVolumeConfiguration = {\n  driver: 'driver',\n  scope: ecs.Scope.TASK,\n\n  // the properties below are optional\n  autoprovision: false,\n  driverOpts: {\n    driverOptsKey: 'driverOpts',\n  },\n  labels: {\n    labelsKey: 'labels',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "8c2bca7cc77cb1414476120fefea0c135a35195bc1dd380abeae9dbd46afb1af"
    },
    "1180e5e6b7c8e1434b524eb5c3fd9b599ff33e96bebd94eebc945a7650fe6092": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n})\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})\nlb.addTarget(service.loadBalancerTarget(&loadBalancerTargetOptions{\n\tcontainerName: jsii.String(\"MyContainer\"),\n\tcontainerPort: jsii.Number(80),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62ee75a8ee3a3c43c54101d48d798b2aeaeb07623c502cf608cb70be5dd20f72"
    },
    "683f3fa378095c1bc1bb68a312cc49c64dfc81fa500f11da8d48005b345ecd33": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\n# cluster: ecs.Cluster\n\nec2_service_attributes = ecs.Ec2ServiceAttributes(\n    cluster=cluster,\n\n    # the properties below are optional\n    service_arn=\"serviceArn\",\n    service_name=\"serviceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCluster cluster;\n\nEc2ServiceAttributes ec2ServiceAttributes = new Ec2ServiceAttributes {\n    Cluster = cluster,\n\n    // the properties below are optional\n    ServiceArn = \"serviceArn\",\n    ServiceName = \"serviceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCluster cluster;\n\nEc2ServiceAttributes ec2ServiceAttributes = Ec2ServiceAttributes.builder()\n        .cluster(cluster)\n\n        // the properties below are optional\n        .serviceArn(\"serviceArn\")\n        .serviceName(\"serviceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar cluster cluster\n\nec2ServiceAttributes := &ec2ServiceAttributes{\n\tcluster: cluster,\n\n\t// the properties below are optional\n\tserviceArn: jsii.String(\"serviceArn\"),\n\tserviceName: jsii.String(\"serviceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\nconst ec2ServiceAttributes: ecs.Ec2ServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2ServiceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Ec2ServiceAttributes",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ec2ServiceAttributes: ecs.Ec2ServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8d7ff921c90c1cf75b6f382053b73085f9e405830e19d68aa4af4574fbb2ca34"
    },
    "d539111a2cd2d1ca26a91f39d729a261e262f86686544b682be4a7d0ab17a4e9": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n})\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})\nlb.addTarget(service.loadBalancerTarget(&loadBalancerTargetOptions{\n\tcontainerName: jsii.String(\"MyContainer\"),\n\tcontainerPort: jsii.Number(80),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62ee75a8ee3a3c43c54101d48d798b2aeaeb07623c502cf608cb70be5dd20f72"
    },
    "f828b210dcaba337c461f26ce5e15de95b5fc3180888a3ca7b770b2f21be1abe": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.splunk(&splunkLogDriverProps{\n\t\ttoken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-splunk-token\")),\n\t\turl: jsii.String(\"my-splunk-url\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "cbcee149029bb834f61f6271a2374a988f65487af1f16259b9f633676fad53b4"
    },
    "3a8f44a8259b91909df393f0b91b2018cdecebec1a46fe396e2704e85b2b1233": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\nec2_task_definition_attributes = ecs.Ec2TaskDefinitionAttributes(\n    task_definition_arn=\"taskDefinitionArn\",\n\n    # the properties below are optional\n    network_mode=ecs.NetworkMode.NONE,\n    task_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nEc2TaskDefinitionAttributes ec2TaskDefinitionAttributes = new Ec2TaskDefinitionAttributes {\n    TaskDefinitionArn = \"taskDefinitionArn\",\n\n    // the properties below are optional\n    NetworkMode = NetworkMode.NONE,\n    TaskRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nEc2TaskDefinitionAttributes ec2TaskDefinitionAttributes = Ec2TaskDefinitionAttributes.builder()\n        .taskDefinitionArn(\"taskDefinitionArn\")\n\n        // the properties below are optional\n        .networkMode(NetworkMode.NONE)\n        .taskRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\nec2TaskDefinitionAttributes := &ec2TaskDefinitionAttributes{\n\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t// the properties below are optional\n\tnetworkMode: ecs.networkMode_NONE,\n\ttaskRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst ec2TaskDefinitionAttributes: ecs.Ec2TaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinitionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionAttributes",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#NONE",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ec2TaskDefinitionAttributes: ecs.Ec2TaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ff0670d11e3ee443ddb7db1d109d1bdb9ac2b9d6fb364b9853914570817e84f7"
    },
    "0ec64f64d92495d8999d5855ec85539ef307eab8191fd739262aa5c46e9616b6": {
      "translations": {
        "python": {
          "source": "ec2_task_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\",\n    network_mode=ecs.NetworkMode.BRIDGE\n)\n\ncontainer = ec2_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = new Ec2TaskDefinition(this, \"TaskDef\", new Ec2TaskDefinitionProps {\n    NetworkMode = NetworkMode.BRIDGE\n});\n\nContainerDefinition container = ec2TaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = Ec2TaskDefinition.Builder.create(this, \"TaskDef\")\n        .networkMode(NetworkMode.BRIDGE)\n        .build();\n\nContainerDefinition container = ec2TaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "ec2TaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"), &ec2TaskDefinitionProps{\n\tnetworkMode: ecs.networkMode_BRIDGE,\n})\n\ncontainer := ec2TaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n})",
          "version": "1"
        },
        "$": {
          "source": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#BRIDGE",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "271c11c7bcf04c6609e7edef38029293fee1e176b75cf229dec4d513aed9659f"
    },
    "76df5c04098e7c11144bb59f0acc8ea9c612d0f2cd8bba4eeb729ce83f63892d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\n\nrepo = ecr.Repository.from_repository_name(self, \"batch-job-repo\", \"todo-list\")\n\nbatch.JobDefinition(self, \"batch-job-def-from-ecr\",\n    container=batch.JobDefinitionContainer(\n        image=ecs.EcrImage(repo, \"latest\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\n\nIRepository repo = Repository.FromRepositoryName(this, \"batch-job-repo\", \"todo-list\");\n\nnew JobDefinition(this, \"batch-job-def-from-ecr\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = new EcrImage(repo, \"latest\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\n\nIRepository repo = Repository.fromRepositoryName(this, \"batch-job-repo\", \"todo-list\");\n\nJobDefinition.Builder.create(this, \"batch-job-def-from-ecr\")\n        .container(JobDefinitionContainer.builder()\n                .image(new EcrImage(repo, \"latest\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import ecr \"github.com/aws-samples/dummy/awscdkawsecr\"\n\n\nrepo := ecr.repository.fromRepositoryName(this, jsii.String(\"batch-job-repo\"), jsii.String(\"todo-list\"))\n\nbatch.NewJobDefinition(this, jsii.String(\"batch-job-def-from-ecr\"), &jobDefinitionProps{\n\tcontainer: &jobDefinitionContainer{\n\t\timage: ecs.NewEcrImage(repo, jsii.String(\"latest\")),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\nconst repo = ecr.Repository.fromRepositoryName(this, 'batch-job-repo', 'todo-list');\n\nnew batch.JobDefinition(this, 'batch-job-def-from-ecr', {\n  container: {\n    image: new ecs.EcrImage(repo, 'latest'),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcrImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.Repository#fromRepositoryName",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.EcrImage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as batch from '@aws-cdk/aws-batch';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repo = ecr.Repository.fromRepositoryName(this, 'batch-job-repo', 'todo-list');\n\nnew batch.JobDefinition(this, 'batch-job-def-from-ecr', {\n  container: {\n    image: new ecs.EcrImage(repo, 'latest'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1822321064e7fa20002da18daece68747f94bfdb6b094e12356baf0e724ffbe5"
    },
    "c03a612f3f42a53bfa906015670934b04958ea8707dd96c5c67397e646ec004e": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nmy_compute_env = batch.ComputeEnvironment(self, \"ComputeEnv\",\n    compute_resources=batch.ComputeResources(\n        image=ecs.EcsOptimizedAmi(\n            generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n        ),\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = new ComputeEnvironment(this, \"ComputeEnv\", new ComputeEnvironmentProps {\n    ComputeResources = new ComputeResources {\n        Image = new EcsOptimizedAmi(new EcsOptimizedAmiProps {\n            Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n        }),\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = ComputeEnvironment.Builder.create(this, \"ComputeEnv\")\n        .computeResources(ComputeResources.builder()\n                .image(EcsOptimizedAmi.Builder.create()\n                        .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nmyComputeEnv := batch.NewComputeEnvironment(this, jsii.String(\"ComputeEnv\"), &computeEnvironmentProps{\n\tcomputeResources: &computeResources{\n\t\timage: ecs.NewEcsOptimizedAmi(&ecsOptimizedAmiProps{\n\t\t\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX_2,\n\t\t}),\n\t\tvpc: vpc,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedAmi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.ComputeResources",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.EcsOptimizedAmi",
        "@aws-cdk/aws-ecs.EcsOptimizedAmiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as batch from '@aws-cdk/aws-batch';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "054a8da48ed9b80100aef9358ca1b1050c554992eee37ea766f31c6d7b0e9693"
    },
    "234eff489226dbb4aec27573324bd641ba77aa1bad41a6433aebcbd5bcc676da": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nmy_compute_env = batch.ComputeEnvironment(self, \"ComputeEnv\",\n    compute_resources=batch.ComputeResources(\n        image=ecs.EcsOptimizedAmi(\n            generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n        ),\n        vpc=vpc\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = new ComputeEnvironment(this, \"ComputeEnv\", new ComputeEnvironmentProps {\n    ComputeResources = new ComputeResources {\n        Image = new EcsOptimizedAmi(new EcsOptimizedAmiProps {\n            Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n        }),\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = ComputeEnvironment.Builder.create(this, \"ComputeEnv\")\n        .computeResources(ComputeResources.builder()\n                .image(EcsOptimizedAmi.Builder.create()\n                        .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nmyComputeEnv := batch.NewComputeEnvironment(this, jsii.String(\"ComputeEnv\"), &computeEnvironmentProps{\n\tcomputeResources: &computeResources{\n\t\timage: ecs.NewEcsOptimizedAmi(&ecsOptimizedAmiProps{\n\t\t\tgeneration: ec2.amazonLinuxGeneration_AMAZON_LINUX_2,\n\t\t}),\n\t\tvpc: vpc,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedAmiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.ComputeResources",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.EcsOptimizedAmi",
        "@aws-cdk/aws-ecs.EcsOptimizedAmiProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as batch from '@aws-cdk/aws-batch';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "054a8da48ed9b80100aef9358ca1b1050c554992eee37ea766f31c6d7b0e9693"
    },
    "7a12ae56615b1d9bce88d1e6322d004494dd62ddff57ee42dbd4d1309e93eab7": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Either add default capacity\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\n# Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(),\n    # Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    # machineImage: EcsOptimizedImage.amazonLinux2(),\n    desired_capacity=3\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Either add default capacity\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux(),\n    // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    // machineImage: EcsOptimizedImage.amazonLinux2(),\n    DesiredCapacity = 3\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Either add default capacity\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .machineImage(EcsOptimizedImage.amazonLinux())\n        // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n        // machineImage: EcsOptimizedImage.amazonLinux2(),\n        .desiredCapacity(3)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\n\n// Either add default capacity\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroupCapacity\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.xlarge\")),\n\tdesiredCapacity: jsii.Number(3),\n})\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.xlarge\")),\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux(),\n\t// Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n\t// machineImage: EcsOptimizedImage.amazonLinux2(),\n\tdesiredCapacity: jsii.Number(3),\n})\n\ncapacityProvider := ecs.NewAsgCapacityProvider(this, jsii.String(\"AsgCapacityProvider\"), &asgCapacityProviderProps{\n\tautoScalingGroup: autoScalingGroup,\n})\ncluster.addAsgCapacityProvider(capacityProvider)",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 32,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "ae2235b7911b1583d38c930fb66794916f54f79b4bf7e228d205074f793147af"
    },
    "2ce4c5cd3c9e69f83aa254d87694891befad4e6875932ceccca2b9b4b1193c1b": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(cached_in_context=True),\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    MachineImage = EcsOptimizedImage.AmazonLinux(new EcsOptimizedImageOptions { CachedInContext = true }),\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .machineImage(EcsOptimizedImage.amazonLinux(EcsOptimizedImageOptions.builder().cachedInContext(true).build()))\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nautoScalingGroup := autoscaling.NewAutoScalingGroup(this, jsii.String(\"ASG\"), &autoScalingGroupProps{\n\tmachineImage: ecs.ecsOptimizedImage.amazonLinux(&ecsOptimizedImageOptions{\n\t\tcachedInContext: jsii.Boolean(true),\n\t}),\n\tvpc: vpc,\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux",
        "@aws-cdk/aws-ecs.EcsOptimizedImageOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a8976a2b7d9775cfe2a33de56be4b9c2b38219655138a62f74b230140beabab9"
    },
    "8a84d300a9a226aa3bd4e90d64682eb3679c0b270785e27dce545f2ba44b40f1": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\nlistener := lb.addListener(jsii.String(\"Listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nservice.registerLoadBalancerTargets(&ecsTarget{\n\tcontainerName: jsii.String(\"web\"),\n\tcontainerPort: jsii.Number(80),\n\tnewTargetGroupId: jsii.String(\"ECS\"),\n\tlistener: ecs.listenerConfig.applicationListener(listener, &addApplicationTargetsProps{\n\t\tprotocol: elbv2.applicationProtocol_HTTPS,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62bbc966736ec630b7e87ab4690d0362c33cfaf1ad7cc7936ab997a36a39e6d6"
    },
    "0b67a6ade5a4ca56da6b4ecb021cb367b4a7fc695e67f66ebc6f3795e4e9a41a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nefs_volume_configuration = ecs.EfsVolumeConfiguration(\n    file_system_id=\"fileSystemId\",\n\n    # the properties below are optional\n    authorization_config=ecs.AuthorizationConfig(\n        access_point_id=\"accessPointId\",\n        iam=\"iam\"\n    ),\n    root_directory=\"rootDirectory\",\n    transit_encryption=\"transitEncryption\",\n    transit_encryption_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nEfsVolumeConfiguration efsVolumeConfiguration = new EfsVolumeConfiguration {\n    FileSystemId = \"fileSystemId\",\n\n    // the properties below are optional\n    AuthorizationConfig = new AuthorizationConfig {\n        AccessPointId = \"accessPointId\",\n        Iam = \"iam\"\n    },\n    RootDirectory = \"rootDirectory\",\n    TransitEncryption = \"transitEncryption\",\n    TransitEncryptionPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nEfsVolumeConfiguration efsVolumeConfiguration = EfsVolumeConfiguration.builder()\n        .fileSystemId(\"fileSystemId\")\n\n        // the properties below are optional\n        .authorizationConfig(AuthorizationConfig.builder()\n                .accessPointId(\"accessPointId\")\n                .iam(\"iam\")\n                .build())\n        .rootDirectory(\"rootDirectory\")\n        .transitEncryption(\"transitEncryption\")\n        .transitEncryptionPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nefsVolumeConfiguration := &efsVolumeConfiguration{\n\tfileSystemId: jsii.String(\"fileSystemId\"),\n\n\t// the properties below are optional\n\tauthorizationConfig: &authorizationConfig{\n\t\taccessPointId: jsii.String(\"accessPointId\"),\n\t\tiam: jsii.String(\"iam\"),\n\t},\n\trootDirectory: jsii.String(\"rootDirectory\"),\n\ttransitEncryption: jsii.String(\"transitEncryption\"),\n\ttransitEncryptionPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst efsVolumeConfiguration: ecs.EfsVolumeConfiguration = {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  authorizationConfig: {\n    accessPointId: 'accessPointId',\n    iam: 'iam',\n  },\n  rootDirectory: 'rootDirectory',\n  transitEncryption: 'transitEncryption',\n  transitEncryptionPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EfsVolumeConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AuthorizationConfig",
        "@aws-cdk/aws-ecs.EfsVolumeConfiguration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst efsVolumeConfiguration: ecs.EfsVolumeConfiguration = {\n  fileSystemId: 'fileSystemId',\n\n  // the properties below are optional\n  authorizationConfig: {\n    accessPointId: 'accessPointId',\n    iam: 'iam',\n  },\n  rootDirectory: 'rootDirectory',\n  transitEncryption: 'transitEncryption',\n  transitEncryptionPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 11,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "8616d1aa2f8e9a8ad635ab6e071493b421f5a598af58a177d28e02ea3e272603"
    },
    "d2c5410e72d41463311be69d2255aa5827b1a97a4cc23899fec30ab4c0892af7": {
      "translations": {
        "python": {
          "source": "# secret: secretsmanager.Secret\n# db_secret: secretsmanager.Secret\n# parameter: ssm.StringParameter\n# task_definition: ecs.TaskDefinition\n# s3_bucket: s3.Bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"STAGE\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or S3\n        ecs.EnvironmentFile.from_asset(\"./demo-env-file.env\"),\n        ecs.EnvironmentFile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        \"SECRET\": ecs.Secret.from_secrets_manager(secret),\n        \"DB_PASSWORD\": ecs.Secret.from_secrets_manager(db_secret, \"password\"),  # Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        \"API_KEY\": ecs.Secret.from_secrets_manager_version(secret, ecs.SecretVersionInfo(version_id=\"12345\"), \"apiKey\"),  # Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        \"PARAMETER\": ecs.Secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"QUEUE_NAME\", \"MyQueue\")",
          "version": "2"
        },
        "csharp": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    Environment = new Dictionary<string, string> {  // clear text, not for sensitive data\n        { \"STAGE\", \"prod\" } },\n    EnvironmentFiles = new [] { EnvironmentFile.FromAsset(\"./demo-env-file.env\"), EnvironmentFile.FromBucket(s3Bucket, \"assets/demo-env-file.env\") },\n    Secrets = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        { \"SECRET\", Secret.FromSecretsManager(secret) },\n        { \"DB_PASSWORD\", Secret.FromSecretsManager(dbSecret, \"password\") },  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"API_KEY\", Secret.FromSecretsManagerVersion(secret, new SecretVersionInfo { VersionId = \"12345\" }, \"apiKey\") },  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"PARAMETER\", Secret.FromSsmParameter(parameter) } }\n});\nnewContainer.AddEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .environment(Map.of( // clear text, not for sensitive data\n                \"STAGE\", \"prod\"))\n        .environmentFiles(List.of(EnvironmentFile.fromAsset(\"./demo-env-file.env\"), EnvironmentFile.fromBucket(s3Bucket, \"assets/demo-env-file.env\")))\n        .secrets(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n                \"SECRET\", Secret.fromSecretsManager(secret),\n                \"DB_PASSWORD\", Secret.fromSecretsManager(dbSecret, \"password\"),  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n                \"API_KEY\", Secret.fromSecretsManagerVersion(secret, SecretVersionInfo.builder().versionId(\"12345\").build(), \"apiKey\"),  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n                \"PARAMETER\", Secret.fromSsmParameter(parameter)))\n        .build());\nnewContainer.addEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "go": {
          "source": "var secret secret\nvar dbSecret secret\nvar parameter stringParameter\nvar taskDefinition taskDefinition\nvar s3Bucket bucket\n\n\nnewContainer := taskDefinition.addContainer(jsii.String(\"container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n\tenvironment: map[string]*string{\n\t\t // clear text, not for sensitive data\n\t\t\"STAGE\": jsii.String(\"prod\"),\n\t},\n\tenvironmentFiles: []environmentFile{\n\t\tecs.*environmentFile.fromAsset(jsii.String(\"./demo-env-file.env\")),\n\t\tecs.*environmentFile.fromBucket(s3Bucket, jsii.String(\"assets/demo-env-file.env\")),\n\t},\n\tsecrets: map[string]secret{\n\t\t // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n\t\t\"SECRET\": ecs.*secret.fromSecretsManager(secret),\n\t\t\"DB_PASSWORD\": ecs.*secret.fromSecretsManager(dbSecret, jsii.String(\"password\")),\n\t\t // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"API_KEY\": ecs.*secret.fromSecretsManagerVersion(secret, &SecretVersionInfo{\n\t\t\t\"versionId\": jsii.String(\"12345\"),\n\t\t}, jsii.String(\"apiKey\")),\n\t\t // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"PARAMETER\": ecs.*secret.fromSsmParameter(parameter),\n\t},\n})\nnewContainer.addEnvironment(jsii.String(\"QUEUE_NAME\"), jsii.String(\"MyQueue\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EnvironmentFile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addEnvironment",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EnvironmentFile",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromAsset",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromBucket",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManagerVersion",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.SecretVersionInfo",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 57,
        "130": 5,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 4,
        "194": 16,
        "196": 9,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "57d0240bc176193be8a376f6c0ae32def30f9aced433861943cb3c9279deab05"
    },
    "d4f494f60cf45ec38f9f5b4bc442aedf5299abd8f4e8cd63a8728fa1d33419de": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nenvironment_file_config = ecs.EnvironmentFileConfig(\n    file_type=ecs.EnvironmentFileType.S3,\n    s3_location=Location(\n        bucket_name=\"bucketName\",\n        object_key=\"objectKey\",\n\n        # the properties below are optional\n        object_version=\"objectVersion\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nEnvironmentFileConfig environmentFileConfig = new EnvironmentFileConfig {\n    FileType = EnvironmentFileType.S3,\n    S3Location = new Location {\n        BucketName = \"bucketName\",\n        ObjectKey = \"objectKey\",\n\n        // the properties below are optional\n        ObjectVersion = \"objectVersion\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nEnvironmentFileConfig environmentFileConfig = EnvironmentFileConfig.builder()\n        .fileType(EnvironmentFileType.S3)\n        .s3Location(Location.builder()\n                .bucketName(\"bucketName\")\n                .objectKey(\"objectKey\")\n\n                // the properties below are optional\n                .objectVersion(\"objectVersion\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nenvironmentFileConfig := &environmentFileConfig{\n\tfileType: ecs.environmentFileType_S3,\n\ts3Location: &location{\n\t\tbucketName: jsii.String(\"bucketName\"),\n\t\tobjectKey: jsii.String(\"objectKey\"),\n\n\t\t// the properties below are optional\n\t\tobjectVersion: jsii.String(\"objectVersion\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst environmentFileConfig: ecs.EnvironmentFileConfig = {\n  fileType: ecs.EnvironmentFileType.S3,\n  s3Location: {\n    bucketName: 'bucketName',\n    objectKey: 'objectKey',\n\n    // the properties below are optional\n    objectVersion: 'objectVersion',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EnvironmentFileConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.EnvironmentFileConfig",
        "@aws-cdk/aws-ecs.EnvironmentFileType",
        "@aws-cdk/aws-ecs.EnvironmentFileType#S3",
        "@aws-cdk/aws-s3.Location"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst environmentFileConfig: ecs.EnvironmentFileConfig = {\n  fileType: ecs.EnvironmentFileType.S3,\n  s3Location: {\n    bucketName: 'bucketName',\n    objectKey: 'objectKey',\n\n    // the properties below are optional\n    objectVersion: 'objectVersion',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1cec03efb3bbda5248c9eb38d5be8cea7b38d763514516b850fe1ac6ef9ee090"
    },
    "1069609c4cd5986e4faa9517e08d0f58e88e164d8d7d2e339f4bbddce27a5d67": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nkmsKey := kms.NewKey(this, jsii.String(\"KmsKey\"))\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlogGroup := logs.NewLogGroup(this, jsii.String(\"LogGroup\"), &logGroupProps{\n\tencryptionKey: kmsKey,\n})\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexecBucket := s3.NewBucket(this, jsii.String(\"EcsExecBucket\"), &bucketProps{\n\tencryptionKey: kmsKey,\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n\texecuteCommandConfiguration: &executeCommandConfiguration{\n\t\tkmsKey: kmsKey,\n\t\tlogConfiguration: &executeCommandLogConfiguration{\n\t\t\tcloudWatchLogGroup: logGroup,\n\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3Bucket: execBucket,\n\t\t\ts3EncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3KeyPrefix: jsii.String(\"exec-command-output\"),\n\t\t},\n\t\tlogging: ecs.executeCommandLogging_OVERRIDE,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExecuteCommandConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "98cbf1fccdd417748f81c0bf4d1ea43df16dfe3255ff126c4d40cf44588910b3"
    },
    "a012a8272575a158807d7c88527fc2abd0a72d119804ca9b0b6698ff6f7a01f0": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nkmsKey := kms.NewKey(this, jsii.String(\"KmsKey\"))\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlogGroup := logs.NewLogGroup(this, jsii.String(\"LogGroup\"), &logGroupProps{\n\tencryptionKey: kmsKey,\n})\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexecBucket := s3.NewBucket(this, jsii.String(\"EcsExecBucket\"), &bucketProps{\n\tencryptionKey: kmsKey,\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n\texecuteCommandConfiguration: &executeCommandConfiguration{\n\t\tkmsKey: kmsKey,\n\t\tlogConfiguration: &executeCommandLogConfiguration{\n\t\t\tcloudWatchLogGroup: logGroup,\n\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3Bucket: execBucket,\n\t\t\ts3EncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3KeyPrefix: jsii.String(\"exec-command-output\"),\n\t\t},\n\t\tlogging: ecs.executeCommandLogging_OVERRIDE,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "98cbf1fccdd417748f81c0bf4d1ea43df16dfe3255ff126c4d40cf44588910b3"
    },
    "8035343e6494a5363616c62e8e82f7fdb853dcf8be4e43ce39a02e158bc7a590": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\n\nkmsKey := kms.NewKey(this, jsii.String(\"KmsKey\"))\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlogGroup := logs.NewLogGroup(this, jsii.String(\"LogGroup\"), &logGroupProps{\n\tencryptionKey: kmsKey,\n})\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexecBucket := s3.NewBucket(this, jsii.String(\"EcsExecBucket\"), &bucketProps{\n\tencryptionKey: kmsKey,\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\tvpc: vpc,\n\texecuteCommandConfiguration: &executeCommandConfiguration{\n\t\tkmsKey: kmsKey,\n\t\tlogConfiguration: &executeCommandLogConfiguration{\n\t\t\tcloudWatchLogGroup: logGroup,\n\t\t\tcloudWatchEncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3Bucket: execBucket,\n\t\t\ts3EncryptionEnabled: jsii.Boolean(true),\n\t\t\ts3KeyPrefix: jsii.String(\"exec-command-output\"),\n\t\t},\n\t\tlogging: ecs.executeCommandLogging_OVERRIDE,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogging"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "98cbf1fccdd417748f81c0bf4d1ea43df16dfe3255ff126c4d40cf44588910b3"
    },
    "2a51d994e5587208abb324addbb06027860d39566054445895774d81af080387": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\n\nservice = ecs.ExternalService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = new ExternalService(this, \"Service\", new ExternalServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = ExternalService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\n\n\nservice := ecs.NewExternalService(this, jsii.String(\"Service\"), &externalServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tdesiredCount: jsii.Number(5),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalService",
        "@aws-cdk/aws-ecs.ExternalServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a18b43b6755d4d7392d9c5186b3afd36c97fcae5590b719e5e4cb53affcb4711"
    },
    "2cddec0b774995aca31dfaccfb676be6bad0637938f169ece6e33de9c739a3d6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\n# cluster: ecs.Cluster\n\nexternal_service_attributes = ecs.ExternalServiceAttributes(\n    cluster=cluster,\n\n    # the properties below are optional\n    service_arn=\"serviceArn\",\n    service_name=\"serviceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCluster cluster;\n\nExternalServiceAttributes externalServiceAttributes = new ExternalServiceAttributes {\n    Cluster = cluster,\n\n    // the properties below are optional\n    ServiceArn = \"serviceArn\",\n    ServiceName = \"serviceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCluster cluster;\n\nExternalServiceAttributes externalServiceAttributes = ExternalServiceAttributes.builder()\n        .cluster(cluster)\n\n        // the properties below are optional\n        .serviceArn(\"serviceArn\")\n        .serviceName(\"serviceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar cluster cluster\n\nexternalServiceAttributes := &externalServiceAttributes{\n\tcluster: cluster,\n\n\t// the properties below are optional\n\tserviceArn: jsii.String(\"serviceArn\"),\n\tserviceName: jsii.String(\"serviceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\nconst externalServiceAttributes: ecs.ExternalServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalServiceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalServiceAttributes",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst externalServiceAttributes: ecs.ExternalServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "87e32576936aca9c14aa2d5aae6f0031e07cc9281c6808f76a3d263f20cd4bc5"
    },
    "a41d0e042af471f30a1d843e40f31549b39127e082876af37bb092d6eeaf9352": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n\n\nservice = ecs.ExternalService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = new ExternalService(this, \"Service\", new ExternalServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = ExternalService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\n\n\nservice := ecs.NewExternalService(this, jsii.String(\"Service\"), &externalServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tdesiredCount: jsii.Number(5),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalService",
        "@aws-cdk/aws-ecs.ExternalServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "a18b43b6755d4d7392d9c5186b3afd36c97fcae5590b719e5e4cb53affcb4711"
    },
    "939ee9559ebefca8601a0c1561afd0bcd0f2d2d5b1fc7a9412d81f1f781553b8": {
      "translations": {
        "python": {
          "source": "external_task_definition = ecs.ExternalTaskDefinition(self, \"TaskDef\")\n\ncontainer = external_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "externalTaskDefinition := ecs.NewExternalTaskDefinition(this, jsii.String(\"TaskDef\"))\n\ncontainer := externalTaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n})",
          "version": "1"
        },
        "$": {
          "source": "const externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ExternalTaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "038863ee0c2fd690c91a78619b159856370b47719127a206cc8e73f50884d8d6"
    },
    "65a1e67abbb8f0a2875eff9100213b5200278d11c60039e304d6047615a18c09": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\nexternal_task_definition_attributes = ecs.ExternalTaskDefinitionAttributes(\n    task_definition_arn=\"taskDefinitionArn\",\n\n    # the properties below are optional\n    network_mode=ecs.NetworkMode.NONE,\n    task_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nExternalTaskDefinitionAttributes externalTaskDefinitionAttributes = new ExternalTaskDefinitionAttributes {\n    TaskDefinitionArn = \"taskDefinitionArn\",\n\n    // the properties below are optional\n    NetworkMode = NetworkMode.NONE,\n    TaskRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nExternalTaskDefinitionAttributes externalTaskDefinitionAttributes = ExternalTaskDefinitionAttributes.builder()\n        .taskDefinitionArn(\"taskDefinitionArn\")\n\n        // the properties below are optional\n        .networkMode(NetworkMode.NONE)\n        .taskRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\nexternalTaskDefinitionAttributes := &externalTaskDefinitionAttributes{\n\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t// the properties below are optional\n\tnetworkMode: ecs.networkMode_NONE,\n\ttaskRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst externalTaskDefinitionAttributes: ecs.ExternalTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinitionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalTaskDefinitionAttributes",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#NONE",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst externalTaskDefinitionAttributes: ecs.ExternalTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7d76726f1cffbcdb92a207aa2f6fad7cf0e3340949acf47c22134f3bd80081d3"
    },
    "5894849529b4138a2752f4dde319bb65a9cdcca4f27087bc86a4346afebed3d0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# proxy_configuration: ecs.ProxyConfiguration\n# role: iam.Role\n\nexternal_task_definition_props = ecs.ExternalTaskDefinitionProps(\n    execution_role=role,\n    family=\"family\",\n    proxy_configuration=proxy_configuration,\n    task_role=role,\n    volumes=[ecs.Volume(\n        name=\"name\",\n\n        # the properties below are optional\n        docker_volume_configuration=ecs.DockerVolumeConfiguration(\n            driver=\"driver\",\n            scope=ecs.Scope.TASK,\n\n            # the properties below are optional\n            autoprovision=False,\n            driver_opts={\n                \"driver_opts_key\": \"driverOpts\"\n            },\n            labels={\n                \"labels_key\": \"labels\"\n            }\n        ),\n        efs_volume_configuration=ecs.EfsVolumeConfiguration(\n            file_system_id=\"fileSystemId\",\n\n            # the properties below are optional\n            authorization_config=ecs.AuthorizationConfig(\n                access_point_id=\"accessPointId\",\n                iam=\"iam\"\n            ),\n            root_directory=\"rootDirectory\",\n            transit_encryption=\"transitEncryption\",\n            transit_encryption_port=123\n        ),\n        host=ecs.Host(\n            source_path=\"sourcePath\"\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nProxyConfiguration proxyConfiguration;\nRole role;\n\nExternalTaskDefinitionProps externalTaskDefinitionProps = new ExternalTaskDefinitionProps {\n    ExecutionRole = role,\n    Family = \"family\",\n    ProxyConfiguration = proxyConfiguration,\n    TaskRole = role,\n    Volumes = new [] { new Volume {\n        Name = \"name\",\n\n        // the properties below are optional\n        DockerVolumeConfiguration = new DockerVolumeConfiguration {\n            Driver = \"driver\",\n            Scope = Scope.TASK,\n\n            // the properties below are optional\n            Autoprovision = false,\n            DriverOpts = new Dictionary<string, string> {\n                { \"driverOptsKey\", \"driverOpts\" }\n            },\n            Labels = new Dictionary<string, string> {\n                { \"labelsKey\", \"labels\" }\n            }\n        },\n        EfsVolumeConfiguration = new EfsVolumeConfiguration {\n            FileSystemId = \"fileSystemId\",\n\n            // the properties below are optional\n            AuthorizationConfig = new AuthorizationConfig {\n                AccessPointId = \"accessPointId\",\n                Iam = \"iam\"\n            },\n            RootDirectory = \"rootDirectory\",\n            TransitEncryption = \"transitEncryption\",\n            TransitEncryptionPort = 123\n        },\n        Host = new Host {\n            SourcePath = \"sourcePath\"\n        }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nProxyConfiguration proxyConfiguration;\nRole role;\n\nExternalTaskDefinitionProps externalTaskDefinitionProps = ExternalTaskDefinitionProps.builder()\n        .executionRole(role)\n        .family(\"family\")\n        .proxyConfiguration(proxyConfiguration)\n        .taskRole(role)\n        .volumes(List.of(Volume.builder()\n                .name(\"name\")\n\n                // the properties below are optional\n                .dockerVolumeConfiguration(DockerVolumeConfiguration.builder()\n                        .driver(\"driver\")\n                        .scope(Scope.TASK)\n\n                        // the properties below are optional\n                        .autoprovision(false)\n                        .driverOpts(Map.of(\n                                \"driverOptsKey\", \"driverOpts\"))\n                        .labels(Map.of(\n                                \"labelsKey\", \"labels\"))\n                        .build())\n                .efsVolumeConfiguration(EfsVolumeConfiguration.builder()\n                        .fileSystemId(\"fileSystemId\")\n\n                        // the properties below are optional\n                        .authorizationConfig(AuthorizationConfig.builder()\n                                .accessPointId(\"accessPointId\")\n                                .iam(\"iam\")\n                                .build())\n                        .rootDirectory(\"rootDirectory\")\n                        .transitEncryption(\"transitEncryption\")\n                        .transitEncryptionPort(123)\n                        .build())\n                .host(Host.builder()\n                        .sourcePath(\"sourcePath\")\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar proxyConfiguration proxyConfiguration\nvar role role\n\nexternalTaskDefinitionProps := &externalTaskDefinitionProps{\n\texecutionRole: role,\n\tfamily: jsii.String(\"family\"),\n\tproxyConfiguration: proxyConfiguration,\n\ttaskRole: role,\n\tvolumes: []volume{\n\t\t&volume{\n\t\t\tname: jsii.String(\"name\"),\n\n\t\t\t// the properties below are optional\n\t\t\tdockerVolumeConfiguration: &dockerVolumeConfiguration{\n\t\t\t\tdriver: jsii.String(\"driver\"),\n\t\t\t\tscope: ecs.scope_TASK,\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tautoprovision: jsii.Boolean(false),\n\t\t\t\tdriverOpts: map[string]*string{\n\t\t\t\t\t\"driverOptsKey\": jsii.String(\"driverOpts\"),\n\t\t\t\t},\n\t\t\t\tlabels: map[string]*string{\n\t\t\t\t\t\"labelsKey\": jsii.String(\"labels\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tefsVolumeConfiguration: &efsVolumeConfiguration{\n\t\t\t\tfileSystemId: jsii.String(\"fileSystemId\"),\n\n\t\t\t\t// the properties below are optional\n\t\t\t\tauthorizationConfig: &authorizationConfig{\n\t\t\t\t\taccessPointId: jsii.String(\"accessPointId\"),\n\t\t\t\t\tiam: jsii.String(\"iam\"),\n\t\t\t\t},\n\t\t\t\trootDirectory: jsii.String(\"rootDirectory\"),\n\t\t\t\ttransitEncryption: jsii.String(\"transitEncryption\"),\n\t\t\t\ttransitEncryptionPort: jsii.Number(123),\n\t\t\t},\n\t\t\thost: &host{\n\t\t\t\tsourcePath: jsii.String(\"sourcePath\"),\n\t\t\t},\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const proxyConfiguration: ecs.ProxyConfiguration;\ndeclare const role: iam.Role;\nconst externalTaskDefinitionProps: ecs.ExternalTaskDefinitionProps = {\n  executionRole: role,\n  family: 'family',\n  proxyConfiguration: proxyConfiguration,\n  taskRole: role,\n  volumes: [{\n    name: 'name',\n\n    // the properties below are optional\n    dockerVolumeConfiguration: {\n      driver: 'driver',\n      scope: ecs.Scope.TASK,\n\n      // the properties below are optional\n      autoprovision: false,\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n    },\n    efsVolumeConfiguration: {\n      fileSystemId: 'fileSystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AuthorizationConfig",
        "@aws-cdk/aws-ecs.DockerVolumeConfiguration",
        "@aws-cdk/aws-ecs.EfsVolumeConfiguration",
        "@aws-cdk/aws-ecs.ExternalTaskDefinitionProps",
        "@aws-cdk/aws-ecs.Host",
        "@aws-cdk/aws-ecs.ProxyConfiguration",
        "@aws-cdk/aws-ecs.Scope",
        "@aws-cdk/aws-ecs.Scope#TASK",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const proxyConfiguration: ecs.ProxyConfiguration;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst externalTaskDefinitionProps: ecs.ExternalTaskDefinitionProps = {\n  executionRole: role,\n  family: 'family',\n  proxyConfiguration: proxyConfiguration,\n  taskRole: role,\n  volumes: [{\n    name: 'name',\n\n    // the properties below are optional\n    dockerVolumeConfiguration: {\n      driver: 'driver',\n      scope: ecs.Scope.TASK,\n\n      // the properties below are optional\n      autoprovision: false,\n      driverOpts: {\n        driverOptsKey: 'driverOpts',\n      },\n      labels: {\n        labelsKey: 'labels',\n      },\n    },\n    efsVolumeConfiguration: {\n      fileSystemId: 'fileSystemId',\n\n      // the properties below are optional\n      authorizationConfig: {\n        accessPointId: 'accessPointId',\n        iam: 'iam',\n      },\n      rootDirectory: 'rootDirectory',\n      transitEncryption: 'transitEncryption',\n      transitEncryptionPort: 123,\n    },\n    host: {\n      sourcePath: 'sourcePath',\n    },\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 41,
        "91": 1,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 8,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 24,
        "290": 1
      },
      "fqnsFingerprint": "7a0fc686cd86091c4a462a6e631b5ce07b512c65a38cee618323ba9d1adad089"
    },
    "0455505c70a4c98f91e0bb72052a614c46ee163e913dafbb32099cfa22456250": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    platform_version=ecs.FargatePlatformVersion.LATEST\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    PlatformVersion = FargatePlatformVersion.LATEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nscheduledFargateTask := ecsPatterns.NewScheduledFargateTask(this, jsii.String(\"ScheduledFargateTask\"), &scheduledFargateTaskProps{\n\tcluster: cluster,\n\tscheduledFargateTaskImageOptions: &scheduledFargateTaskImageOptions{\n\t\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\t\tmemoryLimitMiB: jsii.Number(512),\n\t},\n\tschedule: appscaling.schedule.expression(jsii.String(\"rate(1 minute)\")),\n\tplatformVersion: ecs.fargatePlatformVersion_LATEST,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "294557589644497b0e606b1e1a2919cd3a83005f499299739c19b7944697fecd"
    },
    "5acea073f080c1d913aabe1fb6ccf03873feae924a77188672c6e22f0c47697e": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\nlistener := lb.addListener(jsii.String(\"Listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nservice.registerLoadBalancerTargets(&ecsTarget{\n\tcontainerName: jsii.String(\"web\"),\n\tcontainerPort: jsii.Number(80),\n\tnewTargetGroupId: jsii.String(\"ECS\"),\n\tlistener: ecs.listenerConfig.applicationListener(listener, &addApplicationTargetsProps{\n\t\tprotocol: elbv2.applicationProtocol_HTTPS,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62bbc966736ec630b7e87ab4690d0362c33cfaf1ad7cc7936ab997a36a39e6d6"
    },
    "1b1658820a84c959e08c123b017e1a403940782c1c850bf0b93c37e4aa307392": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\n# cluster: ecs.Cluster\n\nfargate_service_attributes = ecs.FargateServiceAttributes(\n    cluster=cluster,\n\n    # the properties below are optional\n    service_arn=\"serviceArn\",\n    service_name=\"serviceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nCluster cluster;\n\nFargateServiceAttributes fargateServiceAttributes = new FargateServiceAttributes {\n    Cluster = cluster,\n\n    // the properties below are optional\n    ServiceArn = \"serviceArn\",\n    ServiceName = \"serviceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nCluster cluster;\n\nFargateServiceAttributes fargateServiceAttributes = FargateServiceAttributes.builder()\n        .cluster(cluster)\n\n        // the properties below are optional\n        .serviceArn(\"serviceArn\")\n        .serviceName(\"serviceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar cluster cluster\n\nfargateServiceAttributes := &fargateServiceAttributes{\n\tcluster: cluster,\n\n\t// the properties below are optional\n\tserviceArn: jsii.String(\"serviceArn\"),\n\tserviceName: jsii.String(\"serviceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\nconst fargateServiceAttributes: ecs.FargateServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateServiceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateServiceAttributes",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fargateServiceAttributes: ecs.FargateServiceAttributes = {\n  cluster: cluster,\n\n  // the properties below are optional\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7eda04b8682bd97d767ef8993a978416329af5b345bb978568cb9abf49b55369"
    },
    "6ecf9e74c33bd357e80eb7bd84d63250f825db176845b3b15ed791b5f0816102": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\nlistener := lb.addListener(jsii.String(\"Listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nservice.registerLoadBalancerTargets(&ecsTarget{\n\tcontainerName: jsii.String(\"web\"),\n\tcontainerPort: jsii.Number(80),\n\tnewTargetGroupId: jsii.String(\"ECS\"),\n\tlistener: ecs.listenerConfig.applicationListener(listener, &addApplicationTargetsProps{\n\t\tprotocol: elbv2.applicationProtocol_HTTPS,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62bbc966736ec630b7e87ab4690d0362c33cfaf1ad7cc7936ab997a36a39e6d6"
    },
    "6ddc633f5dbe6a1da3257adea0218c6f5b07aa77eae06029c4800e8ed34fb3a2": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\ncontainer = fargate_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nContainerDefinition container = fargateTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nContainerDefinition container = fargateTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "fargateTaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\tmemoryLimitMiB: jsii.Number(512),\n\tcpu: jsii.Number(256),\n})\ncontainer := fargateTaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "40de7df4ec691b7f7b18b9a672d7c0b6840f5d731b90f1a97fe5b801f6a6360f"
    },
    "6f490cc51ce655a2dd4eee525a8ed9216e242f0cb6043b6a3f8fa87f51620891": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\nfargate_task_definition_attributes = ecs.FargateTaskDefinitionAttributes(\n    task_definition_arn=\"taskDefinitionArn\",\n\n    # the properties below are optional\n    network_mode=ecs.NetworkMode.NONE,\n    task_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nFargateTaskDefinitionAttributes fargateTaskDefinitionAttributes = new FargateTaskDefinitionAttributes {\n    TaskDefinitionArn = \"taskDefinitionArn\",\n\n    // the properties below are optional\n    NetworkMode = NetworkMode.NONE,\n    TaskRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nFargateTaskDefinitionAttributes fargateTaskDefinitionAttributes = FargateTaskDefinitionAttributes.builder()\n        .taskDefinitionArn(\"taskDefinitionArn\")\n\n        // the properties below are optional\n        .networkMode(NetworkMode.NONE)\n        .taskRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\nfargateTaskDefinitionAttributes := &fargateTaskDefinitionAttributes{\n\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t// the properties below are optional\n\tnetworkMode: ecs.networkMode_NONE,\n\ttaskRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst fargateTaskDefinitionAttributes: ecs.FargateTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinitionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinitionAttributes",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#NONE",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fargateTaskDefinitionAttributes: ecs.FargateTaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9bf57e1e4ac6af4d1990980e8813c9d544919eb49ffef200f0b15e56c1b2a5d3"
    },
    "4bbc8b5fcd4fff5bdc4f258ac1236fb96d26cb4d30eb27d943f223bb419e2a39": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\ncontainer = fargate_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nContainerDefinition container = fargateTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nContainerDefinition container = fargateTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "fargateTaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\tmemoryLimitMiB: jsii.Number(512),\n\tcpu: jsii.Number(256),\n})\ncontainer := fargateTaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "40de7df4ec691b7f7b18b9a672d7c0b6840f5d731b90f1a97fe5b801f6a6360f"
    },
    "556de94e823b0560b2140b8d15726642387d05425d08f3aa217dc64b1f5602bf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\n# secret: ecs.Secret\n\nfire_lens_log_driver = ecs.FireLensLogDriver(\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    options={\n        \"options_key\": \"options\"\n    },\n    secret_options={\n        \"secret_options_key\": secret\n    },\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nSecret secret;\n\nFireLensLogDriver fireLensLogDriver = new FireLensLogDriver(new FireLensLogDriverProps {\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    Options = new Dictionary<string, string> {\n        { \"optionsKey\", \"options\" }\n    },\n    SecretOptions = new Dictionary<string, Secret> {\n        { \"secretOptionsKey\", secret }\n    },\n    Tag = \"tag\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nSecret secret;\n\nFireLensLogDriver fireLensLogDriver = FireLensLogDriver.Builder.create()\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .options(Map.of(\n                \"optionsKey\", \"options\"))\n        .secretOptions(Map.of(\n                \"secretOptionsKey\", secret))\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar secret secret\n\nfireLensLogDriver := ecs.NewFireLensLogDriver(&fireLensLogDriverProps{\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\toptions: map[string]*string{\n\t\t\"optionsKey\": jsii.String(\"options\"),\n\t},\n\tsecretOptions: map[string]*secret{\n\t\t\"secretOptionsKey\": secret,\n\t},\n\ttag: jsii.String(\"tag\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const secret: ecs.Secret;\nconst fireLensLogDriver = new ecs.FireLensLogDriver({\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: {\n    secretOptionsKey: secret,\n  },\n  tag: 'tag',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FireLensLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FireLensLogDriver",
        "@aws-cdk/aws-ecs.FireLensLogDriverProps",
        "@aws-cdk/aws-ecs.Secret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const secret: ecs.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fireLensLogDriver = new ecs.FireLensLogDriver({\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: {\n    secretOptionsKey: secret,\n  },\n  tag: 'tag',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 16,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3494ff8d302597e9d30a6da0211fd3b0cf2f1f399c0253c41a237c0ef264421e"
    },
    "ad1d9cf5e378d866c80889112ae52e89f76d1ef3f676c9c0c8f119f0ed72a59f": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.firelens(\n        options={\n            \"Name\": \"firehose\",\n            \"region\": \"us-west-2\",\n            \"delivery_stream\": \"my-stream\"\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Firelens(new FireLensLogDriverProps {\n        Options = new Dictionary<string, string> {\n            { \"Name\", \"firehose\" },\n            { \"region\", \"us-west-2\" },\n            { \"delivery_stream\", \"my-stream\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.firelens(FireLensLogDriverProps.builder()\n                .options(Map.of(\n                        \"Name\", \"firehose\",\n                        \"region\", \"us-west-2\",\n                        \"delivery_stream\", \"my-stream\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.firelens(&fireLensLogDriverProps{\n\t\toptions: map[string]*string{\n\t\t\t\"Name\": jsii.String(\"firehose\"),\n\t\t\t\"region\": jsii.String(\"us-west-2\"),\n\t\t\t\"delivery_stream\": jsii.String(\"my-stream\"),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FireLensLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.FireLensLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#firelens",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 18,
        "104": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "79c17949c0e0c8d2393b7db2dd518698327cf7e97cce5eb0523e244259b79dcb"
    },
    "38e74988bab6b7a33378c0b458e7e87f94f74ba203c8b7bef2bb9daa9ac3f62f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nfirelens_config = ecs.FirelensConfig(\n    type=ecs.FirelensLogRouterType.FLUENTBIT,\n\n    # the properties below are optional\n    options=ecs.FirelensOptions(\n        config_file_type=ecs.FirelensConfigFileType.S3,\n        config_file_value=\"configFileValue\",\n        enable_eCSLog_metadata=False\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nFirelensConfig firelensConfig = new FirelensConfig {\n    Type = FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    Options = new FirelensOptions {\n        ConfigFileType = FirelensConfigFileType.S3,\n        ConfigFileValue = \"configFileValue\",\n        EnableECSLogMetadata = false\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nFirelensConfig firelensConfig = FirelensConfig.builder()\n        .type(FirelensLogRouterType.FLUENTBIT)\n\n        // the properties below are optional\n        .options(FirelensOptions.builder()\n                .configFileType(FirelensConfigFileType.S3)\n                .configFileValue(\"configFileValue\")\n                .enableECSLogMetadata(false)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nfirelensConfig := &firelensConfig{\n\ttype: ecs.firelensLogRouterType_FLUENTBIT,\n\n\t// the properties below are optional\n\toptions: &firelensOptions{\n\t\tconfigFileType: ecs.firelensConfigFileType_S3,\n\t\tconfigFileValue: jsii.String(\"configFileValue\"),\n\t\tenableECSLogMetadata: jsii.Boolean(false),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst firelensConfig: ecs.FirelensConfig = {\n  type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n  // the properties below are optional\n  options: {\n    configFileType: ecs.FirelensConfigFileType.S3,\n    configFileValue: 'configFileValue',\n    enableECSLogMetadata: false,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FirelensConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FirelensConfig",
        "@aws-cdk/aws-ecs.FirelensConfigFileType",
        "@aws-cdk/aws-ecs.FirelensConfigFileType#S3",
        "@aws-cdk/aws-ecs.FirelensLogRouterType",
        "@aws-cdk/aws-ecs.FirelensLogRouterType#FLUENTBIT",
        "@aws-cdk/aws-ecs.FirelensOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst firelensConfig: ecs.FirelensConfig = {\n  type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n  // the properties below are optional\n  options: {\n    configFileType: ecs.FirelensConfigFileType.S3,\n    configFileValue: 'configFileValue',\n    enableECSLogMetadata: false,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "005799594ef6b510ee5872daf51ac965719931c6d6740409cf02a76e6eb2729e"
    },
    "ef469014c2463413f0a7afffaf8339fc79fd5ae185e1f2da7076fb4bc4745b7e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\n# container_image: ecs.ContainerImage\n# environment_file: ecs.EnvironmentFile\n# linux_parameters: ecs.LinuxParameters\n# log_driver: ecs.LogDriver\n# secret: ecs.Secret\n# task_definition: ecs.TaskDefinition\n\nfirelens_log_router = ecs.FirelensLogRouter(self, \"MyFirelensLogRouter\",\n    firelens_config=ecs.FirelensConfig(\n        type=ecs.FirelensLogRouterType.FLUENTBIT,\n\n        # the properties below are optional\n        options=ecs.FirelensOptions(\n            config_file_type=ecs.FirelensConfigFileType.S3,\n            config_file_value=\"configFileValue\",\n            enable_eCSLog_metadata=False\n        )\n    ),\n    image=container_image,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    command=[\"command\"],\n    container_name=\"containerName\",\n    cpu=123,\n    disable_networking=False,\n    dns_search_domains=[\"dnsSearchDomains\"],\n    dns_servers=[\"dnsServers\"],\n    docker_labels={\n        \"docker_labels_key\": \"dockerLabels\"\n    },\n    docker_security_options=[\"dockerSecurityOptions\"],\n    entry_point=[\"entryPoint\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    environment_files=[environment_file],\n    essential=False,\n    extra_hosts={\n        \"extra_hosts_key\": \"extraHosts\"\n    },\n    gpu_count=123,\n    health_check=ecs.HealthCheck(\n        command=[\"command\"],\n\n        # the properties below are optional\n        interval=cdk.Duration.minutes(30),\n        retries=123,\n        start_period=cdk.Duration.minutes(30),\n        timeout=cdk.Duration.minutes(30)\n    ),\n    hostname=\"hostname\",\n    inference_accelerator_resources=[\"inferenceAcceleratorResources\"],\n    linux_parameters=linux_parameters,\n    logging=log_driver,\n    memory_limit_mi_b=123,\n    memory_reservation_mi_b=123,\n    port_mappings=[ecs.PortMapping(\n        container_port=123,\n\n        # the properties below are optional\n        host_port=123,\n        protocol=ecs.Protocol.TCP\n    )],\n    privileged=False,\n    readonly_root_filesystem=False,\n    secrets={\n        \"secrets_key\": secret\n    },\n    start_timeout=cdk.Duration.minutes(30),\n    stop_timeout=cdk.Duration.minutes(30),\n    system_controls=[ecs.SystemControl(\n        namespace=\"namespace\",\n        value=\"value\"\n    )],\n    user=\"user\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\nTaskDefinition taskDefinition;\nFirelensLogRouter firelensLogRouter = new FirelensLogRouter(this, \"MyFirelensLogRouter\", new FirelensLogRouterProps {\n    FirelensConfig = new FirelensConfig {\n        Type = FirelensLogRouterType.FLUENTBIT,\n\n        // the properties below are optional\n        Options = new FirelensOptions {\n            ConfigFileType = FirelensConfigFileType.S3,\n            ConfigFileValue = \"configFileValue\",\n            EnableECSLogMetadata = false\n        }\n    },\n    Image = containerImage,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    ContainerName = \"containerName\",\n    Cpu = 123,\n    DisableNetworking = false,\n    DnsSearchDomains = new [] { \"dnsSearchDomains\" },\n    DnsServers = new [] { \"dnsServers\" },\n    DockerLabels = new Dictionary<string, string> {\n        { \"dockerLabelsKey\", \"dockerLabels\" }\n    },\n    DockerSecurityOptions = new [] { \"dockerSecurityOptions\" },\n    EntryPoint = new [] { \"entryPoint\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    EnvironmentFiles = new [] { environmentFile },\n    Essential = false,\n    ExtraHosts = new Dictionary<string, string> {\n        { \"extraHostsKey\", \"extraHosts\" }\n    },\n    GpuCount = 123,\n    HealthCheck = new HealthCheck {\n        Command = new [] { \"command\" },\n\n        // the properties below are optional\n        Interval = Duration.Minutes(30),\n        Retries = 123,\n        StartPeriod = Duration.Minutes(30),\n        Timeout = Duration.Minutes(30)\n    },\n    Hostname = \"hostname\",\n    InferenceAcceleratorResources = new [] { \"inferenceAcceleratorResources\" },\n    LinuxParameters = linuxParameters,\n    Logging = logDriver,\n    MemoryLimitMiB = 123,\n    MemoryReservationMiB = 123,\n    PortMappings = new [] { new PortMapping {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        HostPort = 123,\n        Protocol = Protocol.TCP\n    } },\n    Privileged = false,\n    ReadonlyRootFilesystem = false,\n    Secrets = new Dictionary<string, Secret> {\n        { \"secretsKey\", secret }\n    },\n    StartTimeout = Duration.Minutes(30),\n    StopTimeout = Duration.Minutes(30),\n    SystemControls = new [] { new SystemControl {\n        Namespace = \"namespace\",\n        Value = \"value\"\n    } },\n    User = \"user\",\n    WorkingDirectory = \"workingDirectory\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\nTaskDefinition taskDefinition;\n\nFirelensLogRouter firelensLogRouter = FirelensLogRouter.Builder.create(this, \"MyFirelensLogRouter\")\n        .firelensConfig(FirelensConfig.builder()\n                .type(FirelensLogRouterType.FLUENTBIT)\n\n                // the properties below are optional\n                .options(FirelensOptions.builder()\n                        .configFileType(FirelensConfigFileType.S3)\n                        .configFileValue(\"configFileValue\")\n                        .enableECSLogMetadata(false)\n                        .build())\n                .build())\n        .image(containerImage)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .containerName(\"containerName\")\n        .cpu(123)\n        .disableNetworking(false)\n        .dnsSearchDomains(List.of(\"dnsSearchDomains\"))\n        .dnsServers(List.of(\"dnsServers\"))\n        .dockerLabels(Map.of(\n                \"dockerLabelsKey\", \"dockerLabels\"))\n        .dockerSecurityOptions(List.of(\"dockerSecurityOptions\"))\n        .entryPoint(List.of(\"entryPoint\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .environmentFiles(List.of(environmentFile))\n        .essential(false)\n        .extraHosts(Map.of(\n                \"extraHostsKey\", \"extraHosts\"))\n        .gpuCount(123)\n        .healthCheck(HealthCheck.builder()\n                .command(List.of(\"command\"))\n\n                // the properties below are optional\n                .interval(Duration.minutes(30))\n                .retries(123)\n                .startPeriod(Duration.minutes(30))\n                .timeout(Duration.minutes(30))\n                .build())\n        .hostname(\"hostname\")\n        .inferenceAcceleratorResources(List.of(\"inferenceAcceleratorResources\"))\n        .linuxParameters(linuxParameters)\n        .logging(logDriver)\n        .memoryLimitMiB(123)\n        .memoryReservationMiB(123)\n        .portMappings(List.of(PortMapping.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .hostPort(123)\n                .protocol(Protocol.TCP)\n                .build()))\n        .privileged(false)\n        .readonlyRootFilesystem(false)\n        .secrets(Map.of(\n                \"secretsKey\", secret))\n        .startTimeout(Duration.minutes(30))\n        .stopTimeout(Duration.minutes(30))\n        .systemControls(List.of(SystemControl.builder()\n                .namespace(\"namespace\")\n                .value(\"value\")\n                .build()))\n        .user(\"user\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar containerImage containerImage\nvar environmentFile environmentFile\nvar linuxParameters linuxParameters\nvar logDriver logDriver\nvar secret secret\nvar taskDefinition taskDefinition\n\nfirelensLogRouter := ecs.NewFirelensLogRouter(this, jsii.String(\"MyFirelensLogRouter\"), &firelensLogRouterProps{\n\tfirelensConfig: &firelensConfig{\n\t\ttype: ecs.firelensLogRouterType_FLUENTBIT,\n\n\t\t// the properties below are optional\n\t\toptions: &firelensOptions{\n\t\t\tconfigFileType: ecs.firelensConfigFileType_S3,\n\t\t\tconfigFileValue: jsii.String(\"configFileValue\"),\n\t\t\tenableECSLogMetadata: jsii.Boolean(false),\n\t\t},\n\t},\n\timage: containerImage,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tcontainerName: jsii.String(\"containerName\"),\n\tcpu: jsii.Number(123),\n\tdisableNetworking: jsii.Boolean(false),\n\tdnsSearchDomains: []*string{\n\t\tjsii.String(\"dnsSearchDomains\"),\n\t},\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tdockerLabels: map[string]*string{\n\t\t\"dockerLabelsKey\": jsii.String(\"dockerLabels\"),\n\t},\n\tdockerSecurityOptions: []*string{\n\t\tjsii.String(\"dockerSecurityOptions\"),\n\t},\n\tentryPoint: []*string{\n\t\tjsii.String(\"entryPoint\"),\n\t},\n\tenvironment: map[string]*string{\n\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t},\n\tenvironmentFiles: []*environmentFile{\n\t\tenvironmentFile,\n\t},\n\tessential: jsii.Boolean(false),\n\textraHosts: map[string]*string{\n\t\t\"extraHostsKey\": jsii.String(\"extraHosts\"),\n\t},\n\tgpuCount: jsii.Number(123),\n\thealthCheck: &healthCheck{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tinterval: cdk.duration.minutes(jsii.Number(30)),\n\t\tretries: jsii.Number(123),\n\t\tstartPeriod: cdk.*duration.minutes(jsii.Number(30)),\n\t\ttimeout: cdk.*duration.minutes(jsii.Number(30)),\n\t},\n\thostname: jsii.String(\"hostname\"),\n\tinferenceAcceleratorResources: []*string{\n\t\tjsii.String(\"inferenceAcceleratorResources\"),\n\t},\n\tlinuxParameters: linuxParameters,\n\tlogging: logDriver,\n\tmemoryLimitMiB: jsii.Number(123),\n\tmemoryReservationMiB: jsii.Number(123),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\thostPort: jsii.Number(123),\n\t\t\tprotocol: ecs.protocol_TCP,\n\t\t},\n\t},\n\tprivileged: jsii.Boolean(false),\n\treadonlyRootFilesystem: jsii.Boolean(false),\n\tsecrets: map[string]*secret{\n\t\t\"secretsKey\": secret,\n\t},\n\tstartTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tstopTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tsystemControls: []systemControl{\n\t\t&systemControl{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuser: jsii.String(\"user\"),\n\tworkingDirectory: jsii.String(\"workingDirectory\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst firelensLogRouter = new ecs.FirelensLogRouter(this, 'MyFirelensLogRouter', {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FirelensLogRouter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.FirelensConfig",
        "@aws-cdk/aws-ecs.FirelensConfigFileType",
        "@aws-cdk/aws-ecs.FirelensConfigFileType#S3",
        "@aws-cdk/aws-ecs.FirelensLogRouter",
        "@aws-cdk/aws-ecs.FirelensLogRouterProps",
        "@aws-cdk/aws-ecs.FirelensLogRouterType",
        "@aws-cdk/aws-ecs.FirelensLogRouterType#FLUENTBIT",
        "@aws-cdk/aws-ecs.FirelensOptions",
        "@aws-cdk/aws-ecs.HealthCheck",
        "@aws-cdk/aws-ecs.LinuxParameters",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst firelensLogRouter = new ecs.FirelensLogRouter(this, 'MyFirelensLogRouter', {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 12,
        "10": 20,
        "75": 105,
        "91": 5,
        "104": 1,
        "130": 6,
        "153": 6,
        "169": 6,
        "192": 10,
        "193": 10,
        "194": 17,
        "196": 5,
        "197": 1,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 52,
        "290": 1
      },
      "fqnsFingerprint": "5a54206a05e92e15684b898209f9918bd5ef025e300e2e4acae58e71167b1b87"
    },
    "d159f22761cdfb94bde26a28ebb8604c1b57e2582119a8e7f198d92265bae78a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\n# container_image: ecs.ContainerImage\n# environment_file: ecs.EnvironmentFile\n# linux_parameters: ecs.LinuxParameters\n# log_driver: ecs.LogDriver\n# secret: ecs.Secret\n\nfirelens_log_router_definition_options = ecs.FirelensLogRouterDefinitionOptions(\n    firelens_config=ecs.FirelensConfig(\n        type=ecs.FirelensLogRouterType.FLUENTBIT,\n\n        # the properties below are optional\n        options=ecs.FirelensOptions(\n            config_file_type=ecs.FirelensConfigFileType.S3,\n            config_file_value=\"configFileValue\",\n            enable_eCSLog_metadata=False\n        )\n    ),\n    image=container_image,\n\n    # the properties below are optional\n    command=[\"command\"],\n    container_name=\"containerName\",\n    cpu=123,\n    disable_networking=False,\n    dns_search_domains=[\"dnsSearchDomains\"],\n    dns_servers=[\"dnsServers\"],\n    docker_labels={\n        \"docker_labels_key\": \"dockerLabels\"\n    },\n    docker_security_options=[\"dockerSecurityOptions\"],\n    entry_point=[\"entryPoint\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    environment_files=[environment_file],\n    essential=False,\n    extra_hosts={\n        \"extra_hosts_key\": \"extraHosts\"\n    },\n    gpu_count=123,\n    health_check=ecs.HealthCheck(\n        command=[\"command\"],\n\n        # the properties below are optional\n        interval=cdk.Duration.minutes(30),\n        retries=123,\n        start_period=cdk.Duration.minutes(30),\n        timeout=cdk.Duration.minutes(30)\n    ),\n    hostname=\"hostname\",\n    inference_accelerator_resources=[\"inferenceAcceleratorResources\"],\n    linux_parameters=linux_parameters,\n    logging=log_driver,\n    memory_limit_mi_b=123,\n    memory_reservation_mi_b=123,\n    port_mappings=[ecs.PortMapping(\n        container_port=123,\n\n        # the properties below are optional\n        host_port=123,\n        protocol=ecs.Protocol.TCP\n    )],\n    privileged=False,\n    readonly_root_filesystem=False,\n    secrets={\n        \"secrets_key\": secret\n    },\n    start_timeout=cdk.Duration.minutes(30),\n    stop_timeout=cdk.Duration.minutes(30),\n    system_controls=[ecs.SystemControl(\n        namespace=\"namespace\",\n        value=\"value\"\n    )],\n    user=\"user\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\nFirelensLogRouterDefinitionOptions firelensLogRouterDefinitionOptions = new FirelensLogRouterDefinitionOptions {\n    FirelensConfig = new FirelensConfig {\n        Type = FirelensLogRouterType.FLUENTBIT,\n\n        // the properties below are optional\n        Options = new FirelensOptions {\n            ConfigFileType = FirelensConfigFileType.S3,\n            ConfigFileValue = \"configFileValue\",\n            EnableECSLogMetadata = false\n        }\n    },\n    Image = containerImage,\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    ContainerName = \"containerName\",\n    Cpu = 123,\n    DisableNetworking = false,\n    DnsSearchDomains = new [] { \"dnsSearchDomains\" },\n    DnsServers = new [] { \"dnsServers\" },\n    DockerLabels = new Dictionary<string, string> {\n        { \"dockerLabelsKey\", \"dockerLabels\" }\n    },\n    DockerSecurityOptions = new [] { \"dockerSecurityOptions\" },\n    EntryPoint = new [] { \"entryPoint\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    EnvironmentFiles = new [] { environmentFile },\n    Essential = false,\n    ExtraHosts = new Dictionary<string, string> {\n        { \"extraHostsKey\", \"extraHosts\" }\n    },\n    GpuCount = 123,\n    HealthCheck = new HealthCheck {\n        Command = new [] { \"command\" },\n\n        // the properties below are optional\n        Interval = Duration.Minutes(30),\n        Retries = 123,\n        StartPeriod = Duration.Minutes(30),\n        Timeout = Duration.Minutes(30)\n    },\n    Hostname = \"hostname\",\n    InferenceAcceleratorResources = new [] { \"inferenceAcceleratorResources\" },\n    LinuxParameters = linuxParameters,\n    Logging = logDriver,\n    MemoryLimitMiB = 123,\n    MemoryReservationMiB = 123,\n    PortMappings = new [] { new PortMapping {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        HostPort = 123,\n        Protocol = Protocol.TCP\n    } },\n    Privileged = false,\n    ReadonlyRootFilesystem = false,\n    Secrets = new Dictionary<string, Secret> {\n        { \"secretsKey\", secret }\n    },\n    StartTimeout = Duration.Minutes(30),\n    StopTimeout = Duration.Minutes(30),\n    SystemControls = new [] { new SystemControl {\n        Namespace = \"namespace\",\n        Value = \"value\"\n    } },\n    User = \"user\",\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\n\nFirelensLogRouterDefinitionOptions firelensLogRouterDefinitionOptions = FirelensLogRouterDefinitionOptions.builder()\n        .firelensConfig(FirelensConfig.builder()\n                .type(FirelensLogRouterType.FLUENTBIT)\n\n                // the properties below are optional\n                .options(FirelensOptions.builder()\n                        .configFileType(FirelensConfigFileType.S3)\n                        .configFileValue(\"configFileValue\")\n                        .enableECSLogMetadata(false)\n                        .build())\n                .build())\n        .image(containerImage)\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .containerName(\"containerName\")\n        .cpu(123)\n        .disableNetworking(false)\n        .dnsSearchDomains(List.of(\"dnsSearchDomains\"))\n        .dnsServers(List.of(\"dnsServers\"))\n        .dockerLabels(Map.of(\n                \"dockerLabelsKey\", \"dockerLabels\"))\n        .dockerSecurityOptions(List.of(\"dockerSecurityOptions\"))\n        .entryPoint(List.of(\"entryPoint\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .environmentFiles(List.of(environmentFile))\n        .essential(false)\n        .extraHosts(Map.of(\n                \"extraHostsKey\", \"extraHosts\"))\n        .gpuCount(123)\n        .healthCheck(HealthCheck.builder()\n                .command(List.of(\"command\"))\n\n                // the properties below are optional\n                .interval(Duration.minutes(30))\n                .retries(123)\n                .startPeriod(Duration.minutes(30))\n                .timeout(Duration.minutes(30))\n                .build())\n        .hostname(\"hostname\")\n        .inferenceAcceleratorResources(List.of(\"inferenceAcceleratorResources\"))\n        .linuxParameters(linuxParameters)\n        .logging(logDriver)\n        .memoryLimitMiB(123)\n        .memoryReservationMiB(123)\n        .portMappings(List.of(PortMapping.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .hostPort(123)\n                .protocol(Protocol.TCP)\n                .build()))\n        .privileged(false)\n        .readonlyRootFilesystem(false)\n        .secrets(Map.of(\n                \"secretsKey\", secret))\n        .startTimeout(Duration.minutes(30))\n        .stopTimeout(Duration.minutes(30))\n        .systemControls(List.of(SystemControl.builder()\n                .namespace(\"namespace\")\n                .value(\"value\")\n                .build()))\n        .user(\"user\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar containerImage containerImage\nvar environmentFile environmentFile\nvar linuxParameters linuxParameters\nvar logDriver logDriver\nvar secret secret\n\nfirelensLogRouterDefinitionOptions := &firelensLogRouterDefinitionOptions{\n\tfirelensConfig: &firelensConfig{\n\t\ttype: ecs.firelensLogRouterType_FLUENTBIT,\n\n\t\t// the properties below are optional\n\t\toptions: &firelensOptions{\n\t\t\tconfigFileType: ecs.firelensConfigFileType_S3,\n\t\t\tconfigFileValue: jsii.String(\"configFileValue\"),\n\t\t\tenableECSLogMetadata: jsii.Boolean(false),\n\t\t},\n\t},\n\timage: containerImage,\n\n\t// the properties below are optional\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tcontainerName: jsii.String(\"containerName\"),\n\tcpu: jsii.Number(123),\n\tdisableNetworking: jsii.Boolean(false),\n\tdnsSearchDomains: []*string{\n\t\tjsii.String(\"dnsSearchDomains\"),\n\t},\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tdockerLabels: map[string]*string{\n\t\t\"dockerLabelsKey\": jsii.String(\"dockerLabels\"),\n\t},\n\tdockerSecurityOptions: []*string{\n\t\tjsii.String(\"dockerSecurityOptions\"),\n\t},\n\tentryPoint: []*string{\n\t\tjsii.String(\"entryPoint\"),\n\t},\n\tenvironment: map[string]*string{\n\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t},\n\tenvironmentFiles: []*environmentFile{\n\t\tenvironmentFile,\n\t},\n\tessential: jsii.Boolean(false),\n\textraHosts: map[string]*string{\n\t\t\"extraHostsKey\": jsii.String(\"extraHosts\"),\n\t},\n\tgpuCount: jsii.Number(123),\n\thealthCheck: &healthCheck{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tinterval: cdk.duration.minutes(jsii.Number(30)),\n\t\tretries: jsii.Number(123),\n\t\tstartPeriod: cdk.*duration.minutes(jsii.Number(30)),\n\t\ttimeout: cdk.*duration.minutes(jsii.Number(30)),\n\t},\n\thostname: jsii.String(\"hostname\"),\n\tinferenceAcceleratorResources: []*string{\n\t\tjsii.String(\"inferenceAcceleratorResources\"),\n\t},\n\tlinuxParameters: linuxParameters,\n\tlogging: logDriver,\n\tmemoryLimitMiB: jsii.Number(123),\n\tmemoryReservationMiB: jsii.Number(123),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\thostPort: jsii.Number(123),\n\t\t\tprotocol: ecs.protocol_TCP,\n\t\t},\n\t},\n\tprivileged: jsii.Boolean(false),\n\treadonlyRootFilesystem: jsii.Boolean(false),\n\tsecrets: map[string]*secret{\n\t\t\"secretsKey\": secret,\n\t},\n\tstartTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tstopTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tsystemControls: []systemControl{\n\t\t&systemControl{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuser: jsii.String(\"user\"),\n\tworkingDirectory: jsii.String(\"workingDirectory\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\nconst firelensLogRouterDefinitionOptions: ecs.FirelensLogRouterDefinitionOptions = {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterDefinitionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.FirelensConfig",
        "@aws-cdk/aws-ecs.FirelensConfigFileType",
        "@aws-cdk/aws-ecs.FirelensConfigFileType#S3",
        "@aws-cdk/aws-ecs.FirelensLogRouterDefinitionOptions",
        "@aws-cdk/aws-ecs.FirelensLogRouterType",
        "@aws-cdk/aws-ecs.FirelensLogRouterType#FLUENTBIT",
        "@aws-cdk/aws-ecs.FirelensOptions",
        "@aws-cdk/aws-ecs.HealthCheck",
        "@aws-cdk/aws-ecs.LinuxParameters",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst firelensLogRouterDefinitionOptions: ecs.FirelensLogRouterDefinitionOptions = {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 12,
        "10": 19,
        "75": 100,
        "91": 5,
        "130": 5,
        "153": 6,
        "169": 6,
        "192": 10,
        "193": 10,
        "194": 16,
        "196": 5,
        "225": 6,
        "242": 6,
        "243": 6,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 51,
        "290": 1
      },
      "fqnsFingerprint": "c68c3cd317cad6253aa933ab9ce5069dc3dc96e45b0fca53cb0a5d76356853d1"
    },
    "ab30b9d7154456fd929b96b7c9b152ba5ebc260d8f4bf3c233add64f9a5d8a36": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\n# container_image: ecs.ContainerImage\n# environment_file: ecs.EnvironmentFile\n# linux_parameters: ecs.LinuxParameters\n# log_driver: ecs.LogDriver\n# secret: ecs.Secret\n# task_definition: ecs.TaskDefinition\n\nfirelens_log_router_props = ecs.FirelensLogRouterProps(\n    firelens_config=ecs.FirelensConfig(\n        type=ecs.FirelensLogRouterType.FLUENTBIT,\n\n        # the properties below are optional\n        options=ecs.FirelensOptions(\n            config_file_type=ecs.FirelensConfigFileType.S3,\n            config_file_value=\"configFileValue\",\n            enable_eCSLog_metadata=False\n        )\n    ),\n    image=container_image,\n    task_definition=task_definition,\n\n    # the properties below are optional\n    command=[\"command\"],\n    container_name=\"containerName\",\n    cpu=123,\n    disable_networking=False,\n    dns_search_domains=[\"dnsSearchDomains\"],\n    dns_servers=[\"dnsServers\"],\n    docker_labels={\n        \"docker_labels_key\": \"dockerLabels\"\n    },\n    docker_security_options=[\"dockerSecurityOptions\"],\n    entry_point=[\"entryPoint\"],\n    environment={\n        \"environment_key\": \"environment\"\n    },\n    environment_files=[environment_file],\n    essential=False,\n    extra_hosts={\n        \"extra_hosts_key\": \"extraHosts\"\n    },\n    gpu_count=123,\n    health_check=ecs.HealthCheck(\n        command=[\"command\"],\n\n        # the properties below are optional\n        interval=cdk.Duration.minutes(30),\n        retries=123,\n        start_period=cdk.Duration.minutes(30),\n        timeout=cdk.Duration.minutes(30)\n    ),\n    hostname=\"hostname\",\n    inference_accelerator_resources=[\"inferenceAcceleratorResources\"],\n    linux_parameters=linux_parameters,\n    logging=log_driver,\n    memory_limit_mi_b=123,\n    memory_reservation_mi_b=123,\n    port_mappings=[ecs.PortMapping(\n        container_port=123,\n\n        # the properties below are optional\n        host_port=123,\n        protocol=ecs.Protocol.TCP\n    )],\n    privileged=False,\n    readonly_root_filesystem=False,\n    secrets={\n        \"secrets_key\": secret\n    },\n    start_timeout=cdk.Duration.minutes(30),\n    stop_timeout=cdk.Duration.minutes(30),\n    system_controls=[ecs.SystemControl(\n        namespace=\"namespace\",\n        value=\"value\"\n    )],\n    user=\"user\",\n    working_directory=\"workingDirectory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\nTaskDefinition taskDefinition;\nFirelensLogRouterProps firelensLogRouterProps = new FirelensLogRouterProps {\n    FirelensConfig = new FirelensConfig {\n        Type = FirelensLogRouterType.FLUENTBIT,\n\n        // the properties below are optional\n        Options = new FirelensOptions {\n            ConfigFileType = FirelensConfigFileType.S3,\n            ConfigFileValue = \"configFileValue\",\n            EnableECSLogMetadata = false\n        }\n    },\n    Image = containerImage,\n    TaskDefinition = taskDefinition,\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    ContainerName = \"containerName\",\n    Cpu = 123,\n    DisableNetworking = false,\n    DnsSearchDomains = new [] { \"dnsSearchDomains\" },\n    DnsServers = new [] { \"dnsServers\" },\n    DockerLabels = new Dictionary<string, string> {\n        { \"dockerLabelsKey\", \"dockerLabels\" }\n    },\n    DockerSecurityOptions = new [] { \"dockerSecurityOptions\" },\n    EntryPoint = new [] { \"entryPoint\" },\n    Environment = new Dictionary<string, string> {\n        { \"environmentKey\", \"environment\" }\n    },\n    EnvironmentFiles = new [] { environmentFile },\n    Essential = false,\n    ExtraHosts = new Dictionary<string, string> {\n        { \"extraHostsKey\", \"extraHosts\" }\n    },\n    GpuCount = 123,\n    HealthCheck = new HealthCheck {\n        Command = new [] { \"command\" },\n\n        // the properties below are optional\n        Interval = Duration.Minutes(30),\n        Retries = 123,\n        StartPeriod = Duration.Minutes(30),\n        Timeout = Duration.Minutes(30)\n    },\n    Hostname = \"hostname\",\n    InferenceAcceleratorResources = new [] { \"inferenceAcceleratorResources\" },\n    LinuxParameters = linuxParameters,\n    Logging = logDriver,\n    MemoryLimitMiB = 123,\n    MemoryReservationMiB = 123,\n    PortMappings = new [] { new PortMapping {\n        ContainerPort = 123,\n\n        // the properties below are optional\n        HostPort = 123,\n        Protocol = Protocol.TCP\n    } },\n    Privileged = false,\n    ReadonlyRootFilesystem = false,\n    Secrets = new Dictionary<string, Secret> {\n        { \"secretsKey\", secret }\n    },\n    StartTimeout = Duration.Minutes(30),\n    StopTimeout = Duration.Minutes(30),\n    SystemControls = new [] { new SystemControl {\n        Namespace = \"namespace\",\n        Value = \"value\"\n    } },\n    User = \"user\",\n    WorkingDirectory = \"workingDirectory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nContainerImage containerImage;\nEnvironmentFile environmentFile;\nLinuxParameters linuxParameters;\nLogDriver logDriver;\nSecret secret;\nTaskDefinition taskDefinition;\n\nFirelensLogRouterProps firelensLogRouterProps = FirelensLogRouterProps.builder()\n        .firelensConfig(FirelensConfig.builder()\n                .type(FirelensLogRouterType.FLUENTBIT)\n\n                // the properties below are optional\n                .options(FirelensOptions.builder()\n                        .configFileType(FirelensConfigFileType.S3)\n                        .configFileValue(\"configFileValue\")\n                        .enableECSLogMetadata(false)\n                        .build())\n                .build())\n        .image(containerImage)\n        .taskDefinition(taskDefinition)\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .containerName(\"containerName\")\n        .cpu(123)\n        .disableNetworking(false)\n        .dnsSearchDomains(List.of(\"dnsSearchDomains\"))\n        .dnsServers(List.of(\"dnsServers\"))\n        .dockerLabels(Map.of(\n                \"dockerLabelsKey\", \"dockerLabels\"))\n        .dockerSecurityOptions(List.of(\"dockerSecurityOptions\"))\n        .entryPoint(List.of(\"entryPoint\"))\n        .environment(Map.of(\n                \"environmentKey\", \"environment\"))\n        .environmentFiles(List.of(environmentFile))\n        .essential(false)\n        .extraHosts(Map.of(\n                \"extraHostsKey\", \"extraHosts\"))\n        .gpuCount(123)\n        .healthCheck(HealthCheck.builder()\n                .command(List.of(\"command\"))\n\n                // the properties below are optional\n                .interval(Duration.minutes(30))\n                .retries(123)\n                .startPeriod(Duration.minutes(30))\n                .timeout(Duration.minutes(30))\n                .build())\n        .hostname(\"hostname\")\n        .inferenceAcceleratorResources(List.of(\"inferenceAcceleratorResources\"))\n        .linuxParameters(linuxParameters)\n        .logging(logDriver)\n        .memoryLimitMiB(123)\n        .memoryReservationMiB(123)\n        .portMappings(List.of(PortMapping.builder()\n                .containerPort(123)\n\n                // the properties below are optional\n                .hostPort(123)\n                .protocol(Protocol.TCP)\n                .build()))\n        .privileged(false)\n        .readonlyRootFilesystem(false)\n        .secrets(Map.of(\n                \"secretsKey\", secret))\n        .startTimeout(Duration.minutes(30))\n        .stopTimeout(Duration.minutes(30))\n        .systemControls(List.of(SystemControl.builder()\n                .namespace(\"namespace\")\n                .value(\"value\")\n                .build()))\n        .user(\"user\")\n        .workingDirectory(\"workingDirectory\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar containerImage containerImage\nvar environmentFile environmentFile\nvar linuxParameters linuxParameters\nvar logDriver logDriver\nvar secret secret\nvar taskDefinition taskDefinition\n\nfirelensLogRouterProps := &firelensLogRouterProps{\n\tfirelensConfig: &firelensConfig{\n\t\ttype: ecs.firelensLogRouterType_FLUENTBIT,\n\n\t\t// the properties below are optional\n\t\toptions: &firelensOptions{\n\t\t\tconfigFileType: ecs.firelensConfigFileType_S3,\n\t\t\tconfigFileValue: jsii.String(\"configFileValue\"),\n\t\t\tenableECSLogMetadata: jsii.Boolean(false),\n\t\t},\n\t},\n\timage: containerImage,\n\ttaskDefinition: taskDefinition,\n\n\t// the properties below are optional\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tcontainerName: jsii.String(\"containerName\"),\n\tcpu: jsii.Number(123),\n\tdisableNetworking: jsii.Boolean(false),\n\tdnsSearchDomains: []*string{\n\t\tjsii.String(\"dnsSearchDomains\"),\n\t},\n\tdnsServers: []*string{\n\t\tjsii.String(\"dnsServers\"),\n\t},\n\tdockerLabels: map[string]*string{\n\t\t\"dockerLabelsKey\": jsii.String(\"dockerLabels\"),\n\t},\n\tdockerSecurityOptions: []*string{\n\t\tjsii.String(\"dockerSecurityOptions\"),\n\t},\n\tentryPoint: []*string{\n\t\tjsii.String(\"entryPoint\"),\n\t},\n\tenvironment: map[string]*string{\n\t\t\"environmentKey\": jsii.String(\"environment\"),\n\t},\n\tenvironmentFiles: []*environmentFile{\n\t\tenvironmentFile,\n\t},\n\tessential: jsii.Boolean(false),\n\textraHosts: map[string]*string{\n\t\t\"extraHostsKey\": jsii.String(\"extraHosts\"),\n\t},\n\tgpuCount: jsii.Number(123),\n\thealthCheck: &healthCheck{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"command\"),\n\t\t},\n\n\t\t// the properties below are optional\n\t\tinterval: cdk.duration.minutes(jsii.Number(30)),\n\t\tretries: jsii.Number(123),\n\t\tstartPeriod: cdk.*duration.minutes(jsii.Number(30)),\n\t\ttimeout: cdk.*duration.minutes(jsii.Number(30)),\n\t},\n\thostname: jsii.String(\"hostname\"),\n\tinferenceAcceleratorResources: []*string{\n\t\tjsii.String(\"inferenceAcceleratorResources\"),\n\t},\n\tlinuxParameters: linuxParameters,\n\tlogging: logDriver,\n\tmemoryLimitMiB: jsii.Number(123),\n\tmemoryReservationMiB: jsii.Number(123),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\thostPort: jsii.Number(123),\n\t\t\tprotocol: ecs.protocol_TCP,\n\t\t},\n\t},\n\tprivileged: jsii.Boolean(false),\n\treadonlyRootFilesystem: jsii.Boolean(false),\n\tsecrets: map[string]*secret{\n\t\t\"secretsKey\": secret,\n\t},\n\tstartTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tstopTimeout: cdk.*duration.minutes(jsii.Number(30)),\n\tsystemControls: []systemControl{\n\t\t&systemControl{\n\t\t\tnamespace: jsii.String(\"namespace\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tuser: jsii.String(\"user\"),\n\tworkingDirectory: jsii.String(\"workingDirectory\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst firelensLogRouterProps: ecs.FirelensLogRouterProps = {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FirelensLogRouterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.FirelensConfig",
        "@aws-cdk/aws-ecs.FirelensConfigFileType",
        "@aws-cdk/aws-ecs.FirelensConfigFileType#S3",
        "@aws-cdk/aws-ecs.FirelensLogRouterProps",
        "@aws-cdk/aws-ecs.FirelensLogRouterType",
        "@aws-cdk/aws-ecs.FirelensLogRouterType#FLUENTBIT",
        "@aws-cdk/aws-ecs.FirelensOptions",
        "@aws-cdk/aws-ecs.HealthCheck",
        "@aws-cdk/aws-ecs.LinuxParameters",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const environmentFile: ecs.EnvironmentFile;\ndeclare const linuxParameters: ecs.LinuxParameters;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst firelensLogRouterProps: ecs.FirelensLogRouterProps = {\n  firelensConfig: {\n    type: ecs.FirelensLogRouterType.FLUENTBIT,\n\n    // the properties below are optional\n    options: {\n      configFileType: ecs.FirelensConfigFileType.S3,\n      configFileValue: 'configFileValue',\n      enableECSLogMetadata: false,\n    },\n  },\n  image: containerImage,\n  taskDefinition: taskDefinition,\n\n  // the properties below are optional\n  command: ['command'],\n  containerName: 'containerName',\n  cpu: 123,\n  disableNetworking: false,\n  dnsSearchDomains: ['dnsSearchDomains'],\n  dnsServers: ['dnsServers'],\n  dockerLabels: {\n    dockerLabelsKey: 'dockerLabels',\n  },\n  dockerSecurityOptions: ['dockerSecurityOptions'],\n  entryPoint: ['entryPoint'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  environmentFiles: [environmentFile],\n  essential: false,\n  extraHosts: {\n    extraHostsKey: 'extraHosts',\n  },\n  gpuCount: 123,\n  healthCheck: {\n    command: ['command'],\n\n    // the properties below are optional\n    interval: cdk.Duration.minutes(30),\n    retries: 123,\n    startPeriod: cdk.Duration.minutes(30),\n    timeout: cdk.Duration.minutes(30),\n  },\n  hostname: 'hostname',\n  inferenceAcceleratorResources: ['inferenceAcceleratorResources'],\n  linuxParameters: linuxParameters,\n  logging: logDriver,\n  memoryLimitMiB: 123,\n  memoryReservationMiB: 123,\n  portMappings: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostPort: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  privileged: false,\n  readonlyRootFilesystem: false,\n  secrets: {\n    secretsKey: secret,\n  },\n  startTimeout: cdk.Duration.minutes(30),\n  stopTimeout: cdk.Duration.minutes(30),\n  systemControls: [{\n    namespace: 'namespace',\n    value: 'value',\n  }],\n  user: 'user',\n  workingDirectory: 'workingDirectory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 12,
        "10": 19,
        "75": 105,
        "91": 5,
        "130": 6,
        "153": 7,
        "169": 7,
        "192": 10,
        "193": 10,
        "194": 16,
        "196": 5,
        "225": 7,
        "242": 7,
        "243": 7,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 52,
        "290": 1
      },
      "fqnsFingerprint": "f65b9a03ed92e5290fccc28be14919aed11badb7a69398ac67a117e46dd23ab1"
    },
    "644f617a0b59b99c82dd71ea572f621dcdb12453bb4d6e11a3584bded839159c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nfirelens_options = ecs.FirelensOptions(\n    config_file_type=ecs.FirelensConfigFileType.S3,\n    config_file_value=\"configFileValue\",\n    enable_eCSLog_metadata=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nFirelensOptions firelensOptions = new FirelensOptions {\n    ConfigFileType = FirelensConfigFileType.S3,\n    ConfigFileValue = \"configFileValue\",\n    EnableECSLogMetadata = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nFirelensOptions firelensOptions = FirelensOptions.builder()\n        .configFileType(FirelensConfigFileType.S3)\n        .configFileValue(\"configFileValue\")\n        .enableECSLogMetadata(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nfirelensOptions := &firelensOptions{\n\tconfigFileType: ecs.firelensConfigFileType_S3,\n\tconfigFileValue: jsii.String(\"configFileValue\"),\n\tenableECSLogMetadata: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst firelensOptions: ecs.FirelensOptions = {\n  configFileType: ecs.FirelensConfigFileType.S3,\n  configFileValue: 'configFileValue',\n  enableECSLogMetadata: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FirelensOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FirelensConfigFileType",
        "@aws-cdk/aws-ecs.FirelensConfigFileType#S3",
        "@aws-cdk/aws-ecs.FirelensOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst firelensOptions: ecs.FirelensOptions = {\n  configFileType: ecs.FirelensConfigFileType.S3,\n  configFileValue: 'configFileValue',\n  enableECSLogMetadata: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9763e19fb57c389520d11cada6a7ae3f6171311da22fe41ce86fd5fae244fc6c"
    },
    "510e8e9fff47a983897cf05e969edfb4f214f61d12f8374d5955574349f8fa44": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\nfluentd_log_driver = ecs.FluentdLogDriver(\n    address=\"address\",\n    async_connect=False,\n    buffer_limit=123,\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    max_retries=123,\n    retry_wait=cdk.Duration.minutes(30),\n    sub_second_precision=False,\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\nFluentdLogDriver fluentdLogDriver = new FluentdLogDriver(new FluentdLogDriverProps {\n    Address = \"address\",\n    AsyncConnect = false,\n    BufferLimit = 123,\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    MaxRetries = 123,\n    RetryWait = Duration.Minutes(30),\n    SubSecondPrecision = false,\n    Tag = \"tag\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nFluentdLogDriver fluentdLogDriver = FluentdLogDriver.Builder.create()\n        .address(\"address\")\n        .asyncConnect(false)\n        .bufferLimit(123)\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .maxRetries(123)\n        .retryWait(Duration.minutes(30))\n        .subSecondPrecision(false)\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nfluentdLogDriver := ecs.NewFluentdLogDriver(&fluentdLogDriverProps{\n\taddress: jsii.String(\"address\"),\n\tasyncConnect: jsii.Boolean(false),\n\tbufferLimit: jsii.Number(123),\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\tmaxRetries: jsii.Number(123),\n\tretryWait: cdk.duration.minutes(jsii.Number(30)),\n\tsubSecondPrecision: jsii.Boolean(false),\n\ttag: jsii.String(\"tag\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\nconst fluentdLogDriver = new ecs.FluentdLogDriver(/* all optional props */ {\n  address: 'address',\n  asyncConnect: false,\n  bufferLimit: 123,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxRetries: 123,\n  retryWait: cdk.Duration.minutes(30),\n  subSecondPrecision: false,\n  tag: 'tag',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FluentdLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FluentdLogDriver",
        "@aws-cdk/aws-ecs.FluentdLogDriverProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fluentdLogDriver = new ecs.FluentdLogDriver(/* all optional props */ {\n  address: 'address',\n  asyncConnect: false,\n  bufferLimit: 123,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxRetries: 123,\n  retryWait: cdk.Duration.minutes(30),\n  subSecondPrecision: false,\n  tag: 'tag',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 18,
        "91": 2,
        "192": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "7da8ded97a676d34c34df6c75be898c7926d349ddb50892bdac002d0de785ec1"
    },
    "2a7cd3e1e8c2f7961c5239404c6e6c906dfa7e173f49531a7351887269ed645e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\nfluentd_log_driver_props = ecs.FluentdLogDriverProps(\n    address=\"address\",\n    async_connect=False,\n    buffer_limit=123,\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    max_retries=123,\n    retry_wait=cdk.Duration.minutes(30),\n    sub_second_precision=False,\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\nFluentdLogDriverProps fluentdLogDriverProps = new FluentdLogDriverProps {\n    Address = \"address\",\n    AsyncConnect = false,\n    BufferLimit = 123,\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    MaxRetries = 123,\n    RetryWait = Duration.Minutes(30),\n    SubSecondPrecision = false,\n    Tag = \"tag\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nFluentdLogDriverProps fluentdLogDriverProps = FluentdLogDriverProps.builder()\n        .address(\"address\")\n        .asyncConnect(false)\n        .bufferLimit(123)\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .maxRetries(123)\n        .retryWait(Duration.minutes(30))\n        .subSecondPrecision(false)\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nfluentdLogDriverProps := &fluentdLogDriverProps{\n\taddress: jsii.String(\"address\"),\n\tasyncConnect: jsii.Boolean(false),\n\tbufferLimit: jsii.Number(123),\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\tmaxRetries: jsii.Number(123),\n\tretryWait: cdk.duration.minutes(jsii.Number(30)),\n\tsubSecondPrecision: jsii.Boolean(false),\n\ttag: jsii.String(\"tag\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\nconst fluentdLogDriverProps: ecs.FluentdLogDriverProps = {\n  address: 'address',\n  asyncConnect: false,\n  bufferLimit: 123,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxRetries: 123,\n  retryWait: cdk.Duration.minutes(30),\n  subSecondPrecision: false,\n  tag: 'tag',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FluentdLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FluentdLogDriverProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fluentdLogDriverProps: ecs.FluentdLogDriverProps = {\n  address: 'address',\n  asyncConnect: false,\n  bufferLimit: 123,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxRetries: 123,\n  retryWait: cdk.Duration.minutes(30),\n  subSecondPrecision: false,\n  tag: 'tag',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 18,
        "91": 2,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "9288aa2b9756fe78821eff6618393b96f7a6c6d3f21ce97fcc47c67bf0cfb109"
    },
    "b87b9aea7bb29bffd81de30cea34248494aac8eed04454f3587cf9d551a3f9f2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\ngelf_log_driver = ecs.GelfLogDriver(\n    address=\"address\",\n\n    # the properties below are optional\n    compression_level=123,\n    compression_type=ecs.GelfCompressionType.GZIP,\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    tag=\"tag\",\n    tcp_max_reconnect=123,\n    tcp_reconnect_delay=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\nGelfLogDriver gelfLogDriver = new GelfLogDriver(new GelfLogDriverProps {\n    Address = \"address\",\n\n    // the properties below are optional\n    CompressionLevel = 123,\n    CompressionType = GelfCompressionType.GZIP,\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    Tag = \"tag\",\n    TcpMaxReconnect = 123,\n    TcpReconnectDelay = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nGelfLogDriver gelfLogDriver = GelfLogDriver.Builder.create()\n        .address(\"address\")\n\n        // the properties below are optional\n        .compressionLevel(123)\n        .compressionType(GelfCompressionType.GZIP)\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .tag(\"tag\")\n        .tcpMaxReconnect(123)\n        .tcpReconnectDelay(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\ngelfLogDriver := ecs.NewGelfLogDriver(&gelfLogDriverProps{\n\taddress: jsii.String(\"address\"),\n\n\t// the properties below are optional\n\tcompressionLevel: jsii.Number(123),\n\tcompressionType: ecs.gelfCompressionType_GZIP,\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\ttag: jsii.String(\"tag\"),\n\ttcpMaxReconnect: jsii.Number(123),\n\ttcpReconnectDelay: cdk.duration.minutes(jsii.Number(30)),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\nconst gelfLogDriver = new ecs.GelfLogDriver({\n  address: 'address',\n\n  // the properties below are optional\n  compressionLevel: 123,\n  compressionType: ecs.GelfCompressionType.GZIP,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n  tcpMaxReconnect: 123,\n  tcpReconnectDelay: cdk.Duration.minutes(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.GelfLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.GelfCompressionType",
        "@aws-cdk/aws-ecs.GelfCompressionType#GZIP",
        "@aws-cdk/aws-ecs.GelfLogDriver",
        "@aws-cdk/aws-ecs.GelfLogDriverProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gelfLogDriver = new ecs.GelfLogDriver({\n  address: 'address',\n\n  // the properties below are optional\n  compressionLevel: 123,\n  compressionType: ecs.GelfCompressionType.GZIP,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n  tcpMaxReconnect: 123,\n  tcpReconnectDelay: cdk.Duration.minutes(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 20,
        "192": 2,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "e5c111b08b30cfbdc4d8d0a9ebffbf6ae815966a588398df0375abb98127e548"
    },
    "ad23da2151cd6a9cd5fbd5758825ea4168bc04a17a59338b4a838b140b7aa0c9": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.gelf(address=\"my-gelf-address\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Gelf(new GelfLogDriverProps { Address = \"my-gelf-address\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.gelf(GelfLogDriverProps.builder().address(\"my-gelf-address\").build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.gelf(&gelfLogDriverProps{\n\t\taddress: jsii.String(\"my-gelf-address\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.GelfLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GelfLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#gelf",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "a2d2ca238928e5f8a13b5101c816dabcc5f7fbe7162a39e551a88c778de55646"
    },
    "f0ec578117406288c90de7e06cf2db1b5cdd52dcd7ff67af61e45435fa0efc5b": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.GenericLogDriver(\n        log_driver=\"fluentd\",\n        options={\n            \"tag\": \"example-tag\"\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = new GenericLogDriver(new GenericLogDriverProps {\n        LogDriver = \"fluentd\",\n        Options = new Dictionary<string, string> {\n            { \"tag\", \"example-tag\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(GenericLogDriver.Builder.create()\n                .logDriver(\"fluentd\")\n                .options(Map.of(\n                        \"tag\", \"example-tag\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.NewGenericLogDriver(&genericLogDriverProps{\n\t\tlogDriver: jsii.String(\"fluentd\"),\n\t\toptions: map[string]*string{\n\t\t\t\"tag\": jsii.String(\"example-tag\"),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.GenericLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GenericLogDriver",
        "@aws-cdk/aws-ecs.GenericLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "2ffdded2f40cf6f50b46811041ded2b65e8ad3f7ad863164e33604d4aac46ead"
    },
    "bb0122ad6769676caf70109677eb2757247573983626c2310515b7879502313c": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.GenericLogDriver(\n        log_driver=\"fluentd\",\n        options={\n            \"tag\": \"example-tag\"\n        }\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = new GenericLogDriver(new GenericLogDriverProps {\n        LogDriver = \"fluentd\",\n        Options = new Dictionary<string, string> {\n            { \"tag\", \"example-tag\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(GenericLogDriver.Builder.create()\n                .logDriver(\"fluentd\")\n                .options(Map.of(\n                        \"tag\", \"example-tag\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.NewGenericLogDriver(&genericLogDriverProps{\n\t\tlogDriver: jsii.String(\"fluentd\"),\n\t\toptions: map[string]*string{\n\t\t\t\"tag\": jsii.String(\"example-tag\"),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.GenericLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GenericLogDriver",
        "@aws-cdk/aws-ecs.GenericLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "2ffdded2f40cf6f50b46811041ded2b65e8ad3f7ad863164e33604d4aac46ead"
    },
    "948a0308a25e2eaf917dc08753bf5fafe85b362ab5fbdda293a6d0c7ed1ea423": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# security_group: ec2.SecurityGroup\n\nqueue_processing_fargate_service = ecs_patterns.QueueProcessingFargateService(self, \"Service\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    health_check=ecs.HealthCheck(\n        command=[\"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\"],\n        # the properties below are optional\n        interval=Duration.minutes(30),\n        retries=123,\n        start_period=Duration.minutes(30),\n        timeout=Duration.minutes(30)\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\nQueueProcessingFargateService queueProcessingFargateService = new QueueProcessingFargateService(this, \"Service\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = ContainerImage.FromRegistry(\"test\"),\n    HealthCheck = new HealthCheck {\n        Command = new [] { \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" },\n        // the properties below are optional\n        Interval = Duration.Minutes(30),\n        Retries = 123,\n        StartPeriod = Duration.Minutes(30),\n        Timeout = Duration.Minutes(30)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup securityGroup;\n\nQueueProcessingFargateService queueProcessingFargateService = QueueProcessingFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .healthCheck(HealthCheck.builder()\n                .command(List.of(\"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\"))\n                // the properties below are optional\n                .interval(Duration.minutes(30))\n                .retries(123)\n                .startPeriod(Duration.minutes(30))\n                .timeout(Duration.minutes(30))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var vpc vpc\nvar securityGroup securityGroup\n\nqueueProcessingFargateService := ecsPatterns.NewQueueProcessingFargateService(this, jsii.String(\"Service\"), &queueProcessingFargateServiceProps{\n\tvpc: vpc,\n\tmemoryLimitMiB: jsii.Number(512),\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"test\")),\n\thealthCheck: &healthCheck{\n\t\tcommand: []*string{\n\t\t\tjsii.String(\"CMD-SHELL\"),\n\t\t\tjsii.String(\"curl -f http://localhost/ || exit 1\"),\n\t\t},\n\t\t// the properties below are optional\n\t\tinterval: *awscdkcore.Duration.minutes(jsii.Number(30)),\n\t\tretries: jsii.Number(123),\n\t\tstartPeriod: *awscdkcore.Duration.minutes(jsii.Number(30)),\n\t\ttimeout: *awscdkcore.Duration.minutes(jsii.Number(30)),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  healthCheck: {\n    command: [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ],\n    // the properties below are optional\n    interval: Duration.minutes(30),\n    retries: 123,\n    startPeriod: Duration.minutes(30),\n    timeout: Duration.minutes(30),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.HealthCheck"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.HealthCheck",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  healthCheck: {\n    command: [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ],\n    // the properties below are optional\n    interval: Duration.minutes(30),\n    retries: 123,\n    startPeriod: Duration.minutes(30),\n    timeout: Duration.minutes(30),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 4,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "64fb00b047060386e8342f6630cff288c62b0b8ec0a83fada463afe4970fb5b8"
    },
    "d230617113bb58334ad63e07f9734a5dbb483deb8515ee2a60e87b91e902374d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nhost = ecs.Host(\n    source_path=\"sourcePath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nHost host = new Host {\n    SourcePath = \"sourcePath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nHost host = Host.builder()\n        .sourcePath(\"sourcePath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nhost := &host{\n\tsourcePath: jsii.String(\"sourcePath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst host: ecs.Host = {\n  sourcePath: 'sourcePath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Host"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Host"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst host: ecs.Host = {\n  sourcePath: 'sourcePath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e98fdaccc8a34468e25704876b2d273d3980d667c6d6ce11245c8d5277c59e99"
    },
    "cb98602fcb7e6fd766004d36a16f4b3fe7e487f0c37f7f3741d0233abdbb2e94": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ninference_accelerator = ecs.InferenceAccelerator(\n    device_name=\"deviceName\",\n    device_type=\"deviceType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nInferenceAccelerator inferenceAccelerator = new InferenceAccelerator {\n    DeviceName = \"deviceName\",\n    DeviceType = \"deviceType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nInferenceAccelerator inferenceAccelerator = InferenceAccelerator.builder()\n        .deviceName(\"deviceName\")\n        .deviceType(\"deviceType\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ninferenceAccelerator := &inferenceAccelerator{\n\tdeviceName: jsii.String(\"deviceName\"),\n\tdeviceType: jsii.String(\"deviceType\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst inferenceAccelerator: ecs.InferenceAccelerator = {\n  deviceName: 'deviceName',\n  deviceType: 'deviceType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.InferenceAccelerator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.InferenceAccelerator"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst inferenceAccelerator: ecs.InferenceAccelerator = {\n  deviceName: 'deviceName',\n  deviceType: 'deviceType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6cbee6dc0d6196b5342b62ae2f9b754d1981ea25bc9ca7943a6e78b570b46cbb"
    },
    "2b4ab06529c619a61ba48d96e7efb32c611b18a728e48031280791156aeade60": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\njournald_log_driver = ecs.JournaldLogDriver(\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nJournaldLogDriver journaldLogDriver = new JournaldLogDriver(new JournaldLogDriverProps {\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    Tag = \"tag\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nJournaldLogDriver journaldLogDriver = JournaldLogDriver.Builder.create()\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\njournaldLogDriver := ecs.NewJournaldLogDriver(&journaldLogDriverProps{\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\ttag: jsii.String(\"tag\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst journaldLogDriver = new ecs.JournaldLogDriver(/* all optional props */ {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.JournaldLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.JournaldLogDriver",
        "@aws-cdk/aws-ecs.JournaldLogDriverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst journaldLogDriver = new ecs.JournaldLogDriver(/* all optional props */ {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0fd2a3cc64614cc882c5fefe10c1c5c4dde38c1a9db395ff413869a289042dee"
    },
    "8052f2510fc66335f9baec986262012e28e07f0f1c710510659d632701bddb41": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\njournald_log_driver_props = ecs.JournaldLogDriverProps(\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nJournaldLogDriverProps journaldLogDriverProps = new JournaldLogDriverProps {\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    Tag = \"tag\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nJournaldLogDriverProps journaldLogDriverProps = JournaldLogDriverProps.builder()\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\njournaldLogDriverProps := &journaldLogDriverProps{\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\ttag: jsii.String(\"tag\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst journaldLogDriverProps: ecs.JournaldLogDriverProps = {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.JournaldLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.JournaldLogDriverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst journaldLogDriverProps: ecs.JournaldLogDriverProps = {\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  tag: 'tag',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "055a639826112fb29463a551be5192d835f0560b50852d65ba7366f90cb682d8"
    },
    "cbd131f5e51118a8bce6128f62277b2f92f4ece5417876f83d50188964831c55": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\njson_file_log_driver = ecs.JsonFileLogDriver(\n    compress=False,\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    max_file=123,\n    max_size=\"maxSize\",\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nJsonFileLogDriver jsonFileLogDriver = new JsonFileLogDriver(new JsonFileLogDriverProps {\n    Compress = false,\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    MaxFile = 123,\n    MaxSize = \"maxSize\",\n    Tag = \"tag\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nJsonFileLogDriver jsonFileLogDriver = JsonFileLogDriver.Builder.create()\n        .compress(false)\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .maxFile(123)\n        .maxSize(\"maxSize\")\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\njsonFileLogDriver := ecs.NewJsonFileLogDriver(&jsonFileLogDriverProps{\n\tcompress: jsii.Boolean(false),\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\tmaxFile: jsii.Number(123),\n\tmaxSize: jsii.String(\"maxSize\"),\n\ttag: jsii.String(\"tag\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst jsonFileLogDriver = new ecs.JsonFileLogDriver(/* all optional props */ {\n  compress: false,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxFile: 123,\n  maxSize: 'maxSize',\n  tag: 'tag',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.JsonFileLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.JsonFileLogDriver",
        "@aws-cdk/aws-ecs.JsonFileLogDriverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst jsonFileLogDriver = new ecs.JsonFileLogDriver(/* all optional props */ {\n  compress: false,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxFile: 123,\n  maxSize: 'maxSize',\n  tag: 'tag',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 11,
        "91": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9daf946f70bfeffc672a9a359910856bf8c5a05b358e82493d6cdef2b8dcd6c7"
    },
    "c8d449e0c0319739386bfb69344b1583ec87eead39fefae54575e10ec5ffc1c5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\njson_file_log_driver_props = ecs.JsonFileLogDriverProps(\n    compress=False,\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    labels=[\"labels\"],\n    max_file=123,\n    max_size=\"maxSize\",\n    tag=\"tag\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nJsonFileLogDriverProps jsonFileLogDriverProps = new JsonFileLogDriverProps {\n    Compress = false,\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Labels = new [] { \"labels\" },\n    MaxFile = 123,\n    MaxSize = \"maxSize\",\n    Tag = \"tag\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nJsonFileLogDriverProps jsonFileLogDriverProps = JsonFileLogDriverProps.builder()\n        .compress(false)\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .labels(List.of(\"labels\"))\n        .maxFile(123)\n        .maxSize(\"maxSize\")\n        .tag(\"tag\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\njsonFileLogDriverProps := &jsonFileLogDriverProps{\n\tcompress: jsii.Boolean(false),\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\tmaxFile: jsii.Number(123),\n\tmaxSize: jsii.String(\"maxSize\"),\n\ttag: jsii.String(\"tag\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst jsonFileLogDriverProps: ecs.JsonFileLogDriverProps = {\n  compress: false,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxFile: 123,\n  maxSize: 'maxSize',\n  tag: 'tag',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.JsonFileLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.JsonFileLogDriverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst jsonFileLogDriverProps: ecs.JsonFileLogDriverProps = {\n  compress: false,\n  env: ['env'],\n  envRegex: 'envRegex',\n  labels: ['labels'],\n  maxFile: 123,\n  maxSize: 'maxSize',\n  tag: 'tag',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 11,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "9cabfc73bb6bce61ca77c79e95fd816e0ad4d6a4ab390321d246f4ffce78e5b7"
    },
    "f19eaacfbaa5e968d2bdcb6643bb59192e60bd543b6da43f6770d8c3e7e4ef68": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nlinux_parameters = ecs.LinuxParameters(self, \"MyLinuxParameters\",\n    init_process_enabled=False,\n    shared_memory_size=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLinuxParameters linuxParameters = new LinuxParameters(this, \"MyLinuxParameters\", new LinuxParametersProps {\n    InitProcessEnabled = false,\n    SharedMemorySize = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLinuxParameters linuxParameters = LinuxParameters.Builder.create(this, \"MyLinuxParameters\")\n        .initProcessEnabled(false)\n        .sharedMemorySize(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nlinuxParameters := ecs.NewLinuxParameters(this, jsii.String(\"MyLinuxParameters\"), &linuxParametersProps{\n\tinitProcessEnabled: jsii.Boolean(false),\n\tsharedMemorySize: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst linuxParameters = new ecs.LinuxParameters(this, 'MyLinuxParameters', /* all optional props */ {\n  initProcessEnabled: false,\n  sharedMemorySize: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LinuxParameters"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.LinuxParameters",
        "@aws-cdk/aws-ecs.LinuxParametersProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst linuxParameters = new ecs.LinuxParameters(this, 'MyLinuxParameters', /* all optional props */ {\n  initProcessEnabled: false,\n  sharedMemorySize: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 6,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8af0d6fa960b037ba1e7ae7a922eb92bff58243ab632ba8513c4d0460f6d0ad2"
    },
    "e7a07a46d8b0739f6ea571e43d76fad3eb74f1fd4019e821dded9c721272c0be": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nlinux_parameters_props = ecs.LinuxParametersProps(\n    init_process_enabled=False,\n    shared_memory_size=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLinuxParametersProps linuxParametersProps = new LinuxParametersProps {\n    InitProcessEnabled = false,\n    SharedMemorySize = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLinuxParametersProps linuxParametersProps = LinuxParametersProps.builder()\n        .initProcessEnabled(false)\n        .sharedMemorySize(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nlinuxParametersProps := &linuxParametersProps{\n\tinitProcessEnabled: jsii.Boolean(false),\n\tsharedMemorySize: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst linuxParametersProps: ecs.LinuxParametersProps = {\n  initProcessEnabled: false,\n  sharedMemorySize: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LinuxParametersProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.LinuxParametersProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst linuxParametersProps: ecs.LinuxParametersProps = {\n  initProcessEnabled: false,\n  sharedMemorySize: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "afdd90ba1839fb8035718aa464e4928c729327b9125dec65c35ec5f15dcba158"
    },
    "851eabd7aa21d46a3063bc232f859bb21d007c7776f35a6d10d45e723910e7a8": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\nlistener := lb.addListener(jsii.String(\"Listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nservice.registerLoadBalancerTargets(&ecsTarget{\n\tcontainerName: jsii.String(\"web\"),\n\tcontainerPort: jsii.Number(80),\n\tnewTargetGroupId: jsii.String(\"ECS\"),\n\tlistener: ecs.listenerConfig.applicationListener(listener, &addApplicationTargetsProps{\n\t\tprotocol: elbv2.applicationProtocol_HTTPS,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ListenerConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62bbc966736ec630b7e87ab4690d0362c33cfaf1ad7cc7936ab997a36a39e6d6"
    },
    "ce73e407fed0d5c5757f7a1121d1bbabe203ab543a6e33e951b10ba4a699b99e": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n})\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})\nlb.addTarget(service.loadBalancerTarget(&loadBalancerTargetOptions{\n\tcontainerName: jsii.String(\"MyContainer\"),\n\tcontainerPort: jsii.Number(80),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LoadBalancerTargetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62ee75a8ee3a3c43c54101d48d798b2aeaeb07623c502cf608cb70be5dd20f72"
    },
    "42b4e4c1d660edc839313dd59abfddbe44604b3fc6eb889cb498dac35c23a8e0": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.splunk(&splunkLogDriverProps{\n\t\ttoken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-splunk-token\")),\n\t\turl: jsii.String(\"my-splunk-url\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "cbcee149029bb834f61f6271a2374a988f65487af1f16259b9f633676fad53b4"
    },
    "757e7b42b65a7bfb08a6b402d316dd6f4457e80cf8ed0b09f06efad02744c57d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nlog_driver_config = ecs.LogDriverConfig(\n    log_driver=\"logDriver\",\n\n    # the properties below are optional\n    options={\n        \"options_key\": \"options\"\n    },\n    secret_options=[ecs.CfnTaskDefinition.SecretProperty(\n        name=\"name\",\n        value_from=\"valueFrom\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nLogDriverConfig logDriverConfig = new LogDriverConfig {\n    LogDriver = \"logDriver\",\n\n    // the properties below are optional\n    Options = new Dictionary<string, string> {\n        { \"optionsKey\", \"options\" }\n    },\n    SecretOptions = new [] { new SecretProperty {\n        Name = \"name\",\n        ValueFrom = \"valueFrom\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nLogDriverConfig logDriverConfig = LogDriverConfig.builder()\n        .logDriver(\"logDriver\")\n\n        // the properties below are optional\n        .options(Map.of(\n                \"optionsKey\", \"options\"))\n        .secretOptions(List.of(SecretProperty.builder()\n                .name(\"name\")\n                .valueFrom(\"valueFrom\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nlogDriverConfig := &logDriverConfig{\n\tlogDriver: jsii.String(\"logDriver\"),\n\n\t// the properties below are optional\n\toptions: map[string]*string{\n\t\t\"optionsKey\": jsii.String(\"options\"),\n\t},\n\tsecretOptions: []secretProperty{\n\t\t&secretProperty{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalueFrom: jsii.String(\"valueFrom\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst logDriverConfig: ecs.LogDriverConfig = {\n  logDriver: 'logDriver',\n\n  // the properties below are optional\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LogDriverConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.LogDriverConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logDriverConfig: ecs.LogDriverConfig = {\n  logDriver: 'logDriver',\n\n  // the properties below are optional\n  options: {\n    optionsKey: 'options',\n  },\n  secretOptions: [{\n    name: 'name',\n    valueFrom: 'valueFrom',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "01de09163be162dda2c6e771f0f95eb9afff3fc6edea148aafb76e9bde6372b4"
    },
    "7f6d1ab20274608e5190b96e37455dd15ce27ee580582da7cc65411d270e1f1e": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.aws_logs(stream_prefix=\"EventDemo\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"EventDemo\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"EventDemo\").build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"EventDemo\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LogDrivers"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#awsLogs",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "4cf3f8eca2a725ff1abf8bae15affe3d08fbe2e8d50a0099722cbec042441077"
    },
    "91e54da8e04f45b09797eaab5495f038af58dfec1e4071dc492494895757b956": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image_type=ecs.MachineImageType.BOTTLEROCKET\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImageType = MachineImageType.BOTTLEROCKET\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImageType(MachineImageType.BOTTLEROCKET)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\n\ncluster.addCapacity(jsii.String(\"graviton-cluster\"), &addCapacityOptions{\n\tminCapacity: jsii.Number(2),\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"c6g.large\")),\n\tmachineImageType: ecs.machineImageType_BOTTLEROCKET,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.MachineImageType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.MachineImageType",
        "@aws-cdk/aws-ecs.MachineImageType#BOTTLEROCKET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "63dd6d3996d48036fc8ca202267807d855e5390efc7c04339d3faf456d671686"
    },
    "a804513d8f3d50125642a4ec22fe9dae7f9c3c098d7833b511d3718964f42205": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nloadBalancedFargateService := ecsPatterns.NewApplicationLoadBalancedFargateService(this, jsii.String(\"Service\"), &applicationLoadBalancedFargateServiceProps{\n\tcluster: cluster,\n\tmemoryLimitMiB: jsii.Number(1024),\n\tdesiredCount: jsii.Number(1),\n\tcpu: jsii.Number(512),\n\ttaskImageOptions: &applicationLoadBalancedTaskImageOptions{\n\t\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\t},\n})\n\nscalableTarget := loadBalancedFargateService.service.autoScaleTaskCount(&enableScalingProps{\n\tminCapacity: jsii.Number(1),\n\tmaxCapacity: jsii.Number(20),\n})\n\nscalableTarget.scaleOnCpuUtilization(jsii.String(\"CpuScaling\"), &cpuUtilizationScalingProps{\n\ttargetUtilizationPercent: jsii.Number(50),\n})\n\nscalableTarget.scaleOnMemoryUtilization(jsii.String(\"MemoryScaling\"), &memoryUtilizationScalingProps{\n\ttargetUtilizationPercent: jsii.Number(50),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3c5f7a6834d4ac1d1d5c885edc4d54de605ae84ea6b07d63a12bf75d56393cf4"
    },
    "671f4138ee0d02c7cc7fe9bb69d26a5b2e22d40e849625b0ccd5efd8fa2da0c7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nmount_point = ecs.MountPoint(\n    container_path=\"containerPath\",\n    read_only=False,\n    source_volume=\"sourceVolume\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nMountPoint mountPoint = new MountPoint {\n    ContainerPath = \"containerPath\",\n    ReadOnly = false,\n    SourceVolume = \"sourceVolume\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nMountPoint mountPoint = MountPoint.builder()\n        .containerPath(\"containerPath\")\n        .readOnly(false)\n        .sourceVolume(\"sourceVolume\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nmountPoint := &mountPoint{\n\tcontainerPath: jsii.String(\"containerPath\"),\n\treadOnly: jsii.Boolean(false),\n\tsourceVolume: jsii.String(\"sourceVolume\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst mountPoint: ecs.MountPoint = {\n  containerPath: 'containerPath',\n  readOnly: false,\n  sourceVolume: 'sourceVolume',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.MountPoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.MountPoint"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst mountPoint: ecs.MountPoint = {\n  containerPath: 'containerPath',\n  readOnly: false,\n  sourceVolume: 'sourceVolume',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c853587d202e8f042d04b8093481fa8995cc3fb65c215f2a11ccfdcff98c4652"
    },
    "d2fe9772969825f45362f47d3b4b9da7a6daa4a93d7004d27c52f9230885e9b5": {
      "translations": {
        "python": {
          "source": "ec2_task_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\",\n    network_mode=ecs.NetworkMode.BRIDGE\n)\n\ncontainer = ec2_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = new Ec2TaskDefinition(this, \"TaskDef\", new Ec2TaskDefinitionProps {\n    NetworkMode = NetworkMode.BRIDGE\n});\n\nContainerDefinition container = ec2TaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = Ec2TaskDefinition.Builder.create(this, \"TaskDef\")\n        .networkMode(NetworkMode.BRIDGE)\n        .build();\n\nContainerDefinition container = ec2TaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "ec2TaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"), &ec2TaskDefinitionProps{\n\tnetworkMode: ecs.networkMode_BRIDGE,\n})\n\ncontainer := ec2TaskDefinition.addContainer(jsii.String(\"WebContainer\"), &containerDefinitionOptions{\n\t// Use an image from DockerHub\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n})",
          "version": "1"
        },
        "$": {
          "source": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.NetworkMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#BRIDGE",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "271c11c7bcf04c6609e7edef38029293fee1e176b75cf229dec4d513aed9659f"
    },
    "eb1954abb5f7ec66be17174547df7775ec32c28dc4d3d19d9583f6e66cd2a947": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the Windows container to start\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    runtime_platform=ecs.RuntimePlatform(\n        operating_system_family=ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        cpu_architecture=ecs.CpuArchitecture.X86_64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"windowsservercore\",\n    logging=ecs.LogDriver.aws_logs(stream_prefix=\"win-iis-on-fargate\"),\n    port_mappings=[ecs.PortMapping(container_port=80)],\n    image=ecs.ContainerImage.from_registry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    RuntimePlatform = new RuntimePlatform {\n        OperatingSystemFamily = OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        CpuArchitecture = CpuArchitecture.X86_64\n    },\n    Cpu = 1024,\n    MemoryLimitMiB = 2048\n});\n\ntaskDefinition.AddContainer(\"windowsservercore\", new ContainerDefinitionOptions {\n    Logging = LogDriver.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"win-iis-on-fargate\" }),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } },\n    Image = ContainerImage.FromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .runtimePlatform(RuntimePlatform.builder()\n                .operatingSystemFamily(OperatingSystemFamily.WINDOWS_SERVER_2019_CORE)\n                .cpuArchitecture(CpuArchitecture.X86_64)\n                .build())\n        .cpu(1024)\n        .memoryLimitMiB(2048)\n        .build();\n\ntaskDefinition.addContainer(\"windowsservercore\", ContainerDefinitionOptions.builder()\n        .logging(LogDriver.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"win-iis-on-fargate\").build()))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .image(ContainerImage.fromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the Windows container to start\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\truntimePlatform: &runtimePlatform{\n\t\toperatingSystemFamily: ecs.operatingSystemFamily_WINDOWS_SERVER_2019_CORE(),\n\t\tcpuArchitecture: ecs.cpuArchitecture_X86_64(),\n\t},\n\tcpu: jsii.Number(1024),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\ntaskDefinition.addContainer(jsii.String(\"windowsservercore\"), &containerDefinitionOptions{\n\tlogging: ecs.logDriver.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"win-iis-on-fargate\"),\n\t}),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(80),\n\t\t},\n\t},\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.OperatingSystemFamily"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuArchitecture",
        "@aws-cdk/aws-ecs.CpuArchitecture#X86_64",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDriver#awsLogs",
        "@aws-cdk/aws-ecs.OperatingSystemFamily",
        "@aws-cdk/aws-ecs.OperatingSystemFamily#WINDOWS_SERVER_2019_CORE",
        "@aws-cdk/aws-ecs.RuntimePlatform",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 27,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 10,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "5f16697e57d87b5c90a6ef559b358d66b14ec5a4aebf32a647df7a3923ba813f"
    },
    "869883dcb9828c97eb6da6178206ef887a0852adfaf7fa79e4f1bbb1559f85a4": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "bffd440e9afd89053876f7f88a323cebd7e0645d709e53c28520de1b2fe7dd18"
    },
    "d396bbba1e5a2831295631fd34861f8e8f6cd150130f5c89fe348def479c676c": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "bffd440e9afd89053876f7f88a323cebd7e0645d709e53c28520de1b2fe7dd18"
    },
    "0e6246d6fc001f7dd4225dd025fe40e41a699223a478f08901ead30e03250092": {
      "translations": {
        "python": {
          "source": "# container: ecs.ContainerDefinition\n\n\ncontainer.add_port_mappings(\n    container_port=3000\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ContainerDefinition container;\n\n\ncontainer.AddPortMappings(new PortMapping {\n    ContainerPort = 3000\n});",
          "version": "1"
        },
        "java": {
          "source": "ContainerDefinition container;\n\n\ncontainer.addPortMappings(PortMapping.builder()\n        .containerPort(3000)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var container containerDefinition\n\n\ncontainer.addPortMappings(&portMapping{\n\tcontainerPort: jsii.Number(3000),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const container: ecs.ContainerDefinition;\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.PortMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.PortMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const container: ecs.ContainerDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2b1381460d33dca05f605d00e2868645bcb73c3bc3f5e7da230cc028b0ec8477"
    },
    "02f544b7881ee662f1e9d3747687d58064480e37dcbd7136b7c16ee7f5f81d15": {
      "translations": {
        "python": {
          "source": "# task_definition: ecs.TaskDefinition\n# cluster: ecs.Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var taskDefinition taskDefinition\nvar cluster cluster\n\n\n// Add a container to the task definition\nspecificContainer := taskDefinition.addContainer(jsii.String(\"Container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"/aws/aws-example-app\")),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\n// Add a port mapping\nspecificContainer.addPortMappings(&portMapping{\n\tcontainerPort: jsii.Number(7600),\n\tprotocol: ecs.protocol_TCP,\n})\n\necs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tcloudMapOptions: &cloudMapOptions{\n\t\t// Create SRV records - useful for bridge networking\n\t\tdnsRecordType: cloudmap.dnsRecordType_SRV,\n\t\t// Targets port TCP port 7600 `specificContainer`\n\t\tcontainer: specificContainer,\n\t\tcontainerPort: jsii.Number(7600),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Protocol"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "78820572e0f7e299c80246e2632db8bbac221621afcd808251be99bd8040857d"
    },
    "8deab92326ad20ee99af773f042921527ece895995a76f4caee475a84cb8fa1d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nproxy_configurations = ecs.ProxyConfigurations()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nProxyConfigurations proxyConfigurations = new ProxyConfigurations();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nProxyConfigurations proxyConfigurations = new ProxyConfigurations();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nproxyConfigurations := ecs.NewProxyConfigurations()",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst proxyConfigurations = new ecs.ProxyConfigurations();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ProxyConfigurations"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ProxyConfigurations"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst proxyConfigurations = new ecs.ProxyConfigurations();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "7d1487f151fa7d6468a469bea8cb02d54cdbdf7c994537ec0f8b620b2d4f97e9"
    },
    "cef0230d04447e16d35596f38b1ab987407fb09d8ba0537bea17e28b281ad7e8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecr_assets as ecr_assets\nimport aws_cdk.aws_ecs as ecs\n\n# docker_image_asset: ecr_assets.DockerImageAsset\n\nrepository_image = ecs.RepositoryImage.from_docker_image_asset(docker_image_asset)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Ecr.Assets;\nusing Amazon.CDK.AWS.ECS;\n\nDockerImageAsset dockerImageAsset;\n\nContainerImage repositoryImage = RepositoryImage.FromDockerImageAsset(dockerImageAsset);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecr.assets.*;\nimport software.amazon.awscdk.services.ecs.*;\n\nDockerImageAsset dockerImageAsset;\n\nContainerImage repositoryImage = RepositoryImage.fromDockerImageAsset(dockerImageAsset);",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecr_assets \"github.com/aws-samples/dummy/awscdkawsecrassets\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvar dockerImageAsset dockerImageAsset\n\nrepositoryImage := ecs.repositoryImage.fromDockerImageAsset(dockerImageAsset)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const dockerImageAsset: ecr_assets.DockerImageAsset;\nconst repositoryImage = ecs.RepositoryImage.fromDockerImageAsset(dockerImageAsset);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.RepositoryImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr-assets.DockerImageAsset",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromDockerImageAsset",
        "@aws-cdk/aws-ecs.RepositoryImage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecr_assets from '@aws-cdk/aws-ecr-assets';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\ndeclare const dockerImageAsset: ecr_assets.DockerImageAsset;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst repositoryImage = ecs.RepositoryImage.fromDockerImageAsset(dockerImageAsset);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "f9a0ae1d1e01d9ce448faf67476a8eb2875467cd392fef811f40b8f98709e757"
    },
    "bafc0265cb3dd66024fa85c50e4e93e9d55b55c35f7c7c99631c6aafa34216f7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_secretsmanager as secretsmanager\n\n# secret: secretsmanager.Secret\n\nrepository_image_props = ecs.RepositoryImageProps(\n    credentials=secret\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.SecretsManager;\n\nSecret secret;\n\nRepositoryImageProps repositoryImageProps = new RepositoryImageProps {\n    Credentials = secret\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.secretsmanager.*;\n\nSecret secret;\n\nRepositoryImageProps repositoryImageProps = RepositoryImageProps.builder()\n        .credentials(secret)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport secretsmanager \"github.com/aws-samples/dummy/awscdkawssecretsmanager\"\n\nvar secret secret\n\nrepositoryImageProps := &repositoryImageProps{\n\tcredentials: secret,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\nconst repositoryImageProps: ecs.RepositoryImageProps = {\n  credentials: secret,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.RepositoryImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.RepositoryImageProps",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\n\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst repositoryImageProps: ecs.RepositoryImageProps = {\n  credentials: secret,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "6097407fb24161cca6e3abe83cf91046463fd3caa3c0e766a2f8e3ef47b684e8"
    },
    "6eac8eab02546b49a0db281f47a353c6206c5d7ec01894c84972815c5bed2998": {
      "translations": {
        "python": {
          "source": "# target: elbv2.ApplicationTargetGroup\n# service: ecs.BaseService\n\nscaling = service.auto_scale_task_count(max_capacity=10)\nscaling.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscaling.scale_on_request_count(\"RequestScaling\",\n    requests_per_target=10000,\n    target_group=target\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.AutoScaleTaskCount(new EnableScalingProps { MaxCapacity = 10 });\nscaling.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscaling.ScaleOnRequestCount(\"RequestScaling\", new RequestCountScalingProps {\n    RequestsPerTarget = 10000,\n    TargetGroup = target\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.autoScaleTaskCount(EnableScalingProps.builder().maxCapacity(10).build());\nscaling.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscaling.scaleOnRequestCount(\"RequestScaling\", RequestCountScalingProps.builder()\n        .requestsPerTarget(10000)\n        .targetGroup(target)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var target applicationTargetGroup\nvar service baseService\n\nscaling := service.autoScaleTaskCount(&enableScalingProps{\n\tmaxCapacity: jsii.Number(10),\n})\nscaling.scaleOnCpuUtilization(jsii.String(\"CpuScaling\"), &cpuUtilizationScalingProps{\n\ttargetUtilizationPercent: jsii.Number(50),\n})\n\nscaling.scaleOnRequestCount(jsii.String(\"RequestScaling\"), &requestCountScalingProps{\n\trequestsPerTarget: jsii.Number(10000),\n\ttargetGroup: target,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.RequestCountScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.RequestCountScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnRequestCount",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "430e9ac1673ad3ff4031c726865de07b9780c1461a916dc12e37b21e485e1ca4"
    },
    "df2088fb5681e6c23fee7aeaa41ac05f69bd8fee2651e13ed4179cd41936319f": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the Windows container to start\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    runtime_platform=ecs.RuntimePlatform(\n        operating_system_family=ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        cpu_architecture=ecs.CpuArchitecture.X86_64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"windowsservercore\",\n    logging=ecs.LogDriver.aws_logs(stream_prefix=\"win-iis-on-fargate\"),\n    port_mappings=[ecs.PortMapping(container_port=80)],\n    image=ecs.ContainerImage.from_registry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    RuntimePlatform = new RuntimePlatform {\n        OperatingSystemFamily = OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n        CpuArchitecture = CpuArchitecture.X86_64\n    },\n    Cpu = 1024,\n    MemoryLimitMiB = 2048\n});\n\ntaskDefinition.AddContainer(\"windowsservercore\", new ContainerDefinitionOptions {\n    Logging = LogDriver.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"win-iis-on-fargate\" }),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } },\n    Image = ContainerImage.FromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the Windows container to start\nFargateTaskDefinition taskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .runtimePlatform(RuntimePlatform.builder()\n                .operatingSystemFamily(OperatingSystemFamily.WINDOWS_SERVER_2019_CORE)\n                .cpuArchitecture(CpuArchitecture.X86_64)\n                .build())\n        .cpu(1024)\n        .memoryLimitMiB(2048)\n        .build();\n\ntaskDefinition.addContainer(\"windowsservercore\", ContainerDefinitionOptions.builder()\n        .logging(LogDriver.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"win-iis-on-fargate\").build()))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .image(ContainerImage.fromRegistry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the Windows container to start\ntaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\truntimePlatform: &runtimePlatform{\n\t\toperatingSystemFamily: ecs.operatingSystemFamily_WINDOWS_SERVER_2019_CORE(),\n\t\tcpuArchitecture: ecs.cpuArchitecture_X86_64(),\n\t},\n\tcpu: jsii.Number(1024),\n\tmemoryLimitMiB: jsii.Number(2048),\n})\n\ntaskDefinition.addContainer(jsii.String(\"windowsservercore\"), &containerDefinitionOptions{\n\tlogging: ecs.logDriver.awsLogs(&awsLogDriverProps{\n\t\tstreamPrefix: jsii.String(\"win-iis-on-fargate\"),\n\t}),\n\tportMappings: []portMapping{\n\t\t&portMapping{\n\t\t\tcontainerPort: jsii.Number(80),\n\t\t},\n\t},\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.RuntimePlatform"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuArchitecture",
        "@aws-cdk/aws-ecs.CpuArchitecture#X86_64",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDriver#awsLogs",
        "@aws-cdk/aws-ecs.OperatingSystemFamily",
        "@aws-cdk/aws-ecs.OperatingSystemFamily#WINDOWS_SERVER_2019_CORE",
        "@aws-cdk/aws-ecs.RuntimePlatform",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the Windows container to start\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  runtimePlatform: {\n    operatingSystemFamily: ecs.OperatingSystemFamily.WINDOWS_SERVER_2019_CORE,\n    cpuArchitecture: ecs.CpuArchitecture.X86_64,\n  },\n  cpu: 1024,\n  memoryLimitMiB: 2048,\n});\n\ntaskDefinition.addContainer('windowsservercore', {\n  logging: ecs.LogDriver.awsLogs({ streamPrefix: 'win-iis-on-fargate' }),\n  portMappings: [{ containerPort: 80 }],\n  image: ecs.ContainerImage.fromRegistry('mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 27,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 10,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "5f16697e57d87b5c90a6ef559b358d66b14ec5a4aebf32a647df7a3923ba813f"
    },
    "85b400b9ebf909e781b87040d7b18c6329d56a3f8b8abff2e8caa746c7cf1bf5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_s3 as s3\n\n# bucket: s3.Bucket\n\ns3_environment_file = ecs.S3EnvironmentFile(bucket, \"key\", \"objectVersion\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.S3;\n\nBucket bucket;\n\nS3EnvironmentFile s3EnvironmentFile = new S3EnvironmentFile(bucket, \"key\", \"objectVersion\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.s3.*;\n\nBucket bucket;\n\nS3EnvironmentFile s3EnvironmentFile = new S3EnvironmentFile(bucket, \"key\", \"objectVersion\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport s3 \"github.com/aws-samples/dummy/awscdkawss3\"\n\nvar bucket bucket\n\ns3EnvironmentFile := ecs.NewS3EnvironmentFile(bucket, jsii.String(\"key\"), jsii.String(\"objectVersion\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\nconst s3EnvironmentFile = new ecs.S3EnvironmentFile(bucket, 'key', /* all optional props */ 'objectVersion');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.S3EnvironmentFile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.S3EnvironmentFile",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3EnvironmentFile = new ecs.S3EnvironmentFile(bucket, 'key', /* all optional props */ 'objectVersion');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "29b83a89039316234eff86e9244723b87a9d058f752862059c09d6de688f4e39"
    },
    "8465f65ef6d73edf6a86dcd87f7fb853dc0831ad182b76f0f01f2b6cf22a4eb4": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\n\nloadBalancedFargateService := ecsPatterns.NewApplicationLoadBalancedFargateService(this, jsii.String(\"Service\"), &applicationLoadBalancedFargateServiceProps{\n\tcluster: cluster,\n\tmemoryLimitMiB: jsii.Number(1024),\n\tdesiredCount: jsii.Number(1),\n\tcpu: jsii.Number(512),\n\ttaskImageOptions: &applicationLoadBalancedTaskImageOptions{\n\t\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\t},\n})\n\nscalableTarget := loadBalancedFargateService.service.autoScaleTaskCount(&enableScalingProps{\n\tminCapacity: jsii.Number(1),\n\tmaxCapacity: jsii.Number(20),\n})\n\nscalableTarget.scaleOnCpuUtilization(jsii.String(\"CpuScaling\"), &cpuUtilizationScalingProps{\n\ttargetUtilizationPercent: jsii.Number(50),\n})\n\nscalableTarget.scaleOnMemoryUtilization(jsii.String(\"MemoryScaling\"), &memoryUtilizationScalingProps{\n\ttargetUtilizationPercent: jsii.Number(50),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ScalableTaskCount"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3c5f7a6834d4ac1d1d5c885edc4d54de605ae84ea6b07d63a12bf75d56393cf4"
    },
    "e7c48c0b1d9eeb965f9e7a94702e069642aab3338a5c63a987cd2cea7daf6dcb": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_applicationautoscaling as appscaling\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\nscalable_task_count_props = ecs.ScalableTaskCountProps(\n    dimension=\"dimension\",\n    max_capacity=123,\n    resource_id=\"resourceId\",\n    role=role,\n    service_namespace=appscaling.ServiceNamespace.ECS,\n\n    # the properties below are optional\n    min_capacity=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ApplicationAutoScaling;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nScalableTaskCountProps scalableTaskCountProps = new ScalableTaskCountProps {\n    Dimension = \"dimension\",\n    MaxCapacity = 123,\n    ResourceId = \"resourceId\",\n    Role = role,\n    ServiceNamespace = ServiceNamespace.ECS,\n\n    // the properties below are optional\n    MinCapacity = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.applicationautoscaling.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nScalableTaskCountProps scalableTaskCountProps = ScalableTaskCountProps.builder()\n        .dimension(\"dimension\")\n        .maxCapacity(123)\n        .resourceId(\"resourceId\")\n        .role(role)\n        .serviceNamespace(ServiceNamespace.ECS)\n\n        // the properties below are optional\n        .minCapacity(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport appscaling \"github.com/aws-samples/dummy/awscdkawsapplicationautoscaling\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\nscalableTaskCountProps := &scalableTaskCountProps{\n\tdimension: jsii.String(\"dimension\"),\n\tmaxCapacity: jsii.Number(123),\n\tresourceId: jsii.String(\"resourceId\"),\n\trole: role,\n\tserviceNamespace: appscaling.serviceNamespace_ECS,\n\n\t// the properties below are optional\n\tminCapacity: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst scalableTaskCountProps: ecs.ScalableTaskCountProps = {\n  dimension: 'dimension',\n  maxCapacity: 123,\n  resourceId: 'resourceId',\n  role: role,\n  serviceNamespace: appscaling.ServiceNamespace.ECS,\n\n  // the properties below are optional\n  minCapacity: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ScalableTaskCountProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#ECS",
        "@aws-cdk/aws-ecs.ScalableTaskCountProps",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scalableTaskCountProps: ecs.ScalableTaskCountProps = {\n  dimension: 'dimension',\n  maxCapacity: 123,\n  resourceId: 'resourceId',\n  role: role,\n  serviceNamespace: appscaling.ServiceNamespace.ECS,\n\n  // the properties below are optional\n  minCapacity: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 19,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "294db693253d96020dd53d5285e908dea4f74dade3baddb6a62848e6b1eea32b"
    },
    "1db8c581517ce56a890f4dd3db473cf079b6fd08239d64daabbac1a7078988ab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nscratch_space = ecs.ScratchSpace(\n    container_path=\"containerPath\",\n    name=\"name\",\n    read_only=False,\n    source_path=\"sourcePath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nScratchSpace scratchSpace = new ScratchSpace {\n    ContainerPath = \"containerPath\",\n    Name = \"name\",\n    ReadOnly = false,\n    SourcePath = \"sourcePath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nScratchSpace scratchSpace = ScratchSpace.builder()\n        .containerPath(\"containerPath\")\n        .name(\"name\")\n        .readOnly(false)\n        .sourcePath(\"sourcePath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nscratchSpace := &scratchSpace{\n\tcontainerPath: jsii.String(\"containerPath\"),\n\tname: jsii.String(\"name\"),\n\treadOnly: jsii.Boolean(false),\n\tsourcePath: jsii.String(\"sourcePath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst scratchSpace: ecs.ScratchSpace = {\n  containerPath: 'containerPath',\n  name: 'name',\n  readOnly: false,\n  sourcePath: 'sourcePath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ScratchSpace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ScratchSpace"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst scratchSpace: ecs.ScratchSpace = {\n  containerPath: 'containerPath',\n  name: 'name',\n  readOnly: false,\n  sourcePath: 'sourcePath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8a5083766fe0f11210f7da96f7c1f681254839881f6a430d4db47e7f1f00bafb"
    },
    "d5092c665896732f876e7db4f0fecec2a7039032593dc1052585f851398d5a2d": {
      "translations": {
        "python": {
          "source": "# secret: secretsmanager.Secret\n# db_secret: secretsmanager.Secret\n# parameter: ssm.StringParameter\n# task_definition: ecs.TaskDefinition\n# s3_bucket: s3.Bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"STAGE\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or S3\n        ecs.EnvironmentFile.from_asset(\"./demo-env-file.env\"),\n        ecs.EnvironmentFile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        \"SECRET\": ecs.Secret.from_secrets_manager(secret),\n        \"DB_PASSWORD\": ecs.Secret.from_secrets_manager(db_secret, \"password\"),  # Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        \"API_KEY\": ecs.Secret.from_secrets_manager_version(secret, ecs.SecretVersionInfo(version_id=\"12345\"), \"apiKey\"),  # Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        \"PARAMETER\": ecs.Secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"QUEUE_NAME\", \"MyQueue\")",
          "version": "2"
        },
        "csharp": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    Environment = new Dictionary<string, string> {  // clear text, not for sensitive data\n        { \"STAGE\", \"prod\" } },\n    EnvironmentFiles = new [] { EnvironmentFile.FromAsset(\"./demo-env-file.env\"), EnvironmentFile.FromBucket(s3Bucket, \"assets/demo-env-file.env\") },\n    Secrets = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        { \"SECRET\", Secret.FromSecretsManager(secret) },\n        { \"DB_PASSWORD\", Secret.FromSecretsManager(dbSecret, \"password\") },  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"API_KEY\", Secret.FromSecretsManagerVersion(secret, new SecretVersionInfo { VersionId = \"12345\" }, \"apiKey\") },  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"PARAMETER\", Secret.FromSsmParameter(parameter) } }\n});\nnewContainer.AddEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .environment(Map.of( // clear text, not for sensitive data\n                \"STAGE\", \"prod\"))\n        .environmentFiles(List.of(EnvironmentFile.fromAsset(\"./demo-env-file.env\"), EnvironmentFile.fromBucket(s3Bucket, \"assets/demo-env-file.env\")))\n        .secrets(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n                \"SECRET\", Secret.fromSecretsManager(secret),\n                \"DB_PASSWORD\", Secret.fromSecretsManager(dbSecret, \"password\"),  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n                \"API_KEY\", Secret.fromSecretsManagerVersion(secret, SecretVersionInfo.builder().versionId(\"12345\").build(), \"apiKey\"),  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n                \"PARAMETER\", Secret.fromSsmParameter(parameter)))\n        .build());\nnewContainer.addEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "go": {
          "source": "var secret secret\nvar dbSecret secret\nvar parameter stringParameter\nvar taskDefinition taskDefinition\nvar s3Bucket bucket\n\n\nnewContainer := taskDefinition.addContainer(jsii.String(\"container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n\tenvironment: map[string]*string{\n\t\t // clear text, not for sensitive data\n\t\t\"STAGE\": jsii.String(\"prod\"),\n\t},\n\tenvironmentFiles: []environmentFile{\n\t\tecs.*environmentFile.fromAsset(jsii.String(\"./demo-env-file.env\")),\n\t\tecs.*environmentFile.fromBucket(s3Bucket, jsii.String(\"assets/demo-env-file.env\")),\n\t},\n\tsecrets: map[string]secret{\n\t\t // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n\t\t\"SECRET\": ecs.*secret.fromSecretsManager(secret),\n\t\t\"DB_PASSWORD\": ecs.*secret.fromSecretsManager(dbSecret, jsii.String(\"password\")),\n\t\t // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"API_KEY\": ecs.*secret.fromSecretsManagerVersion(secret, &SecretVersionInfo{\n\t\t\t\"versionId\": jsii.String(\"12345\"),\n\t\t}, jsii.String(\"apiKey\")),\n\t\t // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"PARAMETER\": ecs.*secret.fromSsmParameter(parameter),\n\t},\n})\nnewContainer.addEnvironment(jsii.String(\"QUEUE_NAME\"), jsii.String(\"MyQueue\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Secret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addEnvironment",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EnvironmentFile",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromAsset",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromBucket",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManagerVersion",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.SecretVersionInfo",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 57,
        "130": 5,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 4,
        "194": 16,
        "196": 9,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "57d0240bc176193be8a376f6c0ae32def30f9aced433861943cb3c9279deab05"
    },
    "78a7bfede6b0a286765b7ffff8e1085fa2c963b13ebe36a8cb355378aa820a24": {
      "translations": {
        "python": {
          "source": "# secret: secretsmanager.Secret\n# db_secret: secretsmanager.Secret\n# parameter: ssm.StringParameter\n# task_definition: ecs.TaskDefinition\n# s3_bucket: s3.Bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"STAGE\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or S3\n        ecs.EnvironmentFile.from_asset(\"./demo-env-file.env\"),\n        ecs.EnvironmentFile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        \"SECRET\": ecs.Secret.from_secrets_manager(secret),\n        \"DB_PASSWORD\": ecs.Secret.from_secrets_manager(db_secret, \"password\"),  # Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        \"API_KEY\": ecs.Secret.from_secrets_manager_version(secret, ecs.SecretVersionInfo(version_id=\"12345\"), \"apiKey\"),  # Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        \"PARAMETER\": ecs.Secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"QUEUE_NAME\", \"MyQueue\")",
          "version": "2"
        },
        "csharp": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    Environment = new Dictionary<string, string> {  // clear text, not for sensitive data\n        { \"STAGE\", \"prod\" } },\n    EnvironmentFiles = new [] { EnvironmentFile.FromAsset(\"./demo-env-file.env\"), EnvironmentFile.FromBucket(s3Bucket, \"assets/demo-env-file.env\") },\n    Secrets = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        { \"SECRET\", Secret.FromSecretsManager(secret) },\n        { \"DB_PASSWORD\", Secret.FromSecretsManager(dbSecret, \"password\") },  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"API_KEY\", Secret.FromSecretsManagerVersion(secret, new SecretVersionInfo { VersionId = \"12345\" }, \"apiKey\") },  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"PARAMETER\", Secret.FromSsmParameter(parameter) } }\n});\nnewContainer.AddEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .environment(Map.of( // clear text, not for sensitive data\n                \"STAGE\", \"prod\"))\n        .environmentFiles(List.of(EnvironmentFile.fromAsset(\"./demo-env-file.env\"), EnvironmentFile.fromBucket(s3Bucket, \"assets/demo-env-file.env\")))\n        .secrets(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n                \"SECRET\", Secret.fromSecretsManager(secret),\n                \"DB_PASSWORD\", Secret.fromSecretsManager(dbSecret, \"password\"),  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n                \"API_KEY\", Secret.fromSecretsManagerVersion(secret, SecretVersionInfo.builder().versionId(\"12345\").build(), \"apiKey\"),  // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n                \"PARAMETER\", Secret.fromSsmParameter(parameter)))\n        .build());\nnewContainer.addEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "go": {
          "source": "var secret secret\nvar dbSecret secret\nvar parameter stringParameter\nvar taskDefinition taskDefinition\nvar s3Bucket bucket\n\n\nnewContainer := taskDefinition.addContainer(jsii.String(\"container\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"amazon/amazon-ecs-sample\")),\n\tmemoryLimitMiB: jsii.Number(1024),\n\tenvironment: map[string]*string{\n\t\t // clear text, not for sensitive data\n\t\t\"STAGE\": jsii.String(\"prod\"),\n\t},\n\tenvironmentFiles: []environmentFile{\n\t\tecs.*environmentFile.fromAsset(jsii.String(\"./demo-env-file.env\")),\n\t\tecs.*environmentFile.fromBucket(s3Bucket, jsii.String(\"assets/demo-env-file.env\")),\n\t},\n\tsecrets: map[string]secret{\n\t\t // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n\t\t\"SECRET\": ecs.*secret.fromSecretsManager(secret),\n\t\t\"DB_PASSWORD\": ecs.*secret.fromSecretsManager(dbSecret, jsii.String(\"password\")),\n\t\t // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"API_KEY\": ecs.*secret.fromSecretsManagerVersion(secret, &SecretVersionInfo{\n\t\t\t\"versionId\": jsii.String(\"12345\"),\n\t\t}, jsii.String(\"apiKey\")),\n\t\t // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n\t\t\"PARAMETER\": ecs.*secret.fromSsmParameter(parameter),\n\t},\n})\nnewContainer.addEnvironment(jsii.String(\"QUEUE_NAME\"), jsii.String(\"MyQueue\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.SecretVersionInfo"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addEnvironment",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EnvironmentFile",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromAsset",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromBucket",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManagerVersion",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.SecretVersionInfo",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    API_KEY: ecs.Secret.fromSecretsManagerVersion(secret, { versionId: '12345' }, 'apiKey'), // Reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 57,
        "130": 5,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 4,
        "194": 16,
        "196": 9,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "57d0240bc176193be8a376f6c0ae32def30f9aced433861943cb3c9279deab05"
    },
    "ccae9ff6b167757c776e32de2be71e67c0f57b5a5209f7cd8bb998fd3da436b0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\n# secret: ecs.Secret\n# secret_value: cdk.SecretValue\n\nsplunk_log_driver = ecs.SplunkLogDriver(\n    url=\"url\",\n\n    # the properties below are optional\n    ca_name=\"caName\",\n    ca_path=\"caPath\",\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    format=ecs.SplunkLogFormat.INLINE,\n    gzip=False,\n    gzip_level=123,\n    index=\"index\",\n    insecure_skip_verify=\"insecureSkipVerify\",\n    labels=[\"labels\"],\n    secret_token=secret,\n    source=\"source\",\n    source_type=\"sourceType\",\n    tag=\"tag\",\n    token=secret_value,\n    verify_connection=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\n\nSecret secret;\nSecretValue secretValue;\nSplunkLogDriver splunkLogDriver = new SplunkLogDriver(new SplunkLogDriverProps {\n    Url = \"url\",\n\n    // the properties below are optional\n    CaName = \"caName\",\n    CaPath = \"caPath\",\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Format = SplunkLogFormat.INLINE,\n    Gzip = false,\n    GzipLevel = 123,\n    Index = \"index\",\n    InsecureSkipVerify = \"insecureSkipVerify\",\n    Labels = new [] { \"labels\" },\n    SecretToken = secret,\n    Source = \"source\",\n    SourceType = \"sourceType\",\n    Tag = \"tag\",\n    Token = secretValue,\n    VerifyConnection = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nSecret secret;\nSecretValue secretValue;\n\nSplunkLogDriver splunkLogDriver = SplunkLogDriver.Builder.create()\n        .url(\"url\")\n\n        // the properties below are optional\n        .caName(\"caName\")\n        .caPath(\"caPath\")\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .format(SplunkLogFormat.INLINE)\n        .gzip(false)\n        .gzipLevel(123)\n        .index(\"index\")\n        .insecureSkipVerify(\"insecureSkipVerify\")\n        .labels(List.of(\"labels\"))\n        .secretToken(secret)\n        .source(\"source\")\n        .sourceType(\"sourceType\")\n        .tag(\"tag\")\n        .token(secretValue)\n        .verifyConnection(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar secret secret\nvar secretValue secretValue\n\nsplunkLogDriver := ecs.NewSplunkLogDriver(&splunkLogDriverProps{\n\turl: jsii.String(\"url\"),\n\n\t// the properties below are optional\n\tcaName: jsii.String(\"caName\"),\n\tcaPath: jsii.String(\"caPath\"),\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tformat: ecs.splunkLogFormat_INLINE,\n\tgzip: jsii.Boolean(false),\n\tgzipLevel: jsii.Number(123),\n\tindex: jsii.String(\"index\"),\n\tinsecureSkipVerify: jsii.String(\"insecureSkipVerify\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\tsecretToken: secret,\n\tsource: jsii.String(\"source\"),\n\tsourceType: jsii.String(\"sourceType\"),\n\ttag: jsii.String(\"tag\"),\n\ttoken: secretValue,\n\tverifyConnection: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secret: ecs.Secret;\ndeclare const secretValue: cdk.SecretValue;\nconst splunkLogDriver = new ecs.SplunkLogDriver({\n  url: 'url',\n\n  // the properties below are optional\n  caName: 'caName',\n  caPath: 'caPath',\n  env: ['env'],\n  envRegex: 'envRegex',\n  format: ecs.SplunkLogFormat.INLINE,\n  gzip: false,\n  gzipLevel: 123,\n  index: 'index',\n  insecureSkipVerify: 'insecureSkipVerify',\n  labels: ['labels'],\n  secretToken: secret,\n  source: 'source',\n  sourceType: 'sourceType',\n  tag: 'tag',\n  token: secretValue,\n  verifyConnection: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.SplunkLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.SplunkLogDriver",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.SplunkLogFormat",
        "@aws-cdk/aws-ecs.SplunkLogFormat#INLINE",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const secret: ecs.Secret;\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst splunkLogDriver = new ecs.SplunkLogDriver({\n  url: 'url',\n\n  // the properties below are optional\n  caName: 'caName',\n  caPath: 'caPath',\n  env: ['env'],\n  envRegex: 'envRegex',\n  format: ecs.SplunkLogFormat.INLINE,\n  gzip: false,\n  gzipLevel: 123,\n  index: 'index',\n  insecureSkipVerify: 'insecureSkipVerify',\n  labels: ['labels'],\n  secretToken: secret,\n  source: 'source',\n  sourceType: 'sourceType',\n  tag: 'tag',\n  token: secretValue,\n  verifyConnection: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 33,
        "91": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "4596c8fc4d6581caf641c566fafe8963086980359c4bb0353ad7eebb2a469050"
    },
    "5545335de23986c68e37bf51c62712dabbf7ae9aedc80d68f4654b8163e6127c": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create a Task Definition for the container to start\ntaskDefinition := ecs.NewEc2TaskDefinition(this, jsii.String(\"TaskDef\"))\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"example-image\")),\n\tmemoryLimitMiB: jsii.Number(256),\n\tlogging: ecs.logDrivers.splunk(&splunkLogDriverProps{\n\t\ttoken: *awscdkcore.SecretValue.secretsManager(jsii.String(\"my-splunk-token\")),\n\t\turl: jsii.String(\"my-splunk-url\"),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.SplunkLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "cbcee149029bb834f61f6271a2374a988f65487af1f16259b9f633676fad53b4"
    },
    "387f0320749094234830c38b359894bd15567dfe4259309f7deb5257e38c571d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nsyslog_log_driver = ecs.SyslogLogDriver(\n    address=\"address\",\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    facility=\"facility\",\n    format=\"format\",\n    labels=[\"labels\"],\n    tag=\"tag\",\n    tls_ca_cert=\"tlsCaCert\",\n    tls_cert=\"tlsCert\",\n    tls_key=\"tlsKey\",\n    tls_skip_verify=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nSyslogLogDriver syslogLogDriver = new SyslogLogDriver(new SyslogLogDriverProps {\n    Address = \"address\",\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Facility = \"facility\",\n    Format = \"format\",\n    Labels = new [] { \"labels\" },\n    Tag = \"tag\",\n    TlsCaCert = \"tlsCaCert\",\n    TlsCert = \"tlsCert\",\n    TlsKey = \"tlsKey\",\n    TlsSkipVerify = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nSyslogLogDriver syslogLogDriver = SyslogLogDriver.Builder.create()\n        .address(\"address\")\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .facility(\"facility\")\n        .format(\"format\")\n        .labels(List.of(\"labels\"))\n        .tag(\"tag\")\n        .tlsCaCert(\"tlsCaCert\")\n        .tlsCert(\"tlsCert\")\n        .tlsKey(\"tlsKey\")\n        .tlsSkipVerify(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nsyslogLogDriver := ecs.NewSyslogLogDriver(&syslogLogDriverProps{\n\taddress: jsii.String(\"address\"),\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tfacility: jsii.String(\"facility\"),\n\tformat: jsii.String(\"format\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\ttag: jsii.String(\"tag\"),\n\ttlsCaCert: jsii.String(\"tlsCaCert\"),\n\ttlsCert: jsii.String(\"tlsCert\"),\n\ttlsKey: jsii.String(\"tlsKey\"),\n\ttlsSkipVerify: jsii.Boolean(false),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst syslogLogDriver = new ecs.SyslogLogDriver(/* all optional props */ {\n  address: 'address',\n  env: ['env'],\n  envRegex: 'envRegex',\n  facility: 'facility',\n  format: 'format',\n  labels: ['labels'],\n  tag: 'tag',\n  tlsCaCert: 'tlsCaCert',\n  tlsCert: 'tlsCert',\n  tlsKey: 'tlsKey',\n  tlsSkipVerify: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.SyslogLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.SyslogLogDriver",
        "@aws-cdk/aws-ecs.SyslogLogDriverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst syslogLogDriver = new ecs.SyslogLogDriver(/* all optional props */ {\n  address: 'address',\n  env: ['env'],\n  envRegex: 'envRegex',\n  facility: 'facility',\n  format: 'format',\n  labels: ['labels'],\n  tag: 'tag',\n  tlsCaCert: 'tlsCaCert',\n  tlsCert: 'tlsCert',\n  tlsKey: 'tlsKey',\n  tlsSkipVerify: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 15,
        "91": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "422878e593591f9ed922b65119df0d158e416a127ea8ee10d1da7b6a20faa198"
    },
    "74201d812f68f22213e921c185a0ec0f78fd90029df5dbf9706490820bc579e2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nsyslog_log_driver_props = ecs.SyslogLogDriverProps(\n    address=\"address\",\n    env=[\"env\"],\n    env_regex=\"envRegex\",\n    facility=\"facility\",\n    format=\"format\",\n    labels=[\"labels\"],\n    tag=\"tag\",\n    tls_ca_cert=\"tlsCaCert\",\n    tls_cert=\"tlsCert\",\n    tls_key=\"tlsKey\",\n    tls_skip_verify=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nSyslogLogDriverProps syslogLogDriverProps = new SyslogLogDriverProps {\n    Address = \"address\",\n    Env = new [] { \"env\" },\n    EnvRegex = \"envRegex\",\n    Facility = \"facility\",\n    Format = \"format\",\n    Labels = new [] { \"labels\" },\n    Tag = \"tag\",\n    TlsCaCert = \"tlsCaCert\",\n    TlsCert = \"tlsCert\",\n    TlsKey = \"tlsKey\",\n    TlsSkipVerify = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nSyslogLogDriverProps syslogLogDriverProps = SyslogLogDriverProps.builder()\n        .address(\"address\")\n        .env(List.of(\"env\"))\n        .envRegex(\"envRegex\")\n        .facility(\"facility\")\n        .format(\"format\")\n        .labels(List.of(\"labels\"))\n        .tag(\"tag\")\n        .tlsCaCert(\"tlsCaCert\")\n        .tlsCert(\"tlsCert\")\n        .tlsKey(\"tlsKey\")\n        .tlsSkipVerify(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nsyslogLogDriverProps := &syslogLogDriverProps{\n\taddress: jsii.String(\"address\"),\n\tenv: []*string{\n\t\tjsii.String(\"env\"),\n\t},\n\tenvRegex: jsii.String(\"envRegex\"),\n\tfacility: jsii.String(\"facility\"),\n\tformat: jsii.String(\"format\"),\n\tlabels: []*string{\n\t\tjsii.String(\"labels\"),\n\t},\n\ttag: jsii.String(\"tag\"),\n\ttlsCaCert: jsii.String(\"tlsCaCert\"),\n\ttlsCert: jsii.String(\"tlsCert\"),\n\ttlsKey: jsii.String(\"tlsKey\"),\n\ttlsSkipVerify: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst syslogLogDriverProps: ecs.SyslogLogDriverProps = {\n  address: 'address',\n  env: ['env'],\n  envRegex: 'envRegex',\n  facility: 'facility',\n  format: 'format',\n  labels: ['labels'],\n  tag: 'tag',\n  tlsCaCert: 'tlsCaCert',\n  tlsCert: 'tlsCert',\n  tlsKey: 'tlsKey',\n  tlsSkipVerify: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.SyslogLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.SyslogLogDriverProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst syslogLogDriverProps: ecs.SyslogLogDriverProps = {\n  address: 'address',\n  env: ['env'],\n  envRegex: 'envRegex',\n  facility: 'facility',\n  format: 'format',\n  labels: ['labels'],\n  tag: 'tag',\n  tlsCaCert: 'tlsCaCert',\n  tlsCert: 'tlsCert',\n  tlsKey: 'tlsKey',\n  tlsSkipVerify: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 11,
        "75": 15,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "729536eb3bbcfd950aa1e6d103567d52133d15ebf2633732d0262236631231cf"
    },
    "4df7fa296994da2239bc24a5c5a3e1a56733309d295bacc536b2d3db6b60ba76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nsystem_control = ecs.SystemControl(\n    namespace=\"namespace\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nSystemControl systemControl = new SystemControl {\n    Namespace = \"namespace\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nSystemControl systemControl = SystemControl.builder()\n        .namespace(\"namespace\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nsystemControl := &systemControl{\n\tnamespace: jsii.String(\"namespace\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst systemControl: ecs.SystemControl = {\n  namespace: 'namespace',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.SystemControl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.SystemControl"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst systemControl: ecs.SystemControl = {\n  namespace: 'namespace',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "794069948e85ef7cf9c793ea7cb932d18b9482e4233d1898b8b9a591b5eec7b9"
    },
    "06dafd9e31731b892b088d0214f58a1e20b5d67a7d2cdce98ec9c9f2e517f2bf": {
      "translations": {
        "python": {
          "source": "#\n# This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n#\nclass EcsAppStack(cdk.Stack):\n    def __init__(self, scope, id, *, image, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, image=image, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        task_definition = ecs.TaskDefinition(self, \"TaskDefinition\",\n            compatibility=ecs.Compatibility.FARGATE,\n            cpu=\"1024\",\n            memory_mi_b=\"2048\"\n        )\n        task_definition.add_container(\"AppContainer\",\n            image=image\n        )\n        ecs.FargateService(self, \"EcsService\",\n            task_definition=task_definition,\n            cluster=ecs.Cluster(self, \"Cluster\",\n                vpc=ec2.Vpc(self, \"Vpc\",\n                    max_azs=1\n                )\n            )\n        )\n\n#\n# This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n#\nclass PipelineStack(cdk.Stack):\n\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        # ********* ECS part ****************\n\n        # this is the ECR repository where the built Docker image will be pushed\n        app_ecr_repo = ecr.Repository(self, \"EcsDeployRepository\")\n        # the build that creates the Docker image, and pushes it to the ECR repo\n        app_code_docker_build = codebuild.PipelineProject(self, \"AppCodeDockerImageBuildAndPushProject\",\n            environment=codebuild.BuildEnvironment(\n                # we need to run Docker\n                privileged=True\n            ),\n            build_spec=codebuild.BuildSpec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"build\": {\n                        \"commands\": [\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\"\n                        ]\n                    },\n                    \"post_build\": {\n                        \"commands\": [\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"\n                        ]\n                    }\n                },\n                \"env\": {\n                    # save the imageTag environment variable as a CodePipeline Variable\n                    \"exported-variables\": [\"imageTag\"\n                    ]\n                }\n            }),\n            environment_variables={\n                \"REPOSITORY_URI\": codebuild.BuildEnvironmentVariable(\n                    value=app_ecr_repo.repository_uri\n                )\n            }\n        )\n        # needed for `docker push`\n        app_ecr_repo.grant_pull_push(app_code_docker_build)\n        # create the ContainerImage used for the ECS application Stack\n        self.tag_parameter_container_image = ecs.TagParameterContainerImage(app_ecr_repo)\n\n        cdk_code_build = codebuild.PipelineProject(self, \"CdkCodeBuildProject\",\n            build_spec=codebuild.BuildSpec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"install\": {\n                        \"commands\": [\"npm install\"\n                        ]\n                    },\n                    \"build\": {\n                        \"commands\": [\"npx cdk synth --verbose\"\n                        ]\n                    }\n                },\n                \"artifacts\": {\n                    # store the entire Cloud Assembly as the output artifact\n                    \"base-directory\": \"cdk.out\",\n                    \"files\": \"**/*\"\n                }\n            })\n        )\n\n        # ********* Pipeline part ****************\n\n        app_code_source_output = codepipeline.Artifact()\n        cdk_code_source_output = codepipeline.Artifact()\n        cdk_code_build_output = codepipeline.Artifact()\n        app_code_build_action = codepipeline_actions.CodeBuildAction(\n            action_name=\"AppCodeDockerImageBuildAndPush\",\n            project=app_code_docker_build,\n            input=app_code_source_output\n        )\n        codepipeline.Pipeline(self, \"CodePipelineDeployingEcsApplication\",\n            artifact_bucket=s3.Bucket(self, \"ArtifactBucket\",\n                removal_policy=cdk.RemovalPolicy.DESTROY\n            ),\n            stages=[codepipeline.StageProps(\n                stage_name=\"Source\",\n                actions=[\n                    # this is the Action that takes the source of your application code\n                    codepipeline_actions.CodeCommitSourceAction(\n                        action_name=\"AppCodeSource\",\n                        repository=codecommit.Repository(self, \"AppCodeSourceRepository\", repository_name=\"AppCodeSourceRepository\"),\n                        output=app_code_source_output\n                    ),\n                    # this is the Action that takes the source of your CDK code\n                    # (which would probably include this Pipeline code as well)\n                    codepipeline_actions.CodeCommitSourceAction(\n                        action_name=\"CdkCodeSource\",\n                        repository=codecommit.Repository(self, \"CdkCodeSourceRepository\", repository_name=\"CdkCodeSourceRepository\"),\n                        output=cdk_code_source_output\n                    )\n                ]\n            ), codepipeline.StageProps(\n                stage_name=\"Build\",\n                actions=[app_code_build_action,\n                    codepipeline_actions.CodeBuildAction(\n                        action_name=\"CdkCodeBuildAndSynth\",\n                        project=cdk_code_build,\n                        input=cdk_code_source_output,\n                        outputs=[cdk_code_build_output]\n                    )\n                ]\n            ), codepipeline.StageProps(\n                stage_name=\"Deploy\",\n                actions=[\n                    codepipeline_actions.CloudFormationCreateUpdateStackAction(\n                        action_name=\"CFN_Deploy\",\n                        stack_name=\"SampleEcsStackDeployedFromCodePipeline\",\n                        # this name has to be the same name as used below in the CDK code for the application Stack\n                        template_path=cdk_code_build_output.at_path(\"EcsStackDeployedInPipeline.template.json\"),\n                        admin_permissions=True,\n                        parameter_overrides={\n                            # read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                            # and pass it as the CloudFormation Parameter for the tag\n                            \"self.tag_parameter_container_image.tag_parameter_name\": app_code_build_action.variable(\"imageTag\")\n                        }\n                    )\n                ]\n            )\n            ]\n        )\n\napp = cdk.App()\n\n# the CodePipeline Stack needs to be created first\npipeline_stack = PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\")\n# we supply the image to the ECS application Stack from the CodePipeline Stack\nEcsAppStack(app, \"EcsStackDeployedInPipeline\",\n    image=pipeline_stack.tag_parameter_container_image\n)",
          "version": "2"
        },
        "csharp": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nclass EcsAppStackProps : StackProps\n{\n    public ContainerImage Image { get; set; }\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nclass EcsAppStack : Stack\n{\n    public EcsAppStack(Construct scope, string id, EcsAppStackProps props) : base(scope, id, props)\n    {\n\n        TaskDefinition taskDefinition = new TaskDefinition(this, \"TaskDefinition\", new TaskDefinitionProps {\n            Compatibility = Compatibility.FARGATE,\n            Cpu = \"1024\",\n            MemoryMiB = \"2048\"\n        });\n        taskDefinition.AddContainer(\"AppContainer\", new ContainerDefinitionOptions {\n            Image = props.Image\n        });\n        new FargateService(this, \"EcsService\", new FargateServiceProps {\n            TaskDefinition = taskDefinition,\n            Cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n                Vpc = new Vpc(this, \"Vpc\", new VpcProps {\n                    MaxAzs = 1\n                })\n            })\n        });\n    }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nclass PipelineStack : Stack\n{\n    public TagParameterContainerImage TagParameterContainerImage { get; }\n\n    public PipelineStack(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        /* ********** ECS part **************** */\n\n        // this is the ECR repository where the built Docker image will be pushed\n        Repository appEcrRepo = new Repository(this, \"EcsDeployRepository\");\n        // the build that creates the Docker image, and pushes it to the ECR repo\n        PipelineProject appCodeDockerBuild = new PipelineProject(this, \"AppCodeDockerImageBuildAndPushProject\", new PipelineProjectProps {\n            Environment = new BuildEnvironment {\n                // we need to run Docker\n                Privileged = true\n            },\n            BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n                { \"version\", \"0.2\" },\n                { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n                    { \"build\", new Struct {\n                        Commands = new [] { \"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\" }\n                    } },\n                    { \"post_build\", new Struct {\n                        Commands = new [] { \"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\" }\n                    } }\n                } },\n                { \"env\", new Dictionary<string, string[]> {\n                    // save the imageTag environment variable as a CodePipeline Variable\n                    { \"exported-variables\", new [] { \"imageTag\" } }\n                } }\n            }),\n            EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n                { \"REPOSITORY_URI\", new BuildEnvironmentVariable {\n                    Value = appEcrRepo.RepositoryUri\n                } }\n            }\n        });\n        // needed for `docker push`\n        appEcrRepo.GrantPullPush(appCodeDockerBuild);\n        // create the ContainerImage used for the ECS application Stack\n        TagParameterContainerImage = new TagParameterContainerImage(appEcrRepo);\n\n        PipelineProject cdkCodeBuild = new PipelineProject(this, \"CdkCodeBuildProject\", new PipelineProjectProps {\n            BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n                { \"version\", \"0.2\" },\n                { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n                    { \"install\", new Struct {\n                        Commands = new [] { \"npm install\" }\n                    } },\n                    { \"build\", new Struct {\n                        Commands = new [] { \"npx cdk synth --verbose\" }\n                    } }\n                } },\n                { \"artifacts\", new Dictionary<string, string> {\n                    // store the entire Cloud Assembly as the output artifact\n                    { \"base-directory\", \"cdk.out\" },\n                    { \"files\", \"**/*\" }\n                } }\n            })\n        });\n\n        /* ********** Pipeline part **************** */\n\n        Artifact appCodeSourceOutput = new Artifact();\n        Artifact cdkCodeSourceOutput = new Artifact();\n        Artifact cdkCodeBuildOutput = new Artifact();\n        CodeBuildAction appCodeBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n            ActionName = \"AppCodeDockerImageBuildAndPush\",\n            Project = appCodeDockerBuild,\n            Input = appCodeSourceOutput\n        });\n        new Pipeline(this, \"CodePipelineDeployingEcsApplication\", new PipelineProps {\n            ArtifactBucket = new Bucket(this, \"ArtifactBucket\", new BucketProps {\n                RemovalPolicy = RemovalPolicy.DESTROY\n            }),\n            Stages = new [] { new StageProps {\n                StageName = \"Source\",\n                Actions = new [] {\n                    // this is the Action that takes the source of your application code\n                    new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n                        ActionName = \"AppCodeSource\",\n                        Repository = new Repository(this, \"AppCodeSourceRepository\", new RepositoryProps { RepositoryName = \"AppCodeSourceRepository\" }),\n                        Output = appCodeSourceOutput\n                    }),\n                    // this is the Action that takes the source of your CDK code\n                    // (which would probably include this Pipeline code as well)\n                    new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n                        ActionName = \"CdkCodeSource\",\n                        Repository = new Repository(this, \"CdkCodeSourceRepository\", new RepositoryProps { RepositoryName = \"CdkCodeSourceRepository\" }),\n                        Output = cdkCodeSourceOutput\n                    }) }\n            }, new StageProps {\n                StageName = \"Build\",\n                Actions = new [] { appCodeBuildAction,\n                    new CodeBuildAction(new CodeBuildActionProps {\n                        ActionName = \"CdkCodeBuildAndSynth\",\n                        Project = cdkCodeBuild,\n                        Input = cdkCodeSourceOutput,\n                        Outputs = new [] { cdkCodeBuildOutput }\n                    }) }\n            }, new StageProps {\n                StageName = \"Deploy\",\n                Actions = new [] {\n                    new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n                        ActionName = \"CFN_Deploy\",\n                        StackName = \"SampleEcsStackDeployedFromCodePipeline\",\n                        // this name has to be the same name as used below in the CDK code for the application Stack\n                        TemplatePath = cdkCodeBuildOutput.AtPath(\"EcsStackDeployedInPipeline.template.json\"),\n                        AdminPermissions = true,\n                        ParameterOverrides = new Dictionary<string, object> {\n                            // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                            // and pass it as the CloudFormation Parameter for the tag\n                            { TagParameterContainerImage.TagParameterName, appCodeBuildAction.Variable(\"imageTag\") }\n                        }\n                    }) }\n            } }\n        });\n    }\n}\n\nApp app = new App();\n\n// the CodePipeline Stack needs to be created first\nPipelineStack pipelineStack = new PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\");\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, \"EcsStackDeployedInPipeline\", new EcsAppStackProps {\n    Image = pipelineStack.TagParameterContainerImage\n});",
          "version": "1"
        },
        "java": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\npublic class EcsAppStackProps extends StackProps {\n    private ContainerImage image;\n    public ContainerImage getImage() {\n        return this.image;\n    }\n    public EcsAppStackProps image(ContainerImage image) {\n        this.image = image;\n        return this;\n    }\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\npublic class EcsAppStack extends Stack {\n    public EcsAppStack(Construct scope, String id, EcsAppStackProps props) {\n        super(scope, id, props);\n\n        TaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TaskDefinition\")\n                .compatibility(Compatibility.FARGATE)\n                .cpu(\"1024\")\n                .memoryMiB(\"2048\")\n                .build();\n        taskDefinition.addContainer(\"AppContainer\", ContainerDefinitionOptions.builder()\n                .image(props.getImage())\n                .build());\n        FargateService.Builder.create(this, \"EcsService\")\n                .taskDefinition(taskDefinition)\n                .cluster(Cluster.Builder.create(this, \"Cluster\")\n                        .vpc(Vpc.Builder.create(this, \"Vpc\")\n                                .maxAzs(1)\n                                .build())\n                        .build())\n                .build();\n    }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\npublic class PipelineStack extends Stack {\n    public final TagParameterContainerImage tagParameterContainerImage;\n\n    public PipelineStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public PipelineStack(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        /* ********** ECS part **************** */\n\n        // this is the ECR repository where the built Docker image will be pushed\n        Repository appEcrRepo = new Repository(this, \"EcsDeployRepository\");\n        // the build that creates the Docker image, and pushes it to the ECR repo\n        PipelineProject appCodeDockerBuild = PipelineProject.Builder.create(this, \"AppCodeDockerImageBuildAndPushProject\")\n                .environment(BuildEnvironment.builder()\n                        // we need to run Docker\n                        .privileged(true)\n                        .build())\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"phases\", Map.of(\n                                \"build\", Map.of(\n                                        \"commands\", List.of(\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\")),\n                                \"post_build\", Map.of(\n                                        \"commands\", List.of(\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"))),\n                        \"env\", Map.of(\n                                // save the imageTag environment variable as a CodePipeline Variable\n                                \"exported-variables\", List.of(\"imageTag\")))))\n                .environmentVariables(Map.of(\n                        \"REPOSITORY_URI\", BuildEnvironmentVariable.builder()\n                                .value(appEcrRepo.getRepositoryUri())\n                                .build()))\n                .build();\n        // needed for `docker push`\n        appEcrRepo.grantPullPush(appCodeDockerBuild);\n        // create the ContainerImage used for the ECS application Stack\n        this.tagParameterContainerImage = new TagParameterContainerImage(appEcrRepo);\n\n        PipelineProject cdkCodeBuild = PipelineProject.Builder.create(this, \"CdkCodeBuildProject\")\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"phases\", Map.of(\n                                \"install\", Map.of(\n                                        \"commands\", List.of(\"npm install\")),\n                                \"build\", Map.of(\n                                        \"commands\", List.of(\"npx cdk synth --verbose\"))),\n                        \"artifacts\", Map.of(\n                                // store the entire Cloud Assembly as the output artifact\n                                \"base-directory\", \"cdk.out\",\n                                \"files\", \"**/*\"))))\n                .build();\n\n        /* ********** Pipeline part **************** */\n\n        Artifact appCodeSourceOutput = new Artifact();\n        Artifact cdkCodeSourceOutput = new Artifact();\n        Artifact cdkCodeBuildOutput = new Artifact();\n        CodeBuildAction appCodeBuildAction = CodeBuildAction.Builder.create()\n                .actionName(\"AppCodeDockerImageBuildAndPush\")\n                .project(appCodeDockerBuild)\n                .input(appCodeSourceOutput)\n                .build();\n        Pipeline.Builder.create(this, \"CodePipelineDeployingEcsApplication\")\n                .artifactBucket(Bucket.Builder.create(this, \"ArtifactBucket\")\n                        .removalPolicy(RemovalPolicy.DESTROY)\n                        .build())\n                .stages(List.of(StageProps.builder()\n                        .stageName(\"Source\")\n                        .actions(List.of(\n                            // this is the Action that takes the source of your application code\n                            CodeCommitSourceAction.Builder.create()\n                                    .actionName(\"AppCodeSource\")\n                                    .repository(Repository.Builder.create(this, \"AppCodeSourceRepository\").repositoryName(\"AppCodeSourceRepository\").build())\n                                    .output(appCodeSourceOutput)\n                                    .build(),\n                            // this is the Action that takes the source of your CDK code\n                            // (which would probably include this Pipeline code as well)\n                            CodeCommitSourceAction.Builder.create()\n                                    .actionName(\"CdkCodeSource\")\n                                    .repository(Repository.Builder.create(this, \"CdkCodeSourceRepository\").repositoryName(\"CdkCodeSourceRepository\").build())\n                                    .output(cdkCodeSourceOutput)\n                                    .build()))\n                        .build(), StageProps.builder()\n                        .stageName(\"Build\")\n                        .actions(List.of(appCodeBuildAction,\n                            CodeBuildAction.Builder.create()\n                                    .actionName(\"CdkCodeBuildAndSynth\")\n                                    .project(cdkCodeBuild)\n                                    .input(cdkCodeSourceOutput)\n                                    .outputs(List.of(cdkCodeBuildOutput))\n                                    .build()))\n                        .build(), StageProps.builder()\n                        .stageName(\"Deploy\")\n                        .actions(List.of(\n                            CloudFormationCreateUpdateStackAction.Builder.create()\n                                    .actionName(\"CFN_Deploy\")\n                                    .stackName(\"SampleEcsStackDeployedFromCodePipeline\")\n                                    // this name has to be the same name as used below in the CDK code for the application Stack\n                                    .templatePath(cdkCodeBuildOutput.atPath(\"EcsStackDeployedInPipeline.template.json\"))\n                                    .adminPermissions(true)\n                                    .parameterOverrides(Map.of(\n                                            // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                                            // and pass it as the CloudFormation Parameter for the tag\n                                            this.tagParameterContainerImage.getTagParameterName(), appCodeBuildAction.variable(\"imageTag\")))\n                                    .build()))\n                        .build()))\n                .build();\n    }\n}\n\nApp app = new App();\n\n// the CodePipeline Stack needs to be created first\nPipelineStack pipelineStack = new PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\");\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, \"EcsStackDeployedInPipeline\", new EcsAppStackProps()\n        .image(pipelineStack.getTagParameterContainerImage())\n        );",
          "version": "1"
        },
        "go": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\ntype ecsAppStackProps struct {\n\tstackProps\n\timage containerImage\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\ntype EcsAppStack struct {\n\tstack\n}\n\nfunc NewEcsAppStack(scope construct, id *string, props ecsAppStackProps) *EcsAppStack {\n\tthis := &EcsAppStack{}\n\tcdk.NewStack_Override(this, scope, id, props)\n\n\ttaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TaskDefinition\"), &taskDefinitionProps{\n\t\tcompatibility: ecs.compatibility_FARGATE,\n\t\tcpu: jsii.String(\"1024\"),\n\t\tmemoryMiB: jsii.String(\"2048\"),\n\t})\n\ttaskDefinition.addContainer(jsii.String(\"AppContainer\"), &containerDefinitionOptions{\n\t\timage: props.image,\n\t})\n\tecs.NewFargateService(this, jsii.String(\"EcsService\"), &fargateServiceProps{\n\t\ttaskDefinition: taskDefinition,\n\t\tcluster: ecs.NewCluster(this, jsii.String(\"Cluster\"), &clusterProps{\n\t\t\tvpc: ec2.NewVpc(this, jsii.String(\"Vpc\"), &vpcProps{\n\t\t\t\tmaxAzs: jsii.Number(1),\n\t\t\t}),\n\t\t}),\n\t})\n\treturn this\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\ntype PipelineStack struct {\n\tstack\n\ttagParameterContainerImage tagParameterContainerImage\n}tagParameterContainerImage tagParameterContainerImage\n\nfunc NewPipelineStack(scope construct, id *string, props stackProps) *PipelineStack {\n\tthis := &PipelineStack{}\n\tcdk.NewStack_Override(this, scope, id, props)\n\n\t/* ********** ECS part **************** */\n\n\t// this is the ECR repository where the built Docker image will be pushed\n\tappEcrRepo := ecr.NewRepository(this, jsii.String(\"EcsDeployRepository\"))\n\t// the build that creates the Docker image, and pushes it to the ECR repo\n\tappCodeDockerBuild := codebuild.NewPipelineProject(this, jsii.String(\"AppCodeDockerImageBuildAndPushProject\"), &pipelineProjectProps{\n\t\tenvironment: &buildEnvironment{\n\t\t\t// we need to run Docker\n\t\t\tprivileged: jsii.Boolean(true),\n\t\t},\n\t\tbuildSpec: codebuild.buildSpec.fromObject(map[string]interface{}{\n\t\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\"),\n\t\t\t\t\t\tjsii.String(\"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"post_build\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\"),\n\t\t\t\t\t\tjsii.String(\"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"env\": map[string][]*string{\n\t\t\t\t// save the imageTag environment variable as a CodePipeline Variable\n\t\t\t\t\"exported-variables\": []*string{\n\t\t\t\t\tjsii.String(\"imageTag\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\tenvironmentVariables: map[string]buildEnvironmentVariable{\n\t\t\t\"REPOSITORY_URI\": &buildEnvironmentVariable{\n\t\t\t\t\"value\": appEcrRepo.repositoryUri,\n\t\t\t},\n\t\t},\n\t})\n\t// needed for `docker push`\n\tappEcrRepo.grantPullPush(appCodeDockerBuild)\n\t// create the ContainerImage used for the ECS application Stack\n\tthis.tagParameterContainerImage = ecs.NewTagParameterContainerImage(appEcrRepo)\n\n\tcdkCodeBuild := codebuild.NewPipelineProject(this, jsii.String(\"CdkCodeBuildProject\"), &pipelineProjectProps{\n\t\tbuildSpec: codebuild.*buildSpec.fromObject(map[string]interface{}{\n\t\t\t\"version\": jsii.String(\"0.2\"),\n\t\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\t\"install\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"npm install\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"npx cdk synth --verbose\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"artifacts\": map[string]*string{\n\t\t\t\t// store the entire Cloud Assembly as the output artifact\n\t\t\t\t\"base-directory\": jsii.String(\"cdk.out\"),\n\t\t\t\t\"files\": jsii.String(\"**/*\"),\n\t\t\t},\n\t\t}),\n\t})\n\n\t/* ********** Pipeline part **************** */\n\n\tappCodeSourceOutput := codepipeline.NewArtifact()\n\tcdkCodeSourceOutput := codepipeline.NewArtifact()\n\tcdkCodeBuildOutput := codepipeline.NewArtifact()\n\tappCodeBuildAction := codepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\t\tactionName: jsii.String(\"AppCodeDockerImageBuildAndPush\"),\n\t\tproject: appCodeDockerBuild,\n\t\tinput: appCodeSourceOutput,\n\t})\n\tcodepipeline.NewPipeline(this, jsii.String(\"CodePipelineDeployingEcsApplication\"), &pipelineProps{\n\t\tartifactBucket: s3.NewBucket(this, jsii.String(\"ArtifactBucket\"), &bucketProps{\n\t\t\tremovalPolicy: cdk.removalPolicy_DESTROY,\n\t\t}),\n\t\tstages: []stageProps{\n\t\t\t&stageProps{\n\t\t\t\tstageName: jsii.String(\"Source\"),\n\t\t\t\tactions: []iAction{\n\t\t\t\t\t// this is the Action that takes the source of your application code\n\t\t\t\t\tcodepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"AppCodeSource\"),\n\t\t\t\t\t\trepository: codecommit.NewRepository(this, jsii.String(\"AppCodeSourceRepository\"), &repositoryProps{\n\t\t\t\t\t\t\trepositoryName: jsii.String(\"AppCodeSourceRepository\"),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toutput: appCodeSourceOutput,\n\t\t\t\t\t}),\n\t\t\t\t\t// this is the Action that takes the source of your CDK code\n\t\t\t\t\t// (which would probably include this Pipeline code as well)\n\t\t\t\t\tcodepipeline_actions.NewCodeCommitSourceAction(&codeCommitSourceActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"CdkCodeSource\"),\n\t\t\t\t\t\trepository: codecommit.NewRepository(this, jsii.String(\"CdkCodeSourceRepository\"), &repositoryProps{\n\t\t\t\t\t\t\trepositoryName: jsii.String(\"CdkCodeSourceRepository\"),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toutput: cdkCodeSourceOutput,\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\t&stageProps{\n\t\t\t\tstageName: jsii.String(\"Build\"),\n\t\t\t\tactions: []*iAction{\n\t\t\t\t\tappCodeBuildAction,\n\t\t\t\t\tcodepipeline_actions.NewCodeBuildAction(&codeBuildActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"CdkCodeBuildAndSynth\"),\n\t\t\t\t\t\tproject: cdkCodeBuild,\n\t\t\t\t\t\tinput: cdkCodeSourceOutput,\n\t\t\t\t\t\toutputs: []artifact{\n\t\t\t\t\t\t\tcdkCodeBuildOutput,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\t&stageProps{\n\t\t\t\tstageName: jsii.String(\"Deploy\"),\n\t\t\t\tactions: []*iAction{\n\t\t\t\t\tcodepipeline_actions.NewCloudFormationCreateUpdateStackAction(&cloudFormationCreateUpdateStackActionProps{\n\t\t\t\t\t\tactionName: jsii.String(\"CFN_Deploy\"),\n\t\t\t\t\t\tstackName: jsii.String(\"SampleEcsStackDeployedFromCodePipeline\"),\n\t\t\t\t\t\t// this name has to be the same name as used below in the CDK code for the application Stack\n\t\t\t\t\t\ttemplatePath: cdkCodeBuildOutput.atPath(jsii.String(\"EcsStackDeployedInPipeline.template.json\")),\n\t\t\t\t\t\tadminPermissions: jsii.Boolean(true),\n\t\t\t\t\t\tparameterOverrides: map[string]interface{}{\n\t\t\t\t\t\t\t// read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n\t\t\t\t\t\t\t// and pass it as the CloudFormation Parameter for the tag\n\t\t\t\t\t\t\tthis.tagParameterContainerImage.tagParameterName: appCodeBuildAction.variable(jsii.String(\"imageTag\")),\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\treturn this\n}\n\napp := cdk.NewApp()\n\n// the CodePipeline Stack needs to be created first\npipelineStack := NewPipelineStack(app, jsii.String(\"aws-cdk-pipeline-ecs-separate-sources\"))\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nNewEcsAppStack(app, jsii.String(\"EcsStackDeployedInPipeline\"), &ecsAppStackProps{\n\timage: pipelineStack.tagParameterContainerImage,\n})",
          "version": "1"
        },
        "$": {
          "source": "\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TagParameterContainerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction#variable",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.RepositoryBase#grantPullPush",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TagParameterContainerImage",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.App",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "/// !cdk-integ *\n\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codepipeline_actions from '../lib';\n\n/**\n * This example demonstrates how to create a CodePipeline that deploys an ECS Service\n * from a different source repository than the source repository of your CDK code.\n * If your application code and your CDK code are in the same repository,\n * use the CDK Pipelines module instead of this method.\n */\n\n/// !show\n\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 43,
        "57": 1,
        "62": 1,
        "75": 186,
        "89": 3,
        "102": 2,
        "104": 13,
        "106": 2,
        "119": 1,
        "138": 2,
        "143": 2,
        "153": 3,
        "154": 1,
        "156": 6,
        "158": 1,
        "159": 1,
        "162": 2,
        "169": 6,
        "192": 10,
        "193": 34,
        "194": 42,
        "196": 8,
        "197": 23,
        "209": 1,
        "216": 3,
        "223": 2,
        "225": 10,
        "226": 8,
        "242": 10,
        "243": 10,
        "245": 2,
        "246": 1,
        "279": 3,
        "281": 62,
        "282": 1
      },
      "fqnsFingerprint": "dee802e9a68327b5407017bb6a4c69e0d3f6119bd7a189a47bf8edc403b88706"
    },
    "7512f9b8a303c34ad44e16122038d8994d69941d9b00c0478adbdeccc4f4de0e": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewFargateService(this, jsii.String(\"Service\"), &fargateServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\nlistener := lb.addListener(jsii.String(\"Listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nservice.registerLoadBalancerTargets(&ecsTarget{\n\tcontainerName: jsii.String(\"web\"),\n\tcontainerPort: jsii.Number(80),\n\tnewTargetGroupId: jsii.String(\"ECS\"),\n\tlistener: ecs.listenerConfig.applicationListener(listener, &addApplicationTargetsProps{\n\t\tprotocol: elbv2.applicationProtocol_HTTPS,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "62bbc966736ec630b7e87ab4690d0362c33cfaf1ad7cc7936ab997a36a39e6d6"
    },
    "13e1719a8b22581f71017a9677040ef9059a296781dae519e8ef778f1cbd9340": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\ntask_definition_attributes = ecs.TaskDefinitionAttributes(\n    task_definition_arn=\"taskDefinitionArn\",\n\n    # the properties below are optional\n    compatibility=ecs.Compatibility.EC2,\n    network_mode=ecs.NetworkMode.NONE,\n    task_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nTaskDefinitionAttributes taskDefinitionAttributes = new TaskDefinitionAttributes {\n    TaskDefinitionArn = \"taskDefinitionArn\",\n\n    // the properties below are optional\n    Compatibility = Compatibility.EC2,\n    NetworkMode = NetworkMode.NONE,\n    TaskRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nTaskDefinitionAttributes taskDefinitionAttributes = TaskDefinitionAttributes.builder()\n        .taskDefinitionArn(\"taskDefinitionArn\")\n\n        // the properties below are optional\n        .compatibility(Compatibility.EC2)\n        .networkMode(NetworkMode.NONE)\n        .taskRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\ntaskDefinitionAttributes := &taskDefinitionAttributes{\n\ttaskDefinitionArn: jsii.String(\"taskDefinitionArn\"),\n\n\t// the properties below are optional\n\tcompatibility: ecs.compatibility_EC2,\n\tnetworkMode: ecs.networkMode_NONE,\n\ttaskRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst taskDefinitionAttributes: ecs.TaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  compatibility: ecs.Compatibility.EC2,\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TaskDefinitionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#NONE",
        "@aws-cdk/aws-ecs.TaskDefinitionAttributes",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taskDefinitionAttributes: ecs.TaskDefinitionAttributes = {\n  taskDefinitionArn: 'taskDefinitionArn',\n\n  // the properties below are optional\n  compatibility: ecs.Compatibility.EC2,\n  networkMode: ecs.NetworkMode.NONE,\n  taskRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b544112e358f62bac346248ecbc10583a25f3991658c2b104c747970324431f5"
    },
    "7861e0ebb2bb496e6597655448a35c1b418d2821e9a07c681ef7c45e08f244ee": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "vpc := ec2.vpc.fromLookup(this, jsii.String(\"Vpc\"), &vpcLookupOptions{\n\tisDefault: jsii.Boolean(true),\n})\n\ncluster := ecs.NewCluster(this, jsii.String(\"Ec2Cluster\"), &clusterProps{\n\tvpc: vpc,\n})\ncluster.addCapacity(jsii.String(\"DefaultAutoScalingGroup\"), &addCapacityOptions{\n\tinstanceType: ec2.NewInstanceType(jsii.String(\"t2.micro\")),\n\tvpcSubnets: &subnetSelection{\n\t\tsubnetType: ec2.subnetType_PUBLIC,\n\t},\n})\n\ntaskDefinition := ecs.NewTaskDefinition(this, jsii.String(\"TD\"), &taskDefinitionProps{\n\tcompatibility: ecs.compatibility_EC2,\n})\n\ntaskDefinition.addContainer(jsii.String(\"TheContainer\"), &containerDefinitionOptions{\n\timage: ecs.containerImage.fromRegistry(jsii.String(\"foo/bar\")),\n\tmemoryLimitMiB: jsii.Number(256),\n})\n\nrunTask := tasks.NewEcsRunTask(this, jsii.String(\"Run\"), &ecsRunTaskProps{\n\tintegrationPattern: sfn.integrationPattern_RUN_JOB,\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\tlaunchTarget: tasks.NewEcsEc2LaunchTarget(&ecsEc2LaunchTargetOptions{\n\t\tplacementStrategies: []placementStrategy{\n\t\t\tecs.*placementStrategy.spreadAcrossInstances(),\n\t\t\tecs.*placementStrategy.packedByCpu(),\n\t\t\tecs.*placementStrategy.randomly(),\n\t\t},\n\t\tplacementConstraints: []placementConstraint{\n\t\t\tecs.*placementConstraint.memberOf(jsii.String(\"blieptuut\")),\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "bffd440e9afd89053876f7f88a323cebd7e0645d709e53c28520de1b2fe7dd18"
    },
    "77c1ab7cdc4052250cd617cecbf933cecd8a995e2613927b4469a0e6f474ea2e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\ntmpfs = ecs.Tmpfs(\n    container_path=\"containerPath\",\n    size=123,\n\n    # the properties below are optional\n    mount_options=[ecs.TmpfsMountOption.DEFAULTS]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nTmpfs tmpfs = new Tmpfs {\n    ContainerPath = \"containerPath\",\n    Size = 123,\n\n    // the properties below are optional\n    MountOptions = new [] { TmpfsMountOption.DEFAULTS }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nTmpfs tmpfs = Tmpfs.builder()\n        .containerPath(\"containerPath\")\n        .size(123)\n\n        // the properties below are optional\n        .mountOptions(List.of(TmpfsMountOption.DEFAULTS))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\ntmpfs := &tmpfs{\n\tcontainerPath: jsii.String(\"containerPath\"),\n\tsize: jsii.Number(123),\n\n\t// the properties below are optional\n\tmountOptions: []tmpfsMountOption{\n\t\tecs.*tmpfsMountOption_DEFAULTS,\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst tmpfs: ecs.Tmpfs = {\n  containerPath: 'containerPath',\n  size: 123,\n\n  // the properties below are optional\n  mountOptions: [ecs.TmpfsMountOption.DEFAULTS],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Tmpfs"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Tmpfs",
        "@aws-cdk/aws-ecs.TmpfsMountOption",
        "@aws-cdk/aws-ecs.TmpfsMountOption#DEFAULTS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tmpfs: ecs.Tmpfs = {\n  containerPath: 'containerPath',\n  size: 123,\n\n  // the properties below are optional\n  mountOptions: [ecs.TmpfsMountOption.DEFAULTS],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7e10be199a65956f63aae3b4f8a97950e7e7d8f9942113cdf3902d36fb3c1163"
    },
    "a6b26ec544c07593da7e5b83405210b2df983b3a898fff406491ef791a19f676": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cloudwatch as cloudwatch\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.core as cdk\n\n# metric: cloudwatch.Metric\n\ntrack_custom_metric_props = ecs.TrackCustomMetricProps(\n    metric=metric,\n    target_value=123,\n\n    # the properties below are optional\n    disable_scale_in=False,\n    policy_name=\"policyName\",\n    scale_in_cooldown=cdk.Duration.minutes(30),\n    scale_out_cooldown=cdk.Duration.minutes(30)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CloudWatch;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK;\n\nMetric metric;\nTrackCustomMetricProps trackCustomMetricProps = new TrackCustomMetricProps {\n    Metric = metric,\n    TargetValue = 123,\n\n    // the properties below are optional\n    DisableScaleIn = false,\n    PolicyName = \"policyName\",\n    ScaleInCooldown = Duration.Minutes(30),\n    ScaleOutCooldown = Duration.Minutes(30)\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cloudwatch.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.core.*;\n\nMetric metric;\n\nTrackCustomMetricProps trackCustomMetricProps = TrackCustomMetricProps.builder()\n        .metric(metric)\n        .targetValue(123)\n\n        // the properties below are optional\n        .disableScaleIn(false)\n        .policyName(\"policyName\")\n        .scaleInCooldown(Duration.minutes(30))\n        .scaleOutCooldown(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cloudwatch \"github.com/aws-samples/dummy/awscdkawscloudwatch\"\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar metric metric\n\ntrackCustomMetricProps := &trackCustomMetricProps{\n\tmetric: metric,\n\ttargetValue: jsii.Number(123),\n\n\t// the properties below are optional\n\tdisableScaleIn: jsii.Boolean(false),\n\tpolicyName: jsii.String(\"policyName\"),\n\tscaleInCooldown: cdk.duration.minutes(jsii.Number(30)),\n\tscaleOutCooldown: cdk.*duration.minutes(jsii.Number(30)),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metric: cloudwatch.Metric;\nconst trackCustomMetricProps: ecs.TrackCustomMetricProps = {\n  metric: metric,\n  targetValue: 123,\n\n  // the properties below are optional\n  disableScaleIn: false,\n  policyName: 'policyName',\n  scaleInCooldown: cdk.Duration.minutes(30),\n  scaleOutCooldown: cdk.Duration.minutes(30),\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TrackCustomMetricProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-ecs.TrackCustomMetricProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const metric: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst trackCustomMetricProps: ecs.TrackCustomMetricProps = {\n  metric: metric,\n  targetValue: 123,\n\n  // the properties below are optional\n  disableScaleIn: false,\n  policyName: 'policyName',\n  scaleInCooldown: cdk.Duration.minutes(30),\n  scaleOutCooldown: cdk.Duration.minutes(30),\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 22,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "92c5e1647f54af8edcbff451db680a6e6f5a513a0427e5674353cd5d01d898e1"
    },
    "2240bd65deb49e34b31608bea0122912b62a3819a01aa4e1b7d77aa92105b21e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nulimit = ecs.Ulimit(\n    hard_limit=123,\n    name=ecs.UlimitName.CORE,\n    soft_limit=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nUlimit ulimit = new Ulimit {\n    HardLimit = 123,\n    Name = UlimitName.CORE,\n    SoftLimit = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nUlimit ulimit = Ulimit.builder()\n        .hardLimit(123)\n        .name(UlimitName.CORE)\n        .softLimit(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nulimit := &ulimit{\n\thardLimit: jsii.Number(123),\n\tname: ecs.ulimitName_CORE,\n\tsoftLimit: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst ulimit: ecs.Ulimit = {\n  hardLimit: 123,\n  name: ecs.UlimitName.CORE,\n  softLimit: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ulimit"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Ulimit",
        "@aws-cdk/aws-ecs.UlimitName",
        "@aws-cdk/aws-ecs.UlimitName#CORE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ulimit: ecs.Ulimit = {\n  hardLimit: 123,\n  name: ecs.UlimitName.CORE,\n  softLimit: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3e8eb111f4d966ed7a05b88f774d484d3cd6fbaa1230ab0c8ce38b9aaf904ac3"
    },
    "1a347d12ea4f4b2bee314bdc87d7eaed9307c6c094d8b7731827846e357d98f3": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\nvolume = {\n    # Use an Elastic FileSystem\n    \"name\": \"mydatavolume\",\n    \"efs_volume_configuration\": {\n        \"file_system_id\": \"EFS\"\n    }\n}\n\ncontainer = fargate_task_definition.add_volume(volume)",
          "version": "2"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nIDictionary<string, object> volume = new Dictionary<string, object> {\n    // Use an Elastic FileSystem\n    { \"name\", \"mydatavolume\" },\n    { \"efsVolumeConfiguration\", new Dictionary<string, string> {\n        { \"fileSystemId\", \"EFS\" }\n    } }\n};\n\nvoid container = fargateTaskDefinition.AddVolume(volume);",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nMap<String, Object> volume = Map.of(\n        // Use an Elastic FileSystem\n        \"name\", \"mydatavolume\",\n        \"efsVolumeConfiguration\", Map.of(\n                \"fileSystemId\", \"EFS\"));\n\nvoid container = fargateTaskDefinition.addVolume(volume);",
          "version": "1"
        },
        "go": {
          "source": "fargateTaskDefinition := ecs.NewFargateTaskDefinition(this, jsii.String(\"TaskDef\"), &fargateTaskDefinitionProps{\n\tmemoryLimitMiB: jsii.Number(512),\n\tcpu: jsii.Number(256),\n})\nvolume := map[string]interface{}{\n\t// Use an Elastic FileSystem\n\t\"name\": jsii.String(\"mydatavolume\"),\n\t\"efsVolumeConfiguration\": map[string]*string{\n\t\t\"fileSystemId\": jsii.String(\"EFS\"),\n\t},\n}\n\ncontainer := fargateTaskDefinition.addVolume(volume)",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Volume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addVolume",
        "@aws-cdk/aws-ecs.Volume",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "311a6f645f12a4acbe84b4d12012630044436e840d0c803dc38a6a651018108e"
    },
    "1a082d0a39ae3bc2b08c7a57ae274363b5ae32a12be52b8ad0fa01e0a91750bd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ecs as ecs\n\nvolume_from = ecs.VolumeFrom(\n    read_only=False,\n    source_container=\"sourceContainer\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ECS;\n\nVolumeFrom volumeFrom = new VolumeFrom {\n    ReadOnly = false,\n    SourceContainer = \"sourceContainer\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ecs.*;\n\nVolumeFrom volumeFrom = VolumeFrom.builder()\n        .readOnly(false)\n        .sourceContainer(\"sourceContainer\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ecs \"github.com/aws-samples/dummy/awscdkawsecs\"\n\nvolumeFrom := &volumeFrom{\n\treadOnly: jsii.Boolean(false),\n\tsourceContainer: jsii.String(\"sourceContainer\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nconst volumeFrom: ecs.VolumeFrom = {\n  readOnly: false,\n  sourceContainer: 'sourceContainer',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.VolumeFrom"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.VolumeFrom"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst volumeFrom: ecs.VolumeFrom = {\n  readOnly: false,\n  sourceContainer: 'sourceContainer',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b0510c1314f3bd4fdabeadf69bdf6d93f8499e5257bce505e099886c357d21da"
    }
  }
}