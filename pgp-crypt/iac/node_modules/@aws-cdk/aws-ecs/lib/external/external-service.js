"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalService = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const base_service_1 = require("../base/base-service");
const from_service_attributes_1 = require("../base/from-service-attributes");
const task_definition_1 = require("../base/task-definition");
/**
 * This creates a service using the External launch type on an ECS cluster.
 *
 * @resource AWS::ECS::Service
 */
class ExternalService extends base_service_1.BaseService {
    /**
     * Constructs a new instance of the ExternalService class.
     */
    constructor(scope, id, props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_ExternalServiceProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ExternalService);
            }
            throw error;
        }
        if (props.minHealthyPercent !== undefined && props.maxHealthyPercent !== undefined && props.minHealthyPercent >= props.maxHealthyPercent) {
            throw new Error('Minimum healthy percent must be less than maximum healthy percent.');
        }
        if (props.taskDefinition.compatibility !== task_definition_1.Compatibility.EXTERNAL) {
            throw new Error('Supplied TaskDefinition is not configured for compatibility with ECS Anywhere cluster');
        }
        if (props.cluster.defaultCloudMapNamespace !== undefined) {
            throw new Error(`Cloud map integration is not supported for External service ${props.cluster.defaultCloudMapNamespace}`);
        }
        if (props.cloudMapOptions !== undefined) {
            throw new Error('Cloud map options are not supported for External service');
        }
        if (props.enableExecuteCommand !== undefined) {
            throw new Error('Enable Execute Command options are not supported for External service');
        }
        if (props.capacityProviderStrategies !== undefined) {
            throw new Error('Capacity Providers are not supported for External service');
        }
        const propagateTagsFromSource = props.propagateTags ?? base_service_1.PropagatedTagSource.NONE;
        super(scope, id, {
            ...props,
            desiredCount: props.desiredCount,
            maxHealthyPercent: props.maxHealthyPercent === undefined ? 100 : props.maxHealthyPercent,
            minHealthyPercent: props.minHealthyPercent === undefined ? 0 : props.minHealthyPercent,
            launchType: base_service_1.LaunchType.EXTERNAL,
            propagateTags: propagateTagsFromSource,
            enableECSManagedTags: props.enableECSManagedTags,
        }, {
            cluster: props.cluster.clusterName,
            taskDefinition: props.deploymentController?.type === base_service_1.DeploymentControllerType.EXTERNAL ? undefined : props.taskDefinition.taskDefinitionArn,
        }, props.taskDefinition);
        this.node.addValidation({
            validate: () => !this.taskDefinition.defaultContainer ? ['A TaskDefinition must have at least one essential container'] : [],
        });
        this.node.addValidation({
            validate: () => this.networkConfiguration !== undefined ? ['Network configurations not supported for an external service'] : [],
        });
    }
    /**
     * Imports from the specified service ARN.
     */
    static fromExternalServiceArn(scope, id, externalServiceArn) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.serviceArn = externalServiceArn;
                this.serviceName = core_1.Stack.of(scope).splitArn(externalServiceArn, core_1.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Imports from the specified service attributes.
     */
    static fromExternalServiceAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_ExternalServiceAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromExternalServiceAttributes);
            }
            throw error;
        }
        return from_service_attributes_1.fromServiceAttributes(scope, id, attrs);
    }
    /**
     * Overriden method to throw error as `attachToApplicationTargetGroup` is not supported for external service
     */
    attachToApplicationTargetGroup(_targetGroup) {
        throw new Error('Application load balancer cannot be attached to an external service');
    }
    /**
     * Overriden method to throw error as `loadBalancerTarget` is not supported for external service
     */
    loadBalancerTarget(_options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_LoadBalancerTargetOptions(_options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.loadBalancerTarget);
            }
            throw error;
        }
        throw new Error('External service cannot be attached as load balancer targets');
    }
    /**
     * Overriden method to throw error as `registerLoadBalancerTargets` is not supported for external service
     */
    registerLoadBalancerTargets(..._targets) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_EcsTarget(_targets);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.registerLoadBalancerTargets);
            }
            throw error;
        }
        throw new Error('External service cannot be registered as load balancer targets');
    }
    /**
     * Overriden method to throw error as `configureAwsVpcNetworkingWithSecurityGroups` is not supported for external service
     */
    // eslint-disable-next-line max-len, no-unused-vars
    configureAwsVpcNetworkingWithSecurityGroups(_vpc, _assignPublicIp, _vpcSubnets, _securityGroups) {
        throw new Error('Only Bridge network mode is supported for external service');
    }
    /**
     * Overriden method to throw error as `autoScaleTaskCount` is not supported for external service
     */
    autoScaleTaskCount(_props) {
        throw new Error('Autoscaling not supported for external service');
    }
    /**
     * Overriden method to throw error as `enableCloudMap` is not supported for external service
     */
    enableCloudMap(_options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_CloudMapOptions(_options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.enableCloudMap);
            }
            throw error;
        }
        throw new Error('Cloud map integration not supported for an external service');
    }
    /**
     * Overriden method to throw error as `associateCloudMapService` is not supported for external service
     */
    associateCloudMapService(_options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_AssociateCloudMapServiceOptions(_options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.associateCloudMapService);
            }
            throw error;
        }
        throw new Error('Cloud map service association is not supported for an external service');
    }
}
exports.ExternalService = ExternalService;
_a = JSII_RTTI_SYMBOL_1;
ExternalService[_a] = { fqn: "@aws-cdk/aws-ecs.ExternalService", version: "1.193.0" };
//# sourceMappingURL=data:application/json;base64,