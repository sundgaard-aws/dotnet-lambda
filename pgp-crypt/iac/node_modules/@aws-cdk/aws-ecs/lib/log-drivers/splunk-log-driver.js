"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplunkLogDriver = exports.SplunkLogFormat = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const log_driver_1 = require("./log-driver");
const utils_1 = require("./utils");
/**
 * Log Message Format
 */
var SplunkLogFormat;
(function (SplunkLogFormat) {
    SplunkLogFormat["INLINE"] = "inline";
    SplunkLogFormat["JSON"] = "json";
    SplunkLogFormat["RAW"] = "raw";
})(SplunkLogFormat = exports.SplunkLogFormat || (exports.SplunkLogFormat = {}));
/**
 * A log driver that sends log information to splunk Logs.
 */
class SplunkLogDriver extends log_driver_1.LogDriver {
    /**
     * Constructs a new instance of the SplunkLogDriver class.
     *
     * @param props the splunk log driver configuration options.
     */
    constructor(props) {
        super();
        this.props = props;
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_SplunkLogDriverProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, SplunkLogDriver);
            }
            throw error;
        }
        if (!props.token && !props.secretToken) {
            throw new Error('Please provide either token or secretToken.');
        }
        if (props.gzipLevel) {
            utils_1.ensureInRange(props.gzipLevel, -1, 9);
        }
    }
    /**
     * Called when the log driver is configured on a container
     */
    bind(_scope, _containerDefinition) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_ecs_ContainerDefinition(_containerDefinition);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        const options = utils_1.stringifyOptions({
            'splunk-token': this.props.token?.unsafeUnwrap(),
            'splunk-url': this.props.url,
            'splunk-source': this.props.source,
            'splunk-sourcetype': this.props.sourceType,
            'splunk-index': this.props.index,
            'splunk-capath': this.props.caPath,
            'splunk-caname': this.props.caName,
            'splunk-insecureskipverify': this.props.insecureSkipVerify,
            'splunk-format': this.props.format,
            'splunk-verify-connection': this.props.verifyConnection,
            'splunk-gzip': this.props.gzip,
            'splunk-gzip-level': this.props.gzipLevel,
            ...utils_1.renderCommonLogDriverOptions(this.props),
        });
        return {
            logDriver: 'splunk',
            options,
            secretOptions: this.props.secretToken && utils_1.renderLogDriverSecretOptions({ 'splunk-token': this.props.secretToken }, _containerDefinition.taskDefinition),
        };
    }
}
exports.SplunkLogDriver = SplunkLogDriver;
_a = JSII_RTTI_SYMBOL_1;
SplunkLogDriver[_a] = { fqn: "@aws-cdk/aws-ecs.SplunkLogDriver", version: "1.193.0" };
//# sourceMappingURL=data:application/json;base64,