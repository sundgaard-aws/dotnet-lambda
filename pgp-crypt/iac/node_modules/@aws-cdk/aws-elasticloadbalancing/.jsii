{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-ec2": "1.193.0",
    "@aws-cdk/core": "1.193.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::ElasticLoadBalancing",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.74.0 (build 6d08790)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "elasticloadbalancing"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-elasticloadbalancing",
  "readme": {
    "markdown": "# Amazon Elastic Load Balancing Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThe `@aws-cdk/aws-elasticloadbalancing` package provides constructs for configuring\nclassic load balancers.\n\n## Configuring a Load Balancer\n\nLoad balancers send traffic to one or more AutoScalingGroups. Create a load\nbalancer, set up listeners and a health check, and supply the fleet(s) you want\nto load balance to in the `targets` property.\n\n```ts\ndeclare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});\n```\n\nThe load balancer allows all connections by default. If you want to change that,\npass the `allowConnectionsFrom` property while setting up the listener:\n\n```ts\ndeclare const mySecurityGroup: ec2.SecurityGroup;\ndeclare const lb: elb.LoadBalancer;\nlb.addListener({\n  externalPort: 80,\n  allowConnectionsFrom: [mySecurityGroup],\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-elasticloadbalancing",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing",
      "packageId": "Amazon.CDK.AWS.ElasticLoadBalancing"
    },
    "java": {
      "maven": {
        "artifactId": "elasticloadbalancing",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.elasticloadbalancing"
    },
    "js": {
      "npm": "@aws-cdk/aws-elasticloadbalancing"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-elasticloadbalancing",
      "module": "aws_cdk.aws_elasticloadbalancing"
    }
  },
  "types": {
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ElasticLoadBalancing::LoadBalancer",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specifies a Classic Load Balancer.\n\nYou can specify the `AvailabilityZones` or `Subnets` property, but not both.\n\nIf this resource has a public IP address and is also in a VPC that is defined in the same template, you must use the [DependsOn attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to declare a dependency on the VPC-gateway attachment.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ElasticLoadBalancing::LoadBalancer`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\nconst cfnLoadBalancer = new elb.CfnLoadBalancer(this, 'MyCfnLoadBalancer', {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ElasticLoadBalancing::LoadBalancer`."
        },
        "locationInModule": {
          "filename": "lib/elasticloadbalancing.generated.ts",
          "line": 453
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 259
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 486
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 512
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnLoadBalancer",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 263
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "CanonicalHostedZoneName"
            },
            "remarks": "Internal-facing load balancers don't use this value, use `DNSName` instead.",
            "stability": "external",
            "summary": "The name of the Route 53 hosted zone that is associated with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 288
          },
          "name": "attrCanonicalHostedZoneName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "CanonicalHostedZoneNameID"
            },
            "stability": "external",
            "summary": "The ID of the Route 53 hosted zone name that is associated with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 294
          },
          "name": "attrCanonicalHostedZoneNameId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "DNSName"
            },
            "stability": "external",
            "summary": "The DNS name for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 300
          },
          "name": "attrDnsName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "SourceSecurityGroup.GroupName"
            },
            "stability": "external",
            "summary": "The name of the security group that you can use as part of your inbound rules for your load balancer's back-end instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 306
          },
          "name": "attrSourceSecurityGroupGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "SourceSecurityGroup.OwnerAlias"
            },
            "stability": "external",
            "summary": "The owner of the source security group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 312
          },
          "name": "attrSourceSecurityGroupOwnerAlias",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 491
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags"
            },
            "stability": "external",
            "summary": "The tags associated with a load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 444
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners"
            },
            "remarks": "If you update the properties for a listener, AWS CloudFormation deletes the existing listener and creates a new one with the specified properties. While the new listener is being created, clients cannot connect to the load balancer.",
            "stability": "external",
            "summary": "The listeners for the load balancer. You can specify at most one listener per port."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 321
          },
          "name": "listeners",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy"
            },
            "stability": "external",
            "summary": "Information about where and how access logs are stored for the load balancer."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 328
          },
          "name": "accessLoggingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "Information about a policy for application-controlled session stickiness."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 335
          },
          "name": "appCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones"
            },
            "remarks": "Update requires replacement if you did not previously specify an Availability Zone or if you are removing all Availability Zones. Otherwise, update requires no interruption.",
            "stability": "external",
            "summary": "The Availability Zones for the load balancer. For load balancers in a VPC, specify `Subnets` instead."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 344
          },
          "name": "availabilityZones",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy"
            },
            "remarks": "For more information, see [Configure Connection Draining](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html) in the *Classic Load Balancers Guide* .",
            "stability": "external",
            "summary": "If enabled, the load balancer allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy instance."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 353
          },
          "name": "connectionDrainingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings"
            },
            "remarks": "By default, Elastic Load Balancing maintains a 60-second idle connection timeout for both front-end and back-end connections of your load balancer. For more information, see [Configure Idle Connection Timeout](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html) in the *Classic Load Balancers Guide* .",
            "stability": "external",
            "summary": "If enabled, the load balancer allows the connections to remain idle (no data is sent over the connection) for the specified duration."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 362
          },
          "name": "connectionSettings",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone"
            },
            "remarks": "For more information, see [Configure Cross-Zone Load Balancing](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html) in the *Classic Load Balancers Guide* .",
            "stability": "external",
            "summary": "If enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 371
          },
          "name": "crossZone",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck"
            },
            "remarks": "Update requires replacement if you did not previously specify health check settings or if you are removing the health check settings. Otherwise, update requires no interruption.",
            "stability": "external",
            "summary": "The health check settings to use when evaluating the health of your EC2 instances."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 380
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances"
            },
            "stability": "external",
            "summary": "The IDs of the instances for the load balancer."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 387
          },
          "name": "instances",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "Information about a policy for duration-based session stickiness."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 394
          },
          "name": "lbCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname"
            },
            "remarks": "This name must be unique within your set of load balancers for the region.\n\nIf you don't specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) . If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.",
            "stability": "external",
            "summary": "The name of the load balancer."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 403
          },
          "name": "loadBalancerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies"
            },
            "remarks": "Specify only back-end server policies.",
            "stability": "external",
            "summary": "The policies defined for your Classic Load Balancer."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 410
          },
          "name": "policies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme"
            },
            "remarks": "If `Scheme` is `internet-facing` , the load balancer has a public DNS name that resolves to a public IP address.\n\nIf `Scheme` is `internal` , the load balancer has a public DNS name that resolves to a private IP address.",
            "stability": "external",
            "summary": "The type of load balancer. Valid only for load balancers in a VPC."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 421
          },
          "name": "scheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups"
            },
            "remarks": "Valid only for load balancers in a VPC.",
            "stability": "external",
            "summary": "The security groups for the load balancer."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 428
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets"
            },
            "remarks": "Update requires replacement if you did not previously specify a subnet or if you are removing all subnets. Otherwise, update requires no interruption. To update to a different subnet in the current Availability Zone, you must first update to a subnet in a different Availability Zone, then update to the new subnet in the original Availability Zone.",
            "stability": "external",
            "summary": "The IDs of the subnets for the load balancer. You can specify at most one subnet per Availability Zone."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 437
          },
          "name": "subnets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Specifies where and how access logs are stored for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst accessLoggingPolicyProperty: elb.CfnLoadBalancer.AccessLoggingPolicyProperty = {\n  enabled: false,\n  s3BucketName: 's3BucketName',\n\n  // the properties below are optional\n  emitInterval: 123,\n  s3BucketPrefix: 's3BucketPrefix',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 526
      },
      "name": "AccessLoggingPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-enabled"
            },
            "stability": "external",
            "summary": "Specifies whether access logs are enabled for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 540
          },
          "name": "enabled",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketname"
            },
            "stability": "external",
            "summary": "The name of the Amazon S3 bucket where the access logs are stored."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 546
          },
          "name": "s3BucketName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-emitinterval"
            },
            "remarks": "Default: 60 minutes",
            "stability": "external",
            "summary": "The interval for publishing the access logs. You can specify an interval of either 5 minutes or 60 minutes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 534
          },
          "name": "emitInterval",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketprefix"
            },
            "remarks": "If the prefix is not provided, the log is placed at the root level of the bucket.",
            "stability": "external",
            "summary": "The logical hierarchy you created for your Amazon S3 bucket, for example `my-bucket-prefix/prod` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 552
          },
          "name": "s3BucketPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.AccessLoggingPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "To associate a policy with a listener, use the [PolicyNames](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames) property for the listener.",
        "stability": "external",
        "summary": "Specifies a policy for application-controlled session stickiness for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst appCookieStickinessPolicyProperty: elb.CfnLoadBalancer.AppCookieStickinessPolicyProperty = {\n  cookieName: 'cookieName',\n  policyName: 'policyName',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 626
      },
      "name": "AppCookieStickinessPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-cookiename"
            },
            "stability": "external",
            "summary": "The name of the application cookie used for stickiness."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 632
          },
          "name": "cookieName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-policyname"
            },
            "remarks": "The name must be unique within a set of policies for this load balancer.",
            "stability": "external",
            "summary": "The mnemonic name for the policy being created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 638
          },
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.AppCookieStickinessPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Specifies the connection draining settings for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst connectionDrainingPolicyProperty: elb.CfnLoadBalancer.ConnectionDrainingPolicyProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  timeout: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 704
      },
      "name": "ConnectionDrainingPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-enabled"
            },
            "stability": "external",
            "summary": "Specifies whether connection draining is enabled for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 710
          },
          "name": "enabled",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-timeout"
            },
            "stability": "external",
            "summary": "The maximum time, in seconds, to keep the existing connections open before deregistering the instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 716
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.ConnectionDrainingPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Specifies the idle timeout value for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst connectionSettingsProperty: elb.CfnLoadBalancer.ConnectionSettingsProperty = {\n  idleTimeout: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 781
      },
      "name": "ConnectionSettingsProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html#cfn-elb-connectionsettings-idletimeout"
            },
            "stability": "external",
            "summary": "The time, in seconds, that the connection is allowed to be idle (no data has been sent over the connection) before it is closed by the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 787
          },
          "name": "idleTimeout",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.ConnectionSettingsProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Specifies health check settings for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst healthCheckProperty: elb.CfnLoadBalancer.HealthCheckProperty = {\n  healthyThreshold: 'healthyThreshold',\n  interval: 'interval',\n  target: 'target',\n  timeout: 'timeout',\n  unhealthyThreshold: 'unhealthyThreshold',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 849
      },
      "name": "HealthCheckProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-healthythreshold"
            },
            "stability": "external",
            "summary": "The number of consecutive health checks successes required before moving the instance to the `Healthy` state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 855
          },
          "name": "healthyThreshold",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-interval"
            },
            "stability": "external",
            "summary": "The approximate interval, in seconds, between health checks of an individual instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 861
          },
          "name": "interval",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-target"
            },
            "remarks": "The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535.\n\nTCP is the default, specified as a TCP: port pair, for example \"TCP:5000\". In this case, a health check simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy.\n\nSSL is also specified as SSL: port pair, for example, SSL:5000.\n\nFor HTTP/HTTPS, you must include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example \"HTTP:80/weather/us/wa/seattle\". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than \"200 OK\" within the timeout period is considered unhealthy.\n\nThe total length of the HTTP ping target must be 1024 16-bit Unicode characters or less.",
            "stability": "external",
            "summary": "The instance being checked."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 875
          },
          "name": "target",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-timeout"
            },
            "remarks": "This value must be less than the `Interval` value.",
            "stability": "external",
            "summary": "The amount of time, in seconds, during which no response means a failed health check."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 883
          },
          "name": "timeout",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-unhealthythreshold"
            },
            "stability": "external",
            "summary": "The number of consecutive health check failures required before moving the instance to the `Unhealthy` state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 889
          },
          "name": "unhealthyThreshold",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.HealthCheckProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "To associate a policy with a listener, use the [PolicyNames](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames) property for the listener.",
        "stability": "external",
        "summary": "Specifies a policy for duration-based session stickiness for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst lBCookieStickinessPolicyProperty: elb.CfnLoadBalancer.LBCookieStickinessPolicyProperty = {\n  cookieExpirationPeriod: 'cookieExpirationPeriod',\n  policyName: 'policyName',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 969
      },
      "name": "LBCookieStickinessPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-cookieexpirationperiod"
            },
            "remarks": "If this parameter is not specified, the stickiness session lasts for the duration of the browser session.",
            "stability": "external",
            "summary": "The time period, in seconds, after which the cookie should be considered stale."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 975
          },
          "name": "cookieExpirationPeriod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-policyname"
            },
            "remarks": "This name must be unique within the set of policies for this load balancer.",
            "stability": "external",
            "summary": "The name of the policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 981
          },
          "name": "policyName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.LBCookieStickinessPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Modifying any property replaces the listener.",
        "stability": "external",
        "summary": "Specifies a listener for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst listenersProperty: elb.CfnLoadBalancer.ListenersProperty = {\n  instancePort: 'instancePort',\n  loadBalancerPort: 'loadBalancerPort',\n  protocol: 'protocol',\n\n  // the properties below are optional\n  instanceProtocol: 'instanceProtocol',\n  policyNames: ['policyNames'],\n  sslCertificateId: 'sslCertificateId',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 1047
      },
      "name": "ListenersProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceport"
            },
            "stability": "external",
            "summary": "The port on which the instance is listening."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1053
          },
          "name": "instancePort",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-loadbalancerport"
            },
            "remarks": "On EC2-VPC, you can specify any port from the range 1-65535. On EC2-Classic, you can specify any port from the following list: 25, 80, 443, 465, 587, 1024-65535.",
            "stability": "external",
            "summary": "The port on which the load balancer is listening."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1071
          },
          "name": "loadBalancerPort",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-protocol"
            },
            "stability": "external",
            "summary": "The load balancer transport protocol to use for routing: HTTP, HTTPS, TCP, or SSL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1083
          },
          "name": "protocol",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceprotocol"
            },
            "remarks": "If the front-end protocol is TCP or SSL, the back-end protocol must be TCP or SSL. If the front-end protocol is HTTP or HTTPS, the back-end protocol must be HTTP or HTTPS.\n\nIf there is another listener with the same `InstancePort` whose `InstanceProtocol` is secure, (HTTPS or SSL), the listener's `InstanceProtocol` must also be secure.\n\nIf there is another listener with the same `InstancePort` whose `InstanceProtocol` is HTTP or TCP, the listener's `InstanceProtocol` must be HTTP or TCP.",
            "stability": "external",
            "summary": "The protocol to use for routing traffic to instances: HTTP, HTTPS, TCP, or SSL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1065
          },
          "name": "instanceProtocol",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames"
            },
            "stability": "external",
            "summary": "The names of the policies to associate with the listener."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1077
          },
          "name": "policyNames",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-sslcertificateid"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the server certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1089
          },
          "name": "sslCertificateId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.ListenersProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "To associate policies with a listener, use the [PolicyNames](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames) property for the listener.",
        "stability": "external",
        "summary": "Specifies policies for your Classic Load Balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\nconst policiesProperty: elb.CfnLoadBalancer.PoliciesProperty = {\n  attributes: [attributes],\n  policyName: 'policyName',\n  policyType: 'policyType',\n\n  // the properties below are optional\n  instancePorts: ['instancePorts'],\n  loadBalancerPorts: ['loadBalancerPorts'],\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 1170
      },
      "name": "PoliciesProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-attributes"
            },
            "stability": "external",
            "summary": "The policy attributes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1176
          },
          "name": "attributes",
          "type": {
            "union": {
              "types": [
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "array"
                  }
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policyname"
            },
            "stability": "external",
            "summary": "The name of the policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1194
          },
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policytype"
            },
            "stability": "external",
            "summary": "The name of the policy type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1200
          },
          "name": "policyType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-instanceports"
            },
            "remarks": "Required only for some policy types.",
            "stability": "external",
            "summary": "The instance ports for the policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1182
          },
          "name": "instancePorts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-loadbalancerports"
            },
            "remarks": "Required only for some policy types.",
            "stability": "external",
            "summary": "The load balancer ports for the policy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1188
          },
          "name": "loadBalancerPorts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.PoliciesProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnLoadBalancer`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\nconst cfnLoadBalancerProps: elb.CfnLoadBalancerProps = {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 19
      },
      "name": "CfnLoadBalancerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners"
            },
            "remarks": "If you update the properties for a listener, AWS CloudFormation deletes the existing listener and creates a new one with the specified properties. While the new listener is being created, clients cannot connect to the load balancer.",
            "stability": "external",
            "summary": "The listeners for the load balancer. You can specify at most one listener per port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 28
          },
          "name": "listeners",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy"
            },
            "stability": "external",
            "summary": "Information about where and how access logs are stored for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 35
          },
          "name": "accessLoggingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "Information about a policy for application-controlled session stickiness."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 42
          },
          "name": "appCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones"
            },
            "remarks": "Update requires replacement if you did not previously specify an Availability Zone or if you are removing all Availability Zones. Otherwise, update requires no interruption.",
            "stability": "external",
            "summary": "The Availability Zones for the load balancer. For load balancers in a VPC, specify `Subnets` instead."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 51
          },
          "name": "availabilityZones",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy"
            },
            "remarks": "For more information, see [Configure Connection Draining](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html) in the *Classic Load Balancers Guide* .",
            "stability": "external",
            "summary": "If enabled, the load balancer allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 60
          },
          "name": "connectionDrainingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings"
            },
            "remarks": "By default, Elastic Load Balancing maintains a 60-second idle connection timeout for both front-end and back-end connections of your load balancer. For more information, see [Configure Idle Connection Timeout](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html) in the *Classic Load Balancers Guide* .",
            "stability": "external",
            "summary": "If enabled, the load balancer allows the connections to remain idle (no data is sent over the connection) for the specified duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 69
          },
          "name": "connectionSettings",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone"
            },
            "remarks": "For more information, see [Configure Cross-Zone Load Balancing](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html) in the *Classic Load Balancers Guide* .",
            "stability": "external",
            "summary": "If enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 78
          },
          "name": "crossZone",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck"
            },
            "remarks": "Update requires replacement if you did not previously specify health check settings or if you are removing the health check settings. Otherwise, update requires no interruption.",
            "stability": "external",
            "summary": "The health check settings to use when evaluating the health of your EC2 instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 87
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances"
            },
            "stability": "external",
            "summary": "The IDs of the instances for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 94
          },
          "name": "instances",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "Information about a policy for duration-based session stickiness."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 101
          },
          "name": "lbCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname"
            },
            "remarks": "This name must be unique within your set of load balancers for the region.\n\nIf you don't specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) . If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.",
            "stability": "external",
            "summary": "The name of the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 110
          },
          "name": "loadBalancerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies"
            },
            "remarks": "Specify only back-end server policies.",
            "stability": "external",
            "summary": "The policies defined for your Classic Load Balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 117
          },
          "name": "policies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme"
            },
            "remarks": "If `Scheme` is `internet-facing` , the load balancer has a public DNS name that resolves to a public IP address.\n\nIf `Scheme` is `internal` , the load balancer has a public DNS name that resolves to a private IP address.",
            "stability": "external",
            "summary": "The type of load balancer. Valid only for load balancers in a VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 128
          },
          "name": "scheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups"
            },
            "remarks": "Valid only for load balancers in a VPC.",
            "stability": "external",
            "summary": "The security groups for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 135
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets"
            },
            "remarks": "Update requires replacement if you did not previously specify a subnet or if you are removing all subnets. Otherwise, update requires no interruption. To update to a different subnet in the current Availability Zone, you must first update to a subnet in a different Availability Zone, then update to the new subnet in the original Availability Zone.",
            "stability": "external",
            "summary": "The IDs of the subnets for the load balancer. You can specify at most one subnet per Availability Zone."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 144
          },
          "name": "subnets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags"
            },
            "stability": "external",
            "summary": "The tags associated with a load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 151
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancerProps"
    },
    "@aws-cdk/aws-elasticloadbalancing.HealthCheck": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Describe the health check to a load balancer.",
        "example": "declare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.HealthCheck",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 90
      },
      "name": "HealthCheck",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "What port number to health check on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 94
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "2",
            "stability": "stable",
            "summary": "After how many successful checks is an instance considered healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 120
          },
          "name": "healthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(30)",
            "stability": "stable",
            "summary": "Number of seconds between health checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 134
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"/\"",
            "remarks": "For SSL and TCP health checks, accepting connections is enough to be considered\nhealthy.",
            "stability": "stable",
            "summary": "What path to use for HTTP or HTTPS health check (must return 200)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 113
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatic",
            "remarks": "The protocol is automatically determined from the port if it's not supplied.",
            "stability": "stable",
            "summary": "What protocol to use for health checking."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 103
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(5)",
            "stability": "stable",
            "summary": "Health check timeout."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 141
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "5",
            "stability": "stable",
            "summary": "After how many unsuccessful checks is an instance considered unhealthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 127
          },
          "name": "unhealthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/load-balancer:HealthCheck"
    },
    "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "docs": {
        "stability": "stable",
        "summary": "Interface that is going to be implemented by constructs that you can load balance to."
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
      "interfaces": [
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 147
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Attach load-balanced target to a classic ELB."
          },
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 152
          },
          "name": "attachToClassicLB",
          "parameters": [
            {
              "docs": {
                "summary": "[disable-awslint:ref-via-interface] The load balancer to attach the target to."
              },
              "name": "loadBalancer",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancer"
              }
            }
          ]
        }
      ],
      "name": "ILoadBalancerTarget",
      "symbolId": "lib/load-balancer:ILoadBalancerTarget"
    },
    "@aws-cdk/aws-elasticloadbalancing.ListenerPort": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "docs": {
        "remarks": "This implements IConnectable with a default port (the port that an ELB\nlistener was just created on) for a given security group so that it can be\nconveniently used just like any Connectable. E.g:\n\n    const listener = elb.addListener(...);\n\n    listener.connections.allowDefaultPortFromAnyIPv4();\n    // or\n    instance.connections.allowToDefaultPort(listener);",
        "stability": "stable",
        "summary": "Reference to a listener's port just created.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst listenerPort = new elb.ListenerPort(securityGroup, port);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.ListenerPort",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/load-balancer.ts",
          "line": 419
        },
        "parameters": [
          {
            "name": "securityGroup",
            "type": {
              "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
            }
          },
          {
            "name": "defaultPort",
            "type": {
              "fqn": "@aws-cdk/aws-ec2.Port"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 416
      },
      "name": "ListenerPort",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The network connections associated with this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 417
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        }
      ],
      "symbolId": "lib/load-balancer:ListenerPort"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancer": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "remarks": "Routes to a fleet of of instances in a VPC.",
        "stability": "stable",
        "summary": "A load balancer with a single listener.",
        "example": "declare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/load-balancer.ts",
          "line": 255
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 237
      },
      "methods": [
        {
          "docs": {
            "returns": "A ListenerPort object that controls connections to the listener port",
            "stability": "stable",
            "summary": "Add a backend to the load balancer."
          },
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 289
          },
          "name": "addListener",
          "parameters": [
            {
              "name": "listener",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancing.ListenerPort"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 324
          },
          "name": "addTarget",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget"
              }
            }
          ]
        }
      ],
      "name": "LoadBalancer",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Control all connections from and to this load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 241
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "An object controlling specifically the connections for each listener added to this load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 246
          },
          "name": "listenerPorts",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.ListenerPort"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 347
          },
          "name": "loadBalancerCanonicalHostedZoneName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 340
          },
          "name": "loadBalancerCanonicalHostedZoneNameId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 354
          },
          "name": "loadBalancerDnsName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 333
          },
          "name": "loadBalancerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 361
          },
          "name": "loadBalancerSourceSecurityGroupGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 368
          },
          "name": "loadBalancerSourceSecurityGroupOwnerAlias",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/load-balancer:LoadBalancer"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Add a backend to the load balancer.",
        "example": "declare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 158
      },
      "name": "LoadBalancerListener",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "External listening port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 162
          },
          "name": "externalPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Anywhere",
            "remarks": "By default, connections will be allowed from anywhere. Set this to an empty list\nto deny connections, or supply a custom list of peers to allow connections from\n(IP ranges or security groups).",
            "stability": "stable",
            "summary": "Allow connections to the load balancer from the given set of connection peers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 222
          },
          "name": "allowConnectionsFrom",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.IConnectable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Either 'tcp', 'ssl', 'http' or 'https'.\n\nMay be omitted if the external port is either 80 or 443.",
            "stability": "stable",
            "summary": "What public protocol to use for load balancing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 171
          },
          "name": "externalProtocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "externalPort",
            "remarks": "Same as the externalPort if not specified.",
            "stability": "stable",
            "summary": "Instance listening port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 180
          },
          "name": "internalPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Either 'tcp', 'ssl', 'http' or 'https'.\n\nMay be omitted if the internal port is either 80 or 443.\n\nThe instance protocol is 'tcp' if the front-end protocol\nis 'tcp' or 'ssl', the instance protocol is 'http' if the\nfront-end protocol is 'https'.",
            "stability": "stable",
            "summary": "What public protocol to use for load balancing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 193
          },
          "name": "internalProtocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "SSL policy names."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 198
          },
          "name": "policyNames",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "the ARN of the SSL certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 211
          },
          "name": "sslCertificateArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "- use sslCertificateArn instead",
            "stability": "deprecated",
            "summary": "the ARN of the SSL certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 204
          },
          "name": "sslCertificateId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/load-balancer:LoadBalancerListener"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Construction properties for a LoadBalancer.",
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 12
      },
      "name": "LoadBalancerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "VPC network of the fleet instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 16
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "stability": "stable",
            "summary": "Enable Loadbalancer access logs Can be used to avoid manual work as aws console Required S3 bucket name , enabled flag Can add interval for pushing log Can set bucket prefix in order to provide folder name inside bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 83
          },
          "name": "accessLoggingPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This controls whether the load balancer evenly distributes requests\nacross each availability zone",
            "stability": "stable",
            "summary": "Whether cross zone load balancing is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 63
          },
          "name": "crossZone",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None.",
            "remarks": "Not required but recommended.",
            "stability": "stable",
            "summary": "Health check settings for the load balancing targets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 53
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.HealthCheck"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This controls whether the LB has a public IP address assigned. It does\nnot open up the Load Balancer's security groups to public internet access.",
            "stability": "stable",
            "summary": "Whether this is an internet-facing Load Balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 26
          },
          "name": "internetFacing",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-",
            "remarks": "Can also be added by .addListener()",
            "stability": "stable",
            "summary": "What listeners to set up for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 35
          },
          "name": "listeners",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Public subnets if internetFacing, Private subnets otherwise",
            "remarks": "Can be used to define a specific set of subnets to deploy the load balancer to.\nUseful multiple public or private subnets are covering the same availability zone.",
            "stability": "stable",
            "summary": "Which subnets to deploy the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 73
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None.",
            "remarks": "Can also be added by .addTarget()",
            "stability": "stable",
            "summary": "What targets to load balance to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 44
          },
          "name": "targets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/load-balancer:LoadBalancerProps"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 225
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "TCP"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SSL"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "HTTP"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "HTTPS"
        }
      ],
      "name": "LoadBalancingProtocol",
      "symbolId": "lib/load-balancer:LoadBalancingProtocol"
    }
  },
  "version": "1.193.0",
  "fingerprint": "**********"
}