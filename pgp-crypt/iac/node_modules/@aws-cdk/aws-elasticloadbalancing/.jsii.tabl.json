{
  "version": "2",
  "toolVersion": "1.74.0",
  "snippets": {
    "0afd03946dfd271370abe640960310af7986eb36533e0c130458074fb418146b": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.IVpc\n\n# my_auto_scaling_group: autoscaling.AutoScalingGroup\n\nlb = elb.LoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True,\n    health_check=elb.HealthCheck(\n        port=80\n    )\n)\nlb.add_target(my_auto_scaling_group)\nlb.add_listener(\n    external_port=80\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true,\n    HealthCheck = new HealthCheck {\n        Port = 80\n    }\n});\nlb.AddTarget(myAutoScalingGroup);\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .healthCheck(HealthCheck.builder()\n                .port(80)\n                .build())\n        .build();\nlb.addTarget(myAutoScalingGroup);\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc iVpc\n\nvar myAutoScalingGroup autoScalingGroup\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n\thealthCheck: &healthCheck{\n\t\tport: jsii.Number(80),\n\t},\n})\nlb.addTarget(myAutoScalingGroup)\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancing"
        },
        "field": {
          "field": "markdown",
          "line": 23
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancing.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.IVpc;\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 19,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a0996368ad792a4bb89554d1744a10f2e49b69784c58c81624f10cdb52d03a3"
    },
    "8f9635e81ef2d47e49da39f0c2066481e8fc48c8086aa9086c9b4a8692dc74ad": {
      "translations": {
        "python": {
          "source": "# my_security_group: ec2.SecurityGroup\n# lb: elb.LoadBalancer\n\nlb.add_listener(\n    external_port=80,\n    allow_connections_from=[my_security_group]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "SecurityGroup mySecurityGroup;\nLoadBalancer lb;\n\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80,\n    AllowConnectionsFrom = new [] { mySecurityGroup }\n});",
          "version": "1"
        },
        "java": {
          "source": "SecurityGroup mySecurityGroup;\nLoadBalancer lb;\n\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .allowConnectionsFrom(List.of(mySecurityGroup))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var mySecurityGroup securityGroup\nvar lb loadBalancer\n\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n\tallowConnectionsFrom: []iConnectable{\n\t\tmySecurityGroup,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecurityGroup: ec2.SecurityGroup;\ndeclare const lb: elb.LoadBalancer;\nlb.addListener({\n  externalPort: 80,\n  allowConnectionsFrom: [mySecurityGroup],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancing"
        },
        "field": {
          "field": "markdown",
          "line": 43
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecurityGroup: ec2.SecurityGroup;\ndeclare const lb: elb.LoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nlb.addListener({\n  externalPort: 80,\n  allowConnectionsFrom: [mySecurityGroup],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "75": 11,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d74f45cb321929d79757c8dac70ed678d5413e106667dff9f16ffc78bcfd54a4"
    },
    "6198a5ae6e7e27acbea6b8d24547403da57c0eea847e0efd057b950e8e496b3b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\n# attributes: Any\n\ncfn_load_balancer = elb.CfnLoadBalancer(self, \"MyCfnLoadBalancer\",\n    listeners=[elb.CfnLoadBalancer.ListenersProperty(\n        instance_port=\"instancePort\",\n        load_balancer_port=\"loadBalancerPort\",\n        protocol=\"protocol\",\n\n        # the properties below are optional\n        instance_protocol=\"instanceProtocol\",\n        policy_names=[\"policyNames\"],\n        ssl_certificate_id=\"sslCertificateId\"\n    )],\n\n    # the properties below are optional\n    access_logging_policy=elb.CfnLoadBalancer.AccessLoggingPolicyProperty(\n        enabled=False,\n        s3_bucket_name=\"s3BucketName\",\n\n        # the properties below are optional\n        emit_interval=123,\n        s3_bucket_prefix=\"s3BucketPrefix\"\n    ),\n    app_cookie_stickiness_policy=[elb.CfnLoadBalancer.AppCookieStickinessPolicyProperty(\n        cookie_name=\"cookieName\",\n        policy_name=\"policyName\"\n    )],\n    availability_zones=[\"availabilityZones\"],\n    connection_draining_policy=elb.CfnLoadBalancer.ConnectionDrainingPolicyProperty(\n        enabled=False,\n\n        # the properties below are optional\n        timeout=123\n    ),\n    connection_settings=elb.CfnLoadBalancer.ConnectionSettingsProperty(\n        idle_timeout=123\n    ),\n    cross_zone=False,\n    health_check=elb.CfnLoadBalancer.HealthCheckProperty(\n        healthy_threshold=\"healthyThreshold\",\n        interval=\"interval\",\n        target=\"target\",\n        timeout=\"timeout\",\n        unhealthy_threshold=\"unhealthyThreshold\"\n    ),\n    instances=[\"instances\"],\n    lb_cookie_stickiness_policy=[elb.CfnLoadBalancer.LBCookieStickinessPolicyProperty(\n        cookie_expiration_period=\"cookieExpirationPeriod\",\n        policy_name=\"policyName\"\n    )],\n    load_balancer_name=\"loadBalancerName\",\n    policies=[elb.CfnLoadBalancer.PoliciesProperty(\n        attributes=[attributes],\n        policy_name=\"policyName\",\n        policy_type=\"policyType\",\n\n        # the properties below are optional\n        instance_ports=[\"instancePorts\"],\n        load_balancer_ports=[\"loadBalancerPorts\"]\n    )],\n    scheme=\"scheme\",\n    security_groups=[\"securityGroups\"],\n    subnets=[\"subnets\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nvar attributes;\n\nCfnLoadBalancer cfnLoadBalancer = new CfnLoadBalancer(this, \"MyCfnLoadBalancer\", new CfnLoadBalancerProps {\n    Listeners = new [] { new ListenersProperty {\n        InstancePort = \"instancePort\",\n        LoadBalancerPort = \"loadBalancerPort\",\n        Protocol = \"protocol\",\n\n        // the properties below are optional\n        InstanceProtocol = \"instanceProtocol\",\n        PolicyNames = new [] { \"policyNames\" },\n        SslCertificateId = \"sslCertificateId\"\n    } },\n\n    // the properties below are optional\n    AccessLoggingPolicy = new AccessLoggingPolicyProperty {\n        Enabled = false,\n        S3BucketName = \"s3BucketName\",\n\n        // the properties below are optional\n        EmitInterval = 123,\n        S3BucketPrefix = \"s3BucketPrefix\"\n    },\n    AppCookieStickinessPolicy = new [] { new AppCookieStickinessPolicyProperty {\n        CookieName = \"cookieName\",\n        PolicyName = \"policyName\"\n    } },\n    AvailabilityZones = new [] { \"availabilityZones\" },\n    ConnectionDrainingPolicy = new ConnectionDrainingPolicyProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        Timeout = 123\n    },\n    ConnectionSettings = new ConnectionSettingsProperty {\n        IdleTimeout = 123\n    },\n    CrossZone = false,\n    HealthCheck = new HealthCheckProperty {\n        HealthyThreshold = \"healthyThreshold\",\n        Interval = \"interval\",\n        Target = \"target\",\n        Timeout = \"timeout\",\n        UnhealthyThreshold = \"unhealthyThreshold\"\n    },\n    Instances = new [] { \"instances\" },\n    LbCookieStickinessPolicy = new [] { new LBCookieStickinessPolicyProperty {\n        CookieExpirationPeriod = \"cookieExpirationPeriod\",\n        PolicyName = \"policyName\"\n    } },\n    LoadBalancerName = \"loadBalancerName\",\n    Policies = new [] { new PoliciesProperty {\n        Attributes = new [] { attributes },\n        PolicyName = \"policyName\",\n        PolicyType = \"policyType\",\n\n        // the properties below are optional\n        InstancePorts = new [] { \"instancePorts\" },\n        LoadBalancerPorts = new [] { \"loadBalancerPorts\" }\n    } },\n    Scheme = \"scheme\",\n    SecurityGroups = new [] { \"securityGroups\" },\n    Subnets = new [] { \"subnets\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nObject attributes;\n\nCfnLoadBalancer cfnLoadBalancer = CfnLoadBalancer.Builder.create(this, \"MyCfnLoadBalancer\")\n        .listeners(List.of(ListenersProperty.builder()\n                .instancePort(\"instancePort\")\n                .loadBalancerPort(\"loadBalancerPort\")\n                .protocol(\"protocol\")\n\n                // the properties below are optional\n                .instanceProtocol(\"instanceProtocol\")\n                .policyNames(List.of(\"policyNames\"))\n                .sslCertificateId(\"sslCertificateId\")\n                .build()))\n\n        // the properties below are optional\n        .accessLoggingPolicy(AccessLoggingPolicyProperty.builder()\n                .enabled(false)\n                .s3BucketName(\"s3BucketName\")\n\n                // the properties below are optional\n                .emitInterval(123)\n                .s3BucketPrefix(\"s3BucketPrefix\")\n                .build())\n        .appCookieStickinessPolicy(List.of(AppCookieStickinessPolicyProperty.builder()\n                .cookieName(\"cookieName\")\n                .policyName(\"policyName\")\n                .build()))\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .connectionDrainingPolicy(ConnectionDrainingPolicyProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .timeout(123)\n                .build())\n        .connectionSettings(ConnectionSettingsProperty.builder()\n                .idleTimeout(123)\n                .build())\n        .crossZone(false)\n        .healthCheck(HealthCheckProperty.builder()\n                .healthyThreshold(\"healthyThreshold\")\n                .interval(\"interval\")\n                .target(\"target\")\n                .timeout(\"timeout\")\n                .unhealthyThreshold(\"unhealthyThreshold\")\n                .build())\n        .instances(List.of(\"instances\"))\n        .lbCookieStickinessPolicy(List.of(LBCookieStickinessPolicyProperty.builder()\n                .cookieExpirationPeriod(\"cookieExpirationPeriod\")\n                .policyName(\"policyName\")\n                .build()))\n        .loadBalancerName(\"loadBalancerName\")\n        .policies(List.of(PoliciesProperty.builder()\n                .attributes(List.of(attributes))\n                .policyName(\"policyName\")\n                .policyType(\"policyType\")\n\n                // the properties below are optional\n                .instancePorts(List.of(\"instancePorts\"))\n                .loadBalancerPorts(List.of(\"loadBalancerPorts\"))\n                .build()))\n        .scheme(\"scheme\")\n        .securityGroups(List.of(\"securityGroups\"))\n        .subnets(List.of(\"subnets\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nvar attributes interface{}\n\ncfnLoadBalancer := elb.NewCfnLoadBalancer(this, jsii.String(\"MyCfnLoadBalancer\"), &cfnLoadBalancerProps{\n\tlisteners: []interface{}{\n\t\t&listenersProperty{\n\t\t\tinstancePort: jsii.String(\"instancePort\"),\n\t\t\tloadBalancerPort: jsii.String(\"loadBalancerPort\"),\n\t\t\tprotocol: jsii.String(\"protocol\"),\n\n\t\t\t// the properties below are optional\n\t\t\tinstanceProtocol: jsii.String(\"instanceProtocol\"),\n\t\t\tpolicyNames: []*string{\n\t\t\t\tjsii.String(\"policyNames\"),\n\t\t\t},\n\t\t\tsslCertificateId: jsii.String(\"sslCertificateId\"),\n\t\t},\n\t},\n\n\t// the properties below are optional\n\taccessLoggingPolicy: &accessLoggingPolicyProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\ts3BucketName: jsii.String(\"s3BucketName\"),\n\n\t\t// the properties below are optional\n\t\temitInterval: jsii.Number(123),\n\t\ts3BucketPrefix: jsii.String(\"s3BucketPrefix\"),\n\t},\n\tappCookieStickinessPolicy: []interface{}{\n\t\t&appCookieStickinessPolicyProperty{\n\t\t\tcookieName: jsii.String(\"cookieName\"),\n\t\t\tpolicyName: jsii.String(\"policyName\"),\n\t\t},\n\t},\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n\tconnectionDrainingPolicy: &connectionDrainingPolicyProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\ttimeout: jsii.Number(123),\n\t},\n\tconnectionSettings: &connectionSettingsProperty{\n\t\tidleTimeout: jsii.Number(123),\n\t},\n\tcrossZone: jsii.Boolean(false),\n\thealthCheck: &healthCheckProperty{\n\t\thealthyThreshold: jsii.String(\"healthyThreshold\"),\n\t\tinterval: jsii.String(\"interval\"),\n\t\ttarget: jsii.String(\"target\"),\n\t\ttimeout: jsii.String(\"timeout\"),\n\t\tunhealthyThreshold: jsii.String(\"unhealthyThreshold\"),\n\t},\n\tinstances: []*string{\n\t\tjsii.String(\"instances\"),\n\t},\n\tlbCookieStickinessPolicy: []interface{}{\n\t\t&lBCookieStickinessPolicyProperty{\n\t\t\tcookieExpirationPeriod: jsii.String(\"cookieExpirationPeriod\"),\n\t\t\tpolicyName: jsii.String(\"policyName\"),\n\t\t},\n\t},\n\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\tpolicies: []interface{}{\n\t\t&policiesProperty{\n\t\t\tattributes: []interface{}{\n\t\t\t\tattributes,\n\t\t\t},\n\t\t\tpolicyName: jsii.String(\"policyName\"),\n\t\t\tpolicyType: jsii.String(\"policyType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tinstancePorts: []*string{\n\t\t\t\tjsii.String(\"instancePorts\"),\n\t\t\t},\n\t\t\tloadBalancerPorts: []*string{\n\t\t\t\tjsii.String(\"loadBalancerPorts\"),\n\t\t\t},\n\t\t},\n\t},\n\tscheme: jsii.String(\"scheme\"),\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\nconst cfnLoadBalancer = new elb.CfnLoadBalancer(this, 'MyCfnLoadBalancer', {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLoadBalancer = new elb.CfnLoadBalancer(this, 'MyCfnLoadBalancer', {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 31,
        "75": 51,
        "91": 3,
        "104": 1,
        "125": 1,
        "130": 1,
        "192": 13,
        "193": 10,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "0f139c1b811171207f7298be519c1f84e8a1056adf00d70707093909e7ed2f73"
    },
    "01f73f00fdc8dca91506709d65af0a020638ed9e1a613d44465de8b7ffd0354a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\naccess_logging_policy_property = elb.CfnLoadBalancer.AccessLoggingPolicyProperty(\n    enabled=False,\n    s3_bucket_name=\"s3BucketName\",\n\n    # the properties below are optional\n    emit_interval=123,\n    s3_bucket_prefix=\"s3BucketPrefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nAccessLoggingPolicyProperty accessLoggingPolicyProperty = new AccessLoggingPolicyProperty {\n    Enabled = false,\n    S3BucketName = \"s3BucketName\",\n\n    // the properties below are optional\n    EmitInterval = 123,\n    S3BucketPrefix = \"s3BucketPrefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nAccessLoggingPolicyProperty accessLoggingPolicyProperty = AccessLoggingPolicyProperty.builder()\n        .enabled(false)\n        .s3BucketName(\"s3BucketName\")\n\n        // the properties below are optional\n        .emitInterval(123)\n        .s3BucketPrefix(\"s3BucketPrefix\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\naccessLoggingPolicyProperty := &accessLoggingPolicyProperty{\n\tenabled: jsii.Boolean(false),\n\ts3BucketName: jsii.String(\"s3BucketName\"),\n\n\t// the properties below are optional\n\temitInterval: jsii.Number(123),\n\ts3BucketPrefix: jsii.String(\"s3BucketPrefix\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst accessLoggingPolicyProperty: elb.CfnLoadBalancer.AccessLoggingPolicyProperty = {\n  enabled: false,\n  s3BucketName: 's3BucketName',\n\n  // the properties below are optional\n  emitInterval: 123,\n  s3BucketPrefix: 's3BucketPrefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst accessLoggingPolicyProperty: elb.CfnLoadBalancer.AccessLoggingPolicyProperty = {\n  enabled: false,\n  s3BucketName: 's3BucketName',\n\n  // the properties below are optional\n  emitInterval: 123,\n  s3BucketPrefix: 's3BucketPrefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 9,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c58b449b01b37710d41c9caf1b93ad80071941d9b32f7d904e8f3135cf21b06d"
    },
    "583258a442f5f640a94915426b0100997625620754944716ffa806a3828ab52a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\napp_cookie_stickiness_policy_property = elb.CfnLoadBalancer.AppCookieStickinessPolicyProperty(\n    cookie_name=\"cookieName\",\n    policy_name=\"policyName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nAppCookieStickinessPolicyProperty appCookieStickinessPolicyProperty = new AppCookieStickinessPolicyProperty {\n    CookieName = \"cookieName\",\n    PolicyName = \"policyName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nAppCookieStickinessPolicyProperty appCookieStickinessPolicyProperty = AppCookieStickinessPolicyProperty.builder()\n        .cookieName(\"cookieName\")\n        .policyName(\"policyName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nappCookieStickinessPolicyProperty := &appCookieStickinessPolicyProperty{\n\tcookieName: jsii.String(\"cookieName\"),\n\tpolicyName: jsii.String(\"policyName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst appCookieStickinessPolicyProperty: elb.CfnLoadBalancer.AppCookieStickinessPolicyProperty = {\n  cookieName: 'cookieName',\n  policyName: 'policyName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst appCookieStickinessPolicyProperty: elb.CfnLoadBalancer.AppCookieStickinessPolicyProperty = {\n  cookieName: 'cookieName',\n  policyName: 'policyName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "de61577fbf37223a3908253634174ce58d6650c22211c55460c904b08d0025b1"
    },
    "b41927656d42a02eca339bdff24091147e26aaab439b69de8d6796e084fbd83a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\nconnection_draining_policy_property = elb.CfnLoadBalancer.ConnectionDrainingPolicyProperty(\n    enabled=False,\n\n    # the properties below are optional\n    timeout=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nConnectionDrainingPolicyProperty connectionDrainingPolicyProperty = new ConnectionDrainingPolicyProperty {\n    Enabled = false,\n\n    // the properties below are optional\n    Timeout = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nConnectionDrainingPolicyProperty connectionDrainingPolicyProperty = ConnectionDrainingPolicyProperty.builder()\n        .enabled(false)\n\n        // the properties below are optional\n        .timeout(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nconnectionDrainingPolicyProperty := &connectionDrainingPolicyProperty{\n\tenabled: jsii.Boolean(false),\n\n\t// the properties below are optional\n\ttimeout: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst connectionDrainingPolicyProperty: elb.CfnLoadBalancer.ConnectionDrainingPolicyProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  timeout: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionDrainingPolicyProperty: elb.CfnLoadBalancer.ConnectionDrainingPolicyProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  timeout: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "08db2cb96a4cd8ad337e90c08609fc9a8762cd806202d3ed1a5275e55b02949b"
    },
    "1d5586d314ff53e9a3cb360c82b79736f5ba1a872be31471530303f44db5e188": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\nconnection_settings_property = elb.CfnLoadBalancer.ConnectionSettingsProperty(\n    idle_timeout=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nConnectionSettingsProperty connectionSettingsProperty = new ConnectionSettingsProperty {\n    IdleTimeout = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nConnectionSettingsProperty connectionSettingsProperty = ConnectionSettingsProperty.builder()\n        .idleTimeout(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nconnectionSettingsProperty := &connectionSettingsProperty{\n\tidleTimeout: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst connectionSettingsProperty: elb.CfnLoadBalancer.ConnectionSettingsProperty = {\n  idleTimeout: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst connectionSettingsProperty: elb.CfnLoadBalancer.ConnectionSettingsProperty = {\n  idleTimeout: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4f04e87b7fb6b74cdea388d8574587152ee1d85b692df0cdbabce4a42cb86d87"
    },
    "924d7ebe82bd11a2fa8ede6c1d32b64aad0da6069c90d280226c5b4670fc6e0b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\nhealth_check_property = elb.CfnLoadBalancer.HealthCheckProperty(\n    healthy_threshold=\"healthyThreshold\",\n    interval=\"interval\",\n    target=\"target\",\n    timeout=\"timeout\",\n    unhealthy_threshold=\"unhealthyThreshold\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nHealthCheckProperty healthCheckProperty = new HealthCheckProperty {\n    HealthyThreshold = \"healthyThreshold\",\n    Interval = \"interval\",\n    Target = \"target\",\n    Timeout = \"timeout\",\n    UnhealthyThreshold = \"unhealthyThreshold\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nHealthCheckProperty healthCheckProperty = HealthCheckProperty.builder()\n        .healthyThreshold(\"healthyThreshold\")\n        .interval(\"interval\")\n        .target(\"target\")\n        .timeout(\"timeout\")\n        .unhealthyThreshold(\"unhealthyThreshold\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nhealthCheckProperty := &healthCheckProperty{\n\thealthyThreshold: jsii.String(\"healthyThreshold\"),\n\tinterval: jsii.String(\"interval\"),\n\ttarget: jsii.String(\"target\"),\n\ttimeout: jsii.String(\"timeout\"),\n\tunhealthyThreshold: jsii.String(\"unhealthyThreshold\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst healthCheckProperty: elb.CfnLoadBalancer.HealthCheckProperty = {\n  healthyThreshold: 'healthyThreshold',\n  interval: 'interval',\n  target: 'target',\n  timeout: 'timeout',\n  unhealthyThreshold: 'unhealthyThreshold',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckProperty: elb.CfnLoadBalancer.HealthCheckProperty = {\n  healthyThreshold: 'healthyThreshold',\n  interval: 'interval',\n  target: 'target',\n  timeout: 'timeout',\n  unhealthyThreshold: 'unhealthyThreshold',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "aa3a1faa02ccfbb15e17fd45025982a5e8ece93632ac5422ae3d35470f6fb0a0"
    },
    "8bf9d39370bdfb90b7f3bd86bba4c6379a391109508923d5ee389a7e5ff3ad2a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\nl_bCookie_stickiness_policy_property = elb.CfnLoadBalancer.LBCookieStickinessPolicyProperty(\n    cookie_expiration_period=\"cookieExpirationPeriod\",\n    policy_name=\"policyName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nLBCookieStickinessPolicyProperty lBCookieStickinessPolicyProperty = new LBCookieStickinessPolicyProperty {\n    CookieExpirationPeriod = \"cookieExpirationPeriod\",\n    PolicyName = \"policyName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nLBCookieStickinessPolicyProperty lBCookieStickinessPolicyProperty = LBCookieStickinessPolicyProperty.builder()\n        .cookieExpirationPeriod(\"cookieExpirationPeriod\")\n        .policyName(\"policyName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nlBCookieStickinessPolicyProperty := &lBCookieStickinessPolicyProperty{\n\tcookieExpirationPeriod: jsii.String(\"cookieExpirationPeriod\"),\n\tpolicyName: jsii.String(\"policyName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst lBCookieStickinessPolicyProperty: elb.CfnLoadBalancer.LBCookieStickinessPolicyProperty = {\n  cookieExpirationPeriod: 'cookieExpirationPeriod',\n  policyName: 'policyName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lBCookieStickinessPolicyProperty: elb.CfnLoadBalancer.LBCookieStickinessPolicyProperty = {\n  cookieExpirationPeriod: 'cookieExpirationPeriod',\n  policyName: 'policyName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0ecbd69f579cbe3ba1c573b42b02955080cd6585d822582c62a1e07ef73225f3"
    },
    "de4883d9c5502578513179441c73b293221fbb9d90c494095babb301768e8e3a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\nlisteners_property = elb.CfnLoadBalancer.ListenersProperty(\n    instance_port=\"instancePort\",\n    load_balancer_port=\"loadBalancerPort\",\n    protocol=\"protocol\",\n\n    # the properties below are optional\n    instance_protocol=\"instanceProtocol\",\n    policy_names=[\"policyNames\"],\n    ssl_certificate_id=\"sslCertificateId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nListenersProperty listenersProperty = new ListenersProperty {\n    InstancePort = \"instancePort\",\n    LoadBalancerPort = \"loadBalancerPort\",\n    Protocol = \"protocol\",\n\n    // the properties below are optional\n    InstanceProtocol = \"instanceProtocol\",\n    PolicyNames = new [] { \"policyNames\" },\n    SslCertificateId = \"sslCertificateId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nListenersProperty listenersProperty = ListenersProperty.builder()\n        .instancePort(\"instancePort\")\n        .loadBalancerPort(\"loadBalancerPort\")\n        .protocol(\"protocol\")\n\n        // the properties below are optional\n        .instanceProtocol(\"instanceProtocol\")\n        .policyNames(List.of(\"policyNames\"))\n        .sslCertificateId(\"sslCertificateId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nlistenersProperty := &listenersProperty{\n\tinstancePort: jsii.String(\"instancePort\"),\n\tloadBalancerPort: jsii.String(\"loadBalancerPort\"),\n\tprotocol: jsii.String(\"protocol\"),\n\n\t// the properties below are optional\n\tinstanceProtocol: jsii.String(\"instanceProtocol\"),\n\tpolicyNames: []*string{\n\t\tjsii.String(\"policyNames\"),\n\t},\n\tsslCertificateId: jsii.String(\"sslCertificateId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nconst listenersProperty: elb.CfnLoadBalancer.ListenersProperty = {\n  instancePort: 'instancePort',\n  loadBalancerPort: 'loadBalancerPort',\n  protocol: 'protocol',\n\n  // the properties below are optional\n  instanceProtocol: 'instanceProtocol',\n  policyNames: ['policyNames'],\n  sslCertificateId: 'sslCertificateId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst listenersProperty: elb.CfnLoadBalancer.ListenersProperty = {\n  instancePort: 'instancePort',\n  loadBalancerPort: 'loadBalancerPort',\n  protocol: 'protocol',\n\n  // the properties below are optional\n  instanceProtocol: 'instanceProtocol',\n  policyNames: ['policyNames'],\n  sslCertificateId: 'sslCertificateId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 11,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c90f34329f2d9a8cb47f9f6c3e7b0fddd1eec4f92096a849b4fa98b358923b38"
    },
    "ada0ded22057d98743e32a62c2e8090a32871f6d75c8550b6633a5acc111682b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\n# attributes: Any\n\npolicies_property = elb.CfnLoadBalancer.PoliciesProperty(\n    attributes=[attributes],\n    policy_name=\"policyName\",\n    policy_type=\"policyType\",\n\n    # the properties below are optional\n    instance_ports=[\"instancePorts\"],\n    load_balancer_ports=[\"loadBalancerPorts\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nvar attributes;\n\nPoliciesProperty policiesProperty = new PoliciesProperty {\n    Attributes = new [] { attributes },\n    PolicyName = \"policyName\",\n    PolicyType = \"policyType\",\n\n    // the properties below are optional\n    InstancePorts = new [] { \"instancePorts\" },\n    LoadBalancerPorts = new [] { \"loadBalancerPorts\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nObject attributes;\n\nPoliciesProperty policiesProperty = PoliciesProperty.builder()\n        .attributes(List.of(attributes))\n        .policyName(\"policyName\")\n        .policyType(\"policyType\")\n\n        // the properties below are optional\n        .instancePorts(List.of(\"instancePorts\"))\n        .loadBalancerPorts(List.of(\"loadBalancerPorts\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nvar attributes interface{}\n\npoliciesProperty := &policiesProperty{\n\tattributes: []interface{}{\n\t\tattributes,\n\t},\n\tpolicyName: jsii.String(\"policyName\"),\n\tpolicyType: jsii.String(\"policyType\"),\n\n\t// the properties below are optional\n\tinstancePorts: []*string{\n\t\tjsii.String(\"instancePorts\"),\n\t},\n\tloadBalancerPorts: []*string{\n\t\tjsii.String(\"loadBalancerPorts\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\nconst policiesProperty: elb.CfnLoadBalancer.PoliciesProperty = {\n  attributes: [attributes],\n  policyName: 'policyName',\n  policyType: 'policyType',\n\n  // the properties below are optional\n  instancePorts: ['instancePorts'],\n  loadBalancerPorts: ['loadBalancerPorts'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst policiesProperty: elb.CfnLoadBalancer.PoliciesProperty = {\n  attributes: [attributes],\n  policyName: 'policyName',\n  policyType: 'policyType',\n\n  // the properties below are optional\n  instancePorts: ['instancePorts'],\n  loadBalancerPorts: ['loadBalancerPorts'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "125": 1,
        "130": 1,
        "153": 2,
        "169": 1,
        "192": 3,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "923e50ca709e00ca6bd6a332f8f27cd17c11ad3c8bd3ac90515edc58ecb1ef0d"
    },
    "4230d902a2f1b4652109eebf7fbc31e4f0d42f390b15aef51b6b0479f8c930f3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_elasticloadbalancing as elb\n\n# attributes: Any\n\ncfn_load_balancer_props = elb.CfnLoadBalancerProps(\n    listeners=[elb.CfnLoadBalancer.ListenersProperty(\n        instance_port=\"instancePort\",\n        load_balancer_port=\"loadBalancerPort\",\n        protocol=\"protocol\",\n\n        # the properties below are optional\n        instance_protocol=\"instanceProtocol\",\n        policy_names=[\"policyNames\"],\n        ssl_certificate_id=\"sslCertificateId\"\n    )],\n\n    # the properties below are optional\n    access_logging_policy=elb.CfnLoadBalancer.AccessLoggingPolicyProperty(\n        enabled=False,\n        s3_bucket_name=\"s3BucketName\",\n\n        # the properties below are optional\n        emit_interval=123,\n        s3_bucket_prefix=\"s3BucketPrefix\"\n    ),\n    app_cookie_stickiness_policy=[elb.CfnLoadBalancer.AppCookieStickinessPolicyProperty(\n        cookie_name=\"cookieName\",\n        policy_name=\"policyName\"\n    )],\n    availability_zones=[\"availabilityZones\"],\n    connection_draining_policy=elb.CfnLoadBalancer.ConnectionDrainingPolicyProperty(\n        enabled=False,\n\n        # the properties below are optional\n        timeout=123\n    ),\n    connection_settings=elb.CfnLoadBalancer.ConnectionSettingsProperty(\n        idle_timeout=123\n    ),\n    cross_zone=False,\n    health_check=elb.CfnLoadBalancer.HealthCheckProperty(\n        healthy_threshold=\"healthyThreshold\",\n        interval=\"interval\",\n        target=\"target\",\n        timeout=\"timeout\",\n        unhealthy_threshold=\"unhealthyThreshold\"\n    ),\n    instances=[\"instances\"],\n    lb_cookie_stickiness_policy=[elb.CfnLoadBalancer.LBCookieStickinessPolicyProperty(\n        cookie_expiration_period=\"cookieExpirationPeriod\",\n        policy_name=\"policyName\"\n    )],\n    load_balancer_name=\"loadBalancerName\",\n    policies=[elb.CfnLoadBalancer.PoliciesProperty(\n        attributes=[attributes],\n        policy_name=\"policyName\",\n        policy_type=\"policyType\",\n\n        # the properties below are optional\n        instance_ports=[\"instancePorts\"],\n        load_balancer_ports=[\"loadBalancerPorts\"]\n    )],\n    scheme=\"scheme\",\n    security_groups=[\"securityGroups\"],\n    subnets=[\"subnets\"],\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nvar attributes;\n\nCfnLoadBalancerProps cfnLoadBalancerProps = new CfnLoadBalancerProps {\n    Listeners = new [] { new ListenersProperty {\n        InstancePort = \"instancePort\",\n        LoadBalancerPort = \"loadBalancerPort\",\n        Protocol = \"protocol\",\n\n        // the properties below are optional\n        InstanceProtocol = \"instanceProtocol\",\n        PolicyNames = new [] { \"policyNames\" },\n        SslCertificateId = \"sslCertificateId\"\n    } },\n\n    // the properties below are optional\n    AccessLoggingPolicy = new AccessLoggingPolicyProperty {\n        Enabled = false,\n        S3BucketName = \"s3BucketName\",\n\n        // the properties below are optional\n        EmitInterval = 123,\n        S3BucketPrefix = \"s3BucketPrefix\"\n    },\n    AppCookieStickinessPolicy = new [] { new AppCookieStickinessPolicyProperty {\n        CookieName = \"cookieName\",\n        PolicyName = \"policyName\"\n    } },\n    AvailabilityZones = new [] { \"availabilityZones\" },\n    ConnectionDrainingPolicy = new ConnectionDrainingPolicyProperty {\n        Enabled = false,\n\n        // the properties below are optional\n        Timeout = 123\n    },\n    ConnectionSettings = new ConnectionSettingsProperty {\n        IdleTimeout = 123\n    },\n    CrossZone = false,\n    HealthCheck = new HealthCheckProperty {\n        HealthyThreshold = \"healthyThreshold\",\n        Interval = \"interval\",\n        Target = \"target\",\n        Timeout = \"timeout\",\n        UnhealthyThreshold = \"unhealthyThreshold\"\n    },\n    Instances = new [] { \"instances\" },\n    LbCookieStickinessPolicy = new [] { new LBCookieStickinessPolicyProperty {\n        CookieExpirationPeriod = \"cookieExpirationPeriod\",\n        PolicyName = \"policyName\"\n    } },\n    LoadBalancerName = \"loadBalancerName\",\n    Policies = new [] { new PoliciesProperty {\n        Attributes = new [] { attributes },\n        PolicyName = \"policyName\",\n        PolicyType = \"policyType\",\n\n        // the properties below are optional\n        InstancePorts = new [] { \"instancePorts\" },\n        LoadBalancerPorts = new [] { \"loadBalancerPorts\" }\n    } },\n    Scheme = \"scheme\",\n    SecurityGroups = new [] { \"securityGroups\" },\n    Subnets = new [] { \"subnets\" },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nObject attributes;\n\nCfnLoadBalancerProps cfnLoadBalancerProps = CfnLoadBalancerProps.builder()\n        .listeners(List.of(ListenersProperty.builder()\n                .instancePort(\"instancePort\")\n                .loadBalancerPort(\"loadBalancerPort\")\n                .protocol(\"protocol\")\n\n                // the properties below are optional\n                .instanceProtocol(\"instanceProtocol\")\n                .policyNames(List.of(\"policyNames\"))\n                .sslCertificateId(\"sslCertificateId\")\n                .build()))\n\n        // the properties below are optional\n        .accessLoggingPolicy(AccessLoggingPolicyProperty.builder()\n                .enabled(false)\n                .s3BucketName(\"s3BucketName\")\n\n                // the properties below are optional\n                .emitInterval(123)\n                .s3BucketPrefix(\"s3BucketPrefix\")\n                .build())\n        .appCookieStickinessPolicy(List.of(AppCookieStickinessPolicyProperty.builder()\n                .cookieName(\"cookieName\")\n                .policyName(\"policyName\")\n                .build()))\n        .availabilityZones(List.of(\"availabilityZones\"))\n        .connectionDrainingPolicy(ConnectionDrainingPolicyProperty.builder()\n                .enabled(false)\n\n                // the properties below are optional\n                .timeout(123)\n                .build())\n        .connectionSettings(ConnectionSettingsProperty.builder()\n                .idleTimeout(123)\n                .build())\n        .crossZone(false)\n        .healthCheck(HealthCheckProperty.builder()\n                .healthyThreshold(\"healthyThreshold\")\n                .interval(\"interval\")\n                .target(\"target\")\n                .timeout(\"timeout\")\n                .unhealthyThreshold(\"unhealthyThreshold\")\n                .build())\n        .instances(List.of(\"instances\"))\n        .lbCookieStickinessPolicy(List.of(LBCookieStickinessPolicyProperty.builder()\n                .cookieExpirationPeriod(\"cookieExpirationPeriod\")\n                .policyName(\"policyName\")\n                .build()))\n        .loadBalancerName(\"loadBalancerName\")\n        .policies(List.of(PoliciesProperty.builder()\n                .attributes(List.of(attributes))\n                .policyName(\"policyName\")\n                .policyType(\"policyType\")\n\n                // the properties below are optional\n                .instancePorts(List.of(\"instancePorts\"))\n                .loadBalancerPorts(List.of(\"loadBalancerPorts\"))\n                .build()))\n        .scheme(\"scheme\")\n        .securityGroups(List.of(\"securityGroups\"))\n        .subnets(List.of(\"subnets\"))\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nvar attributes interface{}\n\ncfnLoadBalancerProps := &cfnLoadBalancerProps{\n\tlisteners: []interface{}{\n\t\t&listenersProperty{\n\t\t\tinstancePort: jsii.String(\"instancePort\"),\n\t\t\tloadBalancerPort: jsii.String(\"loadBalancerPort\"),\n\t\t\tprotocol: jsii.String(\"protocol\"),\n\n\t\t\t// the properties below are optional\n\t\t\tinstanceProtocol: jsii.String(\"instanceProtocol\"),\n\t\t\tpolicyNames: []*string{\n\t\t\t\tjsii.String(\"policyNames\"),\n\t\t\t},\n\t\t\tsslCertificateId: jsii.String(\"sslCertificateId\"),\n\t\t},\n\t},\n\n\t// the properties below are optional\n\taccessLoggingPolicy: &accessLoggingPolicyProperty{\n\t\tenabled: jsii.Boolean(false),\n\t\ts3BucketName: jsii.String(\"s3BucketName\"),\n\n\t\t// the properties below are optional\n\t\temitInterval: jsii.Number(123),\n\t\ts3BucketPrefix: jsii.String(\"s3BucketPrefix\"),\n\t},\n\tappCookieStickinessPolicy: []interface{}{\n\t\t&appCookieStickinessPolicyProperty{\n\t\t\tcookieName: jsii.String(\"cookieName\"),\n\t\t\tpolicyName: jsii.String(\"policyName\"),\n\t\t},\n\t},\n\tavailabilityZones: []*string{\n\t\tjsii.String(\"availabilityZones\"),\n\t},\n\tconnectionDrainingPolicy: &connectionDrainingPolicyProperty{\n\t\tenabled: jsii.Boolean(false),\n\n\t\t// the properties below are optional\n\t\ttimeout: jsii.Number(123),\n\t},\n\tconnectionSettings: &connectionSettingsProperty{\n\t\tidleTimeout: jsii.Number(123),\n\t},\n\tcrossZone: jsii.Boolean(false),\n\thealthCheck: &healthCheckProperty{\n\t\thealthyThreshold: jsii.String(\"healthyThreshold\"),\n\t\tinterval: jsii.String(\"interval\"),\n\t\ttarget: jsii.String(\"target\"),\n\t\ttimeout: jsii.String(\"timeout\"),\n\t\tunhealthyThreshold: jsii.String(\"unhealthyThreshold\"),\n\t},\n\tinstances: []*string{\n\t\tjsii.String(\"instances\"),\n\t},\n\tlbCookieStickinessPolicy: []interface{}{\n\t\t&lBCookieStickinessPolicyProperty{\n\t\t\tcookieExpirationPeriod: jsii.String(\"cookieExpirationPeriod\"),\n\t\t\tpolicyName: jsii.String(\"policyName\"),\n\t\t},\n\t},\n\tloadBalancerName: jsii.String(\"loadBalancerName\"),\n\tpolicies: []interface{}{\n\t\t&policiesProperty{\n\t\t\tattributes: []interface{}{\n\t\t\t\tattributes,\n\t\t\t},\n\t\t\tpolicyName: jsii.String(\"policyName\"),\n\t\t\tpolicyType: jsii.String(\"policyType\"),\n\n\t\t\t// the properties below are optional\n\t\t\tinstancePorts: []*string{\n\t\t\t\tjsii.String(\"instancePorts\"),\n\t\t\t},\n\t\t\tloadBalancerPorts: []*string{\n\t\t\t\tjsii.String(\"loadBalancerPorts\"),\n\t\t\t},\n\t\t},\n\t},\n\tscheme: jsii.String(\"scheme\"),\n\tsecurityGroups: []*string{\n\t\tjsii.String(\"securityGroups\"),\n\t},\n\tsubnets: []*string{\n\t\tjsii.String(\"subnets\"),\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\nconst cfnLoadBalancerProps: elb.CfnLoadBalancerProps = {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnLoadBalancerProps: elb.CfnLoadBalancerProps = {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 30,
        "75": 51,
        "91": 3,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 13,
        "193": 10,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "c0f40e0f5e31057d870adbf8af0feba19860f2b5445a5181b74d025c6697604d"
    },
    "a7fe3aa11b9bb7a2a4a09efd951c2e54fe1569936e57e9447ecd009ca4b43241": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.IVpc\n\n# my_auto_scaling_group: autoscaling.AutoScalingGroup\n\nlb = elb.LoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True,\n    health_check=elb.HealthCheck(\n        port=80\n    )\n)\nlb.add_target(my_auto_scaling_group)\nlb.add_listener(\n    external_port=80\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true,\n    HealthCheck = new HealthCheck {\n        Port = 80\n    }\n});\nlb.AddTarget(myAutoScalingGroup);\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .healthCheck(HealthCheck.builder()\n                .port(80)\n                .build())\n        .build();\nlb.addTarget(myAutoScalingGroup);\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc iVpc\n\nvar myAutoScalingGroup autoScalingGroup\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n\thealthCheck: &healthCheck{\n\t\tport: jsii.Number(80),\n\t},\n})\nlb.addTarget(myAutoScalingGroup)\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.HealthCheck"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancing.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.IVpc;\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 19,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a0996368ad792a4bb89554d1744a10f2e49b69784c58c81624f10cdb52d03a3"
    },
    "bd6f9a4f885b8362a919c18140033ec05173372f97918a45011201f31cbd0db4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_elasticloadbalancing as elb\n\n# port: ec2.Port\n# security_group: ec2.SecurityGroup\n\nlistener_port = elb.ListenerPort(security_group, port)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ElasticLoadBalancing;\n\nPort port;\nSecurityGroup securityGroup;\n\nListenerPort listenerPort = new ListenerPort(securityGroup, port);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.elasticloadbalancing.*;\n\nPort port;\nSecurityGroup securityGroup;\n\nListenerPort listenerPort = new ListenerPort(securityGroup, port);",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport elb \"github.com/aws-samples/dummy/awscdkawselasticloadbalancing\"\n\nvar port port\nvar securityGroup securityGroup\n\nlistenerPort := elb.NewListenerPort(securityGroup, port)",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst listenerPort = new elb.ListenerPort(securityGroup, port);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.ListenerPort"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-elasticloadbalancing.ListenerPort"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst listenerPort = new elb.ListenerPort(securityGroup, port);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "bc471289c593a469a77b705f258e168c6ab70dcad8baaebf1eb4f62cc83fbf21"
    },
    "ace8c4e54cee872f28d71c07f7cf54ffffdd9ec818b2bf17204ff1077a05697d": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.IVpc\n\n# my_auto_scaling_group: autoscaling.AutoScalingGroup\n\nlb = elb.LoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True,\n    health_check=elb.HealthCheck(\n        port=80\n    )\n)\nlb.add_target(my_auto_scaling_group)\nlb.add_listener(\n    external_port=80\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true,\n    HealthCheck = new HealthCheck {\n        Port = 80\n    }\n});\nlb.AddTarget(myAutoScalingGroup);\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .healthCheck(HealthCheck.builder()\n                .port(80)\n                .build())\n        .build();\nlb.addTarget(myAutoScalingGroup);\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc iVpc\n\nvar myAutoScalingGroup autoScalingGroup\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n\thealthCheck: &healthCheck{\n\t\tport: jsii.Number(80),\n\t},\n})\nlb.addTarget(myAutoScalingGroup)\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancing.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.IVpc;\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 19,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a0996368ad792a4bb89554d1744a10f2e49b69784c58c81624f10cdb52d03a3"
    },
    "fef21f59d3203d2400bf8d7affb0c1b4a9371488067852aadba2852f44783ca8": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.IVpc\n\n# my_auto_scaling_group: autoscaling.AutoScalingGroup\n\nlb = elb.LoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True,\n    health_check=elb.HealthCheck(\n        port=80\n    )\n)\nlb.add_target(my_auto_scaling_group)\nlb.add_listener(\n    external_port=80\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true,\n    HealthCheck = new HealthCheck {\n        Port = 80\n    }\n});\nlb.AddTarget(myAutoScalingGroup);\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc;\n\nAutoScalingGroup myAutoScalingGroup;\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .healthCheck(HealthCheck.builder()\n                .port(80)\n                .build())\n        .build();\nlb.addTarget(myAutoScalingGroup);\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var vpc iVpc\n\nvar myAutoScalingGroup autoScalingGroup\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n\thealthCheck: &healthCheck{\n\t\tport: jsii.Number(80),\n\t},\n})\nlb.addTarget(myAutoScalingGroup)\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.IVpc;\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancing.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.IVpc;\n\ndeclare const myAutoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst lb = new elb.LoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n});\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n  externalPort: 80,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 19,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a0996368ad792a4bb89554d1744a10f2e49b69784c58c81624f10cdb52d03a3"
    },
    "5484b75efe57ee9b9b1373314dd04ba100eca02e2c5df4bfbdff6564a09cfa73": {
      "translations": {
        "python": {
          "source": "# cluster: ecs.Cluster\n# task_definition: ecs.TaskDefinition\n# vpc: ec2.Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service)",
          "version": "2"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service);",
          "version": "1"
        },
        "go": {
          "source": "var cluster cluster\nvar taskDefinition taskDefinition\nvar vpc vpc\n\nservice := ecs.NewEc2Service(this, jsii.String(\"Service\"), &ec2ServiceProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n})\n\nlb := elb.NewLoadBalancer(this, jsii.String(\"LB\"), &loadBalancerProps{\n\tvpc: vpc,\n})\nlb.addListener(&loadBalancerListener{\n\texternalPort: jsii.Number(80),\n})\nlb.addTarget(service)",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "0dc42aae6f8342e5623e720fc6ed292a530ee2af6dd943d7358fb0ee3067c325"
    }
  }
}