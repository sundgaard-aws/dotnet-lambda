{
  "version": "2",
  "toolVersion": "1.74.0",
  "snippets": {
    "9320ea460db7e95324b8d1e67cc0a05e275c8d93b962f303a01e1417ed6d9be4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_14_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = handler.toString()\")),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule.addTarget(targets.NewLambdaFunction(fn, &lambdaFunctionProps{\n\tdeadLetterQueue: queue,\n\t // Optional: add a dead letter queue\n\tmaxEventAge: cdk.duration.hours(jsii.Number(2)),\n\t // Optional: set the maxEventAge retry policy\n\tretryAttempts: jsii.Number(2),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 50
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e5bfd1bf629b593fd3fa7db82e3a95f1cf99b031f1f195bf5d0139d611a85f14"
    },
    "eab716e6eec9dfde4c884d5695e4734068e81d9eb286c8a7ccdafb49a46aa9b4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\",\n    log_group_name=\"MyLogGroup\"\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nrule.add_target(targets.CloudWatchLogGroup(log_group))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\", new LogGroupProps {\n    LogGroupName = \"MyLogGroup\"\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nrule.AddTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = LogGroup.Builder.create(this, \"MyLogGroup\")\n        .logGroupName(\"MyLogGroup\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nrule.addTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "go": {
          "source": "import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyLogGroup\"), &logGroupProps{\n\tlogGroupName: jsii.String(\"MyLogGroup\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nrule.addTarget(targets.NewCloudWatchLogGroup(logGroup))",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 81
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.CloudWatchLogGroup",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 15,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "aaef8bb029abe59fdb5c5a92a8571062e0fc44aef718c282bbbde51c23764afe"
    },
    "86801cd5a668214710852d9dfd01964f73ad5a7ed3720dc50461df769e679b64": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\n\n\nrepo = codecommit.Repository(self, \"MyRepo\",\n    repository_name=\"aws-cdk-codebuild-events\"\n)\n\nproject = codebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.code_commit(repository=repo)\n)\n\ndead_letter_queue = sqs.Queue(self, \"DeadLetterQueue\")\n\n# trigger a build when a commit is pushed to the repo\non_commit_rule = repo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project,\n        dead_letter_queue=dead_letter_queue\n    ),\n    branches=[\"master\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repo = new Repository(this, \"MyRepo\", new RepositoryProps {\n    RepositoryName = \"aws-cdk-codebuild-events\"\n});\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.CodeCommit(new CodeCommitSourceProps { Repository = repo })\n});\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project, new CodeBuildProjectProps {\n        DeadLetterQueue = deadLetterQueue\n    }),\n    Branches = new [] { \"master\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repo = Repository.Builder.create(this, \"MyRepo\")\n        .repositoryName(\"aws-cdk-codebuild-events\")\n        .build();\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .source(Source.codeCommit(CodeCommitSourceProps.builder().repository(repo).build()))\n        .build();\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(CodeBuildProject.Builder.create(project)\n                .deadLetterQueue(deadLetterQueue)\n                .build())\n        .branches(List.of(\"master\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\nimport codecommit \"github.com/aws-samples/dummy/awscdkawscodecommit\"\n\n\nrepo := codecommit.NewRepository(this, jsii.String(\"MyRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"aws-cdk-codebuild-events\"),\n})\n\nproject := codebuild.NewProject(this, jsii.String(\"MyProject\"), &projectProps{\n\tsource: codebuild.source.codeCommit(&codeCommitSourceProps{\n\t\trepository: repo,\n\t}),\n})\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\n// trigger a build when a commit is pushed to the repo\nonCommitRule := repo.onCommit(jsii.String(\"OnCommit\"), &onCommitOptions{\n\ttarget: targets.NewCodeBuildProject(project, &codeBuildProjectProps{\n\t\tdeadLetterQueue: deadLetterQueue,\n\t}),\n\tbranches: []*string{\n\t\tjsii.String(\"master\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 105
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events-targets.CodeBuildProjectProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 5,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d21823431a26755d803bc27f60abb37c6572798760082e89d99df34f59cdc41c"
    },
    "3dd6aba987ff4bb7dc6238a7a049f08410eb630454ceaad3d592b3310a9776f0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codepipeline as codepipeline\n\n\npipeline = codepipeline.Pipeline(self, \"Pipeline\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 hour)\")\n)\n\nrule.add_target(targets.CodePipeline(pipeline))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodePipeline;\n\n\nPipeline pipeline = new Pipeline(this, \"Pipeline\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 hour)\")\n});\n\nrule.AddTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codepipeline.*;\n\n\nPipeline pipeline = new Pipeline(this, \"Pipeline\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 hour)\"))\n        .build();\n\nrule.addTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "go": {
          "source": "import codepipeline \"github.com/aws-samples/dummy/awscdkawscodepipeline\"\n\n\npipeline := codepipeline.NewPipeline(this, jsii.String(\"Pipeline\"))\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.expression(jsii.String(\"rate(1 hour)\")),\n})\n\nrule.addTarget(targets.NewCodePipeline(pipeline))",
          "version": "1"
        },
        "$": {
          "source": "import * as codepipeline from '@aws-cdk/aws-codepipeline';\n\nconst pipeline = new codepipeline.Pipeline(this, 'Pipeline');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 hour)'),\n});\n\nrule.addTarget(new targets.CodePipeline(pipeline));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 134
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IPipeline",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-events-targets.CodePipeline",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'Pipeline');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 hour)'),\n});\n\nrule.addTarget(new targets.CodePipeline(pipeline));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1a533c6ac80a9d2d0ac3082b57af17410623e49918743c4b7a33a58a2b807240"
    },
    "2fd10466438dbcdad91fd1aca0bea886c0c422295abf298a8a55cd992d158a08": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10)))\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq,\n    role=role\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) })\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq,\n    Role = role\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .role(role)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport sfn \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n})\n\ndlq := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"events.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"SM\"), &stateMachineProps{\n\tdefinition: sfn.NewWait(this, jsii.String(\"Hello\"), &waitProps{\n\t\ttime: sfn.waitTime.duration(cdk.*duration.seconds(jsii.Number(10))),\n\t}),\n})\n\nrule.addTarget(targets.NewSfnStateMachine(stateMachine, &sfnStateMachineProps{\n\tinput: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"SomeParam\": jsii.String(\"SomeValue\"),\n\t}),\n\tdeadLetterQueue: dlq,\n\trole: role,\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 156
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 48,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "8a7cc72bb5b3eea201413fbf79d02adb28a2b512ffc06f8349774f1ddee085ab"
    },
    "96ffc46af48e78bc4d9c862a2a6582b38ccda25e09344c3ac790d113600ce375": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\nfrom aws_cdk.aws_ecs import ContainerImage\n\n\njob_queue = batch.JobQueue(self, \"MyQueue\",\n    compute_environments=[batch.JobQueueComputeEnvironment(\n        compute_environment=batch.ComputeEnvironment(self, \"ComputeEnvironment\",\n            managed=False\n        ),\n        order=1\n    )\n    ]\n)\n\njob_definition = batch.JobDefinition(self, \"MyJob\",\n    container=batch.JobDefinitionContainer(\n        image=ContainerImage.from_registry(\"test-repo\")\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.hours(1))\n)\n\nrule.add_target(targets.BatchJob(job_queue.job_queue_arn, job_queue, job_definition.job_definition_arn, job_definition,\n    dead_letter_queue=queue,\n    event=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    retry_attempts=2,\n    max_event_age=cdk.Duration.hours(2)\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nusing Amazon.CDK.AWS.ECS;\n\n\nJobQueue jobQueue = new JobQueue(this, \"MyQueue\", new JobQueueProps {\n    ComputeEnvironments = new [] { new JobQueueComputeEnvironment {\n        ComputeEnvironment = new ComputeEnvironment(this, \"ComputeEnvironment\", new ComputeEnvironmentProps {\n            Managed = false\n        }),\n        Order = 1\n    } }\n});\n\nJobDefinition jobDefinition = new JobDefinition(this, \"MyJob\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = ContainerImage.FromRegistry(\"test-repo\")\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Hours(1))\n});\n\nrule.AddTarget(new BatchJob(jobQueue.JobQueueArn, jobQueue, jobDefinition.JobDefinitionArn, jobDefinition, new BatchJobProps {\n    DeadLetterQueue = queue,\n    Event = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    RetryAttempts = 2,\n    MaxEventAge = Duration.Hours(2)\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nimport software.amazon.awscdk.services.ecs.ContainerImage;\n\n\nJobQueue jobQueue = JobQueue.Builder.create(this, \"MyQueue\")\n        .computeEnvironments(List.of(JobQueueComputeEnvironment.builder()\n                .computeEnvironment(ComputeEnvironment.Builder.create(this, \"ComputeEnvironment\")\n                        .managed(false)\n                        .build())\n                .order(1)\n                .build()))\n        .build();\n\nJobDefinition jobDefinition = JobDefinition.Builder.create(this, \"MyJob\")\n        .container(JobDefinitionContainer.builder()\n                .image(ContainerImage.fromRegistry(\"test-repo\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.hours(1)))\n        .build();\n\nrule.addTarget(BatchJob.Builder.create(jobQueue.getJobQueueArn(), jobQueue, jobDefinition.getJobDefinitionArn(), jobDefinition)\n        .deadLetterQueue(queue)\n        .event(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .retryAttempts(2)\n        .maxEventAge(Duration.hours(2))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import batch \"github.com/aws-samples/dummy/awscdkawsbatch\"\nimport \"github.com/aws-samples/dummy/awscdkawsecs\"\n\n\njobQueue := batch.NewJobQueue(this, jsii.String(\"MyQueue\"), &jobQueueProps{\n\tcomputeEnvironments: []jobQueueComputeEnvironment{\n\t\t&jobQueueComputeEnvironment{\n\t\t\tcomputeEnvironment: batch.NewComputeEnvironment(this, jsii.String(\"ComputeEnvironment\"), &computeEnvironmentProps{\n\t\t\t\tmanaged: jsii.Boolean(false),\n\t\t\t}),\n\t\t\torder: jsii.Number(1),\n\t\t},\n\t},\n})\n\njobDefinition := batch.NewJobDefinition(this, jsii.String(\"MyJob\"), &jobDefinitionProps{\n\tcontainer: &jobDefinitionContainer{\n\t\timage: *awscdkawsecs.ContainerImage.fromRegistry(jsii.String(\"test-repo\")),\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.hours(jsii.Number(1))),\n})\n\nrule.addTarget(targets.NewBatchJob(jobQueue.jobQueueArn, jobQueue, jobDefinition.jobDefinitionArn, jobDefinition, &batchJobProps{\n\tdeadLetterQueue: queue,\n\tevent: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"SomeParam\": jsii.String(\"SomeValue\"),\n\t}),\n\tretryAttempts: jsii.Number(2),\n\tmaxEventAge: cdk.*duration.hours(jsii.Number(2)),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 190
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.IComputeEnvironment",
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-batch.JobQueue",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-batch.JobQueueProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-events-targets.BatchJob",
        "@aws-cdk/aws-events-targets.BatchJobProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.IConstruct",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 9,
        "75": 53,
        "91": 1,
        "104": 5,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 6,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "49d8e55837bcd6341c9068ff014b0b7845c5d5b3e0c14ac987897ca54dde2257"
    },
    "4c42484bbe546bce0f41d067e3b8b3ba93c3186f517edfbee7e792affb61b741": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as api\nimport aws_cdk.aws_lambda as lambda_\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\nfn = lambda_.Function(self, \"MyFunc\",\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    code=lambda_.Code.from_inline(\"exports.handler = e => {}\")\n)\n\nrest_api = api.LambdaRestApi(self, \"MyRestAPI\", handler=fn)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrule.add_target(\n    targets.ApiGateway(rest_api,\n        path=\"/*/test\",\n        method=\"GET\",\n        stage=\"prod\",\n        path_parameter_values=[\"path-value\"],\n        header_parameters={\n            \"Header1\": \"header1\"\n        },\n        query_string_parameters={\n            \"QueryParam1\": \"query-param-1\"\n        },\n        dead_letter_queue=dlq\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.Lambda;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_14_X,\n    Code = Code.FromInline(\"exports.handler = e => {}\")\n});\n\nLambdaRestApi restApi = new LambdaRestApi(this, \"MyRestAPI\", new LambdaRestApiProps { Handler = fn });\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.AddTarget(\nnew ApiGateway(restApi, new ApiGatewayProps {\n    Path = \"/*/test\",\n    Method = \"GET\",\n    Stage = \"prod\",\n    PathParameterValues = new [] { \"path-value\" },\n    HeaderParameters = new Dictionary<string, string> {\n        { \"Header1\", \"header1\" }\n    },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"QueryParam1\", \"query-param-1\" }\n    },\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_14_X)\n        .code(Code.fromInline(\"exports.handler = e => {}\"))\n        .build();\n\nLambdaRestApi restApi = LambdaRestApi.Builder.create(this, \"MyRestAPI\").handler(fn).build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.addTarget(\nApiGateway.Builder.create(restApi)\n        .path(\"/*/test\")\n        .method(\"GET\")\n        .stage(\"prod\")\n        .pathParameterValues(List.of(\"path-value\"))\n        .headerParameters(Map.of(\n                \"Header1\", \"header1\"))\n        .queryStringParameters(Map.of(\n                \"QueryParam1\", \"query-param-1\"))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import api \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n})\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = e => {}\")),\n})\n\nrestApi := api.NewLambdaRestApi(this, jsii.String(\"MyRestAPI\"), &lambdaRestApiProps{\n\thandler: fn,\n})\n\ndlq := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\nrule.addTarget(\ntargets.NewApiGateway(restApi, &apiGatewayProps{\n\tpath: jsii.String(\"/*/test\"),\n\tmethod: jsii.String(\"GET\"),\n\tstage: jsii.String(\"prod\"),\n\tpathParameterValues: []*string{\n\t\tjsii.String(\"path-value\"),\n\t},\n\theaderParameters: map[string]*string{\n\t\t\"Header1\": jsii.String(\"header1\"),\n\t},\n\tqueryStringParameters: map[string]*string{\n\t\t\"QueryParam1\": jsii.String(\"query-param-1\"),\n\t},\n\tdeadLetterQueue: dlq,\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 236
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-events-targets.ApiGateway",
        "@aws-cdk/aws-events-targets.ApiGatewayProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 47,
        "104": 4,
        "192": 1,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "b186df55f0180a640413c2c778d70c52bc62365ec4548b7812f1f05efb7aeae4"
    },
    "95381f42358b6a2690de81a807446d47e5ca2f3190f6f736c22d6bfc95f380b7": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), *awscdkcore.SecretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 278
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "c132d3110db5dfcd2d75d88a3612c8422c27dd0eababf983aadbfe0f227d6745"
    },
    "60c6f5c129ee82ec279fd4f27ef6be5001a1646f908c504a1c585dda76e0f3eb": {
      "translations": {
        "python": {
          "source": "rule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 minute)\")\n)\n\nrule.add_target(targets.EventBus(\n    events.EventBus.from_event_bus_arn(self, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")))",
          "version": "2"
        },
        "csharp": {
          "source": "Rule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 minute)\")\n});\n\nrule.AddTarget(new EventBus(EventBus.FromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "java": {
          "source": "Rule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .build();\n\nrule.addTarget(new EventBus(EventBus.fromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "go": {
          "source": "rule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.expression(jsii.String(\"rate(1 minute)\")),\n})\n\nrule.addTarget(targets.NewEventBus(events.eventBus.fromEventBusArn(this, jsii.String(\"External\"), jsii.String(\"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\"))))",
          "version": "1"
        },
        "$": {
          "source": "const rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 302
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.EventBus",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBus#fromEventBusArn",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 14,
        "104": 2,
        "193": 1,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "1587f60599b3f4c527e3eb61485e5bb03b31131bffe4469da6649a13c176145a"
    },
    "79970440195ec1a989d90ad20a0b45183f2d1352fa8a8eceb98542b76623c476": {
      "translations": {
        "python": {
          "source": "connection = events.Connection(self, \"Connection\",\n    authorization=events.Authorization.api_key(\"x-api-key\", SecretValue.secrets_manager(\"ApiSecretName\")),\n    description=\"Connection with API Key x-api-key\"\n)\n\ndestination = events.ApiDestination(self, \"Destination\",\n    connection=connection,\n    endpoint=\"https://example.com\",\n    description=\"Calling example.com with API key x-api-key\"\n)\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1)),\n    targets=[targets.ApiDestination(destination)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Connection connection = new Connection(this, \"Connection\", new ConnectionProps {\n    Authorization = Authorization.ApiKey(\"x-api-key\", SecretValue.SecretsManager(\"ApiSecretName\")),\n    Description = \"Connection with API Key x-api-key\"\n});\n\nApiDestination destination = new ApiDestination(this, \"Destination\", new ApiDestinationProps {\n    Connection = connection,\n    Endpoint = \"https://example.com\",\n    Description = \"Calling example.com with API key x-api-key\"\n});\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1)),\n    Targets = new [] { new ApiDestination(destination) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Connection connection = Connection.Builder.create(this, \"Connection\")\n        .authorization(Authorization.apiKey(\"x-api-key\", SecretValue.secretsManager(\"ApiSecretName\")))\n        .description(\"Connection with API Key x-api-key\")\n        .build();\n\nApiDestination destination = ApiDestination.Builder.create(this, \"Destination\")\n        .connection(connection)\n        .endpoint(\"https://example.com\")\n        .description(\"Calling example.com with API key x-api-key\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .targets(List.of(new ApiDestination(destination)))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "connection := events.NewConnection(this, jsii.String(\"Connection\"), &connectionProps{\n\tauthorization: events.authorization.apiKey(jsii.String(\"x-api-key\"), *awscdkcore.SecretValue.secretsManager(jsii.String(\"ApiSecretName\"))),\n\tdescription: jsii.String(\"Connection with API Key x-api-key\"),\n})\n\ndestination := events.NewApiDestination(this, jsii.String(\"Destination\"), &apiDestinationProps{\n\tconnection: connection,\n\tendpoint: jsii.String(\"https://example.com\"),\n\tdescription: jsii.String(\"Calling example.com with API key x-api-key\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n\ttargets: []iRuleTarget{\n\t\ttargets.NewApiDestination(destination),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.ApiDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestination",
        "@aws-cdk/aws-events.ApiDestination",
        "@aws-cdk/aws-events.ApiDestinationProps",
        "@aws-cdk/aws-events.Authorization",
        "@aws-cdk/aws-events.Authorization#apiKey",
        "@aws-cdk/aws-events.Connection",
        "@aws-cdk/aws-events.ConnectionProps",
        "@aws-cdk/aws-events.IApiDestination",
        "@aws-cdk/aws-events.IConnection",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst connection = new events.Connection(this, 'Connection', {\n  authorization: events.Authorization.apiKey('x-api-key', SecretValue.secretsManager('ApiSecretName')),\n  description: 'Connection with API Key x-api-key',\n});\n\nconst destination = new events.ApiDestination(this, 'Destination', {\n  connection,\n  endpoint: 'https://example.com',\n  description: 'Calling example.com with API key x-api-key',\n});\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.ApiDestination(destination)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 30,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 11,
        "196": 4,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "c132d3110db5dfcd2d75d88a3612c8422c27dd0eababf983aadbfe0f227d6745"
    },
    "cf66a410e3d3bbb436985f207d9c27dc15052e306998108a472de82e42b2f601": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# queue: sqs.Queue\n# role: iam.Role\n# rule_target_input: events.RuleTargetInput\n\napi_destination_props = events_targets.ApiDestinationProps(\n    dead_letter_queue=queue,\n    event=rule_target_input,\n    event_role=role,\n    header_parameters={\n        \"header_parameters_key\": \"headerParameters\"\n    },\n    max_event_age=cdk.Duration.minutes(30),\n    path_parameter_values=[\"pathParameterValues\"],\n    query_string_parameters={\n        \"query_string_parameters_key\": \"queryStringParameters\"\n    },\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nQueue queue;\nRole role;\nRuleTargetInput ruleTargetInput;\nApiDestinationProps apiDestinationProps = new ApiDestinationProps {\n    DeadLetterQueue = queue,\n    Event = ruleTargetInput,\n    EventRole = role,\n    HeaderParameters = new Dictionary<string, string> {\n        { \"headerParametersKey\", \"headerParameters\" }\n    },\n    MaxEventAge = Duration.Minutes(30),\n    PathParameterValues = new [] { \"pathParameterValues\" },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"queryStringParametersKey\", \"queryStringParameters\" }\n    },\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nQueue queue;\nRole role;\nRuleTargetInput ruleTargetInput;\n\nApiDestinationProps apiDestinationProps = ApiDestinationProps.builder()\n        .deadLetterQueue(queue)\n        .event(ruleTargetInput)\n        .eventRole(role)\n        .headerParameters(Map.of(\n                \"headerParametersKey\", \"headerParameters\"))\n        .maxEventAge(Duration.minutes(30))\n        .pathParameterValues(List.of(\"pathParameterValues\"))\n        .queryStringParameters(Map.of(\n                \"queryStringParametersKey\", \"queryStringParameters\"))\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport sqs \"github.com/aws-samples/dummy/awscdkawssqs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar queue queue\nvar role role\nvar ruleTargetInput ruleTargetInput\n\napiDestinationProps := &apiDestinationProps{\n\tdeadLetterQueue: queue,\n\tevent: ruleTargetInput,\n\teventRole: role,\n\theaderParameters: map[string]*string{\n\t\t\"headerParametersKey\": jsii.String(\"headerParameters\"),\n\t},\n\tmaxEventAge: cdk.duration.minutes(jsii.Number(30)),\n\tpathParameterValues: []*string{\n\t\tjsii.String(\"pathParameterValues\"),\n\t},\n\tqueryStringParameters: map[string]*string{\n\t\t\"queryStringParametersKey\": jsii.String(\"queryStringParameters\"),\n\t},\n\tretryAttempts: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const ruleTargetInput: events.RuleTargetInput;\nconst apiDestinationProps: events_targets.ApiDestinationProps = {\n  deadLetterQueue: queue,\n  event: ruleTargetInput,\n  eventRole: role,\n  headerParameters: {\n    headerParametersKey: 'headerParameters',\n  },\n  maxEventAge: cdk.Duration.minutes(30),\n  pathParameterValues: ['pathParameterValues'],\n  queryStringParameters: {\n    queryStringParametersKey: 'queryStringParameters',\n  },\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.ApiDestinationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ApiDestinationProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\ndeclare const ruleTargetInput: events.RuleTargetInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst apiDestinationProps: events_targets.ApiDestinationProps = {\n  deadLetterQueue: queue,\n  event: ruleTargetInput,\n  eventRole: role,\n  headerParameters: {\n    headerParametersKey: 'headerParameters',\n  },\n  maxEventAge: cdk.Duration.minutes(30),\n  pathParameterValues: ['pathParameterValues'],\n  queryStringParameters: {\n    queryStringParametersKey: 'queryStringParameters',\n  },\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 33,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 5,
        "255": 5,
        "256": 5,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "7b3bedf16b16e1f57f560cc2ebcb74c2a93056b3f79eb4fc7020e8dbed36f854"
    },
    "aaf8594a88a8b05a1f9df84021e527c4361130ef573731d7d2d2958638fa09f6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as api\nimport aws_cdk.aws_lambda as lambda_\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\nfn = lambda_.Function(self, \"MyFunc\",\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    code=lambda_.Code.from_inline(\"exports.handler = e => {}\")\n)\n\nrest_api = api.LambdaRestApi(self, \"MyRestAPI\", handler=fn)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrule.add_target(\n    targets.ApiGateway(rest_api,\n        path=\"/*/test\",\n        method=\"GET\",\n        stage=\"prod\",\n        path_parameter_values=[\"path-value\"],\n        header_parameters={\n            \"Header1\": \"header1\"\n        },\n        query_string_parameters={\n            \"QueryParam1\": \"query-param-1\"\n        },\n        dead_letter_queue=dlq\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.Lambda;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_14_X,\n    Code = Code.FromInline(\"exports.handler = e => {}\")\n});\n\nLambdaRestApi restApi = new LambdaRestApi(this, \"MyRestAPI\", new LambdaRestApiProps { Handler = fn });\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.AddTarget(\nnew ApiGateway(restApi, new ApiGatewayProps {\n    Path = \"/*/test\",\n    Method = \"GET\",\n    Stage = \"prod\",\n    PathParameterValues = new [] { \"path-value\" },\n    HeaderParameters = new Dictionary<string, string> {\n        { \"Header1\", \"header1\" }\n    },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"QueryParam1\", \"query-param-1\" }\n    },\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_14_X)\n        .code(Code.fromInline(\"exports.handler = e => {}\"))\n        .build();\n\nLambdaRestApi restApi = LambdaRestApi.Builder.create(this, \"MyRestAPI\").handler(fn).build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.addTarget(\nApiGateway.Builder.create(restApi)\n        .path(\"/*/test\")\n        .method(\"GET\")\n        .stage(\"prod\")\n        .pathParameterValues(List.of(\"path-value\"))\n        .headerParameters(Map.of(\n                \"Header1\", \"header1\"))\n        .queryStringParameters(Map.of(\n                \"QueryParam1\", \"query-param-1\"))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import api \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n})\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = e => {}\")),\n})\n\nrestApi := api.NewLambdaRestApi(this, jsii.String(\"MyRestAPI\"), &lambdaRestApiProps{\n\thandler: fn,\n})\n\ndlq := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\nrule.addTarget(\ntargets.NewApiGateway(restApi, &apiGatewayProps{\n\tpath: jsii.String(\"/*/test\"),\n\tmethod: jsii.String(\"GET\"),\n\tstage: jsii.String(\"prod\"),\n\tpathParameterValues: []*string{\n\t\tjsii.String(\"path-value\"),\n\t},\n\theaderParameters: map[string]*string{\n\t\t\"Header1\": jsii.String(\"header1\"),\n\t},\n\tqueryStringParameters: map[string]*string{\n\t\t\"QueryParam1\": jsii.String(\"query-param-1\"),\n\t},\n\tdeadLetterQueue: dlq,\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.ApiGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-events-targets.ApiGateway",
        "@aws-cdk/aws-events-targets.ApiGatewayProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 47,
        "104": 4,
        "192": 1,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "b186df55f0180a640413c2c778d70c52bc62365ec4548b7812f1f05efb7aeae4"
    },
    "fedc5cb29ad741452d8c34ce62c3d7e76fb328b422c3fe5c1aee37bc1de38980": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as api\nimport aws_cdk.aws_lambda as lambda_\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\nfn = lambda_.Function(self, \"MyFunc\",\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    code=lambda_.Code.from_inline(\"exports.handler = e => {}\")\n)\n\nrest_api = api.LambdaRestApi(self, \"MyRestAPI\", handler=fn)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrule.add_target(\n    targets.ApiGateway(rest_api,\n        path=\"/*/test\",\n        method=\"GET\",\n        stage=\"prod\",\n        path_parameter_values=[\"path-value\"],\n        header_parameters={\n            \"Header1\": \"header1\"\n        },\n        query_string_parameters={\n            \"QueryParam1\": \"query-param-1\"\n        },\n        dead_letter_queue=dlq\n    ))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.Lambda;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_14_X,\n    Code = Code.FromInline(\"exports.handler = e => {}\")\n});\n\nLambdaRestApi restApi = new LambdaRestApi(this, \"MyRestAPI\", new LambdaRestApiProps { Handler = fn });\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.AddTarget(\nnew ApiGateway(restApi, new ApiGatewayProps {\n    Path = \"/*/test\",\n    Method = \"GET\",\n    Stage = \"prod\",\n    PathParameterValues = new [] { \"path-value\" },\n    HeaderParameters = new Dictionary<string, string> {\n        { \"Header1\", \"header1\" }\n    },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"QueryParam1\", \"query-param-1\" }\n    },\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_14_X)\n        .code(Code.fromInline(\"exports.handler = e => {}\"))\n        .build();\n\nLambdaRestApi restApi = LambdaRestApi.Builder.create(this, \"MyRestAPI\").handler(fn).build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.addTarget(\nApiGateway.Builder.create(restApi)\n        .path(\"/*/test\")\n        .method(\"GET\")\n        .stage(\"prod\")\n        .pathParameterValues(List.of(\"path-value\"))\n        .headerParameters(Map.of(\n                \"Header1\", \"header1\"))\n        .queryStringParameters(Map.of(\n                \"QueryParam1\", \"query-param-1\"))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import api \"github.com/aws-samples/dummy/awscdkawsapigateway\"\nimport lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n})\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\thandler: jsii.String(\"index.handler\"),\n\truntime: lambda.runtime_NODEJS_14_X(),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = e => {}\")),\n})\n\nrestApi := api.NewLambdaRestApi(this, jsii.String(\"MyRestAPI\"), &lambdaRestApiProps{\n\thandler: fn,\n})\n\ndlq := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\nrule.addTarget(\ntargets.NewApiGateway(restApi, &apiGatewayProps{\n\tpath: jsii.String(\"/*/test\"),\n\tmethod: jsii.String(\"GET\"),\n\tstage: jsii.String(\"prod\"),\n\tpathParameterValues: []*string{\n\t\tjsii.String(\"path-value\"),\n\t},\n\theaderParameters: map[string]*string{\n\t\t\"Header1\": jsii.String(\"header1\"),\n\t},\n\tqueryStringParameters: map[string]*string{\n\t\t\"QueryParam1\": jsii.String(\"query-param-1\"),\n\t},\n\tdeadLetterQueue: dlq,\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.ApiGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-events-targets.ApiGateway",
        "@aws-cdk/aws-events-targets.ApiGatewayProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 47,
        "104": 4,
        "192": 1,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "b186df55f0180a640413c2c778d70c52bc62365ec4548b7812f1f05efb7aeae4"
    },
    "47e8f531bf936c16ea027d32867fe99a166519d82e8eca75a5cde3efec9a6ac5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_iam as iam\n\n# parameters: Any\n# policy_statement: iam.PolicyStatement\n\naws_api = events_targets.AwsApi(\n    action=\"action\",\n    service=\"service\",\n\n    # the properties below are optional\n    api_version=\"apiVersion\",\n    catch_error_pattern=\"catchErrorPattern\",\n    parameters=parameters,\n    policy_statement=policy_statement\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.IAM;\n\nvar parameters;\nPolicyStatement policyStatement;\n\nAwsApi awsApi = new AwsApi(new AwsApiProps {\n    Action = \"action\",\n    Service = \"service\",\n\n    // the properties below are optional\n    ApiVersion = \"apiVersion\",\n    CatchErrorPattern = \"catchErrorPattern\",\n    Parameters = parameters,\n    PolicyStatement = policyStatement\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.iam.*;\n\nObject parameters;\nPolicyStatement policyStatement;\n\nAwsApi awsApi = AwsApi.Builder.create()\n        .action(\"action\")\n        .service(\"service\")\n\n        // the properties below are optional\n        .apiVersion(\"apiVersion\")\n        .catchErrorPattern(\"catchErrorPattern\")\n        .parameters(parameters)\n        .policyStatement(policyStatement)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar parameters interface{}\nvar policyStatement policyStatement\n\nawsApi := events_targets.NewAwsApi(&awsApiProps{\n\taction: jsii.String(\"action\"),\n\tservice: jsii.String(\"service\"),\n\n\t// the properties below are optional\n\tapiVersion: jsii.String(\"apiVersion\"),\n\tcatchErrorPattern: jsii.String(\"catchErrorPattern\"),\n\tparameters: parameters,\n\tpolicyStatement: policyStatement,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const parameters: any;\ndeclare const policyStatement: iam.PolicyStatement;\nconst awsApi = new events_targets.AwsApi({\n  action: 'action',\n  service: 'service',\n\n  // the properties below are optional\n  apiVersion: 'apiVersion',\n  catchErrorPattern: 'catchErrorPattern',\n  parameters: parameters,\n  policyStatement: policyStatement,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.AwsApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.AwsApi",
        "@aws-cdk/aws-events-targets.AwsApiProps",
        "@aws-cdk/aws-iam.PolicyStatement"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const parameters: any;\ndeclare const policyStatement: iam.PolicyStatement;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsApi = new events_targets.AwsApi({\n  action: 'action',\n  service: 'service',\n\n  // the properties below are optional\n  apiVersion: 'apiVersion',\n  catchErrorPattern: 'catchErrorPattern',\n  parameters: parameters,\n  policyStatement: policyStatement,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "214bdac30ca4ef824da4a1cefeb9ff86ca28b425b258050337a3c730ac415975"
    },
    "104cba4190c1b98c60501f37b9a668c4c50e91073150781497f0378375e7a5c0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\n\n# parameters: Any\n\naws_api_input = events_targets.AwsApiInput(\n    action=\"action\",\n    service=\"service\",\n\n    # the properties below are optional\n    api_version=\"apiVersion\",\n    catch_error_pattern=\"catchErrorPattern\",\n    parameters=parameters\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\n\nvar parameters;\n\nAwsApiInput awsApiInput = new AwsApiInput {\n    Action = \"action\",\n    Service = \"service\",\n\n    // the properties below are optional\n    ApiVersion = \"apiVersion\",\n    CatchErrorPattern = \"catchErrorPattern\",\n    Parameters = parameters\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\n\nObject parameters;\n\nAwsApiInput awsApiInput = AwsApiInput.builder()\n        .action(\"action\")\n        .service(\"service\")\n\n        // the properties below are optional\n        .apiVersion(\"apiVersion\")\n        .catchErrorPattern(\"catchErrorPattern\")\n        .parameters(parameters)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\nvar parameters interface{}\n\nawsApiInput := &awsApiInput{\n\taction: jsii.String(\"action\"),\n\tservice: jsii.String(\"service\"),\n\n\t// the properties below are optional\n\tapiVersion: jsii.String(\"apiVersion\"),\n\tcatchErrorPattern: jsii.String(\"catchErrorPattern\"),\n\tparameters: parameters,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n\ndeclare const parameters: any;\nconst awsApiInput: events_targets.AwsApiInput = {\n  action: 'action',\n  service: 'service',\n\n  // the properties below are optional\n  apiVersion: 'apiVersion',\n  catchErrorPattern: 'catchErrorPattern',\n  parameters: parameters,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.AwsApiInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.AwsApiInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n\ndeclare const parameters: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsApiInput: events_targets.AwsApiInput = {\n  action: 'action',\n  service: 'service',\n\n  // the properties below are optional\n  apiVersion: 'apiVersion',\n  catchErrorPattern: 'catchErrorPattern',\n  parameters: parameters,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "491aa75956a19be21f45293692a2de3aab4667d84a13e12fd96fbfedebe72fcf"
    },
    "f7346895e2bf539791b1e58a3c5798244d2699e9161db024b08e442f56b8856b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_iam as iam\n\n# parameters: Any\n# policy_statement: iam.PolicyStatement\n\naws_api_props = events_targets.AwsApiProps(\n    action=\"action\",\n    service=\"service\",\n\n    # the properties below are optional\n    api_version=\"apiVersion\",\n    catch_error_pattern=\"catchErrorPattern\",\n    parameters=parameters,\n    policy_statement=policy_statement\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.IAM;\n\nvar parameters;\nPolicyStatement policyStatement;\n\nAwsApiProps awsApiProps = new AwsApiProps {\n    Action = \"action\",\n    Service = \"service\",\n\n    // the properties below are optional\n    ApiVersion = \"apiVersion\",\n    CatchErrorPattern = \"catchErrorPattern\",\n    Parameters = parameters,\n    PolicyStatement = policyStatement\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.iam.*;\n\nObject parameters;\nPolicyStatement policyStatement;\n\nAwsApiProps awsApiProps = AwsApiProps.builder()\n        .action(\"action\")\n        .service(\"service\")\n\n        // the properties below are optional\n        .apiVersion(\"apiVersion\")\n        .catchErrorPattern(\"catchErrorPattern\")\n        .parameters(parameters)\n        .policyStatement(policyStatement)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar parameters interface{}\nvar policyStatement policyStatement\n\nawsApiProps := &awsApiProps{\n\taction: jsii.String(\"action\"),\n\tservice: jsii.String(\"service\"),\n\n\t// the properties below are optional\n\tapiVersion: jsii.String(\"apiVersion\"),\n\tcatchErrorPattern: jsii.String(\"catchErrorPattern\"),\n\tparameters: parameters,\n\tpolicyStatement: policyStatement,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const parameters: any;\ndeclare const policyStatement: iam.PolicyStatement;\nconst awsApiProps: events_targets.AwsApiProps = {\n  action: 'action',\n  service: 'service',\n\n  // the properties below are optional\n  apiVersion: 'apiVersion',\n  catchErrorPattern: 'catchErrorPattern',\n  parameters: parameters,\n  policyStatement: policyStatement,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.AwsApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.AwsApiProps",
        "@aws-cdk/aws-iam.PolicyStatement"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const parameters: any;\ndeclare const policyStatement: iam.PolicyStatement;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst awsApiProps: events_targets.AwsApiProps = {\n  action: 'action',\n  service: 'service',\n\n  // the properties below are optional\n  apiVersion: 'apiVersion',\n  catchErrorPattern: 'catchErrorPattern',\n  parameters: parameters,\n  policyStatement: policyStatement,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "125": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "a3efe7dfd7199ec78189b7ebd364aa13c34aa28f42cc61b10690e2ff44f39fd7"
    },
    "adbb7afab35ae4fcc0d20a53e6f15cdca5cda6a1ea4b51e720cb1e7b578107f6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\nfrom aws_cdk.aws_ecs import ContainerImage\n\n\njob_queue = batch.JobQueue(self, \"MyQueue\",\n    compute_environments=[batch.JobQueueComputeEnvironment(\n        compute_environment=batch.ComputeEnvironment(self, \"ComputeEnvironment\",\n            managed=False\n        ),\n        order=1\n    )\n    ]\n)\n\njob_definition = batch.JobDefinition(self, \"MyJob\",\n    container=batch.JobDefinitionContainer(\n        image=ContainerImage.from_registry(\"test-repo\")\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.hours(1))\n)\n\nrule.add_target(targets.BatchJob(job_queue.job_queue_arn, job_queue, job_definition.job_definition_arn, job_definition,\n    dead_letter_queue=queue,\n    event=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    retry_attempts=2,\n    max_event_age=cdk.Duration.hours(2)\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nusing Amazon.CDK.AWS.ECS;\n\n\nJobQueue jobQueue = new JobQueue(this, \"MyQueue\", new JobQueueProps {\n    ComputeEnvironments = new [] { new JobQueueComputeEnvironment {\n        ComputeEnvironment = new ComputeEnvironment(this, \"ComputeEnvironment\", new ComputeEnvironmentProps {\n            Managed = false\n        }),\n        Order = 1\n    } }\n});\n\nJobDefinition jobDefinition = new JobDefinition(this, \"MyJob\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = ContainerImage.FromRegistry(\"test-repo\")\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Hours(1))\n});\n\nrule.AddTarget(new BatchJob(jobQueue.JobQueueArn, jobQueue, jobDefinition.JobDefinitionArn, jobDefinition, new BatchJobProps {\n    DeadLetterQueue = queue,\n    Event = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    RetryAttempts = 2,\n    MaxEventAge = Duration.Hours(2)\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nimport software.amazon.awscdk.services.ecs.ContainerImage;\n\n\nJobQueue jobQueue = JobQueue.Builder.create(this, \"MyQueue\")\n        .computeEnvironments(List.of(JobQueueComputeEnvironment.builder()\n                .computeEnvironment(ComputeEnvironment.Builder.create(this, \"ComputeEnvironment\")\n                        .managed(false)\n                        .build())\n                .order(1)\n                .build()))\n        .build();\n\nJobDefinition jobDefinition = JobDefinition.Builder.create(this, \"MyJob\")\n        .container(JobDefinitionContainer.builder()\n                .image(ContainerImage.fromRegistry(\"test-repo\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.hours(1)))\n        .build();\n\nrule.addTarget(BatchJob.Builder.create(jobQueue.getJobQueueArn(), jobQueue, jobDefinition.getJobDefinitionArn(), jobDefinition)\n        .deadLetterQueue(queue)\n        .event(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .retryAttempts(2)\n        .maxEventAge(Duration.hours(2))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import batch \"github.com/aws-samples/dummy/awscdkawsbatch\"\nimport \"github.com/aws-samples/dummy/awscdkawsecs\"\n\n\njobQueue := batch.NewJobQueue(this, jsii.String(\"MyQueue\"), &jobQueueProps{\n\tcomputeEnvironments: []jobQueueComputeEnvironment{\n\t\t&jobQueueComputeEnvironment{\n\t\t\tcomputeEnvironment: batch.NewComputeEnvironment(this, jsii.String(\"ComputeEnvironment\"), &computeEnvironmentProps{\n\t\t\t\tmanaged: jsii.Boolean(false),\n\t\t\t}),\n\t\t\torder: jsii.Number(1),\n\t\t},\n\t},\n})\n\njobDefinition := batch.NewJobDefinition(this, jsii.String(\"MyJob\"), &jobDefinitionProps{\n\tcontainer: &jobDefinitionContainer{\n\t\timage: *awscdkawsecs.ContainerImage.fromRegistry(jsii.String(\"test-repo\")),\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.hours(jsii.Number(1))),\n})\n\nrule.addTarget(targets.NewBatchJob(jobQueue.jobQueueArn, jobQueue, jobDefinition.jobDefinitionArn, jobDefinition, &batchJobProps{\n\tdeadLetterQueue: queue,\n\tevent: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"SomeParam\": jsii.String(\"SomeValue\"),\n\t}),\n\tretryAttempts: jsii.Number(2),\n\tmaxEventAge: cdk.*duration.hours(jsii.Number(2)),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.BatchJob"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.IComputeEnvironment",
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-batch.JobQueue",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-batch.JobQueueProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-events-targets.BatchJob",
        "@aws-cdk/aws-events-targets.BatchJobProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.IConstruct",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 9,
        "75": 53,
        "91": 1,
        "104": 5,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 6,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "49d8e55837bcd6341c9068ff014b0b7845c5d5b3e0c14ac987897ca54dde2257"
    },
    "e680b34913b17226ff27a612ef23b15ab48db7aaa4f8e6df9d1b7ede0d4ed552": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\nfrom aws_cdk.aws_ecs import ContainerImage\n\n\njob_queue = batch.JobQueue(self, \"MyQueue\",\n    compute_environments=[batch.JobQueueComputeEnvironment(\n        compute_environment=batch.ComputeEnvironment(self, \"ComputeEnvironment\",\n            managed=False\n        ),\n        order=1\n    )\n    ]\n)\n\njob_definition = batch.JobDefinition(self, \"MyJob\",\n    container=batch.JobDefinitionContainer(\n        image=ContainerImage.from_registry(\"test-repo\")\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.hours(1))\n)\n\nrule.add_target(targets.BatchJob(job_queue.job_queue_arn, job_queue, job_definition.job_definition_arn, job_definition,\n    dead_letter_queue=queue,\n    event=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    retry_attempts=2,\n    max_event_age=cdk.Duration.hours(2)\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nusing Amazon.CDK.AWS.ECS;\n\n\nJobQueue jobQueue = new JobQueue(this, \"MyQueue\", new JobQueueProps {\n    ComputeEnvironments = new [] { new JobQueueComputeEnvironment {\n        ComputeEnvironment = new ComputeEnvironment(this, \"ComputeEnvironment\", new ComputeEnvironmentProps {\n            Managed = false\n        }),\n        Order = 1\n    } }\n});\n\nJobDefinition jobDefinition = new JobDefinition(this, \"MyJob\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = ContainerImage.FromRegistry(\"test-repo\")\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Hours(1))\n});\n\nrule.AddTarget(new BatchJob(jobQueue.JobQueueArn, jobQueue, jobDefinition.JobDefinitionArn, jobDefinition, new BatchJobProps {\n    DeadLetterQueue = queue,\n    Event = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    RetryAttempts = 2,\n    MaxEventAge = Duration.Hours(2)\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nimport software.amazon.awscdk.services.ecs.ContainerImage;\n\n\nJobQueue jobQueue = JobQueue.Builder.create(this, \"MyQueue\")\n        .computeEnvironments(List.of(JobQueueComputeEnvironment.builder()\n                .computeEnvironment(ComputeEnvironment.Builder.create(this, \"ComputeEnvironment\")\n                        .managed(false)\n                        .build())\n                .order(1)\n                .build()))\n        .build();\n\nJobDefinition jobDefinition = JobDefinition.Builder.create(this, \"MyJob\")\n        .container(JobDefinitionContainer.builder()\n                .image(ContainerImage.fromRegistry(\"test-repo\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.hours(1)))\n        .build();\n\nrule.addTarget(BatchJob.Builder.create(jobQueue.getJobQueueArn(), jobQueue, jobDefinition.getJobDefinitionArn(), jobDefinition)\n        .deadLetterQueue(queue)\n        .event(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .retryAttempts(2)\n        .maxEventAge(Duration.hours(2))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import batch \"github.com/aws-samples/dummy/awscdkawsbatch\"\nimport \"github.com/aws-samples/dummy/awscdkawsecs\"\n\n\njobQueue := batch.NewJobQueue(this, jsii.String(\"MyQueue\"), &jobQueueProps{\n\tcomputeEnvironments: []jobQueueComputeEnvironment{\n\t\t&jobQueueComputeEnvironment{\n\t\t\tcomputeEnvironment: batch.NewComputeEnvironment(this, jsii.String(\"ComputeEnvironment\"), &computeEnvironmentProps{\n\t\t\t\tmanaged: jsii.Boolean(false),\n\t\t\t}),\n\t\t\torder: jsii.Number(1),\n\t\t},\n\t},\n})\n\njobDefinition := batch.NewJobDefinition(this, jsii.String(\"MyJob\"), &jobDefinitionProps{\n\tcontainer: &jobDefinitionContainer{\n\t\timage: *awscdkawsecs.ContainerImage.fromRegistry(jsii.String(\"test-repo\")),\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.hours(jsii.Number(1))),\n})\n\nrule.addTarget(targets.NewBatchJob(jobQueue.jobQueueArn, jobQueue, jobDefinition.jobDefinitionArn, jobDefinition, &batchJobProps{\n\tdeadLetterQueue: queue,\n\tevent: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"SomeParam\": jsii.String(\"SomeValue\"),\n\t}),\n\tretryAttempts: jsii.Number(2),\n\tmaxEventAge: cdk.*duration.hours(jsii.Number(2)),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.BatchJobProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.IComputeEnvironment",
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-batch.JobQueue",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-batch.JobQueueProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-events-targets.BatchJob",
        "@aws-cdk/aws-events-targets.BatchJobProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.IConstruct",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 9,
        "75": 53,
        "91": 1,
        "104": 5,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 6,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "49d8e55837bcd6341c9068ff014b0b7845c5d5b3e0c14ac987897ca54dde2257"
    },
    "6db6c18b3555c03c3a8e22fef7119aa7bec932775676c445d2a341ac6f3d7a54": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\",\n    log_group_name=\"MyLogGroup\"\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nrule.add_target(targets.CloudWatchLogGroup(log_group))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\", new LogGroupProps {\n    LogGroupName = \"MyLogGroup\"\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nrule.AddTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = LogGroup.Builder.create(this, \"MyLogGroup\")\n        .logGroupName(\"MyLogGroup\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nrule.addTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "go": {
          "source": "import logs \"github.com/aws-samples/dummy/awscdkawslogs\"\n\n\nlogGroup := logs.NewLogGroup(this, jsii.String(\"MyLogGroup\"), &logGroupProps{\n\tlogGroupName: jsii.String(\"MyLogGroup\"),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nrule.addTarget(targets.NewCloudWatchLogGroup(logGroup))",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CloudWatchLogGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.CloudWatchLogGroup",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 15,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "aaef8bb029abe59fdb5c5a92a8571062e0fc44aef718c282bbbde51c23764afe"
    },
    "931d85cac1049233be1ecc88fc1f1f0aea23069c12394c8c6f4041524490d407": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_sns as sns\nimport aws_cdk.aws_events_targets as targets\n\n# repo: codecommit.Repository\n# project: codebuild.PipelineProject\n# my_topic: sns.Topic\n\n\n# starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.on_commit(\"CommitToMaster\",\n    target=targets.CodeBuildProject(project),\n    branches=[\"master\"]\n)\n\n# publishes a message to an Amazon SNS topic when a comment is made on a pull request\nrule = repo.on_comment_on_pull_request(\"CommentOnPullRequest\",\n    target=targets.SnsTopic(my_topic)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRepository repo;\nPipelineProject project;\nTopic myTopic;\n\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.OnCommit(\"CommitToMaster\", new OnCommitOptions {\n    Target = new CodeBuildProject(project),\n    Branches = new [] { \"master\" }\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nRule rule = repo.OnCommentOnPullRequest(\"CommentOnPullRequest\", new OnEventOptions {\n    Target = new SnsTopic(myTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRepository repo;\nPipelineProject project;\nTopic myTopic;\n\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit(\"CommitToMaster\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .branches(List.of(\"master\"))\n        .build());\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nRule rule = repo.onCommentOnPullRequest(\"CommentOnPullRequest\", OnEventOptions.builder()\n        .target(new SnsTopic(myTopic))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import sns \"github.com/aws-samples/dummy/awscdkawssns\"\nimport targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\nvar repo repository\nvar project pipelineProject\nvar myTopic topic\n\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit(jsii.String(\"CommitToMaster\"), &onCommitOptions{\n\ttarget: targets.NewCodeBuildProject(project),\n\tbranches: []*string{\n\t\tjsii.String(\"master\"),\n\t},\n})\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nrule := repo.onCommentOnPullRequest(jsii.String(\"CommentOnPullRequest\"), &onEventOptions{\n\ttarget: targets.NewSnsTopic(myTopic),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as sns from '@aws-cdk/aws-sns';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\ndeclare const project: codebuild.PipelineProject;\ndeclare const myTopic: sns.Topic;\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit('CommitToMaster', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master'],\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nconst rule = repo.onCommentOnPullRequest('CommentOnPullRequest', {\n  target: new targets.SnsTopic(myTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CodeBuildProject"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\ndeclare const project: codebuild.PipelineProject;\ndeclare const myTopic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit('CommitToMaster', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master'],\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nconst rule = repo.onCommentOnPullRequest('CommentOnPullRequest', {\n  target: new targets.SnsTopic(myTopic),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "7c071254119636f8de96d866ac733e1f5a9761a1dc21e86d2f957b341382f54e"
    },
    "59f7ccb81b851b55327fa032f7e045da59ef364e5a6e78e893617743e765b1a7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\n\n\nrepo = codecommit.Repository(self, \"MyRepo\",\n    repository_name=\"aws-cdk-codebuild-events\"\n)\n\nproject = codebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.code_commit(repository=repo)\n)\n\ndead_letter_queue = sqs.Queue(self, \"DeadLetterQueue\")\n\n# trigger a build when a commit is pushed to the repo\non_commit_rule = repo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project,\n        dead_letter_queue=dead_letter_queue\n    ),\n    branches=[\"master\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repo = new Repository(this, \"MyRepo\", new RepositoryProps {\n    RepositoryName = \"aws-cdk-codebuild-events\"\n});\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.CodeCommit(new CodeCommitSourceProps { Repository = repo })\n});\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project, new CodeBuildProjectProps {\n        DeadLetterQueue = deadLetterQueue\n    }),\n    Branches = new [] { \"master\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repo = Repository.Builder.create(this, \"MyRepo\")\n        .repositoryName(\"aws-cdk-codebuild-events\")\n        .build();\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .source(Source.codeCommit(CodeCommitSourceProps.builder().repository(repo).build()))\n        .build();\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(CodeBuildProject.Builder.create(project)\n                .deadLetterQueue(deadLetterQueue)\n                .build())\n        .branches(List.of(\"master\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import codebuild \"github.com/aws-samples/dummy/awscdkawscodebuild\"\nimport codecommit \"github.com/aws-samples/dummy/awscdkawscodecommit\"\n\n\nrepo := codecommit.NewRepository(this, jsii.String(\"MyRepo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"aws-cdk-codebuild-events\"),\n})\n\nproject := codebuild.NewProject(this, jsii.String(\"MyProject\"), &projectProps{\n\tsource: codebuild.source.codeCommit(&codeCommitSourceProps{\n\t\trepository: repo,\n\t}),\n})\n\ndeadLetterQueue := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\n// trigger a build when a commit is pushed to the repo\nonCommitRule := repo.onCommit(jsii.String(\"OnCommit\"), &onCommitOptions{\n\ttarget: targets.NewCodeBuildProject(project, &codeBuildProjectProps{\n\t\tdeadLetterQueue: deadLetterQueue,\n\t}),\n\tbranches: []*string{\n\t\tjsii.String(\"master\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CodeBuildProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events-targets.CodeBuildProjectProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 5,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "d21823431a26755d803bc27f60abb37c6572798760082e89d99df34f59cdc41c"
    },
    "d090bb4555abe0cb69f9db656dbb9382ab49b90171c7516c061faff8b5f51635": {
      "translations": {
        "python": {
          "source": "# A pipeline being used as a target for a CloudWatch event rule.\nimport aws_cdk.aws_events_targets as targets\nimport aws_cdk.aws_events as events\n\n# pipeline: codepipeline.Pipeline\n\n\n# kick off the pipeline every day\nrule = events.Rule(self, \"Daily\",\n    schedule=events.Schedule.rate(Duration.days(1))\n)\nrule.add_target(targets.CodePipeline(pipeline))",
          "version": "2"
        },
        "csharp": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.Events;\n\nPipeline pipeline;\n\n\n// kick off the pipeline every day\nRule rule = new Rule(this, \"Daily\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Days(1))\n});\nrule.AddTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "java": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.events.*;\n\nPipeline pipeline;\n\n\n// kick off the pipeline every day\nRule rule = Rule.Builder.create(this, \"Daily\")\n        .schedule(Schedule.rate(Duration.days(1)))\n        .build();\nrule.addTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "go": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nimport targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport events \"github.com/aws-samples/dummy/awscdkawsevents\"\n\nvar pipeline pipeline\n\n\n// kick off the pipeline every day\nrule := events.NewRule(this, jsii.String(\"Daily\"), &ruleProps{\n\tschedule: events.schedule.rate(*awscdkcore.Duration.days(jsii.Number(1))),\n})\nrule.addTarget(targets.NewCodePipeline(pipeline))",
          "version": "1"
        },
        "$": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\n\n// kick off the pipeline every day\nconst rule = new events.Rule(this, 'Daily', {\n  schedule: events.Schedule.rate(Duration.days(1)),\n});\n\ndeclare const pipeline: codepipeline.Pipeline;\nrule.addTarget(new targets.CodePipeline(pipeline));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CodePipeline"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IPipeline",
        "@aws-cdk/aws-events-targets.CodePipeline",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// A pipeline being used as a target for a CloudWatch event rule.\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const pipeline: codepipeline.Pipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// kick off the pipeline every day\nconst rule = new events.Rule(this, 'Daily', {\n  schedule: events.Schedule.rate(Duration.days(1)),\n});\nrule.addTarget(new targets.CodePipeline(pipeline));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "60f66e4ae7cdda2692f7f0fb5756d128df585d9cb7b96563b879798c411d52b5"
    },
    "b53825c7d06d26d5599f14b99f9f8c682e1086a7c4d1bf322317f441a8a0e414": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# queue: sqs.Queue\n# role: iam.Role\n\ncode_pipeline_target_options = events_targets.CodePipelineTargetOptions(\n    dead_letter_queue=queue,\n    event_role=role,\n    max_event_age=cdk.Duration.minutes(30),\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nQueue queue;\nRole role;\nCodePipelineTargetOptions codePipelineTargetOptions = new CodePipelineTargetOptions {\n    DeadLetterQueue = queue,\n    EventRole = role,\n    MaxEventAge = Duration.Minutes(30),\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nQueue queue;\nRole role;\n\nCodePipelineTargetOptions codePipelineTargetOptions = CodePipelineTargetOptions.builder()\n        .deadLetterQueue(queue)\n        .eventRole(role)\n        .maxEventAge(Duration.minutes(30))\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport sqs \"github.com/aws-samples/dummy/awscdkawssqs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar queue queue\nvar role role\n\ncodePipelineTargetOptions := &codePipelineTargetOptions{\n\tdeadLetterQueue: queue,\n\teventRole: role,\n\tmaxEventAge: cdk.duration.minutes(jsii.Number(30)),\n\tretryAttempts: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\nconst codePipelineTargetOptions: events_targets.CodePipelineTargetOptions = {\n  deadLetterQueue: queue,\n  eventRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CodePipelineTargetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.CodePipelineTargetOptions",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codePipelineTargetOptions: events_targets.CodePipelineTargetOptions = {\n  deadLetterQueue: queue,\n  eventRole: role,\n  maxEventAge: cdk.Duration.minutes(30),\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 22,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "fa9520a16685f9c9b8e148b0ed3d9078b7aeeae977f66710bc15b029533378e0"
    },
    "7e92f0ca53ea13443f60495282bdf2eea5b643b45d8b3875f8f37fc7b980c305": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\n\ncontainer_override = events_targets.ContainerOverride(\n    container_name=\"containerName\",\n\n    # the properties below are optional\n    command=[\"command\"],\n    cpu=123,\n    environment=[events_targets.TaskEnvironmentVariable(\n        name=\"name\",\n        value=\"value\"\n    )],\n    memory_limit=123,\n    memory_reservation=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\n\nContainerOverride containerOverride = new ContainerOverride {\n    ContainerName = \"containerName\",\n\n    // the properties below are optional\n    Command = new [] { \"command\" },\n    Cpu = 123,\n    Environment = new [] { new TaskEnvironmentVariable {\n        Name = \"name\",\n        Value = \"value\"\n    } },\n    MemoryLimit = 123,\n    MemoryReservation = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\n\nContainerOverride containerOverride = ContainerOverride.builder()\n        .containerName(\"containerName\")\n\n        // the properties below are optional\n        .command(List.of(\"command\"))\n        .cpu(123)\n        .environment(List.of(TaskEnvironmentVariable.builder()\n                .name(\"name\")\n                .value(\"value\")\n                .build()))\n        .memoryLimit(123)\n        .memoryReservation(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\ncontainerOverride := &containerOverride{\n\tcontainerName: jsii.String(\"containerName\"),\n\n\t// the properties below are optional\n\tcommand: []*string{\n\t\tjsii.String(\"command\"),\n\t},\n\tcpu: jsii.Number(123),\n\tenvironment: []taskEnvironmentVariable{\n\t\t&taskEnvironmentVariable{\n\t\t\tname: jsii.String(\"name\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\tmemoryLimit: jsii.Number(123),\n\tmemoryReservation: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nconst containerOverride: events_targets.ContainerOverride = {\n  containerName: 'containerName',\n\n  // the properties below are optional\n  command: ['command'],\n  cpu: 123,\n  environment: [{\n    name: 'name',\n    value: 'value',\n  }],\n  memoryLimit: 123,\n  memoryReservation: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.ContainerOverride"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.ContainerOverride"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst containerOverride: events_targets.ContainerOverride = {\n  containerName: 'containerName',\n\n  // the properties below are optional\n  command: ['command'],\n  cpu: 123,\n  environment: [{\n    name: 'name',\n    value: 'value',\n  }],\n  memoryLimit: 123,\n  memoryReservation: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 12,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "a55aaaba20c161434d8bbe1f0fb8ae74c5b409f0c9b0ffe1c625a3265461d07e"
    },
    "e68c323ba9db0b5b493ddec540424da6fcc0f1be0790bd4405f5e7c38bf75e18": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_events import Rule, Schedule\nfrom aws_cdk.aws_events_targets import EcsTask\nfrom aws_cdk.aws_ecs import Cluster, TaskDefinition\nfrom aws_cdk.aws_iam import Role\n\n# cluster: Cluster\n# task_definition: TaskDefinition\n# role: Role\n\n\necs_task_target = EcsTask(cluster=cluster, task_definition=task_definition, role=role)\n\nRule(self, \"ScheduleRule\",\n    schedule=Schedule.cron(minute=\"0\", hour=\"4\"),\n    targets=[ecs_task_target]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role });\n\nnew Rule(this, \"ScheduleRule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" }),\n    Targets = new [] { ecsTaskTarget }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.Rule;\nimport software.amazon.awscdk.services.events.Schedule;\nimport software.amazon.awscdk.services.events.targets.EcsTask;\nimport software.amazon.awscdk.services.ecs.Cluster;\nimport software.amazon.awscdk.services.ecs.TaskDefinition;\nimport software.amazon.awscdk.services.iam.Role;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).build();\n\nRule.Builder.create(this, \"ScheduleRule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .targets(List.of(ecsTaskTarget))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar cluster cluster\nvar taskDefinition taskDefinition\nvar role role\n\n\necsTaskTarget := awscdkawseventstargets.NewEcsTask(&ecsTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\trole: role,\n})\n\nawscdkawsevents.NewRule(this, jsii.String(\"ScheduleRule\"), &ruleProps{\n\tschedule: *awscdkawsevents.Schedule.cron(&cronOptions{\n\t\tminute: jsii.String(\"0\"),\n\t\thour: jsii.String(\"4\"),\n\t}),\n\ttargets: []iRuleTarget{\n\t\tecsTaskTarget,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.EcsTask"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "104": 1,
        "130": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "ba24d6b0c94156cd4cbeed8deb6d72affe5a486be7ee873dd16d6ed01058f37a"
    },
    "2f1c0af5b9b75e242054cdfd14bd1af1ad4cb5f39297e42bed1b294785077f45": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_events import Rule, Schedule\nfrom aws_cdk.aws_events_targets import EcsTask\nfrom aws_cdk.aws_ecs import Cluster, TaskDefinition\nfrom aws_cdk.aws_iam import Role\n\n# cluster: Cluster\n# task_definition: TaskDefinition\n# role: Role\n\n\necs_task_target = EcsTask(cluster=cluster, task_definition=task_definition, role=role)\n\nRule(self, \"ScheduleRule\",\n    schedule=Schedule.cron(minute=\"0\", hour=\"4\"),\n    targets=[ecs_task_target]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role });\n\nnew Rule(this, \"ScheduleRule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" }),\n    Targets = new [] { ecsTaskTarget }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.Rule;\nimport software.amazon.awscdk.services.events.Schedule;\nimport software.amazon.awscdk.services.events.targets.EcsTask;\nimport software.amazon.awscdk.services.ecs.Cluster;\nimport software.amazon.awscdk.services.ecs.TaskDefinition;\nimport software.amazon.awscdk.services.iam.Role;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).build();\n\nRule.Builder.create(this, \"ScheduleRule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .targets(List.of(ecsTaskTarget))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport \"github.com/aws-samples/dummy/awscdkawsecs\"\nimport \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar cluster cluster\nvar taskDefinition taskDefinition\nvar role role\n\n\necsTaskTarget := awscdkawseventstargets.NewEcsTask(&ecsTaskProps{\n\tcluster: cluster,\n\ttaskDefinition: taskDefinition,\n\trole: role,\n})\n\nawscdkawsevents.NewRule(this, jsii.String(\"ScheduleRule\"), &ruleProps{\n\tschedule: *awscdkawsevents.Schedule.cron(&cronOptions{\n\t\tminute: jsii.String(\"0\"),\n\t\thour: jsii.String(\"4\"),\n\t}),\n\ttargets: []iRuleTarget{\n\t\tecsTaskTarget,\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.EcsTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "104": 1,
        "130": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "ba24d6b0c94156cd4cbeed8deb6d72affe5a486be7ee873dd16d6ed01058f37a"
    },
    "07218d8631997ee46d9157c712630908d5829f4e1ed260472927189deadc4fd2": {
      "translations": {
        "python": {
          "source": "rule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 minute)\")\n)\n\nrule.add_target(targets.EventBus(\n    events.EventBus.from_event_bus_arn(self, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")))",
          "version": "2"
        },
        "csharp": {
          "source": "Rule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 minute)\")\n});\n\nrule.AddTarget(new EventBus(EventBus.FromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "java": {
          "source": "Rule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .build();\n\nrule.addTarget(new EventBus(EventBus.fromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "go": {
          "source": "rule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.expression(jsii.String(\"rate(1 minute)\")),\n})\n\nrule.addTarget(targets.NewEventBus(events.eventBus.fromEventBusArn(this, jsii.String(\"External\"), jsii.String(\"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\"))))",
          "version": "1"
        },
        "$": {
          "source": "const rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.EventBus"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.EventBus",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBus#fromEventBusArn",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 14,
        "104": 2,
        "193": 1,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "1587f60599b3f4c527e3eb61485e5bb03b31131bffe4469da6649a13c176145a"
    },
    "1792b24d6a8b13cf68026372aa9d1928bd6ffbbb9810571fa89a0890ccaa21a4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_sqs as sqs\n\n# queue: sqs.Queue\n# role: iam.Role\n\nevent_bus_props = events_targets.EventBusProps(\n    dead_letter_queue=queue,\n    role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.SQS;\n\nQueue queue;\nRole role;\n\nEventBusProps eventBusProps = new EventBusProps {\n    DeadLetterQueue = queue,\n    Role = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nQueue queue;\nRole role;\n\nEventBusProps eventBusProps = EventBusProps.builder()\n        .deadLetterQueue(queue)\n        .role(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport sqs \"github.com/aws-samples/dummy/awscdkawssqs\"\n\nvar queue queue\nvar role role\n\neventBusProps := &eventBusProps{\n\tdeadLetterQueue: queue,\n\trole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\nconst eventBusProps: events_targets.EventBusProps = {\n  deadLetterQueue: queue,\n  role: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.EventBusProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.EventBusProps",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const queue: sqs.Queue;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eventBusProps: events_targets.EventBusProps = {\n  deadLetterQueue: queue,\n  role: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6f78af5786ce3d7d7664573303958959c5cc931b456f58dd9bd5ce30d1f278c7"
    },
    "153668ac58e0119240780cb393124693b537b2a092fac71d72165fdf60e71ebc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_kinesisfirehose as kinesisfirehose\n\n# cfn_delivery_stream: kinesisfirehose.CfnDeliveryStream\n# rule_target_input: events.RuleTargetInput\n\nkinesis_firehose_stream = events_targets.KinesisFirehoseStream(cfn_delivery_stream,\n    message=rule_target_input\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.KinesisFirehose;\n\nCfnDeliveryStream cfnDeliveryStream;\nRuleTargetInput ruleTargetInput;\n\nKinesisFirehoseStream kinesisFirehoseStream = new KinesisFirehoseStream(cfnDeliveryStream, new KinesisFirehoseStreamProps {\n    Message = ruleTargetInput\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.kinesisfirehose.*;\n\nCfnDeliveryStream cfnDeliveryStream;\nRuleTargetInput ruleTargetInput;\n\nKinesisFirehoseStream kinesisFirehoseStream = KinesisFirehoseStream.Builder.create(cfnDeliveryStream)\n        .message(ruleTargetInput)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport kinesisfirehose \"github.com/aws-samples/dummy/awscdkawskinesisfirehose\"\n\nvar cfnDeliveryStream cfnDeliveryStream\nvar ruleTargetInput ruleTargetInput\n\nkinesisFirehoseStream := events_targets.NewKinesisFirehoseStream(cfnDeliveryStream, &kinesisFirehoseStreamProps{\n\tmessage: ruleTargetInput,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as kinesisfirehose from '@aws-cdk/aws-kinesisfirehose';\n\ndeclare const cfnDeliveryStream: kinesisfirehose.CfnDeliveryStream;\ndeclare const ruleTargetInput: events.RuleTargetInput;\nconst kinesisFirehoseStream = new events_targets.KinesisFirehoseStream(cfnDeliveryStream, /* all optional props */ {\n  message: ruleTargetInput,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.KinesisFirehoseStream"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.KinesisFirehoseStream",
        "@aws-cdk/aws-events-targets.KinesisFirehoseStreamProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-kinesisfirehose.CfnDeliveryStream"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as kinesisfirehose from '@aws-cdk/aws-kinesisfirehose';\n\ndeclare const cfnDeliveryStream: kinesisfirehose.CfnDeliveryStream;\ndeclare const ruleTargetInput: events.RuleTargetInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kinesisFirehoseStream = new events_targets.KinesisFirehoseStream(cfnDeliveryStream, /* all optional props */ {\n  message: ruleTargetInput,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ed5e1dca6f66256bbabfc8ad8e598c1c37eabe5ed67aed2a92720491f06fee05"
    },
    "ac696f5b28ba9ee32b6669a174d1517db67060f8cd92d63da77aa88c73f88b21": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as events_targets\n\n# rule_target_input: events.RuleTargetInput\n\nkinesis_firehose_stream_props = events_targets.KinesisFirehoseStreamProps(\n    message=rule_target_input\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRuleTargetInput ruleTargetInput;\n\nKinesisFirehoseStreamProps kinesisFirehoseStreamProps = new KinesisFirehoseStreamProps {\n    Message = ruleTargetInput\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRuleTargetInput ruleTargetInput;\n\nKinesisFirehoseStreamProps kinesisFirehoseStreamProps = KinesisFirehoseStreamProps.builder()\n        .message(ruleTargetInput)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\nvar ruleTargetInput ruleTargetInput\n\nkinesisFirehoseStreamProps := &kinesisFirehoseStreamProps{\n\tmessage: ruleTargetInput,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n\ndeclare const ruleTargetInput: events.RuleTargetInput;\nconst kinesisFirehoseStreamProps: events_targets.KinesisFirehoseStreamProps = {\n  message: ruleTargetInput,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.KinesisFirehoseStreamProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.KinesisFirehoseStreamProps",
        "@aws-cdk/aws-events.RuleTargetInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n\ndeclare const ruleTargetInput: events.RuleTargetInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kinesisFirehoseStreamProps: events_targets.KinesisFirehoseStreamProps = {\n  message: ruleTargetInput,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c598064d6280cce9699be30758723a273059529e629b548ce43c7dbf9ce3a3be"
    },
    "7025127d867883941de7ea08a9fac9fc38cbfd5cf4bb6708dfd14575f29dc45e": {
      "translations": {
        "python": {
          "source": "# put to a Kinesis stream every time code is committed\n# to a CodeCommit repository\nrepository.on_commit(\"onCommit\", target=targets.KinesisStream(stream))",
          "version": "2"
        },
        "csharp": {
          "source": "// put to a Kinesis stream every time code is committed\n// to a CodeCommit repository\nrepository.OnCommit(\"onCommit\", new OnCommitOptions { Target = new KinesisStream(stream) });",
          "version": "1"
        },
        "java": {
          "source": "// put to a Kinesis stream every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(\"onCommit\", OnCommitOptions.builder().target(new KinesisStream(stream)).build());",
          "version": "1"
        },
        "go": {
          "source": "// put to a Kinesis stream every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(jsii.String(\"onCommit\"), &onCommitOptions{\n\ttarget: targets.NewKinesisStream(stream),\n})",
          "version": "1"
        },
        "$": {
          "source": "  // put to a Kinesis stream every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.KinesisStream(stream) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.KinesisStream"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.KinesisStream",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-kinesis.IStream"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const repository = new codecommit.Repository(this, 'MyRepo', {\n      repositoryName: 'aws-cdk-events',\n    });\n\n    const stream = new kinesis.Stream(this, 'MyStream');\n\n    // Code snippet begins after !show marker below\n/// !show\n  // put to a Kinesis stream every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.KinesisStream(stream) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "285ecbda2e25a11c9982de94aa67cb31af4a0018eccc6624e1c3ac4f68ac0e21"
    },
    "ac57c959bdc0ec29824ee0ac541f99aae32262b43748a9ce99680584409b887a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as events_targets\n\n# rule_target_input: events.RuleTargetInput\n\nkinesis_stream_props = events_targets.KinesisStreamProps(\n    message=rule_target_input,\n    partition_key_path=\"partitionKeyPath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRuleTargetInput ruleTargetInput;\n\nKinesisStreamProps kinesisStreamProps = new KinesisStreamProps {\n    Message = ruleTargetInput,\n    PartitionKeyPath = \"partitionKeyPath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRuleTargetInput ruleTargetInput;\n\nKinesisStreamProps kinesisStreamProps = KinesisStreamProps.builder()\n        .message(ruleTargetInput)\n        .partitionKeyPath(\"partitionKeyPath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\nvar ruleTargetInput ruleTargetInput\n\nkinesisStreamProps := &kinesisStreamProps{\n\tmessage: ruleTargetInput,\n\tpartitionKeyPath: jsii.String(\"partitionKeyPath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n\ndeclare const ruleTargetInput: events.RuleTargetInput;\nconst kinesisStreamProps: events_targets.KinesisStreamProps = {\n  message: ruleTargetInput,\n  partitionKeyPath: 'partitionKeyPath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.KinesisStreamProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.KinesisStreamProps",
        "@aws-cdk/aws-events.RuleTargetInput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n\ndeclare const ruleTargetInput: events.RuleTargetInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst kinesisStreamProps: events_targets.KinesisStreamProps = {\n  message: ruleTargetInput,\n  partitionKeyPath: 'partitionKeyPath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bbf2340700f982d00a07c8b79db1c65b8bd34d2f8d3e4471a64fda85368e717a"
    },
    "629d4e12a5ab89502a694f307e0768621a67c24ae6fc852b3789081948221147": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_14_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = handler.toString()\")),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule.addTarget(targets.NewLambdaFunction(fn, &lambdaFunctionProps{\n\tdeadLetterQueue: queue,\n\t // Optional: add a dead letter queue\n\tmaxEventAge: cdk.duration.hours(jsii.Number(2)),\n\t // Optional: set the maxEventAge retry policy\n\tretryAttempts: jsii.Number(2),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.LambdaFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e5bfd1bf629b593fd3fa7db82e3a95f1cf99b031f1f195bf5d0139d611a85f14"
    },
    "1e7a0b775b48062a4b775e98676bb311d834f8957d00dfa574cd1f30db3b5cab": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import lambda \"github.com/aws-samples/dummy/awscdkawslambda\"\n\n\nfn := lambda.NewFunction(this, jsii.String(\"MyFunc\"), &functionProps{\n\truntime: lambda.runtime_NODEJS_14_X(),\n\thandler: jsii.String(\"index.handler\"),\n\tcode: lambda.code.fromInline(jsii.String(\"exports.handler = handler.toString()\")),\n})\n\nrule := events.NewRule(this, jsii.String(\"rule\"), &ruleProps{\n\teventPattern: &eventPattern{\n\t\tsource: []*string{\n\t\t\tjsii.String(\"aws.ec2\"),\n\t\t},\n\t},\n})\n\nqueue := sqs.NewQueue(this, jsii.String(\"Queue\"))\n\nrule.addTarget(targets.NewLambdaFunction(fn, &lambdaFunctionProps{\n\tdeadLetterQueue: queue,\n\t // Optional: add a dead letter queue\n\tmaxEventAge: cdk.duration.hours(jsii.Number(2)),\n\t // Optional: set the maxEventAge retry policy\n\tretryAttempts: jsii.Number(2),\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.LambdaFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e5bfd1bf629b593fd3fa7db82e3a95f1cf99b031f1f195bf5d0139d611a85f14"
    },
    "888969356bbef94dc6b3f1349cdfb1f4000979cd76f80a9d14005ffab54b01c9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# queue: sqs.Queue\n# rule_target_input: events.RuleTargetInput\n\nlog_group_props = events_targets.LogGroupProps(\n    dead_letter_queue=queue,\n    event=rule_target_input,\n    max_event_age=cdk.Duration.minutes(30),\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nQueue queue;\nRuleTargetInput ruleTargetInput;\nLogGroupProps logGroupProps = new LogGroupProps {\n    DeadLetterQueue = queue,\n    Event = ruleTargetInput,\n    MaxEventAge = Duration.Minutes(30),\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nQueue queue;\nRuleTargetInput ruleTargetInput;\n\nLogGroupProps logGroupProps = LogGroupProps.builder()\n        .deadLetterQueue(queue)\n        .event(ruleTargetInput)\n        .maxEventAge(Duration.minutes(30))\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport sqs \"github.com/aws-samples/dummy/awscdkawssqs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar queue queue\nvar ruleTargetInput ruleTargetInput\n\nlogGroupProps := &logGroupProps{\n\tdeadLetterQueue: queue,\n\tevent: ruleTargetInput,\n\tmaxEventAge: cdk.duration.minutes(jsii.Number(30)),\n\tretryAttempts: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const ruleTargetInput: events.RuleTargetInput;\nconst logGroupProps: events_targets.LogGroupProps = {\n  deadLetterQueue: queue,\n  event: ruleTargetInput,\n  maxEventAge: cdk.Duration.minutes(30),\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.LogGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LogGroupProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const ruleTargetInput: events.RuleTargetInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst logGroupProps: events_targets.LogGroupProps = {\n  deadLetterQueue: queue,\n  event: ruleTargetInput,\n  maxEventAge: cdk.Duration.minutes(30),\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 22,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "be8e40b1e0a380e40d12895baa6456dc0e53d88d9b39c8cb22404f77bef22634"
    },
    "a95dea5e3f98d7e0bd5aec77708ab728b72df6221e40770a1ecbf87de1686f7d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10)))\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq,\n    role=role\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) })\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq,\n    Role = role\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .role(role)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport sfn \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n})\n\ndlq := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"events.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"SM\"), &stateMachineProps{\n\tdefinition: sfn.NewWait(this, jsii.String(\"Hello\"), &waitProps{\n\t\ttime: sfn.waitTime.duration(cdk.*duration.seconds(jsii.Number(10))),\n\t}),\n})\n\nrule.addTarget(targets.NewSfnStateMachine(stateMachine, &sfnStateMachineProps{\n\tinput: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"SomeParam\": jsii.String(\"SomeValue\"),\n\t}),\n\tdeadLetterQueue: dlq,\n\trole: role,\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SfnStateMachine"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 48,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "8a7cc72bb5b3eea201413fbf79d02adb28a2b512ffc06f8349774f1ddee085ab"
    },
    "dd381b3fc8c4f1eed59b2c40f5516b3a3a2cf34baadf574ff169babb5ac3eeea": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10)))\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq,\n    role=role\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) })\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq,\n    Role = role\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .role(role)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import iam \"github.com/aws-samples/dummy/awscdkawsiam\"\nimport sfn \"github.com/aws-samples/dummy/awscdkawsstepfunctions\"\n\n\nrule := events.NewRule(this, jsii.String(\"Rule\"), &ruleProps{\n\tschedule: events.schedule.rate(cdk.duration.minutes(jsii.Number(1))),\n})\n\ndlq := sqs.NewQueue(this, jsii.String(\"DeadLetterQueue\"))\n\nrole := iam.NewRole(this, jsii.String(\"Role\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"events.amazonaws.com\")),\n})\nstateMachine := sfn.NewStateMachine(this, jsii.String(\"SM\"), &stateMachineProps{\n\tdefinition: sfn.NewWait(this, jsii.String(\"Hello\"), &waitProps{\n\t\ttime: sfn.waitTime.duration(cdk.*duration.seconds(jsii.Number(10))),\n\t}),\n})\n\nrule.addTarget(targets.NewSfnStateMachine(stateMachine, &sfnStateMachineProps{\n\tinput: events.ruleTargetInput.fromObject(map[string]*string{\n\t\t\"SomeParam\": jsii.String(\"SomeValue\"),\n\t}),\n\tdeadLetterQueue: dlq,\n\trole: role,\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SfnStateMachineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) })\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n  role: role\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 48,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "8a7cc72bb5b3eea201413fbf79d02adb28a2b512ffc06f8349774f1ddee085ab"
    },
    "cc7d2e424adae83f3f527eac0e480d1c938f23579070f626d79e82e42dfe2fa9": {
      "translations": {
        "python": {
          "source": "# publish to an SNS topic every time code is committed\n# to a CodeCommit repository\nrepository.on_commit(\"onCommit\", target=targets.SnsTopic(topic))",
          "version": "2"
        },
        "csharp": {
          "source": "// publish to an SNS topic every time code is committed\n// to a CodeCommit repository\nrepository.OnCommit(\"onCommit\", new OnCommitOptions { Target = new SnsTopic(topic) });",
          "version": "1"
        },
        "java": {
          "source": "// publish to an SNS topic every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(\"onCommit\", OnCommitOptions.builder().target(new SnsTopic(topic)).build());",
          "version": "1"
        },
        "go": {
          "source": "// publish to an SNS topic every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(jsii.String(\"onCommit\"), &onCommitOptions{\n\ttarget: targets.NewSnsTopic(topic),\n})",
          "version": "1"
        },
        "$": {
          "source": "  // publish to an SNS topic every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SnsTopic(topic) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SnsTopic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const repository = new codecommit.Repository(this, 'MyRepo', {\n      repositoryName: 'aws-cdk-events',\n    });\n\n    const topic = new sns.Topic(this, 'MyTopic');\n\n    // Code snippet begins after !show marker below\n/// !show\n  // publish to an SNS topic every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SnsTopic(topic) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "823bc159419a760533329dcf8515c68fd42f9499451c0094f6c6d4c36c05fd38"
    },
    "5d220ddcbe5aa9f0155e0b03a651434f62f756220725a582a4414aeb94a94a45": {
      "translations": {
        "python": {
          "source": "# on_commit_rule: events.Rule\n# topic: sns.Topic\n\n\non_commit_rule.add_target(targets.SnsTopic(topic,\n    message=events.RuleTargetInput.from_text(f\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n))",
          "version": "2"
        },
        "csharp": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.AddTarget(new SnsTopic(topic, new SnsTopicProps {\n    Message = RuleTargetInput.FromText($\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n}));",
          "version": "1"
        },
        "java": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.addTarget(SnsTopic.Builder.create(topic)\n        .message(RuleTargetInput.fromText(String.format(\"A commit was pushed to the repository %s on branch %s\", ReferenceEvent.getRepositoryName(), ReferenceEvent.getReferenceName())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var onCommitRule rule\nvar topic topic\n\n\nonCommitRule.addTarget(targets.NewSnsTopic(topic, &snsTopicProps{\n\tmessage: events.ruleTargetInput.fromText(\n\tfmt.Sprintf(\"A commit was pushed to the repository %v on branch %v\", codecommit.referenceEvent.repositoryName, codecommit.*referenceEvent.referenceName)),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SnsTopicProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events-targets.SnsTopicProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromText",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 21,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "211": 1,
        "221": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "17f8405b9e7122e4d8512b184bbce81153b50796382b9b3414dcfc406a6c288b"
    },
    "b9c074dfaa7888e319311815d3ae3bdef26b1fb54d4624f96dcf6d8ab8fa89d6": {
      "translations": {
        "python": {
          "source": "# publish to an SQS queue every time code is committed\n# to a CodeCommit repository\nrepository.on_commit(\"onCommit\", target=targets.SqsQueue(queue))",
          "version": "2"
        },
        "csharp": {
          "source": "// publish to an SQS queue every time code is committed\n// to a CodeCommit repository\nrepository.OnCommit(\"onCommit\", new OnCommitOptions { Target = new SqsQueue(queue) });",
          "version": "1"
        },
        "java": {
          "source": "// publish to an SQS queue every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(\"onCommit\", OnCommitOptions.builder().target(new SqsQueue(queue)).build());",
          "version": "1"
        },
        "go": {
          "source": "// publish to an SQS queue every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(jsii.String(\"onCommit\"), &onCommitOptions{\n\ttarget: targets.NewSqsQueue(queue),\n})",
          "version": "1"
        },
        "$": {
          "source": "  // publish to an SQS queue every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SqsQueue(queue) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SqsQueue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.SqsQueue",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const repository = new codecommit.Repository(this, 'MyRepo', {\n      repositoryName: 'aws-cdk-events',\n    });\n\n    const queue = new sqs.Queue(this, 'MyQueue');\n\n    // Code snippet begins after !show marker below\n/// !show\n  // publish to an SQS queue every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SqsQueue(queue) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "c91c20d4b467edeeb4862a82a382b445d5762ce4f8f2a4e636a8db71f733f1d3"
    },
    "c9c77b8424d764fe34b55e3299f0609909ceee1b3da790f3ea2f7f5920507877": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# queue: sqs.Queue\n# rule_target_input: events.RuleTargetInput\n\nsqs_queue_props = events_targets.SqsQueueProps(\n    dead_letter_queue=queue,\n    max_event_age=cdk.Duration.minutes(30),\n    message=rule_target_input,\n    message_group_id=\"messageGroupId\",\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nQueue queue;\nRuleTargetInput ruleTargetInput;\nSqsQueueProps sqsQueueProps = new SqsQueueProps {\n    DeadLetterQueue = queue,\n    MaxEventAge = Duration.Minutes(30),\n    Message = ruleTargetInput,\n    MessageGroupId = \"messageGroupId\",\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nQueue queue;\nRuleTargetInput ruleTargetInput;\n\nSqsQueueProps sqsQueueProps = SqsQueueProps.builder()\n        .deadLetterQueue(queue)\n        .maxEventAge(Duration.minutes(30))\n        .message(ruleTargetInput)\n        .messageGroupId(\"messageGroupId\")\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events \"github.com/aws-samples/dummy/awscdkawsevents\"\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport sqs \"github.com/aws-samples/dummy/awscdkawssqs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar queue queue\nvar ruleTargetInput ruleTargetInput\n\nsqsQueueProps := &sqsQueueProps{\n\tdeadLetterQueue: queue,\n\tmaxEventAge: cdk.duration.minutes(jsii.Number(30)),\n\tmessage: ruleTargetInput,\n\tmessageGroupId: jsii.String(\"messageGroupId\"),\n\tretryAttempts: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const ruleTargetInput: events.RuleTargetInput;\nconst sqsQueueProps: events_targets.SqsQueueProps = {\n  deadLetterQueue: queue,\n  maxEventAge: cdk.Duration.minutes(30),\n  message: ruleTargetInput,\n  messageGroupId: 'messageGroupId',\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SqsQueueProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SqsQueueProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events from '@aws-cdk/aws-events';\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\ndeclare const ruleTargetInput: events.RuleTargetInput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sqsQueueProps: events_targets.SqsQueueProps = {\n  deadLetterQueue: queue,\n  maxEventAge: cdk.Duration.minutes(30),\n  message: ruleTargetInput,\n  messageGroupId: 'messageGroupId',\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 23,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "d77e2f1cf5334095e4d0bcb7212507d49927966a9adc2a0ae59cc06dad64f694"
    },
    "069926a5ee2c9fc19b6a1970970f6c374fbc2720455e468595486cb867932edc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\nimport aws_cdk.aws_sqs as sqs\nimport aws_cdk.core as cdk\n\n# queue: sqs.Queue\n\ntarget_base_props = events_targets.TargetBaseProps(\n    dead_letter_queue=queue,\n    max_event_age=cdk.Duration.minutes(30),\n    retry_attempts=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.SQS;\nusing Amazon.CDK;\n\nQueue queue;\nTargetBaseProps targetBaseProps = new TargetBaseProps {\n    DeadLetterQueue = queue,\n    MaxEventAge = Duration.Minutes(30),\n    RetryAttempts = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.sqs.*;\nimport software.amazon.awscdk.core.*;\n\nQueue queue;\n\nTargetBaseProps targetBaseProps = TargetBaseProps.builder()\n        .deadLetterQueue(queue)\n        .maxEventAge(Duration.minutes(30))\n        .retryAttempts(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\nimport sqs \"github.com/aws-samples/dummy/awscdkawssqs\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar queue queue\n\ntargetBaseProps := &targetBaseProps{\n\tdeadLetterQueue: queue,\n\tmaxEventAge: cdk.duration.minutes(jsii.Number(30)),\n\tretryAttempts: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\nconst targetBaseProps: events_targets.TargetBaseProps = {\n  deadLetterQueue: queue,\n  maxEventAge: cdk.Duration.minutes(30),\n  retryAttempts: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.TargetBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.TargetBaseProps",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const queue: sqs.Queue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst targetBaseProps: events_targets.TargetBaseProps = {\n  deadLetterQueue: queue,\n  maxEventAge: cdk.Duration.minutes(30),\n  retryAttempts: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a3918e4547fcc3440beb8fc22c3ecf1b421006812e14a2d79471f5bbc958d0b1"
    },
    "965eba56f95e6ed24f3085682a90dec537b16aa3c501c7820dfa7ee517352c71": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_events_targets as events_targets\n\ntask_environment_variable = events_targets.TaskEnvironmentVariable(\n    name=\"name\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Events.Targets;\n\nTaskEnvironmentVariable taskEnvironmentVariable = new TaskEnvironmentVariable {\n    Name = \"name\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.events.targets.*;\n\nTaskEnvironmentVariable taskEnvironmentVariable = TaskEnvironmentVariable.builder()\n        .name(\"name\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport events_targets \"github.com/aws-samples/dummy/awscdkawseventstargets\"\n\ntaskEnvironmentVariable := &taskEnvironmentVariable{\n\tname: jsii.String(\"name\"),\n\tvalue: jsii.String(\"value\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\nconst taskEnvironmentVariable: events_targets.TaskEnvironmentVariable = {\n  name: 'name',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.TaskEnvironmentVariable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.TaskEnvironmentVariable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as events_targets from '@aws-cdk/aws-events-targets';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst taskEnvironmentVariable: events_targets.TaskEnvironmentVariable = {\n  name: 'name',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7c516536638742cd23783a2edd6c6848e861ce6bf7fc004aab647b0d040c3b84"
    }
  }
}