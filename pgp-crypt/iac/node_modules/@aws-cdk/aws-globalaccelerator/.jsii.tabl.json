{
  "version": "2",
  "toolVersion": "1.74.0",
  "snippets": {
    "77f61e6cfb8820f0bba9aa499dc7a7b18fb2f6218ebc5ca262297d91f863e9ca": {
      "translations": {
        "python": {
          "source": "# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(self, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create an Accelerator\naccelerator := globalaccelerator.NewAccelerator(this, jsii.String(\"Accelerator\"))\n\n// Create a Listener\nlistener := accelerator.addListener(jsii.String(\"Listener\"), &listenerOptions{\n\tportRanges: []portRange{\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(80),\n\t\t},\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(443),\n\t\t},\n\t},\n})\n\n// Import the Load Balancers\nnlb1 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB1\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"),\n})\nnlb2 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB2\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"),\n})\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(jsii.String(\"Group1\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb1),\n\t},\n})\nlistener.addEndpointGroup(jsii.String(\"Group2\"), &endpointGroupOptions{\n\t// Imported load balancers automatically calculate their Region from the ARN.\n\t// If you are load balancing to other resources, you must also pass a `region`\n\t// parameter here.\n\tendpoints: []*iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb2),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 34
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 31,
        "104": 3,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "ed46f018ba66137ef5efaa769931abc9f0336a49bc0b28c2e26fad0efaa5973c"
    },
    "99bb03ae6c1a0dc994be7925f4a15ac3bed4fcecbdeab3803612c3ec011bb8d6": {
      "translations": {
        "python": {
          "source": "# alb: elbv2.ApplicationLoadBalancer\n# listener: globalaccelerator.Listener\n\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n            weight=128,\n            preserve_client_ip=True\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer alb;\nListener listener;\n\n\nlistener.AddEndpointGroup(\"Group\", new EndpointGroupOptions {\n    Endpoints = new [] {\n        new ApplicationLoadBalancerEndpoint(alb, new ApplicationLoadBalancerEndpointOptions {\n            Weight = 128,\n            PreserveClientIp = true\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer alb;\nListener listener;\n\n\nlistener.addEndpointGroup(\"Group\", EndpointGroupOptions.builder()\n        .endpoints(List.of(\n            ApplicationLoadBalancerEndpoint.Builder.create(alb)\n                    .weight(128)\n                    .preserveClientIp(true)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var alb applicationLoadBalancer\nvar listener listener\n\n\nlistener.addEndpointGroup(jsii.String(\"Group\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewApplicationLoadBalancerEndpoint(alb, &applicationLoadBalancerEndpointOptions{\n\t\t\tweight: jsii.Number(128),\n\t\t\tpreserveClientIp: jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const alb: elbv2.ApplicationLoadBalancer;\ndeclare const listener: globalaccelerator.Listener;\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 93
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpointOptions",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alb: elbv2.ApplicationLoadBalancer;\ndeclare const listener: globalaccelerator.Listener;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0248a96f1360dbe09b7defe832d9bd4919e4d8206ad9ad491bb6e53adbcd0434"
    },
    "dbe6817a427b1bd3d9ecd8c148d3560ed74b431e8b3c4c2a5bc4c659cb27ff4c": {
      "translations": {
        "python": {
          "source": "# nlb: elbv2.NetworkLoadBalancer\n# listener: globalaccelerator.Listener\n\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.NetworkLoadBalancerEndpoint(nlb,\n            weight=128\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "NetworkLoadBalancer nlb;\nListener listener;\n\n\nlistener.AddEndpointGroup(\"Group\", new EndpointGroupOptions {\n    Endpoints = new [] {\n        new NetworkLoadBalancerEndpoint(nlb, new NetworkLoadBalancerEndpointProps {\n            Weight = 128\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer nlb;\nListener listener;\n\n\nlistener.addEndpointGroup(\"Group\", EndpointGroupOptions.builder()\n        .endpoints(List.of(\n            NetworkLoadBalancerEndpoint.Builder.create(nlb)\n                    .weight(128)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var nlb networkLoadBalancer\nvar listener listener\n\n\nlistener.addEndpointGroup(jsii.String(\"Group\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb, &networkLoadBalancerEndpointProps{\n\t\t\tweight: jsii.Number(128),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const nlb: elbv2.NetworkLoadBalancer;\ndeclare const listener: globalaccelerator.Listener;\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.NetworkLoadBalancerEndpoint(nlb, {\n      weight: 128,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 109
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpointProps",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const nlb: elbv2.NetworkLoadBalancer;\ndeclare const listener: globalaccelerator.Listener;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.NetworkLoadBalancerEndpoint(nlb, {\n      weight: 128,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ed6fff4375b169a3b3c2160945cecedd1e7663d443cd8bc6bd025780cd03d9d8"
    },
    "89c88c636880c6fc4b5f67bc80aa7197a13748a27639fcfa5430d7b5fb089122": {
      "translations": {
        "python": {
          "source": "# listener: globalaccelerator.Listener\n# instance: ec2.Instance\n\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.InstanceEndpoint(instance,\n            weight=128,\n            preserve_client_ip=True\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Listener listener;\nInstance instance;\n\n\nlistener.AddEndpointGroup(\"Group\", new EndpointGroupOptions {\n    Endpoints = new [] {\n        new InstanceEndpoint(instance, new InstanceEndpointProps {\n            Weight = 128,\n            PreserveClientIp = true\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Listener listener;\nInstance instance;\n\n\nlistener.addEndpointGroup(\"Group\", EndpointGroupOptions.builder()\n        .endpoints(List.of(\n            InstanceEndpoint.Builder.create(instance)\n                    .weight(128)\n                    .preserveClientIp(true)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var listener listener\nvar instance instance\n\n\nlistener.addEndpointGroup(jsii.String(\"Group\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewInstanceEndpoint(instance, &instanceEndpointProps{\n\t\t\tweight: jsii.Number(128),\n\t\t\tpreserveClientIp: jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: globalaccelerator.Listener;\ndeclare const instance: ec2.Instance;\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.InstanceEndpoint(instance, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 124
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInstance",
        "@aws-cdk/aws-globalaccelerator-endpoints.InstanceEndpoint",
        "@aws-cdk/aws-globalaccelerator-endpoints.InstanceEndpointProps",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: globalaccelerator.Listener;\ndeclare const instance: ec2.Instance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.InstanceEndpoint(instance, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3446f40b639ba2c4ad75274a2a8e1b308a448baedcf5f8516c10f2f8b2c3981b"
    },
    "d70efbedccb002f41adab8966ced91b9d43a6f46eee4de2968e39cda0e79a0f2": {
      "translations": {
        "python": {
          "source": "# listener: globalaccelerator.Listener\n# eip: ec2.CfnEIP\n\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.CfnEipEndpoint(eip,\n            weight=128\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Listener listener;\nCfnEIP eip;\n\n\nlistener.AddEndpointGroup(\"Group\", new EndpointGroupOptions {\n    Endpoints = new [] {\n        new CfnEipEndpoint(eip, new CfnEipEndpointProps {\n            Weight = 128\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Listener listener;\nCfnEIP eip;\n\n\nlistener.addEndpointGroup(\"Group\", EndpointGroupOptions.builder()\n        .endpoints(List.of(\n            CfnEipEndpoint.Builder.create(eip)\n                    .weight(128)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var listener listener\nvar eip cfnEIP\n\n\nlistener.addEndpointGroup(jsii.String(\"Group\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewCfnEipEndpoint(eip, &cfnEipEndpointProps{\n\t\t\tweight: jsii.Number(128),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: globalaccelerator.Listener;\ndeclare const eip: ec2.CfnEIP;\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.CfnEipEndpoint(eip, {\n      weight: 128,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 140
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIP",
        "@aws-cdk/aws-globalaccelerator-endpoints.CfnEipEndpoint",
        "@aws-cdk/aws-globalaccelerator-endpoints.CfnEipEndpointProps",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: globalaccelerator.Listener;\ndeclare const eip: ec2.CfnEIP;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.CfnEipEndpoint(eip, {\n      weight: 128,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "de889b2b3d438b0ae2f2bc7d58c23e812d389e733ff41c8265799af3b85d6b6e"
    },
    "c53a6220a79960d715f929dfa31ebbe35a80ac9b5950b92d1de30a8f91a2cb5e": {
      "translations": {
        "python": {
          "source": "# listener: globalaccelerator.Listener\n\n# Non-open ALB\n# alb: elbv2.ApplicationLoadBalancer\n\n# Remember that there is only one AGA security group per VPC.\n# vpc: ec2.Vpc\n\n\nendpoint_group = listener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n            preserve_client_ip=True\n        )\n    ]\n)\naga_sg = endpoint_group.connections_peer(\"GlobalAcceleratorSG\", vpc)\n\n# Allow connections from the AGA to the ALB\nalb.connections.allow_from(aga_sg, ec2.Port.tcp(443))",
          "version": "2"
        },
        "csharp": {
          "source": "Listener listener;\n\n// Non-open ALB\nApplicationLoadBalancer alb;\n\n// Remember that there is only one AGA security group per VPC.\nVpc vpc;\n\n\nEndpointGroup endpointGroup = listener.AddEndpointGroup(\"Group\", new EndpointGroupOptions {\n    Endpoints = new [] {\n        new ApplicationLoadBalancerEndpoint(alb, new ApplicationLoadBalancerEndpointOptions {\n            PreserveClientIp = true\n        }) }\n});\nIPeer agaSg = endpointGroup.ConnectionsPeer(\"GlobalAcceleratorSG\", vpc);\n\n// Allow connections from the AGA to the ALB\nalb.Connections.AllowFrom(agaSg, Port.Tcp(443));",
          "version": "1"
        },
        "java": {
          "source": "Listener listener;\n\n// Non-open ALB\nApplicationLoadBalancer alb;\n\n// Remember that there is only one AGA security group per VPC.\nVpc vpc;\n\n\nEndpointGroup endpointGroup = listener.addEndpointGroup(\"Group\", EndpointGroupOptions.builder()\n        .endpoints(List.of(\n            ApplicationLoadBalancerEndpoint.Builder.create(alb)\n                    .preserveClientIp(true)\n                    .build()))\n        .build());\nIPeer agaSg = endpointGroup.connectionsPeer(\"GlobalAcceleratorSG\", vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, Port.tcp(443));",
          "version": "1"
        },
        "go": {
          "source": "var listener listener\n\n// Non-open ALB\nvar alb applicationLoadBalancer\n\n// Remember that there is only one AGA security group per VPC.\nvar vpc vpc\n\n\nendpointGroup := listener.addEndpointGroup(jsii.String(\"Group\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewApplicationLoadBalancerEndpoint(alb, &applicationLoadBalancerEndpointOptions{\n\t\t\tpreserveClientIp: jsii.Boolean(true),\n\t\t}),\n\t},\n})\nagaSg := endpointGroup.connectionsPeer(jsii.String(\"GlobalAcceleratorSG\"), vpc)\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, ec2.port.tcp(jsii.Number(443)))",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: globalaccelerator.Listener;\n\n// Non-open ALB\ndeclare const alb: elbv2.ApplicationLoadBalancer;\n\nconst endpointGroup = listener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      preserveClientIp: true,\n    }),\n  ],\n});\n\n// Remember that there is only one AGA security group per VPC.\ndeclare const vpc: ec2.Vpc;\nconst agaSg = endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, ec2.Port.tcp(443));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 172
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#connections",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpointOptions",
        "@aws-cdk/aws-globalaccelerator.EndpointGroup",
        "@aws-cdk/aws-globalaccelerator.EndpointGroup#connectionsPeer",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: globalaccelerator.Listener;\n\n// Non-open ALB\ndeclare const alb: elbv2.ApplicationLoadBalancer;\n\n// Remember that there is only one AGA security group per VPC.\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst endpointGroup = listener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      preserveClientIp: true,\n    }),\n  ],\n});\nconst agaSg = endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, ec2.Port.tcp(443));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 28,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "630a1a057ddafea986c4361d8a12f2128bafab85d5be144864eaf435b5b56195"
    },
    "a15be212ce7e919256646794e6240827a1c48ad3154d5ea9ac0aacd67fcf030b": {
      "translations": {
        "python": {
          "source": "# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(self, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create an Accelerator\naccelerator := globalaccelerator.NewAccelerator(this, jsii.String(\"Accelerator\"))\n\n// Create a Listener\nlistener := accelerator.addListener(jsii.String(\"Listener\"), &listenerOptions{\n\tportRanges: []portRange{\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(80),\n\t\t},\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(443),\n\t\t},\n\t},\n})\n\n// Import the Load Balancers\nnlb1 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB1\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"),\n})\nnlb2 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB2\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"),\n})\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(jsii.String(\"Group1\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb1),\n\t},\n})\nlistener.addEndpointGroup(jsii.String(\"Group2\"), &endpointGroupOptions{\n\t// Imported load balancers automatically calculate their Region from the ARN.\n\t// If you are load balancing to other resources, you must also pass a `region`\n\t// parameter here.\n\tendpoints: []*iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb2),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.Accelerator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 31,
        "104": 3,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "ed46f018ba66137ef5efaa769931abc9f0336a49bc0b28c2e26fad0efaa5973c"
    },
    "6d0d92fd23788a5929d283a378e8b9be06db166de3f8252ced00a0f777a1d7a0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\naccelerator_attributes = globalaccelerator.AcceleratorAttributes(\n    accelerator_arn=\"acceleratorArn\",\n    dns_name=\"dnsName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nAcceleratorAttributes acceleratorAttributes = new AcceleratorAttributes {\n    AcceleratorArn = \"acceleratorArn\",\n    DnsName = \"dnsName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nAcceleratorAttributes acceleratorAttributes = AcceleratorAttributes.builder()\n        .acceleratorArn(\"acceleratorArn\")\n        .dnsName(\"dnsName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nacceleratorAttributes := &acceleratorAttributes{\n\tacceleratorArn: jsii.String(\"acceleratorArn\"),\n\tdnsName: jsii.String(\"dnsName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst acceleratorAttributes: globalaccelerator.AcceleratorAttributes = {\n  acceleratorArn: 'acceleratorArn',\n  dnsName: 'dnsName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.AcceleratorAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.AcceleratorAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorAttributes: globalaccelerator.AcceleratorAttributes = {\n  acceleratorArn: 'acceleratorArn',\n  dnsName: 'dnsName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d17abdd4897eb3ba74b578ef5c1b09e8330afda67da9543dcb5f932870dd10d2"
    },
    "d0644f023e16383bd1196beee36ae912f08243ad5714b13afdb4ac7e00238604": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\naccelerator_props = globalaccelerator.AcceleratorProps(\n    accelerator_name=\"acceleratorName\",\n    enabled=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nAcceleratorProps acceleratorProps = new AcceleratorProps {\n    AcceleratorName = \"acceleratorName\",\n    Enabled = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nAcceleratorProps acceleratorProps = AcceleratorProps.builder()\n        .acceleratorName(\"acceleratorName\")\n        .enabled(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nacceleratorProps := &acceleratorProps{\n\tacceleratorName: jsii.String(\"acceleratorName\"),\n\tenabled: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst acceleratorProps: globalaccelerator.AcceleratorProps = {\n  acceleratorName: 'acceleratorName',\n  enabled: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.AcceleratorProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.AcceleratorProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst acceleratorProps: globalaccelerator.AcceleratorProps = {\n  acceleratorName: 'acceleratorName',\n  enabled: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "46efd097fe0f87b9e49ee9a42e69f5fe4c9235dbb4441a1f827929f12f15b7a7"
    },
    "a216bd90840aef519cf98e93915097a96d11274037d29756bd98d5b082d98e25": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\ncfn_accelerator = globalaccelerator.CfnAccelerator(self, \"MyCfnAccelerator\",\n    name=\"name\",\n\n    # the properties below are optional\n    enabled=False,\n    ip_addresses=[\"ipAddresses\"],\n    ip_address_type=\"ipAddressType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nCfnAccelerator cfnAccelerator = new CfnAccelerator(this, \"MyCfnAccelerator\", new CfnAcceleratorProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Enabled = false,\n    IpAddresses = new [] { \"ipAddresses\" },\n    IpAddressType = \"ipAddressType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nCfnAccelerator cfnAccelerator = CfnAccelerator.Builder.create(this, \"MyCfnAccelerator\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .enabled(false)\n        .ipAddresses(List.of(\"ipAddresses\"))\n        .ipAddressType(\"ipAddressType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\ncfnAccelerator := globalaccelerator.NewCfnAccelerator(this, jsii.String(\"MyCfnAccelerator\"), &cfnAcceleratorProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tenabled: jsii.Boolean(false),\n\tipAddresses: []*string{\n\t\tjsii.String(\"ipAddresses\"),\n\t},\n\tipAddressType: jsii.String(\"ipAddressType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst cfnAccelerator = new globalaccelerator.CfnAccelerator(this, 'MyCfnAccelerator', {\n  name: 'name',\n\n  // the properties below are optional\n  enabled: false,\n  ipAddresses: ['ipAddresses'],\n  ipAddressType: 'ipAddressType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnAccelerator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnAccelerator",
        "@aws-cdk/aws-globalaccelerator.CfnAcceleratorProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAccelerator = new globalaccelerator.CfnAccelerator(this, 'MyCfnAccelerator', {\n  name: 'name',\n\n  // the properties below are optional\n  enabled: false,\n  ipAddresses: ['ipAddresses'],\n  ipAddressType: 'ipAddressType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 11,
        "91": 1,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "6342dd62661aa5914c379e88a734b9e8182d1b067d0db7963dd150a99f78968b"
    },
    "c6b93e7ac3674b94f438aeac625b5c4efd17601953da606f01e33e4ff7426a56": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\ncfn_accelerator_props = globalaccelerator.CfnAcceleratorProps(\n    name=\"name\",\n\n    # the properties below are optional\n    enabled=False,\n    ip_addresses=[\"ipAddresses\"],\n    ip_address_type=\"ipAddressType\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nCfnAcceleratorProps cfnAcceleratorProps = new CfnAcceleratorProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Enabled = false,\n    IpAddresses = new [] { \"ipAddresses\" },\n    IpAddressType = \"ipAddressType\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nCfnAcceleratorProps cfnAcceleratorProps = CfnAcceleratorProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .enabled(false)\n        .ipAddresses(List.of(\"ipAddresses\"))\n        .ipAddressType(\"ipAddressType\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\ncfnAcceleratorProps := &cfnAcceleratorProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tenabled: jsii.Boolean(false),\n\tipAddresses: []*string{\n\t\tjsii.String(\"ipAddresses\"),\n\t},\n\tipAddressType: jsii.String(\"ipAddressType\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst cfnAcceleratorProps: globalaccelerator.CfnAcceleratorProps = {\n  name: 'name',\n\n  // the properties below are optional\n  enabled: false,\n  ipAddresses: ['ipAddresses'],\n  ipAddressType: 'ipAddressType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnAcceleratorProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnAcceleratorProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnAcceleratorProps: globalaccelerator.CfnAcceleratorProps = {\n  name: 'name',\n\n  // the properties below are optional\n  enabled: false,\n  ipAddresses: ['ipAddresses'],\n  ipAddressType: 'ipAddressType',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "6e274064a6cf6880d5d84ede079f363fa9176182e64e8f5342aa42c85b9724d7"
    },
    "15bf711be9102f152b1e33d18b7e0347bfb95317313ce725a679b461df774b7b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\ncfn_endpoint_group = globalaccelerator.CfnEndpointGroup(self, \"MyCfnEndpointGroup\",\n    endpoint_group_region=\"endpointGroupRegion\",\n    listener_arn=\"listenerArn\",\n\n    # the properties below are optional\n    endpoint_configurations=[globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty(\n        endpoint_id=\"endpointId\",\n\n        # the properties below are optional\n        client_ip_preservation_enabled=False,\n        weight=123\n    )],\n    health_check_interval_seconds=123,\n    health_check_path=\"healthCheckPath\",\n    health_check_port=123,\n    health_check_protocol=\"healthCheckProtocol\",\n    port_overrides=[globalaccelerator.CfnEndpointGroup.PortOverrideProperty(\n        endpoint_port=123,\n        listener_port=123\n    )],\n    threshold_count=123,\n    traffic_dial_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nCfnEndpointGroup cfnEndpointGroup = new CfnEndpointGroup(this, \"MyCfnEndpointGroup\", new CfnEndpointGroupProps {\n    EndpointGroupRegion = \"endpointGroupRegion\",\n    ListenerArn = \"listenerArn\",\n\n    // the properties below are optional\n    EndpointConfigurations = new [] { new EndpointConfigurationProperty {\n        EndpointId = \"endpointId\",\n\n        // the properties below are optional\n        ClientIpPreservationEnabled = false,\n        Weight = 123\n    } },\n    HealthCheckIntervalSeconds = 123,\n    HealthCheckPath = \"healthCheckPath\",\n    HealthCheckPort = 123,\n    HealthCheckProtocol = \"healthCheckProtocol\",\n    PortOverrides = new [] { new PortOverrideProperty {\n        EndpointPort = 123,\n        ListenerPort = 123\n    } },\n    ThresholdCount = 123,\n    TrafficDialPercentage = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nCfnEndpointGroup cfnEndpointGroup = CfnEndpointGroup.Builder.create(this, \"MyCfnEndpointGroup\")\n        .endpointGroupRegion(\"endpointGroupRegion\")\n        .listenerArn(\"listenerArn\")\n\n        // the properties below are optional\n        .endpointConfigurations(List.of(EndpointConfigurationProperty.builder()\n                .endpointId(\"endpointId\")\n\n                // the properties below are optional\n                .clientIpPreservationEnabled(false)\n                .weight(123)\n                .build()))\n        .healthCheckIntervalSeconds(123)\n        .healthCheckPath(\"healthCheckPath\")\n        .healthCheckPort(123)\n        .healthCheckProtocol(\"healthCheckProtocol\")\n        .portOverrides(List.of(PortOverrideProperty.builder()\n                .endpointPort(123)\n                .listenerPort(123)\n                .build()))\n        .thresholdCount(123)\n        .trafficDialPercentage(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\ncfnEndpointGroup := globalaccelerator.NewCfnEndpointGroup(this, jsii.String(\"MyCfnEndpointGroup\"), &cfnEndpointGroupProps{\n\tendpointGroupRegion: jsii.String(\"endpointGroupRegion\"),\n\tlistenerArn: jsii.String(\"listenerArn\"),\n\n\t// the properties below are optional\n\tendpointConfigurations: []interface{}{\n\t\t&endpointConfigurationProperty{\n\t\t\tendpointId: jsii.String(\"endpointId\"),\n\n\t\t\t// the properties below are optional\n\t\t\tclientIpPreservationEnabled: jsii.Boolean(false),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\thealthCheckIntervalSeconds: jsii.Number(123),\n\thealthCheckPath: jsii.String(\"healthCheckPath\"),\n\thealthCheckPort: jsii.Number(123),\n\thealthCheckProtocol: jsii.String(\"healthCheckProtocol\"),\n\tportOverrides: []interface{}{\n\t\t&portOverrideProperty{\n\t\t\tendpointPort: jsii.Number(123),\n\t\t\tlistenerPort: jsii.Number(123),\n\t\t},\n\t},\n\tthresholdCount: jsii.Number(123),\n\ttrafficDialPercentage: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst cfnEndpointGroup = new globalaccelerator.CfnEndpointGroup(this, 'MyCfnEndpointGroup', {\n  endpointGroupRegion: 'endpointGroupRegion',\n  listenerArn: 'listenerArn',\n\n  // the properties below are optional\n  endpointConfigurations: [{\n    endpointId: 'endpointId',\n\n    // the properties below are optional\n    clientIpPreservationEnabled: false,\n    weight: 123,\n  }],\n  healthCheckIntervalSeconds: 123,\n  healthCheckPath: 'healthCheckPath',\n  healthCheckPort: 123,\n  healthCheckProtocol: 'healthCheckProtocol',\n  portOverrides: [{\n    endpointPort: 123,\n    listenerPort: 123,\n  }],\n  thresholdCount: 123,\n  trafficDialPercentage: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnEndpointGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.CfnEndpointGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpointGroup = new globalaccelerator.CfnEndpointGroup(this, 'MyCfnEndpointGroup', {\n  endpointGroupRegion: 'endpointGroupRegion',\n  listenerArn: 'listenerArn',\n\n  // the properties below are optional\n  endpointConfigurations: [{\n    endpointId: 'endpointId',\n\n    // the properties below are optional\n    clientIpPreservationEnabled: false,\n    weight: 123,\n  }],\n  healthCheckIntervalSeconds: 123,\n  healthCheckPath: 'healthCheckPath',\n  healthCheckPort: 123,\n  healthCheckProtocol: 'healthCheckProtocol',\n  portOverrides: [{\n    endpointPort: 123,\n    listenerPort: 123,\n  }],\n  thresholdCount: 123,\n  trafficDialPercentage: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 7,
        "75": 19,
        "91": 1,
        "104": 1,
        "192": 2,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "c1cba15256160883b5bca1439bf24d2c4e6f5eb741b2759b71fb5df5b9779cfa"
    },
    "681e18022f95ff63067910eaae9b2ccfcd1805f3c74a04b0ea99201b87c9f317": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\nendpoint_configuration_property = globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty(\n    endpoint_id=\"endpointId\",\n\n    # the properties below are optional\n    client_ip_preservation_enabled=False,\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nEndpointConfigurationProperty endpointConfigurationProperty = new EndpointConfigurationProperty {\n    EndpointId = \"endpointId\",\n\n    // the properties below are optional\n    ClientIpPreservationEnabled = false,\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nEndpointConfigurationProperty endpointConfigurationProperty = EndpointConfigurationProperty.builder()\n        .endpointId(\"endpointId\")\n\n        // the properties below are optional\n        .clientIpPreservationEnabled(false)\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nendpointConfigurationProperty := &endpointConfigurationProperty{\n\tendpointId: jsii.String(\"endpointId\"),\n\n\t// the properties below are optional\n\tclientIpPreservationEnabled: jsii.Boolean(false),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst endpointConfigurationProperty: globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty = {\n  endpointId: 'endpointId',\n\n  // the properties below are optional\n  clientIpPreservationEnabled: false,\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointConfigurationProperty: globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty = {\n  endpointId: 'endpointId',\n\n  // the properties below are optional\n  clientIpPreservationEnabled: false,\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 8,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0c47bf0c05b264f71dc02ecfb98d081085f1f191b366c0128fbd70f487d72453"
    },
    "80f53a0a0bd8d54977d0a37610bdfc43565d8142af880d7615d65a9f1c300724": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\nport_override_property = globalaccelerator.CfnEndpointGroup.PortOverrideProperty(\n    endpoint_port=123,\n    listener_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nPortOverrideProperty portOverrideProperty = new PortOverrideProperty {\n    EndpointPort = 123,\n    ListenerPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nPortOverrideProperty portOverrideProperty = PortOverrideProperty.builder()\n        .endpointPort(123)\n        .listenerPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nportOverrideProperty := &portOverrideProperty{\n\tendpointPort: jsii.Number(123),\n\tlistenerPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst portOverrideProperty: globalaccelerator.CfnEndpointGroup.PortOverrideProperty = {\n  endpointPort: 123,\n  listenerPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnEndpointGroup.PortOverrideProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnEndpointGroup.PortOverrideProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portOverrideProperty: globalaccelerator.CfnEndpointGroup.PortOverrideProperty = {\n  endpointPort: 123,\n  listenerPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "67e4e825e7c476a73ad7f60342c45dc0a7aa548b78fb377626ea63c7131deb48"
    },
    "778c7d7e040210ca915e32e1be4557095d868bbb8a8877bf7bd0f8e019b12fa6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\ncfn_endpoint_group_props = globalaccelerator.CfnEndpointGroupProps(\n    endpoint_group_region=\"endpointGroupRegion\",\n    listener_arn=\"listenerArn\",\n\n    # the properties below are optional\n    endpoint_configurations=[globalaccelerator.CfnEndpointGroup.EndpointConfigurationProperty(\n        endpoint_id=\"endpointId\",\n\n        # the properties below are optional\n        client_ip_preservation_enabled=False,\n        weight=123\n    )],\n    health_check_interval_seconds=123,\n    health_check_path=\"healthCheckPath\",\n    health_check_port=123,\n    health_check_protocol=\"healthCheckProtocol\",\n    port_overrides=[globalaccelerator.CfnEndpointGroup.PortOverrideProperty(\n        endpoint_port=123,\n        listener_port=123\n    )],\n    threshold_count=123,\n    traffic_dial_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nCfnEndpointGroupProps cfnEndpointGroupProps = new CfnEndpointGroupProps {\n    EndpointGroupRegion = \"endpointGroupRegion\",\n    ListenerArn = \"listenerArn\",\n\n    // the properties below are optional\n    EndpointConfigurations = new [] { new EndpointConfigurationProperty {\n        EndpointId = \"endpointId\",\n\n        // the properties below are optional\n        ClientIpPreservationEnabled = false,\n        Weight = 123\n    } },\n    HealthCheckIntervalSeconds = 123,\n    HealthCheckPath = \"healthCheckPath\",\n    HealthCheckPort = 123,\n    HealthCheckProtocol = \"healthCheckProtocol\",\n    PortOverrides = new [] { new PortOverrideProperty {\n        EndpointPort = 123,\n        ListenerPort = 123\n    } },\n    ThresholdCount = 123,\n    TrafficDialPercentage = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nCfnEndpointGroupProps cfnEndpointGroupProps = CfnEndpointGroupProps.builder()\n        .endpointGroupRegion(\"endpointGroupRegion\")\n        .listenerArn(\"listenerArn\")\n\n        // the properties below are optional\n        .endpointConfigurations(List.of(EndpointConfigurationProperty.builder()\n                .endpointId(\"endpointId\")\n\n                // the properties below are optional\n                .clientIpPreservationEnabled(false)\n                .weight(123)\n                .build()))\n        .healthCheckIntervalSeconds(123)\n        .healthCheckPath(\"healthCheckPath\")\n        .healthCheckPort(123)\n        .healthCheckProtocol(\"healthCheckProtocol\")\n        .portOverrides(List.of(PortOverrideProperty.builder()\n                .endpointPort(123)\n                .listenerPort(123)\n                .build()))\n        .thresholdCount(123)\n        .trafficDialPercentage(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\ncfnEndpointGroupProps := &cfnEndpointGroupProps{\n\tendpointGroupRegion: jsii.String(\"endpointGroupRegion\"),\n\tlistenerArn: jsii.String(\"listenerArn\"),\n\n\t// the properties below are optional\n\tendpointConfigurations: []interface{}{\n\t\t&endpointConfigurationProperty{\n\t\t\tendpointId: jsii.String(\"endpointId\"),\n\n\t\t\t// the properties below are optional\n\t\t\tclientIpPreservationEnabled: jsii.Boolean(false),\n\t\t\tweight: jsii.Number(123),\n\t\t},\n\t},\n\thealthCheckIntervalSeconds: jsii.Number(123),\n\thealthCheckPath: jsii.String(\"healthCheckPath\"),\n\thealthCheckPort: jsii.Number(123),\n\thealthCheckProtocol: jsii.String(\"healthCheckProtocol\"),\n\tportOverrides: []interface{}{\n\t\t&portOverrideProperty{\n\t\t\tendpointPort: jsii.Number(123),\n\t\t\tlistenerPort: jsii.Number(123),\n\t\t},\n\t},\n\tthresholdCount: jsii.Number(123),\n\ttrafficDialPercentage: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst cfnEndpointGroupProps: globalaccelerator.CfnEndpointGroupProps = {\n  endpointGroupRegion: 'endpointGroupRegion',\n  listenerArn: 'listenerArn',\n\n  // the properties below are optional\n  endpointConfigurations: [{\n    endpointId: 'endpointId',\n\n    // the properties below are optional\n    clientIpPreservationEnabled: false,\n    weight: 123,\n  }],\n  healthCheckIntervalSeconds: 123,\n  healthCheckPath: 'healthCheckPath',\n  healthCheckPort: 123,\n  healthCheckProtocol: 'healthCheckProtocol',\n  portOverrides: [{\n    endpointPort: 123,\n    listenerPort: 123,\n  }],\n  thresholdCount: 123,\n  trafficDialPercentage: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnEndpointGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnEndpointGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnEndpointGroupProps: globalaccelerator.CfnEndpointGroupProps = {\n  endpointGroupRegion: 'endpointGroupRegion',\n  listenerArn: 'listenerArn',\n\n  // the properties below are optional\n  endpointConfigurations: [{\n    endpointId: 'endpointId',\n\n    // the properties below are optional\n    clientIpPreservationEnabled: false,\n    weight: 123,\n  }],\n  healthCheckIntervalSeconds: 123,\n  healthCheckPath: 'healthCheckPath',\n  healthCheckPort: 123,\n  healthCheckProtocol: 'healthCheckProtocol',\n  portOverrides: [{\n    endpointPort: 123,\n    listenerPort: 123,\n  }],\n  thresholdCount: 123,\n  trafficDialPercentage: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 7,
        "10": 6,
        "75": 19,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "ad173afc600487f46e9befb12f44e5fac0ff97c4616a7e5182d164905079df41"
    },
    "41503d511ed746f4cc812d4ba41f510bac8a8b2f4b948eb4c9159fa6062baeb8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\ncfn_listener = globalaccelerator.CfnListener(self, \"MyCfnListener\",\n    accelerator_arn=\"acceleratorArn\",\n    port_ranges=[globalaccelerator.CfnListener.PortRangeProperty(\n        from_port=123,\n        to_port=123\n    )],\n    protocol=\"protocol\",\n\n    # the properties below are optional\n    client_affinity=\"clientAffinity\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nCfnListener cfnListener = new CfnListener(this, \"MyCfnListener\", new CfnListenerProps {\n    AcceleratorArn = \"acceleratorArn\",\n    PortRanges = new [] { new PortRangeProperty {\n        FromPort = 123,\n        ToPort = 123\n    } },\n    Protocol = \"protocol\",\n\n    // the properties below are optional\n    ClientAffinity = \"clientAffinity\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nCfnListener cfnListener = CfnListener.Builder.create(this, \"MyCfnListener\")\n        .acceleratorArn(\"acceleratorArn\")\n        .portRanges(List.of(PortRangeProperty.builder()\n                .fromPort(123)\n                .toPort(123)\n                .build()))\n        .protocol(\"protocol\")\n\n        // the properties below are optional\n        .clientAffinity(\"clientAffinity\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\ncfnListener := globalaccelerator.NewCfnListener(this, jsii.String(\"MyCfnListener\"), &cfnListenerProps{\n\tacceleratorArn: jsii.String(\"acceleratorArn\"),\n\tportRanges: []interface{}{\n\t\t&portRangeProperty{\n\t\t\tfromPort: jsii.Number(123),\n\t\t\ttoPort: jsii.Number(123),\n\t\t},\n\t},\n\tprotocol: jsii.String(\"protocol\"),\n\n\t// the properties below are optional\n\tclientAffinity: jsii.String(\"clientAffinity\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst cfnListener = new globalaccelerator.CfnListener(this, 'MyCfnListener', {\n  acceleratorArn: 'acceleratorArn',\n  portRanges: [{\n    fromPort: 123,\n    toPort: 123,\n  }],\n  protocol: 'protocol',\n\n  // the properties below are optional\n  clientAffinity: 'clientAffinity',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnListener"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnListener",
        "@aws-cdk/aws-globalaccelerator.CfnListenerProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnListener = new globalaccelerator.CfnListener(this, 'MyCfnListener', {\n  acceleratorArn: 'acceleratorArn',\n  portRanges: [{\n    fromPort: 123,\n    toPort: 123,\n  }],\n  protocol: 'protocol',\n\n  // the properties below are optional\n  clientAffinity: 'clientAffinity',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c07a4d6db613325e6f29229167899bd8da775fb306e4dbfd1adef8a3034e43f1"
    },
    "3fe026d2bb3b10cc2f6b5b1f1703f19a2cac41f4c46689b4a7428bf0e3e69ab1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\nport_range_property = globalaccelerator.CfnListener.PortRangeProperty(\n    from_port=123,\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nPortRangeProperty portRangeProperty = new PortRangeProperty {\n    FromPort = 123,\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nPortRangeProperty portRangeProperty = PortRangeProperty.builder()\n        .fromPort(123)\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nportRangeProperty := &portRangeProperty{\n\tfromPort: jsii.Number(123),\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst portRangeProperty: globalaccelerator.CfnListener.PortRangeProperty = {\n  fromPort: 123,\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnListener.PortRangeProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnListener.PortRangeProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portRangeProperty: globalaccelerator.CfnListener.PortRangeProperty = {\n  fromPort: 123,\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d77262def95379d71df33e4b6b3fa77116a511c57216ccd288bbb21b468e8442"
    },
    "1c7b503f35937dda48dc6b7793bff6107b437132866b83af0f5f811c6c0fd1db": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\ncfn_listener_props = globalaccelerator.CfnListenerProps(\n    accelerator_arn=\"acceleratorArn\",\n    port_ranges=[globalaccelerator.CfnListener.PortRangeProperty(\n        from_port=123,\n        to_port=123\n    )],\n    protocol=\"protocol\",\n\n    # the properties below are optional\n    client_affinity=\"clientAffinity\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nCfnListenerProps cfnListenerProps = new CfnListenerProps {\n    AcceleratorArn = \"acceleratorArn\",\n    PortRanges = new [] { new PortRangeProperty {\n        FromPort = 123,\n        ToPort = 123\n    } },\n    Protocol = \"protocol\",\n\n    // the properties below are optional\n    ClientAffinity = \"clientAffinity\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nCfnListenerProps cfnListenerProps = CfnListenerProps.builder()\n        .acceleratorArn(\"acceleratorArn\")\n        .portRanges(List.of(PortRangeProperty.builder()\n                .fromPort(123)\n                .toPort(123)\n                .build()))\n        .protocol(\"protocol\")\n\n        // the properties below are optional\n        .clientAffinity(\"clientAffinity\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\ncfnListenerProps := &cfnListenerProps{\n\tacceleratorArn: jsii.String(\"acceleratorArn\"),\n\tportRanges: []interface{}{\n\t\t&portRangeProperty{\n\t\t\tfromPort: jsii.Number(123),\n\t\t\ttoPort: jsii.Number(123),\n\t\t},\n\t},\n\tprotocol: jsii.String(\"protocol\"),\n\n\t// the properties below are optional\n\tclientAffinity: jsii.String(\"clientAffinity\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst cfnListenerProps: globalaccelerator.CfnListenerProps = {\n  acceleratorArn: 'acceleratorArn',\n  portRanges: [{\n    fromPort: 123,\n    toPort: 123,\n  }],\n  protocol: 'protocol',\n\n  // the properties below are optional\n  clientAffinity: 'clientAffinity',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.CfnListenerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.CfnListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnListenerProps: globalaccelerator.CfnListenerProps = {\n  acceleratorArn: 'acceleratorArn',\n  portRanges: [{\n    fromPort: 123,\n    toPort: 123,\n  }],\n  protocol: 'protocol',\n\n  // the properties below are optional\n  clientAffinity: 'clientAffinity',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 10,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "8c0e38782e1a84fe62cfe5f1836648c0545db49d6a4f7e5c1571aba941b699ec"
    },
    "da8a91e0d916648c82906d8d19630a6ac980737c46ff10c0f4d753f9f7b2cd38": {
      "translations": {
        "python": {
          "source": "# listener: globalaccelerator.Listener\n\n# Non-open ALB\n# alb: elbv2.ApplicationLoadBalancer\n\n# Remember that there is only one AGA security group per VPC.\n# vpc: ec2.Vpc\n\n\nendpoint_group = listener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n            preserve_client_ip=True\n        )\n    ]\n)\naga_sg = endpoint_group.connections_peer(\"GlobalAcceleratorSG\", vpc)\n\n# Allow connections from the AGA to the ALB\nalb.connections.allow_from(aga_sg, ec2.Port.tcp(443))",
          "version": "2"
        },
        "csharp": {
          "source": "Listener listener;\n\n// Non-open ALB\nApplicationLoadBalancer alb;\n\n// Remember that there is only one AGA security group per VPC.\nVpc vpc;\n\n\nEndpointGroup endpointGroup = listener.AddEndpointGroup(\"Group\", new EndpointGroupOptions {\n    Endpoints = new [] {\n        new ApplicationLoadBalancerEndpoint(alb, new ApplicationLoadBalancerEndpointOptions {\n            PreserveClientIp = true\n        }) }\n});\nIPeer agaSg = endpointGroup.ConnectionsPeer(\"GlobalAcceleratorSG\", vpc);\n\n// Allow connections from the AGA to the ALB\nalb.Connections.AllowFrom(agaSg, Port.Tcp(443));",
          "version": "1"
        },
        "java": {
          "source": "Listener listener;\n\n// Non-open ALB\nApplicationLoadBalancer alb;\n\n// Remember that there is only one AGA security group per VPC.\nVpc vpc;\n\n\nEndpointGroup endpointGroup = listener.addEndpointGroup(\"Group\", EndpointGroupOptions.builder()\n        .endpoints(List.of(\n            ApplicationLoadBalancerEndpoint.Builder.create(alb)\n                    .preserveClientIp(true)\n                    .build()))\n        .build());\nIPeer agaSg = endpointGroup.connectionsPeer(\"GlobalAcceleratorSG\", vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, Port.tcp(443));",
          "version": "1"
        },
        "go": {
          "source": "var listener listener\n\n// Non-open ALB\nvar alb applicationLoadBalancer\n\n// Remember that there is only one AGA security group per VPC.\nvar vpc vpc\n\n\nendpointGroup := listener.addEndpointGroup(jsii.String(\"Group\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewApplicationLoadBalancerEndpoint(alb, &applicationLoadBalancerEndpointOptions{\n\t\t\tpreserveClientIp: jsii.Boolean(true),\n\t\t}),\n\t},\n})\nagaSg := endpointGroup.connectionsPeer(jsii.String(\"GlobalAcceleratorSG\"), vpc)\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, ec2.port.tcp(jsii.Number(443)))",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: globalaccelerator.Listener;\n\n// Non-open ALB\ndeclare const alb: elbv2.ApplicationLoadBalancer;\n\nconst endpointGroup = listener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      preserveClientIp: true,\n    }),\n  ],\n});\n\n// Remember that there is only one AGA security group per VPC.\ndeclare const vpc: ec2.Vpc;\nconst agaSg = endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, ec2.Port.tcp(443));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.EndpointGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#connections",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpointOptions",
        "@aws-cdk/aws-globalaccelerator.EndpointGroup",
        "@aws-cdk/aws-globalaccelerator.EndpointGroup#connectionsPeer",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: globalaccelerator.Listener;\n\n// Non-open ALB\ndeclare const alb: elbv2.ApplicationLoadBalancer;\n\n// Remember that there is only one AGA security group per VPC.\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst endpointGroup = listener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      preserveClientIp: true,\n    }),\n  ],\n});\nconst agaSg = endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, ec2.Port.tcp(443));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 28,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "630a1a057ddafea986c4361d8a12f2128bafab85d5be144864eaf435b5b56195"
    },
    "085a2378592033321c4c87d07c3b9e48829e359339a25369a8612818dfd7061a": {
      "translations": {
        "python": {
          "source": "# alb: elbv2.ApplicationLoadBalancer\n# listener: globalaccelerator.Listener\n\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n            weight=128,\n            preserve_client_ip=True\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer alb;\nListener listener;\n\n\nlistener.AddEndpointGroup(\"Group\", new EndpointGroupOptions {\n    Endpoints = new [] {\n        new ApplicationLoadBalancerEndpoint(alb, new ApplicationLoadBalancerEndpointOptions {\n            Weight = 128,\n            PreserveClientIp = true\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer alb;\nListener listener;\n\n\nlistener.addEndpointGroup(\"Group\", EndpointGroupOptions.builder()\n        .endpoints(List.of(\n            ApplicationLoadBalancerEndpoint.Builder.create(alb)\n                    .weight(128)\n                    .preserveClientIp(true)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var alb applicationLoadBalancer\nvar listener listener\n\n\nlistener.addEndpointGroup(jsii.String(\"Group\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewApplicationLoadBalancerEndpoint(alb, &applicationLoadBalancerEndpointOptions{\n\t\t\tweight: jsii.Number(128),\n\t\t\tpreserveClientIp: jsii.Boolean(true),\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const alb: elbv2.ApplicationLoadBalancer;\ndeclare const listener: globalaccelerator.Listener;\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator-endpoints.ApplicationLoadBalancerEndpointOptions",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alb: elbv2.ApplicationLoadBalancer;\ndeclare const listener: globalaccelerator.Listener;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0248a96f1360dbe09b7defe832d9bd4919e4d8206ad9ad491bb6e53adbcd0434"
    },
    "994aa3806408bc9c165161aea52a08ca5d63cb37939cb45cb3cfd2a905a12ace": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\nimport aws_cdk.core as cdk\n\n# endpoint: globalaccelerator.IEndpoint\n# listener: globalaccelerator.Listener\n\nendpoint_group_props = globalaccelerator.EndpointGroupProps(\n    listener=listener,\n\n    # the properties below are optional\n    endpoint_group_name=\"endpointGroupName\",\n    endpoints=[endpoint],\n    health_check_interval=cdk.Duration.minutes(30),\n    health_check_path=\"healthCheckPath\",\n    health_check_port=123,\n    health_check_protocol=globalaccelerator.HealthCheckProtocol.TCP,\n    health_check_threshold=123,\n    port_overrides=[globalaccelerator.PortOverride(\n        endpoint_port=123,\n        listener_port=123\n    )],\n    region=\"region\",\n    traffic_dial_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\nusing Amazon.CDK;\n\nIEndpoint endpoint;\nListener listener;\nEndpointGroupProps endpointGroupProps = new EndpointGroupProps {\n    Listener = listener,\n\n    // the properties below are optional\n    EndpointGroupName = \"endpointGroupName\",\n    Endpoints = new [] { endpoint },\n    HealthCheckInterval = Duration.Minutes(30),\n    HealthCheckPath = \"healthCheckPath\",\n    HealthCheckPort = 123,\n    HealthCheckProtocol = HealthCheckProtocol.TCP,\n    HealthCheckThreshold = 123,\n    PortOverrides = new [] { new PortOverride {\n        EndpointPort = 123,\n        ListenerPort = 123\n    } },\n    Region = \"region\",\n    TrafficDialPercentage = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\nimport software.amazon.awscdk.core.*;\n\nIEndpoint endpoint;\nListener listener;\n\nEndpointGroupProps endpointGroupProps = EndpointGroupProps.builder()\n        .listener(listener)\n\n        // the properties below are optional\n        .endpointGroupName(\"endpointGroupName\")\n        .endpoints(List.of(endpoint))\n        .healthCheckInterval(Duration.minutes(30))\n        .healthCheckPath(\"healthCheckPath\")\n        .healthCheckPort(123)\n        .healthCheckProtocol(HealthCheckProtocol.TCP)\n        .healthCheckThreshold(123)\n        .portOverrides(List.of(PortOverride.builder()\n                .endpointPort(123)\n                .listenerPort(123)\n                .build()))\n        .region(\"region\")\n        .trafficDialPercentage(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar endpoint iEndpoint\nvar listener listener\n\nendpointGroupProps := &endpointGroupProps{\n\tlistener: listener,\n\n\t// the properties below are optional\n\tendpointGroupName: jsii.String(\"endpointGroupName\"),\n\tendpoints: []*iEndpoint{\n\t\tendpoint,\n\t},\n\thealthCheckInterval: cdk.duration.minutes(jsii.Number(30)),\n\thealthCheckPath: jsii.String(\"healthCheckPath\"),\n\thealthCheckPort: jsii.Number(123),\n\thealthCheckProtocol: globalaccelerator.healthCheckProtocol_TCP,\n\thealthCheckThreshold: jsii.Number(123),\n\tportOverrides: []portOverride{\n\t\t&portOverride{\n\t\t\tendpointPort: jsii.Number(123),\n\t\t\tlistenerPort: jsii.Number(123),\n\t\t},\n\t},\n\tregion: jsii.String(\"region\"),\n\ttrafficDialPercentage: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const endpoint: globalaccelerator.IEndpoint;\ndeclare const listener: globalaccelerator.Listener;\nconst endpointGroupProps: globalaccelerator.EndpointGroupProps = {\n  listener: listener,\n\n  // the properties below are optional\n  endpointGroupName: 'endpointGroupName',\n  endpoints: [endpoint],\n  healthCheckInterval: cdk.Duration.minutes(30),\n  healthCheckPath: 'healthCheckPath',\n  healthCheckPort: 123,\n  healthCheckProtocol: globalaccelerator.HealthCheckProtocol.TCP,\n  healthCheckThreshold: 123,\n  portOverrides: [{\n    endpointPort: 123,\n    listenerPort: 123,\n  }],\n  region: 'region',\n  trafficDialPercentage: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.EndpointGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.EndpointGroupProps",
        "@aws-cdk/aws-globalaccelerator.HealthCheckProtocol",
        "@aws-cdk/aws-globalaccelerator.HealthCheckProtocol#TCP",
        "@aws-cdk/aws-globalaccelerator.IListener",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const endpoint: globalaccelerator.IEndpoint;\ndeclare const listener: globalaccelerator.Listener;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst endpointGroupProps: globalaccelerator.EndpointGroupProps = {\n  listener: listener,\n\n  // the properties below are optional\n  endpointGroupName: 'endpointGroupName',\n  endpoints: [endpoint],\n  healthCheckInterval: cdk.Duration.minutes(30),\n  healthCheckPath: 'healthCheckPath',\n  healthCheckPort: 123,\n  healthCheckProtocol: globalaccelerator.HealthCheckProtocol.TCP,\n  healthCheckThreshold: 123,\n  portOverrides: [{\n    endpointPort: 123,\n    listenerPort: 123,\n  }],\n  region: 'region',\n  trafficDialPercentage: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 6,
        "10": 5,
        "75": 32,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "df8cf24d85cf33ad6902ac807201e1e99223b889f5aaf31621b504d0c4b8d1a7"
    },
    "1343bf2c9c3cdae6cab26227967888b300153e043ad8bfeb74a38039b9aef0fc": {
      "translations": {
        "python": {
          "source": "# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(self, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create an Accelerator\naccelerator := globalaccelerator.NewAccelerator(this, jsii.String(\"Accelerator\"))\n\n// Create a Listener\nlistener := accelerator.addListener(jsii.String(\"Listener\"), &listenerOptions{\n\tportRanges: []portRange{\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(80),\n\t\t},\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(443),\n\t\t},\n\t},\n})\n\n// Import the Load Balancers\nnlb1 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB1\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"),\n})\nnlb2 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB2\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"),\n})\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(jsii.String(\"Group1\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb1),\n\t},\n})\nlistener.addEndpointGroup(jsii.String(\"Group2\"), &endpointGroupOptions{\n\t// Imported load balancers automatically calculate their Region from the ARN.\n\t// If you are load balancing to other resources, you must also pass a `region`\n\t// parameter here.\n\tendpoints: []*iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb2),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.Listener"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 31,
        "104": 3,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "ed46f018ba66137ef5efaa769931abc9f0336a49bc0b28c2e26fad0efaa5973c"
    },
    "c83c4c5aa7b4484bbdd9992a5971dd39abfde85a9c118c16f50be0e81aeb44b4": {
      "translations": {
        "python": {
          "source": "# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(self, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(self, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(this, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create an Accelerator\nAccelerator accelerator = new Accelerator(this, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "// Create an Accelerator\naccelerator := globalaccelerator.NewAccelerator(this, jsii.String(\"Accelerator\"))\n\n// Create a Listener\nlistener := accelerator.addListener(jsii.String(\"Listener\"), &listenerOptions{\n\tportRanges: []portRange{\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(80),\n\t\t},\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(443),\n\t\t},\n\t},\n})\n\n// Import the Load Balancers\nnlb1 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB1\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"),\n})\nnlb2 := elbv2.networkLoadBalancer.fromNetworkLoadBalancerAttributes(this, jsii.String(\"NLB2\"), &networkLoadBalancerAttributes{\n\tloadBalancerArn: jsii.String(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"),\n})\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(jsii.String(\"Group1\"), &endpointGroupOptions{\n\tendpoints: []iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb1),\n\t},\n})\nlistener.addEndpointGroup(jsii.String(\"Group2\"), &endpointGroupOptions{\n\t// Imported load balancers automatically calculate their Region from the ARN.\n\t// If you are load balancing to other resources, you must also pass a `region`\n\t// parameter here.\n\tendpoints: []*iEndpoint{\n\t\tga_endpoints.NewNetworkLoadBalancerEndpoint(nlb2),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.ListenerOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nimport * as ga_endpoints from '@aws-cdk/aws-globalaccelerator-endpoints';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(this, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(this, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 31,
        "104": 3,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "ed46f018ba66137ef5efaa769931abc9f0336a49bc0b28c2e26fad0efaa5973c"
    },
    "0884fd3866fa50c1a9d2a2a2dfda78b6c232a74ad20113291b46d6365b465b75": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\n# accelerator: globalaccelerator.Accelerator\n\nlistener_props = globalaccelerator.ListenerProps(\n    accelerator=accelerator,\n    port_ranges=[globalaccelerator.PortRange(\n        from_port=123,\n\n        # the properties below are optional\n        to_port=123\n    )],\n\n    # the properties below are optional\n    client_affinity=globalaccelerator.ClientAffinity.NONE,\n    listener_name=\"listenerName\",\n    protocol=globalaccelerator.ConnectionProtocol.TCP\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nAccelerator accelerator;\n\nListenerProps listenerProps = new ListenerProps {\n    Accelerator = accelerator,\n    PortRanges = new [] { new PortRange {\n        FromPort = 123,\n\n        // the properties below are optional\n        ToPort = 123\n    } },\n\n    // the properties below are optional\n    ClientAffinity = ClientAffinity.NONE,\n    ListenerName = \"listenerName\",\n    Protocol = ConnectionProtocol.TCP\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nAccelerator accelerator;\n\nListenerProps listenerProps = ListenerProps.builder()\n        .accelerator(accelerator)\n        .portRanges(List.of(PortRange.builder()\n                .fromPort(123)\n\n                // the properties below are optional\n                .toPort(123)\n                .build()))\n\n        // the properties below are optional\n        .clientAffinity(ClientAffinity.NONE)\n        .listenerName(\"listenerName\")\n        .protocol(ConnectionProtocol.TCP)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nvar accelerator accelerator\n\nlistenerProps := &listenerProps{\n\taccelerator: accelerator,\n\tportRanges: []portRange{\n\t\t&portRange{\n\t\t\tfromPort: jsii.Number(123),\n\n\t\t\t// the properties below are optional\n\t\t\ttoPort: jsii.Number(123),\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tclientAffinity: globalaccelerator.clientAffinity_NONE,\n\tlistenerName: jsii.String(\"listenerName\"),\n\tprotocol: globalaccelerator.connectionProtocol_TCP,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n\ndeclare const accelerator: globalaccelerator.Accelerator;\nconst listenerProps: globalaccelerator.ListenerProps = {\n  accelerator: accelerator,\n  portRanges: [{\n    fromPort: 123,\n\n    // the properties below are optional\n    toPort: 123,\n  }],\n\n  // the properties below are optional\n  clientAffinity: globalaccelerator.ClientAffinity.NONE,\n  listenerName: 'listenerName',\n  protocol: globalaccelerator.ConnectionProtocol.TCP,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.ListenerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.ClientAffinity",
        "@aws-cdk/aws-globalaccelerator.ClientAffinity#NONE",
        "@aws-cdk/aws-globalaccelerator.ConnectionProtocol",
        "@aws-cdk/aws-globalaccelerator.ConnectionProtocol#TCP",
        "@aws-cdk/aws-globalaccelerator.IAccelerator",
        "@aws-cdk/aws-globalaccelerator.ListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n\ndeclare const accelerator: globalaccelerator.Accelerator;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst listenerProps: globalaccelerator.ListenerProps = {\n  accelerator: accelerator,\n  portRanges: [{\n    fromPort: 123,\n\n    // the properties below are optional\n    toPort: 123,\n  }],\n\n  // the properties below are optional\n  clientAffinity: globalaccelerator.ClientAffinity.NONE,\n  listenerName: 'listenerName',\n  protocol: globalaccelerator.ConnectionProtocol.TCP,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 21,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "eb0d35587f3a11e50f011d86aecee490ca93e20d2d3129ddf22d2061ce52df0e"
    },
    "4f0ee9e4ba5cb0d1e352578868c8f110bad927c31c7e402253815dcf2d74356a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\nport_override = globalaccelerator.PortOverride(\n    endpoint_port=123,\n    listener_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nPortOverride portOverride = new PortOverride {\n    EndpointPort = 123,\n    ListenerPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nPortOverride portOverride = PortOverride.builder()\n        .endpointPort(123)\n        .listenerPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nportOverride := &portOverride{\n\tendpointPort: jsii.Number(123),\n\tlistenerPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst portOverride: globalaccelerator.PortOverride = {\n  endpointPort: 123,\n  listenerPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.PortOverride"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.PortOverride"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portOverride: globalaccelerator.PortOverride = {\n  endpointPort: 123,\n  listenerPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fc6c2f0e0bcee3c6b0943684836c70f8843ecc1fad4f5939cf48366bc345248e"
    },
    "b5057f80460acd97c3e5433450ab1f34dbf274f128cf1902e7397c1800da163d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\nport_range = globalaccelerator.PortRange(\n    from_port=123,\n\n    # the properties below are optional\n    to_port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nPortRange portRange = new PortRange {\n    FromPort = 123,\n\n    // the properties below are optional\n    ToPort = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nPortRange portRange = PortRange.builder()\n        .fromPort(123)\n\n        // the properties below are optional\n        .toPort(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nportRange := &portRange{\n\tfromPort: jsii.Number(123),\n\n\t// the properties below are optional\n\ttoPort: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst portRange: globalaccelerator.PortRange = {\n  fromPort: 123,\n\n  // the properties below are optional\n  toPort: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.PortRange"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.PortRange"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst portRange: globalaccelerator.PortRange = {\n  fromPort: 123,\n\n  // the properties below are optional\n  toPort: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "800dc657642a0788d985454d4f9c6306357ccb862d2354d79504b01acbd19dee"
    },
    "24f648d193180883b235330c887a953879a45255f8584316bc0b69ba93a19570": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\nraw_endpoint = globalaccelerator.RawEndpoint(\n    endpoint_id=\"endpointId\",\n\n    # the properties below are optional\n    preserve_client_ip=False,\n    region=\"region\",\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nRawEndpoint rawEndpoint = new RawEndpoint(new RawEndpointProps {\n    EndpointId = \"endpointId\",\n\n    // the properties below are optional\n    PreserveClientIp = false,\n    Region = \"region\",\n    Weight = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nRawEndpoint rawEndpoint = RawEndpoint.Builder.create()\n        .endpointId(\"endpointId\")\n\n        // the properties below are optional\n        .preserveClientIp(false)\n        .region(\"region\")\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nrawEndpoint := globalaccelerator.NewRawEndpoint(&rawEndpointProps{\n\tendpointId: jsii.String(\"endpointId\"),\n\n\t// the properties below are optional\n\tpreserveClientIp: jsii.Boolean(false),\n\tregion: jsii.String(\"region\"),\n\tweight: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst rawEndpoint = new globalaccelerator.RawEndpoint({\n  endpointId: 'endpointId',\n\n  // the properties below are optional\n  preserveClientIp: false,\n  region: 'region',\n  weight: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.RawEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.RawEndpoint",
        "@aws-cdk/aws-globalaccelerator.RawEndpointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rawEndpoint = new globalaccelerator.RawEndpoint({\n  endpointId: 'endpointId',\n\n  // the properties below are optional\n  preserveClientIp: false,\n  region: 'region',\n  weight: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "91": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ce70e531de153570cccfbc8e93c51380646eb6cd7b28171a8b4120959eeac580"
    },
    "44d1aa0745bfbb0a5c73de61867b83abf1ae257336a3a5d9a8e7f465180c4fab": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_globalaccelerator as globalaccelerator\n\nraw_endpoint_props = globalaccelerator.RawEndpointProps(\n    endpoint_id=\"endpointId\",\n\n    # the properties below are optional\n    preserve_client_ip=False,\n    region=\"region\",\n    weight=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.GlobalAccelerator;\n\nRawEndpointProps rawEndpointProps = new RawEndpointProps {\n    EndpointId = \"endpointId\",\n\n    // the properties below are optional\n    PreserveClientIp = false,\n    Region = \"region\",\n    Weight = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.globalaccelerator.*;\n\nRawEndpointProps rawEndpointProps = RawEndpointProps.builder()\n        .endpointId(\"endpointId\")\n\n        // the properties below are optional\n        .preserveClientIp(false)\n        .region(\"region\")\n        .weight(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport globalaccelerator \"github.com/aws-samples/dummy/awscdkawsglobalaccelerator\"\n\nrawEndpointProps := &rawEndpointProps{\n\tendpointId: jsii.String(\"endpointId\"),\n\n\t// the properties below are optional\n\tpreserveClientIp: jsii.Boolean(false),\n\tregion: jsii.String(\"region\"),\n\tweight: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\nconst rawEndpointProps: globalaccelerator.RawEndpointProps = {\n  endpointId: 'endpointId',\n\n  // the properties below are optional\n  preserveClientIp: false,\n  region: 'region',\n  weight: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.RawEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-globalaccelerator.RawEndpointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as globalaccelerator from '@aws-cdk/aws-globalaccelerator';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst rawEndpointProps: globalaccelerator.RawEndpointProps = {\n  endpointId: 'endpointId',\n\n  // the properties below are optional\n  preserveClientIp: false,\n  region: 'region',\n  weight: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "291585e34171c16fa4a90c448eab05b30769fd92f518b5224152829ae255691f"
    }
  }
}